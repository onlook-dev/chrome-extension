<<<<<<< HEAD

(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35730/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
(function () {
	'use strict';

	/** @returns {void} */
	function noop$3() {}

	const identity$1 = (x) => x;

	/**
	 * @template T
	 * @template S
	 * @param {T} tar
	 * @param {S} src
	 * @returns {T & S}
	 */
	function assign(tar, src) {
		// @ts-ignore
		for (const k in src) tar[k] = src[k];
		return /** @type {T & S} */ (tar);
	}

	/** @returns {void} */
	function add_location(element, file, line, column, char) {
		element.__svelte_meta = {
			loc: { file, line, column, char }
		};
	}

	function run(fn) {
		return fn();
	}

	function blank_object() {
		return Object.create(null);
	}

	/**
	 * @param {Function[]} fns
	 * @returns {void}
	 */
	function run_all(fns) {
		fns.forEach(run);
	}

	/**
	 * @param {any} thing
	 * @returns {thing is Function}
	 */
	function is_function(thing) {
		return typeof thing === 'function';
	}

	/** @returns {boolean} */
	function safe_not_equal(a, b) {
		return a != a ? b == b : a !== b || (a && typeof a === 'object') || typeof a === 'function';
	}

	/** @returns {boolean} */
	function is_empty(obj) {
		return Object.keys(obj).length === 0;
	}

	/** @returns {void} */
	function validate_store(store, name) {
		if (store != null && typeof store.subscribe !== 'function') {
			throw new Error(`'${name}' is not a store with a 'subscribe' method`);
		}
	}

	function subscribe(store, ...callbacks) {
		if (store == null) {
			for (const callback of callbacks) {
				callback(undefined);
			}
			return noop$3;
		}
		const unsub = store.subscribe(...callbacks);
		return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
	}

	/**
	 * Get the current value from a store by subscribing and immediately unsubscribing.
	 *
	 * https://svelte.dev/docs/svelte-store#get
	 * @template T
	 * @param {import('../store/public.js').Readable<T>} store
	 * @returns {T}
	 */
	function get_store_value(store) {
		let value;
		subscribe(store, (_) => (value = _))();
		return value;
	}

	/** @returns {void} */
	function component_subscribe(component, store, callback) {
		component.$$.on_destroy.push(subscribe(store, callback));
	}

	function create_slot(definition, ctx, $$scope, fn) {
		if (definition) {
			const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
			return definition[0](slot_ctx);
		}
	}

	function get_slot_context(definition, ctx, $$scope, fn) {
		return definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;
	}

	function get_slot_changes(definition, $$scope, dirty, fn) {
		if (definition[2] && fn) {
			const lets = definition[2](fn(dirty));
			if ($$scope.dirty === undefined) {
				return lets;
			}
			if (typeof lets === 'object') {
				const merged = [];
				const len = Math.max($$scope.dirty.length, lets.length);
				for (let i = 0; i < len; i += 1) {
					merged[i] = $$scope.dirty[i] | lets[i];
				}
				return merged;
			}
			return $$scope.dirty | lets;
		}
		return $$scope.dirty;
	}

	/** @returns {void} */
	function update_slot_base(
		slot,
		slot_definition,
		ctx,
		$$scope,
		slot_changes,
		get_slot_context_fn
	) {
		if (slot_changes) {
			const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
			slot.p(slot_context, slot_changes);
		}
	}

	/** @returns {any[] | -1} */
	function get_all_dirty_from_scope($$scope) {
		if ($$scope.ctx.length > 32) {
			const dirty = [];
			const length = $$scope.ctx.length / 32;
			for (let i = 0; i < length; i++) {
				dirty[i] = -1;
			}
			return dirty;
		}
		return -1;
	}

	/** @returns {{}} */
	function exclude_internal_props(props) {
		const result = {};
		for (const k in props) if (k[0] !== '$') result[k] = props[k];
		return result;
	}

	/** @returns {{}} */
	function compute_rest_props(props, keys) {
		const rest = {};
		keys = new Set(keys);
		for (const k in props) if (!keys.has(k) && k[0] !== '$') rest[k] = props[k];
		return rest;
	}

	function action_destroyer(action_result) {
		return action_result && is_function(action_result.destroy) ? action_result.destroy : noop$3;
	}

	const is_client = typeof window !== 'undefined';

	/** @type {() => number} */
	let now = is_client ? () => window.performance.now() : () => Date.now();

	let raf = is_client ? (cb) => requestAnimationFrame(cb) : noop$3;

	const tasks = new Set();

	/**
	 * @param {number} now
	 * @returns {void}
	 */
	function run_tasks(now) {
		tasks.forEach((task) => {
			if (!task.c(now)) {
				tasks.delete(task);
				task.f();
			}
		});
		if (tasks.size !== 0) raf(run_tasks);
	}

	/**
	 * Creates a new task that runs on each raf frame
	 * until it returns a falsy value or is aborted
	 * @param {import('./private.js').TaskCallback} callback
	 * @returns {import('./private.js').Task}
	 */
	function loop(callback) {
		/** @type {import('./private.js').TaskEntry} */
		let task;
		if (tasks.size === 0) raf(run_tasks);
		return {
			promise: new Promise((fulfill) => {
				tasks.add((task = { c: callback, f: fulfill }));
			}),
			abort() {
				tasks.delete(task);
			}
		};
	}

	/** @type {typeof globalThis} */
	const globals =
		typeof window !== 'undefined'
			? window
			: typeof globalThis !== 'undefined'
			? globalThis
			: // @ts-ignore Node typings have this
			  global;

	/**
	 * @param {Node} target
	 * @param {Node} node
	 * @returns {void}
	 */
	function append(target, node) {
		target.appendChild(node);
	}

	/**
	 * @param {Node} node
	 * @returns {ShadowRoot | Document}
	 */
	function get_root_for_style(node) {
		if (!node) return document;
		const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
		if (root && /** @type {ShadowRoot} */ (root).host) {
			return /** @type {ShadowRoot} */ (root);
		}
		return node.ownerDocument;
	}

	/**
	 * @param {Node} node
	 * @returns {CSSStyleSheet}
	 */
	function append_empty_stylesheet(node) {
		const style_element = element('style');
		// For transitions to work without 'style-src: unsafe-inline' Content Security Policy,
		// these empty tags need to be allowed with a hash as a workaround until we move to the Web Animations API.
		// Using the hash for the empty string (for an empty tag) works in all browsers except Safari.
		// So as a workaround for the workaround, when we append empty style tags we set their content to /* empty */.
		// The hash 'sha256-9OlNO0DNEeaVzHL4RZwCLsBHA8WBQ8toBp/4F5XV2nc=' will then work even in Safari.
		style_element.textContent = '/* empty */';
		append_stylesheet(get_root_for_style(node), style_element);
		return style_element.sheet;
	}

	/**
	 * @param {ShadowRoot | Document} node
	 * @param {HTMLStyleElement} style
	 * @returns {CSSStyleSheet}
	 */
	function append_stylesheet(node, style) {
		append(/** @type {Document} */ (node).head || node, style);
		return style.sheet;
	}

	/**
	 * @param {Node} target
	 * @param {Node} node
	 * @param {Node} [anchor]
	 * @returns {void}
	 */
	function insert(target, node, anchor) {
		target.insertBefore(node, anchor || null);
	}

	/**
	 * @param {Node} node
	 * @returns {void}
	 */
	function detach(node) {
		if (node.parentNode) {
			node.parentNode.removeChild(node);
		}
	}

	/**
	 * @returns {void} */
	function destroy_each(iterations, detaching) {
		for (let i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d(detaching);
		}
	}

	/**
	 * @template {keyof HTMLElementTagNameMap} K
	 * @param {K} name
	 * @returns {HTMLElementTagNameMap[K]}
	 */
	function element(name) {
		return document.createElement(name);
	}

	/**
	 * @template {keyof SVGElementTagNameMap} K
	 * @param {K} name
	 * @returns {SVGElement}
	 */
	function svg_element(name) {
		return document.createElementNS('http://www.w3.org/2000/svg', name);
	}

	/**
	 * @param {string} data
	 * @returns {Text}
	 */
	function text(data) {
		return document.createTextNode(data);
	}

	/**
	 * @returns {Text} */
	function space() {
		return text(' ');
	}

	/**
	 * @returns {Text} */
	function empty() {
		return text('');
	}

	/**
	 * @param {EventTarget} node
	 * @param {string} event
	 * @param {EventListenerOrEventListenerObject} handler
	 * @param {boolean | AddEventListenerOptions | EventListenerOptions} [options]
	 * @returns {() => void}
	 */
	function listen(node, event, handler, options) {
		node.addEventListener(event, handler, options);
		return () => node.removeEventListener(event, handler, options);
	}

	/**
	 * @returns {(event: any) => any} */
	function prevent_default(fn) {
		return function (event) {
			event.preventDefault();
			// @ts-ignore
			return fn.call(this, event);
		};
	}

	/**
	 * @returns {(event: any) => void} */
	function self(fn) {
		return function (event) {
			// @ts-ignore
			if (event.target === this) fn.call(this, event);
		};
	}

	/**
	 * @param {Element} node
	 * @param {string} attribute
	 * @param {string} [value]
	 * @returns {void}
	 */
	function attr$1(node, attribute, value) {
		if (value == null) node.removeAttribute(attribute);
		else if (node.getAttribute(attribute) !== value) node.setAttribute(attribute, value);
	}
	/**
	 * List of attributes that should always be set through the attr method,
	 * because updating them through the property setter doesn't work reliably.
	 * In the example of `width`/`height`, the problem is that the setter only
	 * accepts numeric values, but the attribute can also be set to a string like `50%`.
	 * If this list becomes too big, rethink this approach.
	 */
	const always_set_through_set_attribute = ['width', 'height'];

	/**
	 * @param {Element & ElementCSSInlineStyle} node
	 * @param {{ [x: string]: string }} attributes
	 * @returns {void}
	 */
	function set_attributes(node, attributes) {
		// @ts-ignore
		const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
		for (const key in attributes) {
			if (attributes[key] == null) {
				node.removeAttribute(key);
			} else if (key === 'style') {
				node.style.cssText = attributes[key];
			} else if (key === '__value') {
				/** @type {any} */ (node).value = node[key] = attributes[key];
			} else if (
				descriptors[key] &&
				descriptors[key].set &&
				always_set_through_set_attribute.indexOf(key) === -1
			) {
				node[key] = attributes[key];
			} else {
				attr$1(node, key, attributes[key]);
			}
		}
	}

	/**
	 * @param {Element & ElementCSSInlineStyle} node
	 * @param {{ [x: string]: string }} attributes
	 * @returns {void}
	 */
	function set_svg_attributes(node, attributes) {
		for (const key in attributes) {
			attr$1(node, key, attributes[key]);
		}
	}

	/**
	 * @param {Record<string, unknown>} data_map
	 * @returns {void}
	 */
	function set_custom_element_data_map(node, data_map) {
		Object.keys(data_map).forEach((key) => {
			set_custom_element_data(node, key, data_map[key]);
		});
	}

	/**
	 * @returns {void} */
	function set_custom_element_data(node, prop, value) {
		const lower = prop.toLowerCase(); // for backwards compatibility with existing behavior we do lowercase first
		if (lower in node) {
			node[lower] = typeof node[lower] === 'boolean' && value === '' ? true : value;
		} else if (prop in node) {
			node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;
		} else {
			attr$1(node, prop, value);
		}
	}

	/**
	 * @param {string} tag
	 */
	function set_dynamic_element_data(tag) {
		return /-/.test(tag) ? set_custom_element_data_map : set_attributes;
	}

	/**
	 * @param {Element} element
	 * @returns {ChildNode[]}
	 */
	function children(element) {
		return Array.from(element.childNodes);
	}

	/**
	 * @returns {void} */
	function set_input_value(input, value) {
		input.value = value == null ? '' : value;
	}

	/**
	 * @returns {void} */
	function select_option(select, value, mounting) {
		for (let i = 0; i < select.options.length; i += 1) {
			const option = select.options[i];
			if (option.__value === value) {
				option.selected = true;
				return;
			}
		}
		if (!mounting || value !== undefined) {
			select.selectedIndex = -1; // no option should be selected
		}
	}

	/**
	 * @template T
	 * @param {string} type
	 * @param {T} [detail]
	 * @param {{ bubbles?: boolean, cancelable?: boolean }} [options]
	 * @returns {CustomEvent<T>}
	 */
	function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
		return new CustomEvent(type, { detail, bubbles, cancelable });
	}

	/**
	 * @typedef {Node & {
	 * 	claim_order?: number;
	 * 	hydrate_init?: true;
	 * 	actual_end_child?: NodeEx;
	 * 	childNodes: NodeListOf<NodeEx>;
	 * }} NodeEx
	 */

	/** @typedef {ChildNode & NodeEx} ChildNodeEx */

	/** @typedef {NodeEx & { claim_order: number }} NodeEx2 */

	/**
	 * @typedef {ChildNodeEx[] & {
	 * 	claim_info?: {
	 * 		last_index: number;
	 * 		total_claimed: number;
	 * 	};
	 * }} ChildNodeArray
	 */

	// we need to store the information for multiple documents because a Svelte application could also contain iframes
	// https://github.com/sveltejs/svelte/issues/3624
	/** @type {Map<Document | ShadowRoot, import('./private.d.ts').StyleInformation>} */
	const managed_styles = new Map();

	let active$1 = 0;

	// https://github.com/darkskyapp/string-hash/blob/master/index.js
	/**
	 * @param {string} str
	 * @returns {number}
	 */
	function hash$1(str) {
		let hash = 5381;
		let i = str.length;
		while (i--) hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
		return hash >>> 0;
	}

	/**
	 * @param {Document | ShadowRoot} doc
	 * @param {Element & ElementCSSInlineStyle} node
	 * @returns {{ stylesheet: any; rules: {}; }}
	 */
	function create_style_information(doc, node) {
		const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
		managed_styles.set(doc, info);
		return info;
	}

	/**
	 * @param {Element & ElementCSSInlineStyle} node
	 * @param {number} a
	 * @param {number} b
	 * @param {number} duration
	 * @param {number} delay
	 * @param {(t: number) => number} ease
	 * @param {(t: number, u: number) => string} fn
	 * @param {number} uid
	 * @returns {string}
	 */
	function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
		const step = 16.666 / duration;
		let keyframes = '{\n';
		for (let p = 0; p <= 1; p += step) {
			const t = a + (b - a) * ease(p);
			keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
		}
		const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
		const name = `__svelte_${hash$1(rule)}_${uid}`;
		const doc = get_root_for_style(node);
		const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
		if (!rules[name]) {
			rules[name] = true;
			stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
		}
		const animation = node.style.animation || '';
		node.style.animation = `${
		animation ? `${animation}, ` : ''
	}${name} ${duration}ms linear ${delay}ms 1 both`;
		active$1 += 1;
		return name;
	}

	/**
	 * @param {Element & ElementCSSInlineStyle} node
	 * @param {string} [name]
	 * @returns {void}
	 */
	function delete_rule(node, name) {
		const previous = (node.style.animation || '').split(', ');
		const next = previous.filter(
			name
				? (anim) => anim.indexOf(name) < 0 // remove specific animation
				: (anim) => anim.indexOf('__svelte') === -1 // remove all Svelte animations
		);
		const deleted = previous.length - next.length;
		if (deleted) {
			node.style.animation = next.join(', ');
			active$1 -= deleted;
			if (!active$1) clear_rules();
		}
	}

	/** @returns {void} */
	function clear_rules() {
		raf(() => {
			if (active$1) return;
			managed_styles.forEach((info) => {
				const { ownerNode } = info.stylesheet;
				// there is no ownerNode if it runs on jsdom.
				if (ownerNode) detach(ownerNode);
			});
			managed_styles.clear();
		});
	}

	let current_component;

	/** @returns {void} */
	function set_current_component(component) {
		current_component = component;
	}

	function get_current_component() {
		if (!current_component) throw new Error('Function called outside component initialization');
		return current_component;
	}

	/**
	 * Schedules a callback to run immediately before the component is updated after any state change.
	 *
	 * The first time the callback runs will be before the initial `onMount`
	 *
	 * https://svelte.dev/docs/svelte#beforeupdate
	 * @param {() => any} fn
	 * @returns {void}
	 */
	function beforeUpdate(fn) {
		get_current_component().$$.before_update.push(fn);
	}

	/**
	 * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.
	 * It must be called during the component's initialisation (but doesn't need to live *inside* the component;
	 * it can be called from an external module).
	 *
	 * If a function is returned _synchronously_ from `onMount`, it will be called when the component is unmounted.
	 *
	 * `onMount` does not run inside a [server-side component](https://svelte.dev/docs#run-time-server-side-component-api).
	 *
	 * https://svelte.dev/docs/svelte#onmount
	 * @template T
	 * @param {() => import('./private.js').NotFunction<T> | Promise<import('./private.js').NotFunction<T>> | (() => any)} fn
	 * @returns {void}
	 */
	function onMount(fn) {
		get_current_component().$$.on_mount.push(fn);
	}

	/**
	 * Schedules a callback to run immediately after the component has been updated.
	 *
	 * The first time the callback runs will be after the initial `onMount`
	 *
	 * https://svelte.dev/docs/svelte#afterupdate
	 * @param {() => any} fn
	 * @returns {void}
	 */
	function afterUpdate(fn) {
		get_current_component().$$.after_update.push(fn);
	}

	/**
	 * Schedules a callback to run immediately before the component is unmounted.
	 *
	 * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the
	 * only one that runs inside a server-side component.
	 *
	 * https://svelte.dev/docs/svelte#ondestroy
	 * @param {() => any} fn
	 * @returns {void}
	 */
	function onDestroy(fn) {
		get_current_component().$$.on_destroy.push(fn);
	}

	/**
	 * Creates an event dispatcher that can be used to dispatch [component events](https://svelte.dev/docs#template-syntax-component-directives-on-eventname).
	 * Event dispatchers are functions that can take two arguments: `name` and `detail`.
	 *
	 * Component events created with `createEventDispatcher` create a
	 * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).
	 * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).
	 * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)
	 * property and can contain any type of data.
	 *
	 * The event dispatcher can be typed to narrow the allowed event names and the type of the `detail` argument:
	 * ```ts
	 * const dispatch = createEventDispatcher<{
	 *  loaded: never; // does not take a detail argument
	 *  change: string; // takes a detail argument of type string, which is required
	 *  optional: number | null; // takes an optional detail argument of type number
	 * }>();
	 * ```
	 *
	 * https://svelte.dev/docs/svelte#createeventdispatcher
	 * @template {Record<string, any>} [EventMap=any]
	 * @returns {import('./public.js').EventDispatcher<EventMap>}
	 */
	function createEventDispatcher() {
		const component = get_current_component();
		return (type, detail, { cancelable = false } = {}) => {
			const callbacks = component.$$.callbacks[type];
			if (callbacks) {
				// TODO are there situations where events could be dispatched
				// in a server (non-DOM) environment?
				const event = custom_event(/** @type {string} */ (type), detail, { cancelable });
				callbacks.slice().forEach((fn) => {
					fn.call(component, event);
				});
				return !event.defaultPrevented;
			}
			return true;
		};
	}

	/**
	 * Associates an arbitrary `context` object with the current component and the specified `key`
	 * and returns that object. The context is then available to children of the component
	 * (including slotted content) with `getContext`.
	 *
	 * Like lifecycle functions, this must be called during component initialisation.
	 *
	 * https://svelte.dev/docs/svelte#setcontext
	 * @template T
	 * @param {any} key
	 * @param {T} context
	 * @returns {T}
	 */
	function setContext(key, context) {
		get_current_component().$$.context.set(key, context);
		return context;
	}

	/**
	 * Retrieves the context that belongs to the closest parent component with the specified `key`.
	 * Must be called during component initialisation.
	 *
	 * https://svelte.dev/docs/svelte#getcontext
	 * @template T
	 * @param {any} key
	 * @returns {T}
	 */
	function getContext(key) {
		return get_current_component().$$.context.get(key);
	}

	// TODO figure out if we still want to support
	// shorthand events, or if we want to implement
	// a real bubbling mechanism
	/**
	 * @param component
	 * @param event
	 * @returns {void}
	 */
	function bubble(component, event) {
		const callbacks = component.$$.callbacks[event.type];
		if (callbacks) {
			// @ts-ignore
			callbacks.slice().forEach((fn) => fn.call(this, event));
		}
	}

	const dirty_components = [];
	const binding_callbacks = [];

	let render_callbacks = [];

	const flush_callbacks = [];

	const resolved_promise = /* @__PURE__ */ Promise.resolve();

	let update_scheduled = false;

	/** @returns {void} */
	function schedule_update() {
		if (!update_scheduled) {
			update_scheduled = true;
			resolved_promise.then(flush);
		}
	}

	/** @returns {Promise<void>} */
	function tick() {
		schedule_update();
		return resolved_promise;
	}

	/** @returns {void} */
	function add_render_callback(fn) {
		render_callbacks.push(fn);
	}

	/** @returns {void} */
	function add_flush_callback(fn) {
		flush_callbacks.push(fn);
	}

	// flush() calls callbacks in this order:
	// 1. All beforeUpdate callbacks, in order: parents before children
	// 2. All bind:this callbacks, in reverse order: children before parents.
	// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
	//    for afterUpdates called during the initial onMount, which are called in
	//    reverse order: children before parents.
	// Since callbacks might update component values, which could trigger another
	// call to flush(), the following steps guard against this:
	// 1. During beforeUpdate, any updated components will be added to the
	//    dirty_components array and will cause a reentrant call to flush(). Because
	//    the flush index is kept outside the function, the reentrant call will pick
	//    up where the earlier call left off and go through all dirty components. The
	//    current_component value is saved and restored so that the reentrant call will
	//    not interfere with the "parent" flush() call.
	// 2. bind:this callbacks cannot trigger new flush() calls.
	// 3. During afterUpdate, any updated components will NOT have their afterUpdate
	//    callback called a second time; the seen_callbacks set, outside the flush()
	//    function, guarantees this behavior.
	const seen_callbacks = new Set();

	let flushidx = 0; // Do *not* move this inside the flush() function

	/** @returns {void} */
	function flush() {
		// Do not reenter flush while dirty components are updated, as this can
		// result in an infinite loop. Instead, let the inner flush handle it.
		// Reentrancy is ok afterwards for bindings etc.
		if (flushidx !== 0) {
			return;
		}
		const saved_component = current_component;
		do {
			// first, call beforeUpdate functions
			// and update components
			try {
				while (flushidx < dirty_components.length) {
					const component = dirty_components[flushidx];
					flushidx++;
					set_current_component(component);
					update(component.$$);
				}
			} catch (e) {
				// reset dirty state to not end up in a deadlocked state and then rethrow
				dirty_components.length = 0;
				flushidx = 0;
				throw e;
			}
			set_current_component(null);
			dirty_components.length = 0;
			flushidx = 0;
			while (binding_callbacks.length) binding_callbacks.pop()();
			// then, once components are updated, call
			// afterUpdate functions. This may cause
			// subsequent updates...
			for (let i = 0; i < render_callbacks.length; i += 1) {
				const callback = render_callbacks[i];
				if (!seen_callbacks.has(callback)) {
					// ...so guard against infinite loops
					seen_callbacks.add(callback);
					callback();
				}
			}
			render_callbacks.length = 0;
		} while (dirty_components.length);
		while (flush_callbacks.length) {
			flush_callbacks.pop()();
		}
		update_scheduled = false;
		seen_callbacks.clear();
		set_current_component(saved_component);
	}

	/** @returns {void} */
	function update($$) {
		if ($$.fragment !== null) {
			$$.update();
			run_all($$.before_update);
			const dirty = $$.dirty;
			$$.dirty = [-1];
			$$.fragment && $$.fragment.p($$.ctx, dirty);
			$$.after_update.forEach(add_render_callback);
		}
	}

	/**
	 * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.
	 * @param {Function[]} fns
	 * @returns {void}
	 */
	function flush_render_callbacks(fns) {
		const filtered = [];
		const targets = [];
		render_callbacks.forEach((c) => (fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c)));
		targets.forEach((c) => c());
		render_callbacks = filtered;
	}

	/**
	 * @type {Promise<void> | null}
	 */
	let promise;

	/**
	 * @returns {Promise<void>}
	 */
	function wait() {
		if (!promise) {
			promise = Promise.resolve();
			promise.then(() => {
				promise = null;
			});
		}
		return promise;
	}

	/**
	 * @param {Element} node
	 * @param {INTRO | OUTRO | boolean} direction
	 * @param {'start' | 'end'} kind
	 * @returns {void}
	 */
	function dispatch$1(node, direction, kind) {
		node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
	}

	const outroing = new Set();

	/**
	 * @type {Outro}
	 */
	let outros;

	/**
	 * @returns {void} */
	function group_outros() {
		outros = {
			r: 0,
			c: [],
			p: outros // parent group
		};
	}

	/**
	 * @returns {void} */
	function check_outros() {
		if (!outros.r) {
			run_all(outros.c);
		}
		outros = outros.p;
	}

	/**
	 * @param {import('./private.js').Fragment} block
	 * @param {0 | 1} [local]
	 * @returns {void}
	 */
	function transition_in(block, local) {
		if (block && block.i) {
			outroing.delete(block);
			block.i(local);
		}
	}

	/**
	 * @param {import('./private.js').Fragment} block
	 * @param {0 | 1} local
	 * @param {0 | 1} [detach]
	 * @param {() => void} [callback]
	 * @returns {void}
	 */
	function transition_out(block, local, detach, callback) {
		if (block && block.o) {
			if (outroing.has(block)) return;
			outroing.add(block);
			outros.c.push(() => {
				outroing.delete(block);
				if (callback) {
					if (detach) block.d(1);
					callback();
				}
			});
			block.o(local);
		} else if (callback) {
			callback();
		}
	}

	/**
	 * @type {import('../transition/public.js').TransitionConfig}
	 */
	const null_transition = { duration: 0 };

	/**
	 * @param {Element & ElementCSSInlineStyle} node
	 * @param {TransitionFn} fn
	 * @param {any} params
	 * @returns {{ start(): void; invalidate(): void; end(): void; }}
	 */
	function create_in_transition(node, fn, params) {
		/**
		 * @type {TransitionOptions} */
		const options = { direction: 'in' };
		let config = fn(node, params, options);
		let running = false;
		let animation_name;
		let task;
		let uid = 0;

		/**
		 * @returns {void} */
		function cleanup() {
			if (animation_name) delete_rule(node, animation_name);
		}

		/**
		 * @returns {void} */
		function go() {
			const {
				delay = 0,
				duration = 300,
				easing = identity$1,
				tick = noop$3,
				css
			} = config || null_transition;
			if (css) animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
			tick(0, 1);
			const start_time = now() + delay;
			const end_time = start_time + duration;
			if (task) task.abort();
			running = true;
			add_render_callback(() => dispatch$1(node, true, 'start'));
			task = loop((now) => {
				if (running) {
					if (now >= end_time) {
						tick(1, 0);
						dispatch$1(node, true, 'end');
						cleanup();
						return (running = false);
					}
					if (now >= start_time) {
						const t = easing((now - start_time) / duration);
						tick(t, 1 - t);
					}
				}
				return running;
			});
		}
		let started = false;
		return {
			start() {
				if (started) return;
				started = true;
				delete_rule(node);
				if (is_function(config)) {
					config = config(options);
					wait().then(go);
				} else {
					go();
				}
			},
			invalidate() {
				started = false;
			},
			end() {
				if (running) {
					cleanup();
					running = false;
				}
			}
		};
	}

	/**
	 * @param {Element & ElementCSSInlineStyle} node
	 * @param {TransitionFn} fn
	 * @param {any} params
	 * @returns {{ end(reset: any): void; }}
	 */
	function create_out_transition(node, fn, params) {
		/** @type {TransitionOptions} */
		const options = { direction: 'out' };
		let config = fn(node, params, options);
		let running = true;
		let animation_name;
		const group = outros;
		group.r += 1;
		/** @type {boolean} */
		let original_inert_value;

		/**
		 * @returns {void} */
		function go() {
			const {
				delay = 0,
				duration = 300,
				easing = identity$1,
				tick = noop$3,
				css
			} = config || null_transition;

			if (css) animation_name = create_rule(node, 1, 0, duration, delay, easing, css);

			const start_time = now() + delay;
			const end_time = start_time + duration;
			add_render_callback(() => dispatch$1(node, false, 'start'));

			if ('inert' in node) {
				original_inert_value = /** @type {HTMLElement} */ (node).inert;
				node.inert = true;
			}

			loop((now) => {
				if (running) {
					if (now >= end_time) {
						tick(0, 1);
						dispatch$1(node, false, 'end');
						if (!--group.r) {
							// this will result in `end()` being called,
							// so we don't need to clean up here
							run_all(group.c);
						}
						return false;
					}
					if (now >= start_time) {
						const t = easing((now - start_time) / duration);
						tick(1 - t, t);
					}
				}
				return running;
			});
		}

		if (is_function(config)) {
			wait().then(() => {
				// @ts-ignore
				config = config(options);
				go();
			});
		} else {
			go();
		}

		return {
			end(reset) {
				if (reset && 'inert' in node) {
					node.inert = original_inert_value;
				}
				if (reset && config.tick) {
					config.tick(1, 0);
				}
				if (running) {
					if (animation_name) delete_rule(node, animation_name);
					running = false;
				}
			}
		};
	}

	/**
	 * @param {Element & ElementCSSInlineStyle} node
	 * @param {TransitionFn} fn
	 * @param {any} params
	 * @param {boolean} intro
	 * @returns {{ run(b: 0 | 1): void; end(): void; }}
	 */
	function create_bidirectional_transition(node, fn, params, intro) {
		/**
		 * @type {TransitionOptions} */
		const options = { direction: 'both' };
		let config = fn(node, params, options);
		let t = intro ? 0 : 1;

		/**
		 * @type {Program | null} */
		let running_program = null;

		/**
		 * @type {PendingProgram | null} */
		let pending_program = null;
		let animation_name = null;

		/** @type {boolean} */
		let original_inert_value;

		/**
		 * @returns {void} */
		function clear_animation() {
			if (animation_name) delete_rule(node, animation_name);
		}

		/**
		 * @param {PendingProgram} program
		 * @param {number} duration
		 * @returns {Program}
		 */
		function init(program, duration) {
			const d = /** @type {Program['d']} */ (program.b - t);
			duration *= Math.abs(d);
			return {
				a: t,
				b: program.b,
				d,
				duration,
				start: program.start,
				end: program.start + duration,
				group: program.group
			};
		}

		/**
		 * @param {INTRO | OUTRO} b
		 * @returns {void}
		 */
		function go(b) {
			const {
				delay = 0,
				duration = 300,
				easing = identity$1,
				tick = noop$3,
				css
			} = config || null_transition;

			/**
			 * @type {PendingProgram} */
			const program = {
				start: now() + delay,
				b
			};

			if (!b) {
				// @ts-ignore todo: improve typings
				program.group = outros;
				outros.r += 1;
			}

			if ('inert' in node) {
				if (b) {
					if (original_inert_value !== undefined) {
						// aborted/reversed outro — restore previous inert value
						node.inert = original_inert_value;
					}
				} else {
					original_inert_value = /** @type {HTMLElement} */ (node).inert;
					node.inert = true;
				}
			}

			if (running_program || pending_program) {
				pending_program = program;
			} else {
				// if this is an intro, and there's a delay, we need to do
				// an initial tick and/or apply CSS animation immediately
				if (css) {
					clear_animation();
					animation_name = create_rule(node, t, b, duration, delay, easing, css);
				}
				if (b) tick(0, 1);
				running_program = init(program, duration);
				add_render_callback(() => dispatch$1(node, b, 'start'));
				loop((now) => {
					if (pending_program && now > pending_program.start) {
						running_program = init(pending_program, duration);
						pending_program = null;
						dispatch$1(node, running_program.b, 'start');
						if (css) {
							clear_animation();
							animation_name = create_rule(
								node,
								t,
								running_program.b,
								running_program.duration,
								0,
								easing,
								config.css
							);
						}
					}
					if (running_program) {
						if (now >= running_program.end) {
							tick((t = running_program.b), 1 - t);
							dispatch$1(node, running_program.b, 'end');
							if (!pending_program) {
								// we're done
								if (running_program.b) {
									// intro — we can tidy up immediately
									clear_animation();
								} else {
									// outro — needs to be coordinated
									if (!--running_program.group.r) run_all(running_program.group.c);
								}
							}
							running_program = null;
						} else if (now >= running_program.start) {
							const p = now - running_program.start;
							t = running_program.a + running_program.d * easing(p / running_program.duration);
							tick(t, 1 - t);
						}
					}
					return !!(running_program || pending_program);
				});
			}
		}
		return {
			run(b) {
				if (is_function(config)) {
					wait().then(() => {
						const opts = { direction: b ? 'in' : 'out' };
						// @ts-ignore
						config = config(opts);
						go(b);
					});
				} else {
					go(b);
				}
			},
			end() {
				clear_animation();
				running_program = pending_program = null;
			}
		};
	}

	/** @typedef {1} INTRO */
	/** @typedef {0} OUTRO */
	/** @typedef {{ direction: 'in' | 'out' | 'both' }} TransitionOptions */
	/** @typedef {(node: Element, params: any, options: TransitionOptions) => import('../transition/public.js').TransitionConfig} TransitionFn */

	/**
	 * @typedef {Object} Outro
	 * @property {number} r
	 * @property {Function[]} c
	 * @property {Object} p
	 */

	/**
	 * @typedef {Object} PendingProgram
	 * @property {number} start
	 * @property {INTRO|OUTRO} b
	 * @property {Outro} [group]
	 */

	/**
	 * @typedef {Object} Program
	 * @property {number} a
	 * @property {INTRO|OUTRO} b
	 * @property {1|-1} d
	 * @property {number} duration
	 * @property {number} start
	 * @property {number} end
	 * @property {Outro} [group]
	 */

	// general each functions:

	function ensure_array_like(array_like_or_iterator) {
		return array_like_or_iterator?.length !== undefined
			? array_like_or_iterator
			: Array.from(array_like_or_iterator);
	}

	/** @returns {void} */
	function outro_and_destroy_block(block, lookup) {
		transition_out(block, 1, 1, () => {
			lookup.delete(block.key);
		});
	}

	/** @returns {any[]} */
	function update_keyed_each(
		old_blocks,
		dirty,
		get_key,
		dynamic,
		ctx,
		list,
		lookup,
		node,
		destroy,
		create_each_block,
		next,
		get_context
	) {
		let o = old_blocks.length;
		let n = list.length;
		let i = o;
		const old_indexes = {};
		while (i--) old_indexes[old_blocks[i].key] = i;
		const new_blocks = [];
		const new_lookup = new Map();
		const deltas = new Map();
		const updates = [];
		i = n;
		while (i--) {
			const child_ctx = get_context(ctx, list, i);
			const key = get_key(child_ctx);
			let block = lookup.get(key);
			if (!block) {
				block = create_each_block(key, child_ctx);
				block.c();
			} else if (dynamic) {
				// defer updates until all the DOM shuffling is done
				updates.push(() => block.p(child_ctx, dirty));
			}
			new_lookup.set(key, (new_blocks[i] = block));
			if (key in old_indexes) deltas.set(key, Math.abs(i - old_indexes[key]));
		}
		const will_move = new Set();
		const did_move = new Set();
		/** @returns {void} */
		function insert(block) {
			transition_in(block, 1);
			block.m(node, next);
			lookup.set(block.key, block);
			next = block.first;
			n--;
		}
		while (o && n) {
			const new_block = new_blocks[n - 1];
			const old_block = old_blocks[o - 1];
			const new_key = new_block.key;
			const old_key = old_block.key;
			if (new_block === old_block) {
				// do nothing
				next = new_block.first;
				o--;
				n--;
			} else if (!new_lookup.has(old_key)) {
				// remove old block
				destroy(old_block, lookup);
				o--;
			} else if (!lookup.has(new_key) || will_move.has(new_key)) {
				insert(new_block);
			} else if (did_move.has(old_key)) {
				o--;
			} else if (deltas.get(new_key) > deltas.get(old_key)) {
				did_move.add(new_key);
				insert(new_block);
			} else {
				will_move.add(old_key);
				o--;
			}
		}
		while (o--) {
			const old_block = old_blocks[o];
			if (!new_lookup.has(old_block.key)) destroy(old_block, lookup);
		}
		while (n) insert(new_blocks[n - 1]);
		run_all(updates);
		return new_blocks;
	}

	/** @returns {void} */
	function validate_each_keys(ctx, list, get_context, get_key) {
		const keys = new Map();
		for (let i = 0; i < list.length; i++) {
			const key = get_key(get_context(ctx, list, i));
			if (keys.has(key)) {
				let value = '';
				try {
					value = `with value '${String(key)}' `;
				} catch (e) {
					// can't stringify
				}
				throw new Error(
					`Cannot have duplicate keys in a keyed each: Keys at index ${keys.get(
					key
				)} and ${i} ${value}are duplicates`
				);
			}
			keys.set(key, i);
		}
	}

	/** @returns {{}} */
	function get_spread_update(levels, updates) {
		const update = {};
		const to_null_out = {};
		const accounted_for = { $$scope: 1 };
		let i = levels.length;
		while (i--) {
			const o = levels[i];
			const n = updates[i];
			if (n) {
				for (const key in o) {
					if (!(key in n)) to_null_out[key] = 1;
				}
				for (const key in n) {
					if (!accounted_for[key]) {
						update[key] = n[key];
						accounted_for[key] = 1;
					}
				}
				levels[i] = n;
			} else {
				for (const key in o) {
					accounted_for[key] = 1;
				}
			}
		}
		for (const key in to_null_out) {
			if (!(key in update)) update[key] = undefined;
		}
		return update;
	}

	function get_spread_object(spread_props) {
		return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
	}

	/** regex of all html void element names */
	const void_element_names =
		/^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;

	/**
	 * @param {string} name
	 * @returns {boolean}
	 */
	function is_void(name) {
		return void_element_names.test(name) || name.toLowerCase() === '!doctype';
	}

	/** @returns {void} */
	function bind(component, name, callback) {
		const index = component.$$.props[name];
		if (index !== undefined) {
			component.$$.bound[index] = callback;
			callback(component.$$.ctx[index]);
		}
	}

	/** @returns {void} */
	function create_component(block) {
		block && block.c();
	}

	/** @returns {void} */
	function mount_component(component, target, anchor) {
		const { fragment, after_update } = component.$$;
		fragment && fragment.m(target, anchor);
		// onMount happens before the initial afterUpdate
		add_render_callback(() => {
			const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
			// if the component was destroyed immediately
			// it will update the `$$.on_destroy` reference to `null`.
			// the destructured on_destroy may still reference to the old array
			if (component.$$.on_destroy) {
				component.$$.on_destroy.push(...new_on_destroy);
			} else {
				// Edge case - component was destroyed immediately,
				// most likely as a result of a binding initialising
				run_all(new_on_destroy);
			}
			component.$$.on_mount = [];
		});
		after_update.forEach(add_render_callback);
	}

	/** @returns {void} */
	function destroy_component(component, detaching) {
		const $$ = component.$$;
		if ($$.fragment !== null) {
			flush_render_callbacks($$.after_update);
			run_all($$.on_destroy);
			$$.fragment && $$.fragment.d(detaching);
			// TODO null out other refs, including component.$$ (but need to
			// preserve final state?)
			$$.on_destroy = $$.fragment = null;
			$$.ctx = [];
		}
	}

	/** @returns {void} */
	function make_dirty(component, i) {
		if (component.$$.dirty[0] === -1) {
			dirty_components.push(component);
			schedule_update();
			component.$$.dirty.fill(0);
		}
		component.$$.dirty[(i / 31) | 0] |= 1 << i % 31;
	}

	// TODO: Document the other params
	/**
	 * @param {SvelteComponent} component
	 * @param {import('./public.js').ComponentConstructorOptions} options
	 *
	 * @param {import('./utils.js')['not_equal']} not_equal Used to compare props and state values.
	 * @param {(target: Element | ShadowRoot) => void} [append_styles] Function that appends styles to the DOM when the component is first initialised.
	 * This will be the `add_css` function from the compiled component.
	 *
	 * @returns {void}
	 */
	function init(
		component,
		options,
		instance,
		create_fragment,
		not_equal,
		props,
		append_styles = null,
		dirty = [-1]
	) {
		const parent_component = current_component;
		set_current_component(component);
		/** @type {import('./private.js').T$$} */
		const $$ = (component.$$ = {
			fragment: null,
			ctx: [],
			// state
			props,
			update: noop$3,
			not_equal,
			bound: blank_object(),
			// lifecycle
			on_mount: [],
			on_destroy: [],
			on_disconnect: [],
			before_update: [],
			after_update: [],
			context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
			// everything else
			callbacks: blank_object(),
			dirty,
			skip_bound: false,
			root: options.target || parent_component.$$.root
		});
		append_styles && append_styles($$.root);
		let ready = false;
		$$.ctx = instance
			? instance(component, options.props || {}, (i, ret, ...rest) => {
					const value = rest.length ? rest[0] : ret;
					if ($$.ctx && not_equal($$.ctx[i], ($$.ctx[i] = value))) {
						if (!$$.skip_bound && $$.bound[i]) $$.bound[i](value);
						if (ready) make_dirty(component, i);
					}
					return ret;
			  })
			: [];
		$$.update();
		ready = true;
		run_all($$.before_update);
		// `false` as a special case of no DOM component
		$$.fragment = create_fragment ? create_fragment($$.ctx) : false;
		if (options.target) {
			if (options.hydrate) {
				// TODO: what is the correct type here?
				// @ts-expect-error
				const nodes = children(options.target);
				$$.fragment && $$.fragment.l(nodes);
				nodes.forEach(detach);
			} else {
				// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
				$$.fragment && $$.fragment.c();
			}
			if (options.intro) transition_in(component.$$.fragment);
			mount_component(component, options.target, options.anchor);
			flush();
		}
		set_current_component(parent_component);
	}

	/**
	 * Base class for Svelte components. Used when dev=false.
	 *
	 * @template {Record<string, any>} [Props=any]
	 * @template {Record<string, any>} [Events=any]
	 */
	class SvelteComponent {
		/**
		 * ### PRIVATE API
		 *
		 * Do not use, may change at any time
		 *
		 * @type {any}
		 */
		$$ = undefined;
		/**
		 * ### PRIVATE API
		 *
		 * Do not use, may change at any time
		 *
		 * @type {any}
		 */
		$$set = undefined;

		/** @returns {void} */
		$destroy() {
			destroy_component(this, 1);
			this.$destroy = noop$3;
		}

		/**
		 * @template {Extract<keyof Events, string>} K
		 * @param {K} type
		 * @param {((e: Events[K]) => void) | null | undefined} callback
		 * @returns {() => void}
		 */
		$on(type, callback) {
			if (!is_function(callback)) {
				return noop$3;
			}
			const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
			callbacks.push(callback);
			return () => {
				const index = callbacks.indexOf(callback);
				if (index !== -1) callbacks.splice(index, 1);
			};
		}

		/**
		 * @param {Partial<Props>} props
		 * @returns {void}
		 */
		$set(props) {
			if (this.$$set && !is_empty(props)) {
				this.$$.skip_bound = true;
				this.$$set(props);
				this.$$.skip_bound = false;
			}
		}
	}

	/**
	 * @typedef {Object} CustomElementPropDefinition
	 * @property {string} [attribute]
	 * @property {boolean} [reflect]
	 * @property {'String'|'Boolean'|'Number'|'Array'|'Object'} [type]
	 */

	// generated during release, do not modify

	/**
	 * The current version, as set in package.json.
	 *
	 * https://svelte.dev/docs/svelte-compiler#svelte-version
	 * @type {string}
	 */
	const VERSION = '4.2.10';
	const PUBLIC_VERSION = '4';

	/**
	 * @template T
	 * @param {string} type
	 * @param {T} [detail]
	 * @returns {void}
	 */
	function dispatch_dev(type, detail) {
		document.dispatchEvent(custom_event(type, { version: VERSION, ...detail }, { bubbles: true }));
	}

	/**
	 * @param {Node} target
	 * @param {Node} node
	 * @returns {void}
	 */
	function append_dev(target, node) {
		dispatch_dev('SvelteDOMInsert', { target, node });
		append(target, node);
	}

	/**
	 * @param {Node} target
	 * @param {Node} node
	 * @param {Node} [anchor]
	 * @returns {void}
	 */
	function insert_dev(target, node, anchor) {
		dispatch_dev('SvelteDOMInsert', { target, node, anchor });
		insert(target, node, anchor);
	}

	/**
	 * @param {Node} node
	 * @returns {void}
	 */
	function detach_dev(node) {
		dispatch_dev('SvelteDOMRemove', { node });
		detach(node);
	}

	/**
	 * @param {Node} node
	 * @param {string} event
	 * @param {EventListenerOrEventListenerObject} handler
	 * @param {boolean | AddEventListenerOptions | EventListenerOptions} [options]
	 * @param {boolean} [has_prevent_default]
	 * @param {boolean} [has_stop_propagation]
	 * @param {boolean} [has_stop_immediate_propagation]
	 * @returns {() => void}
	 */
	function listen_dev(
		node,
		event,
		handler,
		options,
		has_prevent_default,
		has_stop_propagation,
		has_stop_immediate_propagation
	) {
		const modifiers =
			options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
		if (has_prevent_default) modifiers.push('preventDefault');
		if (has_stop_propagation) modifiers.push('stopPropagation');
		if (has_stop_immediate_propagation) modifiers.push('stopImmediatePropagation');
		dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
		const dispose = listen(node, event, handler, options);
		return () => {
			dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
			dispose();
		};
	}

	/**
	 * @param {Element} node
	 * @param {string} attribute
	 * @param {string} [value]
	 * @returns {void}
	 */
	function attr_dev(node, attribute, value) {
		attr$1(node, attribute, value);
		if (value == null) dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
		else dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
	}

	/**
	 * @param {Element} node
	 * @param {string} property
	 * @param {any} [value]
	 * @returns {void}
	 */
	function prop_dev(node, property, value) {
		node[property] = value;
		dispatch_dev('SvelteDOMSetProperty', { node, property, value });
	}

	/**
	 * @param {Text} text
	 * @param {unknown} data
	 * @returns {void}
	 */
	function set_data_dev(text, data) {
		data = '' + data;
		if (text.data === data) return;
		dispatch_dev('SvelteDOMSetData', { node: text, data });
		text.data = /** @type {string} */ (data);
	}

	function ensure_array_like_dev(arg) {
		if (
			typeof arg !== 'string' &&
			!(arg && typeof arg === 'object' && 'length' in arg) &&
			!(typeof Symbol === 'function' && arg && Symbol.iterator in arg)
		) {
			throw new Error('{#each} only works with iterable values.');
		}
		return ensure_array_like(arg);
	}

	/**
	 * @returns {void} */
	function validate_slots(name, slot, keys) {
		for (const slot_key of Object.keys(slot)) {
			if (!~keys.indexOf(slot_key)) {
				console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
			}
		}
	}

	/**
	 * @param {unknown} tag
	 * @returns {void}
	 */
	function validate_dynamic_element(tag) {
		const is_string = typeof tag === 'string';
		if (tag && !is_string) {
			throw new Error('<svelte:element> expects "this" attribute to be a string.');
		}
	}

	/**
	 * @param {undefined | string} tag
	 * @returns {void}
	 */
	function validate_void_dynamic_element(tag) {
		if (tag && is_void(tag)) {
			console.warn(`<svelte:element this="${tag}"> is self-closing and cannot have content.`);
		}
	}

	function construct_svelte_component_dev(component, props) {
		const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';
		try {
			const instance = new component(props);
			if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {
				throw new Error(error_message);
			}
			return instance;
		} catch (err) {
			const { message } = err;
			if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {
				throw new Error(error_message);
			} else {
				throw err;
			}
		}
	}

	/**
	 * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
	 *
	 * Can be used to create strongly typed Svelte components.
	 *
	 * #### Example:
	 *
	 * You have component library on npm called `component-library`, from which
	 * you export a component called `MyComponent`. For Svelte+TypeScript users,
	 * you want to provide typings. Therefore you create a `index.d.ts`:
	 * ```ts
	 * import { SvelteComponent } from "svelte";
	 * export class MyComponent extends SvelteComponent<{foo: string}> {}
	 * ```
	 * Typing this makes it possible for IDEs like VS Code with the Svelte extension
	 * to provide intellisense and to use the component like this in a Svelte file
	 * with TypeScript:
	 * ```svelte
	 * <script lang="ts">
	 * 	import { MyComponent } from "component-library";
	 * </script>
	 * <MyComponent foo={'bar'} />
	 * ```
	 * @template {Record<string, any>} [Props=any]
	 * @template {Record<string, any>} [Events=any]
	 * @template {Record<string, any>} [Slots=any]
	 * @extends {SvelteComponent<Props, Events>}
	 */
	class SvelteComponentDev extends SvelteComponent {
		/**
		 * For type checking capabilities only.
		 * Does not exist at runtime.
		 * ### DO NOT USE!
		 *
		 * @type {Props}
		 */
		$$prop_def;
		/**
		 * For type checking capabilities only.
		 * Does not exist at runtime.
		 * ### DO NOT USE!
		 *
		 * @type {Events}
		 */
		$$events_def;
		/**
		 * For type checking capabilities only.
		 * Does not exist at runtime.
		 * ### DO NOT USE!
		 *
		 * @type {Slots}
		 */
		$$slot_def;

		/** @param {import('./public.js').ComponentConstructorOptions<Props>} options */
		constructor(options) {
			if (!options || (!options.target && !options.$$inline)) {
				throw new Error("'target' is a required option");
			}
			super();
		}

		/** @returns {void} */
		$destroy() {
			super.$destroy();
			this.$destroy = () => {
				console.warn('Component was already destroyed'); // eslint-disable-line no-console
			};
		}

		/** @returns {void} */
		$capture_state() {}

		/** @returns {void} */
		$inject_state() {}
	}

	if (typeof window !== 'undefined')
		// @ts-ignore
		(window.__svelte || (window.__svelte = { v: new Set() })).v.add(PUBLIC_VERSION);

	function styleInject(css, ref) {
	  if ( ref === void 0 ) ref = {};
	  var insertAt = ref.insertAt;

	  if (!css || typeof document === 'undefined') { return; }

	  var head = document.head || document.getElementsByTagName('head')[0];
	  var style = document.createElement('style');
	  style.type = 'text/css';

	  if (insertAt === 'top') {
	    if (head.firstChild) {
	      head.insertBefore(style, head.firstChild);
	    } else {
	      head.appendChild(style);
	    }
	  } else {
	    head.appendChild(style);
	  }

	  if (style.styleSheet) {
	    style.styleSheet.cssText = css;
	  } else {
	    style.appendChild(document.createTextNode(css));
	  }
	}

	var css_248z = "onlook-toolbar {\n  --red: 344 100% 53%;\n\n  --background: 20 14.3% 4.1%;\n  --foreground: 60 9.1% 97.8%;\n\n  --muted: 12 6.5% 15.1%;\n  --muted-foreground: 24 5.4% 63.9%;\n\n  --popover: 20 14.3% 4.1%;\n  --popover-foreground: 60 9.1% 97.8%;\n\n  --card: 20 14.3% 4.1%;\n  --card-foreground: 60 9.1% 97.8%;\n\n  --border: 12 6.5% 15.1%;\n  --input: 12 6.5% 15.1%;\n\n  --primary: 60 9.1% 97.8%;\n  --primary-foreground: 24 9.8% 10%;\n\n  --secondary: 12 6.5% 15.1%;\n  --secondary-foreground: 60 9.1% 97.8%;\n\n  --accent: 12 6.5% 15.1%;\n  --accent-foreground: 60 9.1% 97.8%;\n\n  --destructive: 0 62.8% 30.6%;\n  --destructive-foreground: 60 9.1% 97.8%;\n\n  --ring: 24 5.7% 82.9%;\n\n  --radius: 0.5rem;\n\n  --tw-border-opacity: 1;\n\n  border-color: hsl(var(--border) / var(--tw-border-opacity));\n\n  --tw-bg-opacity: 1;\n\n  background-color: hsl(var(--background) / var(--tw-bg-opacity));\n\n  --tw-text-opacity: 1;\n\n  color: hsl(var(--foreground) / var(--tw-text-opacity));\n  /* Apply inter font */\n  font-family: \"Inter\", \"InterVariable\", sans-serif;\n}\n";
	styleInject(css_248z);

	function r$1(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r$1(e[t]))&&(n&&(n+=" "),n+=f);}else for(f in e)e[f]&&(n&&(n+=" "),n+=f);return n}function clsx(){for(var e,t,f=0,n="",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r$1(e))&&(n&&(n+=" "),n+=t);return n}

	const CLASS_PART_SEPARATOR$1 = '-';
	function createClassUtils$1(config) {
	  const classMap = createClassMap$1(config);
	  const {
	    conflictingClassGroups,
	    conflictingClassGroupModifiers
	  } = config;
	  function getClassGroupId(className) {
	    const classParts = className.split(CLASS_PART_SEPARATOR$1);
	    // Classes like `-inset-1` produce an empty string as first classPart. We assume that classes for negative values are used correctly and remove it from classParts.
	    if (classParts[0] === '' && classParts.length !== 1) {
	      classParts.shift();
	    }
	    return getGroupRecursive$1(classParts, classMap) || getGroupIdForArbitraryProperty$1(className);
	  }
	  function getConflictingClassGroupIds(classGroupId, hasPostfixModifier) {
	    const conflicts = conflictingClassGroups[classGroupId] || [];
	    if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
	      return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];
	    }
	    return conflicts;
	  }
	  return {
	    getClassGroupId,
	    getConflictingClassGroupIds
	  };
	}
	function getGroupRecursive$1(classParts, classPartObject) {
	  if (classParts.length === 0) {
	    return classPartObject.classGroupId;
	  }
	  const currentClassPart = classParts[0];
	  const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
	  const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive$1(classParts.slice(1), nextClassPartObject) : undefined;
	  if (classGroupFromNextClassPart) {
	    return classGroupFromNextClassPart;
	  }
	  if (classPartObject.validators.length === 0) {
	    return undefined;
	  }
	  const classRest = classParts.join(CLASS_PART_SEPARATOR$1);
	  return classPartObject.validators.find(({
	    validator
	  }) => validator(classRest))?.classGroupId;
	}
	const arbitraryPropertyRegex$1 = /^\[(.+)\]$/;
	function getGroupIdForArbitraryProperty$1(className) {
	  if (arbitraryPropertyRegex$1.test(className)) {
	    const arbitraryPropertyClassName = arbitraryPropertyRegex$1.exec(className)[1];
	    const property = arbitraryPropertyClassName?.substring(0, arbitraryPropertyClassName.indexOf(':'));
	    if (property) {
	      // I use two dots here because one dot is used as prefix for class groups in plugins
	      return 'arbitrary..' + property;
	    }
	  }
	}
	/**
	 * Exported for testing only
	 */
	function createClassMap$1(config) {
	  const {
	    theme,
	    prefix
	  } = config;
	  const classMap = {
	    nextPart: new Map(),
	    validators: []
	  };
	  const prefixedClassGroupEntries = getPrefixedClassGroupEntries$1(Object.entries(config.classGroups), prefix);
	  prefixedClassGroupEntries.forEach(([classGroupId, classGroup]) => {
	    processClassesRecursively$1(classGroup, classMap, classGroupId, theme);
	  });
	  return classMap;
	}
	function processClassesRecursively$1(classGroup, classPartObject, classGroupId, theme) {
	  classGroup.forEach(classDefinition => {
	    if (typeof classDefinition === 'string') {
	      const classPartObjectToEdit = classDefinition === '' ? classPartObject : getPart$1(classPartObject, classDefinition);
	      classPartObjectToEdit.classGroupId = classGroupId;
	      return;
	    }
	    if (typeof classDefinition === 'function') {
	      if (isThemeGetter$1(classDefinition)) {
	        processClassesRecursively$1(classDefinition(theme), classPartObject, classGroupId, theme);
	        return;
	      }
	      classPartObject.validators.push({
	        validator: classDefinition,
	        classGroupId
	      });
	      return;
	    }
	    Object.entries(classDefinition).forEach(([key, classGroup]) => {
	      processClassesRecursively$1(classGroup, getPart$1(classPartObject, key), classGroupId, theme);
	    });
	  });
	}
	function getPart$1(classPartObject, path) {
	  let currentClassPartObject = classPartObject;
	  path.split(CLASS_PART_SEPARATOR$1).forEach(pathPart => {
	    if (!currentClassPartObject.nextPart.has(pathPart)) {
	      currentClassPartObject.nextPart.set(pathPart, {
	        nextPart: new Map(),
	        validators: []
	      });
	    }
	    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
	  });
	  return currentClassPartObject;
	}
	function isThemeGetter$1(func) {
	  return func.isThemeGetter;
	}
	function getPrefixedClassGroupEntries$1(classGroupEntries, prefix) {
	  if (!prefix) {
	    return classGroupEntries;
	  }
	  return classGroupEntries.map(([classGroupId, classGroup]) => {
	    const prefixedClassGroup = classGroup.map(classDefinition => {
	      if (typeof classDefinition === 'string') {
	        return prefix + classDefinition;
	      }
	      if (typeof classDefinition === 'object') {
	        return Object.fromEntries(Object.entries(classDefinition).map(([key, value]) => [prefix + key, value]));
	      }
	      return classDefinition;
	    });
	    return [classGroupId, prefixedClassGroup];
	  });
	}

	// LRU cache inspired from hashlru (https://github.com/dominictarr/hashlru/blob/v1.0.4/index.js) but object replaced with Map to improve performance
	function createLruCache$1(maxCacheSize) {
	  if (maxCacheSize < 1) {
	    return {
	      get: () => undefined,
	      set: () => {}
	    };
	  }
	  let cacheSize = 0;
	  let cache = new Map();
	  let previousCache = new Map();
	  function update(key, value) {
	    cache.set(key, value);
	    cacheSize++;
	    if (cacheSize > maxCacheSize) {
	      cacheSize = 0;
	      previousCache = cache;
	      cache = new Map();
	    }
	  }
	  return {
	    get(key) {
	      let value = cache.get(key);
	      if (value !== undefined) {
	        return value;
	      }
	      if ((value = previousCache.get(key)) !== undefined) {
	        update(key, value);
	        return value;
	      }
	    },
	    set(key, value) {
	      if (cache.has(key)) {
	        cache.set(key, value);
	      } else {
	        update(key, value);
	      }
	    }
	  };
	}
	const IMPORTANT_MODIFIER$1 = '!';
	function createSplitModifiers$1(config) {
	  const separator = config.separator;
	  const isSeparatorSingleCharacter = separator.length === 1;
	  const firstSeparatorCharacter = separator[0];
	  const separatorLength = separator.length;
	  // splitModifiers inspired by https://github.com/tailwindlabs/tailwindcss/blob/v3.2.2/src/util/splitAtTopLevelOnly.js
	  return function splitModifiers(className) {
	    const modifiers = [];
	    let bracketDepth = 0;
	    let modifierStart = 0;
	    let postfixModifierPosition;
	    for (let index = 0; index < className.length; index++) {
	      let currentCharacter = className[index];
	      if (bracketDepth === 0) {
	        if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index, index + separatorLength) === separator)) {
	          modifiers.push(className.slice(modifierStart, index));
	          modifierStart = index + separatorLength;
	          continue;
	        }
	        if (currentCharacter === '/') {
	          postfixModifierPosition = index;
	          continue;
	        }
	      }
	      if (currentCharacter === '[') {
	        bracketDepth++;
	      } else if (currentCharacter === ']') {
	        bracketDepth--;
	      }
	    }
	    const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);
	    const hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER$1);
	    const baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;
	    const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : undefined;
	    return {
	      modifiers,
	      hasImportantModifier,
	      baseClassName,
	      maybePostfixModifierPosition
	    };
	  };
	}
	/**
	 * Sorts modifiers according to following schema:
	 * - Predefined modifiers are sorted alphabetically
	 * - When an arbitrary variant appears, it must be preserved which modifiers are before and after it
	 */
	function sortModifiers$1(modifiers) {
	  if (modifiers.length <= 1) {
	    return modifiers;
	  }
	  const sortedModifiers = [];
	  let unsortedModifiers = [];
	  modifiers.forEach(modifier => {
	    const isArbitraryVariant = modifier[0] === '[';
	    if (isArbitraryVariant) {
	      sortedModifiers.push(...unsortedModifiers.sort(), modifier);
	      unsortedModifiers = [];
	    } else {
	      unsortedModifiers.push(modifier);
	    }
	  });
	  sortedModifiers.push(...unsortedModifiers.sort());
	  return sortedModifiers;
	}
	function createConfigUtils$1(config) {
	  return {
	    cache: createLruCache$1(config.cacheSize),
	    splitModifiers: createSplitModifiers$1(config),
	    ...createClassUtils$1(config)
	  };
	}
	const SPLIT_CLASSES_REGEX$1 = /\s+/;
	function mergeClassList$1(classList, configUtils) {
	  const {
	    splitModifiers,
	    getClassGroupId,
	    getConflictingClassGroupIds
	  } = configUtils;
	  /**
	   * Set of classGroupIds in following format:
	   * `{importantModifier}{variantModifiers}{classGroupId}`
	   * @example 'float'
	   * @example 'hover:focus:bg-color'
	   * @example 'md:!pr'
	   */
	  const classGroupsInConflict = new Set();
	  return classList.trim().split(SPLIT_CLASSES_REGEX$1).map(originalClassName => {
	    const {
	      modifiers,
	      hasImportantModifier,
	      baseClassName,
	      maybePostfixModifierPosition
	    } = splitModifiers(originalClassName);
	    let classGroupId = getClassGroupId(maybePostfixModifierPosition ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
	    let hasPostfixModifier = Boolean(maybePostfixModifierPosition);
	    if (!classGroupId) {
	      if (!maybePostfixModifierPosition) {
	        return {
	          isTailwindClass: false,
	          originalClassName
	        };
	      }
	      classGroupId = getClassGroupId(baseClassName);
	      if (!classGroupId) {
	        return {
	          isTailwindClass: false,
	          originalClassName
	        };
	      }
	      hasPostfixModifier = false;
	    }
	    const variantModifier = sortModifiers$1(modifiers).join(':');
	    const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER$1 : variantModifier;
	    return {
	      isTailwindClass: true,
	      modifierId,
	      classGroupId,
	      originalClassName,
	      hasPostfixModifier
	    };
	  }).reverse()
	  // Last class in conflict wins, so we need to filter conflicting classes in reverse order.
	  .filter(parsed => {
	    if (!parsed.isTailwindClass) {
	      return true;
	    }
	    const {
	      modifierId,
	      classGroupId,
	      hasPostfixModifier
	    } = parsed;
	    const classId = modifierId + classGroupId;
	    if (classGroupsInConflict.has(classId)) {
	      return false;
	    }
	    classGroupsInConflict.add(classId);
	    getConflictingClassGroupIds(classGroupId, hasPostfixModifier).forEach(group => classGroupsInConflict.add(modifierId + group));
	    return true;
	  }).reverse().map(parsed => parsed.originalClassName).join(' ');
	}

	/**
	 * The code in this file is copied from https://github.com/lukeed/clsx and modified to suit the needs of tailwind-merge better.
	 *
	 * Specifically:
	 * - Runtime code from https://github.com/lukeed/clsx/blob/v1.2.1/src/index.js
	 * - TypeScript types from https://github.com/lukeed/clsx/blob/v1.2.1/clsx.d.ts
	 *
	 * Original code has MIT license: Copyright (c) Luke Edwards <luke.edwards05@gmail.com> (lukeed.com)
	 */
	function twJoin$1() {
	  let index = 0;
	  let argument;
	  let resolvedValue;
	  let string = '';
	  while (index < arguments.length) {
	    if (argument = arguments[index++]) {
	      if (resolvedValue = toValue$1(argument)) {
	        string && (string += ' ');
	        string += resolvedValue;
	      }
	    }
	  }
	  return string;
	}
	function toValue$1(mix) {
	  if (typeof mix === 'string') {
	    return mix;
	  }
	  let resolvedValue;
	  let string = '';
	  for (let k = 0; k < mix.length; k++) {
	    if (mix[k]) {
	      if (resolvedValue = toValue$1(mix[k])) {
	        string && (string += ' ');
	        string += resolvedValue;
	      }
	    }
	  }
	  return string;
	}
	function createTailwindMerge$1(createConfigFirst, ...createConfigRest) {
	  let configUtils;
	  let cacheGet;
	  let cacheSet;
	  let functionToCall = initTailwindMerge;
	  function initTailwindMerge(classList) {
	    const config = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());
	    configUtils = createConfigUtils$1(config);
	    cacheGet = configUtils.cache.get;
	    cacheSet = configUtils.cache.set;
	    functionToCall = tailwindMerge;
	    return tailwindMerge(classList);
	  }
	  function tailwindMerge(classList) {
	    const cachedResult = cacheGet(classList);
	    if (cachedResult) {
	      return cachedResult;
	    }
	    const result = mergeClassList$1(classList, configUtils);
	    cacheSet(classList, result);
	    return result;
	  }
	  return function callTailwindMerge() {
	    return functionToCall(twJoin$1.apply(null, arguments));
	  };
	}
	function fromTheme$2(key) {
	  const themeGetter = theme => theme[key] || [];
	  themeGetter.isThemeGetter = true;
	  return themeGetter;
	}
	const arbitraryValueRegex$1 = /^\[(?:([a-z-]+):)?(.+)\]$/i;
	const fractionRegex$1 = /^\d+\/\d+$/;
	const stringLengths$1 = /*#__PURE__*/new Set(['px', 'full', 'screen']);
	const tshirtUnitRegex$1 = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
	const lengthUnitRegex$1 = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
	const colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\(.+\)$/;
	// Shadow always begins with x and y offset separated by underscore
	const shadowRegex$1 = /^-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
	const imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/;
	function isLength$1(value) {
	  return isNumber$1(value) || stringLengths$1.has(value) || fractionRegex$1.test(value);
	}
	function isArbitraryLength$1(value) {
	  return getIsArbitraryValue$1(value, 'length', isLengthOnly$1);
	}
	function isNumber$1(value) {
	  return Boolean(value) && !Number.isNaN(Number(value));
	}
	function isArbitraryNumber$1(value) {
	  return getIsArbitraryValue$1(value, 'number', isNumber$1);
	}
	function isInteger$1(value) {
	  return Boolean(value) && Number.isInteger(Number(value));
	}
	function isPercent$1(value) {
	  return value.endsWith('%') && isNumber$1(value.slice(0, -1));
	}
	function isArbitraryValue$1(value) {
	  return arbitraryValueRegex$1.test(value);
	}
	function isTshirtSize$1(value) {
	  return tshirtUnitRegex$1.test(value);
	}
	const sizeLabels = /*#__PURE__*/new Set(['length', 'size', 'percentage']);
	function isArbitrarySize$1(value) {
	  return getIsArbitraryValue$1(value, sizeLabels, isNever$1);
	}
	function isArbitraryPosition$1(value) {
	  return getIsArbitraryValue$1(value, 'position', isNever$1);
	}
	const imageLabels = /*#__PURE__*/new Set(['image', 'url']);
	function isArbitraryImage(value) {
	  return getIsArbitraryValue$1(value, imageLabels, isImage);
	}
	function isArbitraryShadow$1(value) {
	  return getIsArbitraryValue$1(value, '', isShadow$1);
	}
	function isAny$1() {
	  return true;
	}
	function getIsArbitraryValue$1(value, label, testValue) {
	  const result = arbitraryValueRegex$1.exec(value);
	  if (result) {
	    if (result[1]) {
	      return typeof label === 'string' ? result[1] === label : label.has(result[1]);
	    }
	    return testValue(result[2]);
	  }
	  return false;
	}
	function isLengthOnly$1(value) {
	  // `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.
	  // For example, `hsl(0 0% 0%)` would be classified as a length without this check.
	  // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.
	  return lengthUnitRegex$1.test(value) && !colorFunctionRegex.test(value);
	}
	function isNever$1() {
	  return false;
	}
	function isShadow$1(value) {
	  return shadowRegex$1.test(value);
	}
	function isImage(value) {
	  return imageRegex.test(value);
	}
	function getDefaultConfig$1() {
	  const colors = fromTheme$2('colors');
	  const spacing = fromTheme$2('spacing');
	  const blur = fromTheme$2('blur');
	  const brightness = fromTheme$2('brightness');
	  const borderColor = fromTheme$2('borderColor');
	  const borderRadius = fromTheme$2('borderRadius');
	  const borderSpacing = fromTheme$2('borderSpacing');
	  const borderWidth = fromTheme$2('borderWidth');
	  const contrast = fromTheme$2('contrast');
	  const grayscale = fromTheme$2('grayscale');
	  const hueRotate = fromTheme$2('hueRotate');
	  const invert = fromTheme$2('invert');
	  const gap = fromTheme$2('gap');
	  const gradientColorStops = fromTheme$2('gradientColorStops');
	  const gradientColorStopPositions = fromTheme$2('gradientColorStopPositions');
	  const inset = fromTheme$2('inset');
	  const margin = fromTheme$2('margin');
	  const opacity = fromTheme$2('opacity');
	  const padding = fromTheme$2('padding');
	  const saturate = fromTheme$2('saturate');
	  const scale = fromTheme$2('scale');
	  const sepia = fromTheme$2('sepia');
	  const skew = fromTheme$2('skew');
	  const space = fromTheme$2('space');
	  const translate = fromTheme$2('translate');
	  const getOverscroll = () => ['auto', 'contain', 'none'];
	  const getOverflow = () => ['auto', 'hidden', 'clip', 'visible', 'scroll'];
	  const getSpacingWithAutoAndArbitrary = () => ['auto', isArbitraryValue$1, spacing];
	  const getSpacingWithArbitrary = () => [isArbitraryValue$1, spacing];
	  const getLengthWithEmptyAndArbitrary = () => ['', isLength$1, isArbitraryLength$1];
	  const getNumberWithAutoAndArbitrary = () => ['auto', isNumber$1, isArbitraryValue$1];
	  const getPositions = () => ['bottom', 'center', 'left', 'left-bottom', 'left-top', 'right', 'right-bottom', 'right-top', 'top'];
	  const getLineStyles = () => ['solid', 'dashed', 'dotted', 'double', 'none'];
	  const getBlendModes = () => ['normal', 'multiply', 'screen', 'overlay', 'darken', 'lighten', 'color-dodge', 'color-burn', 'hard-light', 'soft-light', 'difference', 'exclusion', 'hue', 'saturation', 'color', 'luminosity', 'plus-lighter'];
	  const getAlign = () => ['start', 'end', 'center', 'between', 'around', 'evenly', 'stretch'];
	  const getZeroAndEmpty = () => ['', '0', isArbitraryValue$1];
	  const getBreaks = () => ['auto', 'avoid', 'all', 'avoid-page', 'page', 'left', 'right', 'column'];
	  const getNumber = () => [isNumber$1, isArbitraryNumber$1];
	  const getNumberAndArbitrary = () => [isNumber$1, isArbitraryValue$1];
	  return {
	    cacheSize: 500,
	    separator: ':',
	    theme: {
	      colors: [isAny$1],
	      spacing: [isLength$1, isArbitraryLength$1],
	      blur: ['none', '', isTshirtSize$1, isArbitraryValue$1],
	      brightness: getNumber(),
	      borderColor: [colors],
	      borderRadius: ['none', '', 'full', isTshirtSize$1, isArbitraryValue$1],
	      borderSpacing: getSpacingWithArbitrary(),
	      borderWidth: getLengthWithEmptyAndArbitrary(),
	      contrast: getNumber(),
	      grayscale: getZeroAndEmpty(),
	      hueRotate: getNumberAndArbitrary(),
	      invert: getZeroAndEmpty(),
	      gap: getSpacingWithArbitrary(),
	      gradientColorStops: [colors],
	      gradientColorStopPositions: [isPercent$1, isArbitraryLength$1],
	      inset: getSpacingWithAutoAndArbitrary(),
	      margin: getSpacingWithAutoAndArbitrary(),
	      opacity: getNumber(),
	      padding: getSpacingWithArbitrary(),
	      saturate: getNumber(),
	      scale: getNumber(),
	      sepia: getZeroAndEmpty(),
	      skew: getNumberAndArbitrary(),
	      space: getSpacingWithArbitrary(),
	      translate: getSpacingWithArbitrary()
	    },
	    classGroups: {
	      // Layout
	      /**
	       * Aspect Ratio
	       * @see https://tailwindcss.com/docs/aspect-ratio
	       */
	      aspect: [{
	        aspect: ['auto', 'square', 'video', isArbitraryValue$1]
	      }],
	      /**
	       * Container
	       * @see https://tailwindcss.com/docs/container
	       */
	      container: ['container'],
	      /**
	       * Columns
	       * @see https://tailwindcss.com/docs/columns
	       */
	      columns: [{
	        columns: [isTshirtSize$1]
	      }],
	      /**
	       * Break After
	       * @see https://tailwindcss.com/docs/break-after
	       */
	      'break-after': [{
	        'break-after': getBreaks()
	      }],
	      /**
	       * Break Before
	       * @see https://tailwindcss.com/docs/break-before
	       */
	      'break-before': [{
	        'break-before': getBreaks()
	      }],
	      /**
	       * Break Inside
	       * @see https://tailwindcss.com/docs/break-inside
	       */
	      'break-inside': [{
	        'break-inside': ['auto', 'avoid', 'avoid-page', 'avoid-column']
	      }],
	      /**
	       * Box Decoration Break
	       * @see https://tailwindcss.com/docs/box-decoration-break
	       */
	      'box-decoration': [{
	        'box-decoration': ['slice', 'clone']
	      }],
	      /**
	       * Box Sizing
	       * @see https://tailwindcss.com/docs/box-sizing
	       */
	      box: [{
	        box: ['border', 'content']
	      }],
	      /**
	       * Display
	       * @see https://tailwindcss.com/docs/display
	       */
	      display: ['block', 'inline-block', 'inline', 'flex', 'inline-flex', 'table', 'inline-table', 'table-caption', 'table-cell', 'table-column', 'table-column-group', 'table-footer-group', 'table-header-group', 'table-row-group', 'table-row', 'flow-root', 'grid', 'inline-grid', 'contents', 'list-item', 'hidden'],
	      /**
	       * Floats
	       * @see https://tailwindcss.com/docs/float
	       */
	      float: [{
	        float: ['right', 'left', 'none', 'start', 'end']
	      }],
	      /**
	       * Clear
	       * @see https://tailwindcss.com/docs/clear
	       */
	      clear: [{
	        clear: ['left', 'right', 'both', 'none', 'start', 'end']
	      }],
	      /**
	       * Isolation
	       * @see https://tailwindcss.com/docs/isolation
	       */
	      isolation: ['isolate', 'isolation-auto'],
	      /**
	       * Object Fit
	       * @see https://tailwindcss.com/docs/object-fit
	       */
	      'object-fit': [{
	        object: ['contain', 'cover', 'fill', 'none', 'scale-down']
	      }],
	      /**
	       * Object Position
	       * @see https://tailwindcss.com/docs/object-position
	       */
	      'object-position': [{
	        object: [...getPositions(), isArbitraryValue$1]
	      }],
	      /**
	       * Overflow
	       * @see https://tailwindcss.com/docs/overflow
	       */
	      overflow: [{
	        overflow: getOverflow()
	      }],
	      /**
	       * Overflow X
	       * @see https://tailwindcss.com/docs/overflow
	       */
	      'overflow-x': [{
	        'overflow-x': getOverflow()
	      }],
	      /**
	       * Overflow Y
	       * @see https://tailwindcss.com/docs/overflow
	       */
	      'overflow-y': [{
	        'overflow-y': getOverflow()
	      }],
	      /**
	       * Overscroll Behavior
	       * @see https://tailwindcss.com/docs/overscroll-behavior
	       */
	      overscroll: [{
	        overscroll: getOverscroll()
	      }],
	      /**
	       * Overscroll Behavior X
	       * @see https://tailwindcss.com/docs/overscroll-behavior
	       */
	      'overscroll-x': [{
	        'overscroll-x': getOverscroll()
	      }],
	      /**
	       * Overscroll Behavior Y
	       * @see https://tailwindcss.com/docs/overscroll-behavior
	       */
	      'overscroll-y': [{
	        'overscroll-y': getOverscroll()
	      }],
	      /**
	       * Position
	       * @see https://tailwindcss.com/docs/position
	       */
	      position: ['static', 'fixed', 'absolute', 'relative', 'sticky'],
	      /**
	       * Top / Right / Bottom / Left
	       * @see https://tailwindcss.com/docs/top-right-bottom-left
	       */
	      inset: [{
	        inset: [inset]
	      }],
	      /**
	       * Right / Left
	       * @see https://tailwindcss.com/docs/top-right-bottom-left
	       */
	      'inset-x': [{
	        'inset-x': [inset]
	      }],
	      /**
	       * Top / Bottom
	       * @see https://tailwindcss.com/docs/top-right-bottom-left
	       */
	      'inset-y': [{
	        'inset-y': [inset]
	      }],
	      /**
	       * Start
	       * @see https://tailwindcss.com/docs/top-right-bottom-left
	       */
	      start: [{
	        start: [inset]
	      }],
	      /**
	       * End
	       * @see https://tailwindcss.com/docs/top-right-bottom-left
	       */
	      end: [{
	        end: [inset]
	      }],
	      /**
	       * Top
	       * @see https://tailwindcss.com/docs/top-right-bottom-left
	       */
	      top: [{
	        top: [inset]
	      }],
	      /**
	       * Right
	       * @see https://tailwindcss.com/docs/top-right-bottom-left
	       */
	      right: [{
	        right: [inset]
	      }],
	      /**
	       * Bottom
	       * @see https://tailwindcss.com/docs/top-right-bottom-left
	       */
	      bottom: [{
	        bottom: [inset]
	      }],
	      /**
	       * Left
	       * @see https://tailwindcss.com/docs/top-right-bottom-left
	       */
	      left: [{
	        left: [inset]
	      }],
	      /**
	       * Visibility
	       * @see https://tailwindcss.com/docs/visibility
	       */
	      visibility: ['visible', 'invisible', 'collapse'],
	      /**
	       * Z-Index
	       * @see https://tailwindcss.com/docs/z-index
	       */
	      z: [{
	        z: ['auto', isInteger$1, isArbitraryValue$1]
	      }],
	      // Flexbox and Grid
	      /**
	       * Flex Basis
	       * @see https://tailwindcss.com/docs/flex-basis
	       */
	      basis: [{
	        basis: getSpacingWithAutoAndArbitrary()
	      }],
	      /**
	       * Flex Direction
	       * @see https://tailwindcss.com/docs/flex-direction
	       */
	      'flex-direction': [{
	        flex: ['row', 'row-reverse', 'col', 'col-reverse']
	      }],
	      /**
	       * Flex Wrap
	       * @see https://tailwindcss.com/docs/flex-wrap
	       */
	      'flex-wrap': [{
	        flex: ['wrap', 'wrap-reverse', 'nowrap']
	      }],
	      /**
	       * Flex
	       * @see https://tailwindcss.com/docs/flex
	       */
	      flex: [{
	        flex: ['1', 'auto', 'initial', 'none', isArbitraryValue$1]
	      }],
	      /**
	       * Flex Grow
	       * @see https://tailwindcss.com/docs/flex-grow
	       */
	      grow: [{
	        grow: getZeroAndEmpty()
	      }],
	      /**
	       * Flex Shrink
	       * @see https://tailwindcss.com/docs/flex-shrink
	       */
	      shrink: [{
	        shrink: getZeroAndEmpty()
	      }],
	      /**
	       * Order
	       * @see https://tailwindcss.com/docs/order
	       */
	      order: [{
	        order: ['first', 'last', 'none', isInteger$1, isArbitraryValue$1]
	      }],
	      /**
	       * Grid Template Columns
	       * @see https://tailwindcss.com/docs/grid-template-columns
	       */
	      'grid-cols': [{
	        'grid-cols': [isAny$1]
	      }],
	      /**
	       * Grid Column Start / End
	       * @see https://tailwindcss.com/docs/grid-column
	       */
	      'col-start-end': [{
	        col: ['auto', {
	          span: ['full', isInteger$1, isArbitraryValue$1]
	        }, isArbitraryValue$1]
	      }],
	      /**
	       * Grid Column Start
	       * @see https://tailwindcss.com/docs/grid-column
	       */
	      'col-start': [{
	        'col-start': getNumberWithAutoAndArbitrary()
	      }],
	      /**
	       * Grid Column End
	       * @see https://tailwindcss.com/docs/grid-column
	       */
	      'col-end': [{
	        'col-end': getNumberWithAutoAndArbitrary()
	      }],
	      /**
	       * Grid Template Rows
	       * @see https://tailwindcss.com/docs/grid-template-rows
	       */
	      'grid-rows': [{
	        'grid-rows': [isAny$1]
	      }],
	      /**
	       * Grid Row Start / End
	       * @see https://tailwindcss.com/docs/grid-row
	       */
	      'row-start-end': [{
	        row: ['auto', {
	          span: [isInteger$1, isArbitraryValue$1]
	        }, isArbitraryValue$1]
	      }],
	      /**
	       * Grid Row Start
	       * @see https://tailwindcss.com/docs/grid-row
	       */
	      'row-start': [{
	        'row-start': getNumberWithAutoAndArbitrary()
	      }],
	      /**
	       * Grid Row End
	       * @see https://tailwindcss.com/docs/grid-row
	       */
	      'row-end': [{
	        'row-end': getNumberWithAutoAndArbitrary()
	      }],
	      /**
	       * Grid Auto Flow
	       * @see https://tailwindcss.com/docs/grid-auto-flow
	       */
	      'grid-flow': [{
	        'grid-flow': ['row', 'col', 'dense', 'row-dense', 'col-dense']
	      }],
	      /**
	       * Grid Auto Columns
	       * @see https://tailwindcss.com/docs/grid-auto-columns
	       */
	      'auto-cols': [{
	        'auto-cols': ['auto', 'min', 'max', 'fr', isArbitraryValue$1]
	      }],
	      /**
	       * Grid Auto Rows
	       * @see https://tailwindcss.com/docs/grid-auto-rows
	       */
	      'auto-rows': [{
	        'auto-rows': ['auto', 'min', 'max', 'fr', isArbitraryValue$1]
	      }],
	      /**
	       * Gap
	       * @see https://tailwindcss.com/docs/gap
	       */
	      gap: [{
	        gap: [gap]
	      }],
	      /**
	       * Gap X
	       * @see https://tailwindcss.com/docs/gap
	       */
	      'gap-x': [{
	        'gap-x': [gap]
	      }],
	      /**
	       * Gap Y
	       * @see https://tailwindcss.com/docs/gap
	       */
	      'gap-y': [{
	        'gap-y': [gap]
	      }],
	      /**
	       * Justify Content
	       * @see https://tailwindcss.com/docs/justify-content
	       */
	      'justify-content': [{
	        justify: ['normal', ...getAlign()]
	      }],
	      /**
	       * Justify Items
	       * @see https://tailwindcss.com/docs/justify-items
	       */
	      'justify-items': [{
	        'justify-items': ['start', 'end', 'center', 'stretch']
	      }],
	      /**
	       * Justify Self
	       * @see https://tailwindcss.com/docs/justify-self
	       */
	      'justify-self': [{
	        'justify-self': ['auto', 'start', 'end', 'center', 'stretch']
	      }],
	      /**
	       * Align Content
	       * @see https://tailwindcss.com/docs/align-content
	       */
	      'align-content': [{
	        content: ['normal', ...getAlign(), 'baseline']
	      }],
	      /**
	       * Align Items
	       * @see https://tailwindcss.com/docs/align-items
	       */
	      'align-items': [{
	        items: ['start', 'end', 'center', 'baseline', 'stretch']
	      }],
	      /**
	       * Align Self
	       * @see https://tailwindcss.com/docs/align-self
	       */
	      'align-self': [{
	        self: ['auto', 'start', 'end', 'center', 'stretch', 'baseline']
	      }],
	      /**
	       * Place Content
	       * @see https://tailwindcss.com/docs/place-content
	       */
	      'place-content': [{
	        'place-content': [...getAlign(), 'baseline']
	      }],
	      /**
	       * Place Items
	       * @see https://tailwindcss.com/docs/place-items
	       */
	      'place-items': [{
	        'place-items': ['start', 'end', 'center', 'baseline', 'stretch']
	      }],
	      /**
	       * Place Self
	       * @see https://tailwindcss.com/docs/place-self
	       */
	      'place-self': [{
	        'place-self': ['auto', 'start', 'end', 'center', 'stretch']
	      }],
	      // Spacing
	      /**
	       * Padding
	       * @see https://tailwindcss.com/docs/padding
	       */
	      p: [{
	        p: [padding]
	      }],
	      /**
	       * Padding X
	       * @see https://tailwindcss.com/docs/padding
	       */
	      px: [{
	        px: [padding]
	      }],
	      /**
	       * Padding Y
	       * @see https://tailwindcss.com/docs/padding
	       */
	      py: [{
	        py: [padding]
	      }],
	      /**
	       * Padding Start
	       * @see https://tailwindcss.com/docs/padding
	       */
	      ps: [{
	        ps: [padding]
	      }],
	      /**
	       * Padding End
	       * @see https://tailwindcss.com/docs/padding
	       */
	      pe: [{
	        pe: [padding]
	      }],
	      /**
	       * Padding Top
	       * @see https://tailwindcss.com/docs/padding
	       */
	      pt: [{
	        pt: [padding]
	      }],
	      /**
	       * Padding Right
	       * @see https://tailwindcss.com/docs/padding
	       */
	      pr: [{
	        pr: [padding]
	      }],
	      /**
	       * Padding Bottom
	       * @see https://tailwindcss.com/docs/padding
	       */
	      pb: [{
	        pb: [padding]
	      }],
	      /**
	       * Padding Left
	       * @see https://tailwindcss.com/docs/padding
	       */
	      pl: [{
	        pl: [padding]
	      }],
	      /**
	       * Margin
	       * @see https://tailwindcss.com/docs/margin
	       */
	      m: [{
	        m: [margin]
	      }],
	      /**
	       * Margin X
	       * @see https://tailwindcss.com/docs/margin
	       */
	      mx: [{
	        mx: [margin]
	      }],
	      /**
	       * Margin Y
	       * @see https://tailwindcss.com/docs/margin
	       */
	      my: [{
	        my: [margin]
	      }],
	      /**
	       * Margin Start
	       * @see https://tailwindcss.com/docs/margin
	       */
	      ms: [{
	        ms: [margin]
	      }],
	      /**
	       * Margin End
	       * @see https://tailwindcss.com/docs/margin
	       */
	      me: [{
	        me: [margin]
	      }],
	      /**
	       * Margin Top
	       * @see https://tailwindcss.com/docs/margin
	       */
	      mt: [{
	        mt: [margin]
	      }],
	      /**
	       * Margin Right
	       * @see https://tailwindcss.com/docs/margin
	       */
	      mr: [{
	        mr: [margin]
	      }],
	      /**
	       * Margin Bottom
	       * @see https://tailwindcss.com/docs/margin
	       */
	      mb: [{
	        mb: [margin]
	      }],
	      /**
	       * Margin Left
	       * @see https://tailwindcss.com/docs/margin
	       */
	      ml: [{
	        ml: [margin]
	      }],
	      /**
	       * Space Between X
	       * @see https://tailwindcss.com/docs/space
	       */
	      'space-x': [{
	        'space-x': [space]
	      }],
	      /**
	       * Space Between X Reverse
	       * @see https://tailwindcss.com/docs/space
	       */
	      'space-x-reverse': ['space-x-reverse'],
	      /**
	       * Space Between Y
	       * @see https://tailwindcss.com/docs/space
	       */
	      'space-y': [{
	        'space-y': [space]
	      }],
	      /**
	       * Space Between Y Reverse
	       * @see https://tailwindcss.com/docs/space
	       */
	      'space-y-reverse': ['space-y-reverse'],
	      // Sizing
	      /**
	       * Width
	       * @see https://tailwindcss.com/docs/width
	       */
	      w: [{
	        w: ['auto', 'min', 'max', 'fit', 'svw', 'lvw', 'dvw', isArbitraryValue$1, spacing]
	      }],
	      /**
	       * Min-Width
	       * @see https://tailwindcss.com/docs/min-width
	       */
	      'min-w': [{
	        'min-w': [isArbitraryValue$1, spacing, 'min', 'max', 'fit']
	      }],
	      /**
	       * Max-Width
	       * @see https://tailwindcss.com/docs/max-width
	       */
	      'max-w': [{
	        'max-w': [isArbitraryValue$1, spacing, 'none', 'full', 'min', 'max', 'fit', 'prose', {
	          screen: [isTshirtSize$1]
	        }, isTshirtSize$1]
	      }],
	      /**
	       * Height
	       * @see https://tailwindcss.com/docs/height
	       */
	      h: [{
	        h: [isArbitraryValue$1, spacing, 'auto', 'min', 'max', 'fit', 'svh', 'lvh', 'dvh']
	      }],
	      /**
	       * Min-Height
	       * @see https://tailwindcss.com/docs/min-height
	       */
	      'min-h': [{
	        'min-h': [isArbitraryValue$1, spacing, 'min', 'max', 'fit', 'svh', 'lvh', 'dvh']
	      }],
	      /**
	       * Max-Height
	       * @see https://tailwindcss.com/docs/max-height
	       */
	      'max-h': [{
	        'max-h': [isArbitraryValue$1, spacing, 'min', 'max', 'fit', 'svh', 'lvh', 'dvh']
	      }],
	      /**
	       * Size
	       * @see https://tailwindcss.com/docs/size
	       */
	      size: [{
	        size: [isArbitraryValue$1, spacing, 'auto', 'min', 'max', 'fit']
	      }],
	      // Typography
	      /**
	       * Font Size
	       * @see https://tailwindcss.com/docs/font-size
	       */
	      'font-size': [{
	        text: ['base', isTshirtSize$1, isArbitraryLength$1]
	      }],
	      /**
	       * Font Smoothing
	       * @see https://tailwindcss.com/docs/font-smoothing
	       */
	      'font-smoothing': ['antialiased', 'subpixel-antialiased'],
	      /**
	       * Font Style
	       * @see https://tailwindcss.com/docs/font-style
	       */
	      'font-style': ['italic', 'not-italic'],
	      /**
	       * Font Weight
	       * @see https://tailwindcss.com/docs/font-weight
	       */
	      'font-weight': [{
	        font: ['thin', 'extralight', 'light', 'normal', 'medium', 'semibold', 'bold', 'extrabold', 'black', isArbitraryNumber$1]
	      }],
	      /**
	       * Font Family
	       * @see https://tailwindcss.com/docs/font-family
	       */
	      'font-family': [{
	        font: [isAny$1]
	      }],
	      /**
	       * Font Variant Numeric
	       * @see https://tailwindcss.com/docs/font-variant-numeric
	       */
	      'fvn-normal': ['normal-nums'],
	      /**
	       * Font Variant Numeric
	       * @see https://tailwindcss.com/docs/font-variant-numeric
	       */
	      'fvn-ordinal': ['ordinal'],
	      /**
	       * Font Variant Numeric
	       * @see https://tailwindcss.com/docs/font-variant-numeric
	       */
	      'fvn-slashed-zero': ['slashed-zero'],
	      /**
	       * Font Variant Numeric
	       * @see https://tailwindcss.com/docs/font-variant-numeric
	       */
	      'fvn-figure': ['lining-nums', 'oldstyle-nums'],
	      /**
	       * Font Variant Numeric
	       * @see https://tailwindcss.com/docs/font-variant-numeric
	       */
	      'fvn-spacing': ['proportional-nums', 'tabular-nums'],
	      /**
	       * Font Variant Numeric
	       * @see https://tailwindcss.com/docs/font-variant-numeric
	       */
	      'fvn-fraction': ['diagonal-fractions', 'stacked-fractons'],
	      /**
	       * Letter Spacing
	       * @see https://tailwindcss.com/docs/letter-spacing
	       */
	      tracking: [{
	        tracking: ['tighter', 'tight', 'normal', 'wide', 'wider', 'widest', isArbitraryValue$1]
	      }],
	      /**
	       * Line Clamp
	       * @see https://tailwindcss.com/docs/line-clamp
	       */
	      'line-clamp': [{
	        'line-clamp': ['none', isNumber$1, isArbitraryNumber$1]
	      }],
	      /**
	       * Line Height
	       * @see https://tailwindcss.com/docs/line-height
	       */
	      leading: [{
	        leading: ['none', 'tight', 'snug', 'normal', 'relaxed', 'loose', isLength$1, isArbitraryValue$1]
	      }],
	      /**
	       * List Style Image
	       * @see https://tailwindcss.com/docs/list-style-image
	       */
	      'list-image': [{
	        'list-image': ['none', isArbitraryValue$1]
	      }],
	      /**
	       * List Style Type
	       * @see https://tailwindcss.com/docs/list-style-type
	       */
	      'list-style-type': [{
	        list: ['none', 'disc', 'decimal', isArbitraryValue$1]
	      }],
	      /**
	       * List Style Position
	       * @see https://tailwindcss.com/docs/list-style-position
	       */
	      'list-style-position': [{
	        list: ['inside', 'outside']
	      }],
	      /**
	       * Placeholder Color
	       * @deprecated since Tailwind CSS v3.0.0
	       * @see https://tailwindcss.com/docs/placeholder-color
	       */
	      'placeholder-color': [{
	        placeholder: [colors]
	      }],
	      /**
	       * Placeholder Opacity
	       * @see https://tailwindcss.com/docs/placeholder-opacity
	       */
	      'placeholder-opacity': [{
	        'placeholder-opacity': [opacity]
	      }],
	      /**
	       * Text Alignment
	       * @see https://tailwindcss.com/docs/text-align
	       */
	      'text-alignment': [{
	        text: ['left', 'center', 'right', 'justify', 'start', 'end']
	      }],
	      /**
	       * Text Color
	       * @see https://tailwindcss.com/docs/text-color
	       */
	      'text-color': [{
	        text: [colors]
	      }],
	      /**
	       * Text Opacity
	       * @see https://tailwindcss.com/docs/text-opacity
	       */
	      'text-opacity': [{
	        'text-opacity': [opacity]
	      }],
	      /**
	       * Text Decoration
	       * @see https://tailwindcss.com/docs/text-decoration
	       */
	      'text-decoration': ['underline', 'overline', 'line-through', 'no-underline'],
	      /**
	       * Text Decoration Style
	       * @see https://tailwindcss.com/docs/text-decoration-style
	       */
	      'text-decoration-style': [{
	        decoration: [...getLineStyles(), 'wavy']
	      }],
	      /**
	       * Text Decoration Thickness
	       * @see https://tailwindcss.com/docs/text-decoration-thickness
	       */
	      'text-decoration-thickness': [{
	        decoration: ['auto', 'from-font', isLength$1, isArbitraryLength$1]
	      }],
	      /**
	       * Text Underline Offset
	       * @see https://tailwindcss.com/docs/text-underline-offset
	       */
	      'underline-offset': [{
	        'underline-offset': ['auto', isLength$1, isArbitraryValue$1]
	      }],
	      /**
	       * Text Decoration Color
	       * @see https://tailwindcss.com/docs/text-decoration-color
	       */
	      'text-decoration-color': [{
	        decoration: [colors]
	      }],
	      /**
	       * Text Transform
	       * @see https://tailwindcss.com/docs/text-transform
	       */
	      'text-transform': ['uppercase', 'lowercase', 'capitalize', 'normal-case'],
	      /**
	       * Text Overflow
	       * @see https://tailwindcss.com/docs/text-overflow
	       */
	      'text-overflow': ['truncate', 'text-ellipsis', 'text-clip'],
	      /**
	       * Text Wrap
	       * @see https://tailwindcss.com/docs/text-wrap
	       */
	      'text-wrap': [{
	        text: ['wrap', 'nowrap', 'balance', 'pretty']
	      }],
	      /**
	       * Text Indent
	       * @see https://tailwindcss.com/docs/text-indent
	       */
	      indent: [{
	        indent: getSpacingWithArbitrary()
	      }],
	      /**
	       * Vertical Alignment
	       * @see https://tailwindcss.com/docs/vertical-align
	       */
	      'vertical-align': [{
	        align: ['baseline', 'top', 'middle', 'bottom', 'text-top', 'text-bottom', 'sub', 'super', isArbitraryValue$1]
	      }],
	      /**
	       * Whitespace
	       * @see https://tailwindcss.com/docs/whitespace
	       */
	      whitespace: [{
	        whitespace: ['normal', 'nowrap', 'pre', 'pre-line', 'pre-wrap', 'break-spaces']
	      }],
	      /**
	       * Word Break
	       * @see https://tailwindcss.com/docs/word-break
	       */
	      break: [{
	        break: ['normal', 'words', 'all', 'keep']
	      }],
	      /**
	       * Hyphens
	       * @see https://tailwindcss.com/docs/hyphens
	       */
	      hyphens: [{
	        hyphens: ['none', 'manual', 'auto']
	      }],
	      /**
	       * Content
	       * @see https://tailwindcss.com/docs/content
	       */
	      content: [{
	        content: ['none', isArbitraryValue$1]
	      }],
	      // Backgrounds
	      /**
	       * Background Attachment
	       * @see https://tailwindcss.com/docs/background-attachment
	       */
	      'bg-attachment': [{
	        bg: ['fixed', 'local', 'scroll']
	      }],
	      /**
	       * Background Clip
	       * @see https://tailwindcss.com/docs/background-clip
	       */
	      'bg-clip': [{
	        'bg-clip': ['border', 'padding', 'content', 'text']
	      }],
	      /**
	       * Background Opacity
	       * @deprecated since Tailwind CSS v3.0.0
	       * @see https://tailwindcss.com/docs/background-opacity
	       */
	      'bg-opacity': [{
	        'bg-opacity': [opacity]
	      }],
	      /**
	       * Background Origin
	       * @see https://tailwindcss.com/docs/background-origin
	       */
	      'bg-origin': [{
	        'bg-origin': ['border', 'padding', 'content']
	      }],
	      /**
	       * Background Position
	       * @see https://tailwindcss.com/docs/background-position
	       */
	      'bg-position': [{
	        bg: [...getPositions(), isArbitraryPosition$1]
	      }],
	      /**
	       * Background Repeat
	       * @see https://tailwindcss.com/docs/background-repeat
	       */
	      'bg-repeat': [{
	        bg: ['no-repeat', {
	          repeat: ['', 'x', 'y', 'round', 'space']
	        }]
	      }],
	      /**
	       * Background Size
	       * @see https://tailwindcss.com/docs/background-size
	       */
	      'bg-size': [{
	        bg: ['auto', 'cover', 'contain', isArbitrarySize$1]
	      }],
	      /**
	       * Background Image
	       * @see https://tailwindcss.com/docs/background-image
	       */
	      'bg-image': [{
	        bg: ['none', {
	          'gradient-to': ['t', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl']
	        }, isArbitraryImage]
	      }],
	      /**
	       * Background Color
	       * @see https://tailwindcss.com/docs/background-color
	       */
	      'bg-color': [{
	        bg: [colors]
	      }],
	      /**
	       * Gradient Color Stops From Position
	       * @see https://tailwindcss.com/docs/gradient-color-stops
	       */
	      'gradient-from-pos': [{
	        from: [gradientColorStopPositions]
	      }],
	      /**
	       * Gradient Color Stops Via Position
	       * @see https://tailwindcss.com/docs/gradient-color-stops
	       */
	      'gradient-via-pos': [{
	        via: [gradientColorStopPositions]
	      }],
	      /**
	       * Gradient Color Stops To Position
	       * @see https://tailwindcss.com/docs/gradient-color-stops
	       */
	      'gradient-to-pos': [{
	        to: [gradientColorStopPositions]
	      }],
	      /**
	       * Gradient Color Stops From
	       * @see https://tailwindcss.com/docs/gradient-color-stops
	       */
	      'gradient-from': [{
	        from: [gradientColorStops]
	      }],
	      /**
	       * Gradient Color Stops Via
	       * @see https://tailwindcss.com/docs/gradient-color-stops
	       */
	      'gradient-via': [{
	        via: [gradientColorStops]
	      }],
	      /**
	       * Gradient Color Stops To
	       * @see https://tailwindcss.com/docs/gradient-color-stops
	       */
	      'gradient-to': [{
	        to: [gradientColorStops]
	      }],
	      // Borders
	      /**
	       * Border Radius
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      rounded: [{
	        rounded: [borderRadius]
	      }],
	      /**
	       * Border Radius Start
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-s': [{
	        'rounded-s': [borderRadius]
	      }],
	      /**
	       * Border Radius End
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-e': [{
	        'rounded-e': [borderRadius]
	      }],
	      /**
	       * Border Radius Top
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-t': [{
	        'rounded-t': [borderRadius]
	      }],
	      /**
	       * Border Radius Right
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-r': [{
	        'rounded-r': [borderRadius]
	      }],
	      /**
	       * Border Radius Bottom
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-b': [{
	        'rounded-b': [borderRadius]
	      }],
	      /**
	       * Border Radius Left
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-l': [{
	        'rounded-l': [borderRadius]
	      }],
	      /**
	       * Border Radius Start Start
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-ss': [{
	        'rounded-ss': [borderRadius]
	      }],
	      /**
	       * Border Radius Start End
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-se': [{
	        'rounded-se': [borderRadius]
	      }],
	      /**
	       * Border Radius End End
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-ee': [{
	        'rounded-ee': [borderRadius]
	      }],
	      /**
	       * Border Radius End Start
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-es': [{
	        'rounded-es': [borderRadius]
	      }],
	      /**
	       * Border Radius Top Left
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-tl': [{
	        'rounded-tl': [borderRadius]
	      }],
	      /**
	       * Border Radius Top Right
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-tr': [{
	        'rounded-tr': [borderRadius]
	      }],
	      /**
	       * Border Radius Bottom Right
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-br': [{
	        'rounded-br': [borderRadius]
	      }],
	      /**
	       * Border Radius Bottom Left
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-bl': [{
	        'rounded-bl': [borderRadius]
	      }],
	      /**
	       * Border Width
	       * @see https://tailwindcss.com/docs/border-width
	       */
	      'border-w': [{
	        border: [borderWidth]
	      }],
	      /**
	       * Border Width X
	       * @see https://tailwindcss.com/docs/border-width
	       */
	      'border-w-x': [{
	        'border-x': [borderWidth]
	      }],
	      /**
	       * Border Width Y
	       * @see https://tailwindcss.com/docs/border-width
	       */
	      'border-w-y': [{
	        'border-y': [borderWidth]
	      }],
	      /**
	       * Border Width Start
	       * @see https://tailwindcss.com/docs/border-width
	       */
	      'border-w-s': [{
	        'border-s': [borderWidth]
	      }],
	      /**
	       * Border Width End
	       * @see https://tailwindcss.com/docs/border-width
	       */
	      'border-w-e': [{
	        'border-e': [borderWidth]
	      }],
	      /**
	       * Border Width Top
	       * @see https://tailwindcss.com/docs/border-width
	       */
	      'border-w-t': [{
	        'border-t': [borderWidth]
	      }],
	      /**
	       * Border Width Right
	       * @see https://tailwindcss.com/docs/border-width
	       */
	      'border-w-r': [{
	        'border-r': [borderWidth]
	      }],
	      /**
	       * Border Width Bottom
	       * @see https://tailwindcss.com/docs/border-width
	       */
	      'border-w-b': [{
	        'border-b': [borderWidth]
	      }],
	      /**
	       * Border Width Left
	       * @see https://tailwindcss.com/docs/border-width
	       */
	      'border-w-l': [{
	        'border-l': [borderWidth]
	      }],
	      /**
	       * Border Opacity
	       * @see https://tailwindcss.com/docs/border-opacity
	       */
	      'border-opacity': [{
	        'border-opacity': [opacity]
	      }],
	      /**
	       * Border Style
	       * @see https://tailwindcss.com/docs/border-style
	       */
	      'border-style': [{
	        border: [...getLineStyles(), 'hidden']
	      }],
	      /**
	       * Divide Width X
	       * @see https://tailwindcss.com/docs/divide-width
	       */
	      'divide-x': [{
	        'divide-x': [borderWidth]
	      }],
	      /**
	       * Divide Width X Reverse
	       * @see https://tailwindcss.com/docs/divide-width
	       */
	      'divide-x-reverse': ['divide-x-reverse'],
	      /**
	       * Divide Width Y
	       * @see https://tailwindcss.com/docs/divide-width
	       */
	      'divide-y': [{
	        'divide-y': [borderWidth]
	      }],
	      /**
	       * Divide Width Y Reverse
	       * @see https://tailwindcss.com/docs/divide-width
	       */
	      'divide-y-reverse': ['divide-y-reverse'],
	      /**
	       * Divide Opacity
	       * @see https://tailwindcss.com/docs/divide-opacity
	       */
	      'divide-opacity': [{
	        'divide-opacity': [opacity]
	      }],
	      /**
	       * Divide Style
	       * @see https://tailwindcss.com/docs/divide-style
	       */
	      'divide-style': [{
	        divide: getLineStyles()
	      }],
	      /**
	       * Border Color
	       * @see https://tailwindcss.com/docs/border-color
	       */
	      'border-color': [{
	        border: [borderColor]
	      }],
	      /**
	       * Border Color X
	       * @see https://tailwindcss.com/docs/border-color
	       */
	      'border-color-x': [{
	        'border-x': [borderColor]
	      }],
	      /**
	       * Border Color Y
	       * @see https://tailwindcss.com/docs/border-color
	       */
	      'border-color-y': [{
	        'border-y': [borderColor]
	      }],
	      /**
	       * Border Color Top
	       * @see https://tailwindcss.com/docs/border-color
	       */
	      'border-color-t': [{
	        'border-t': [borderColor]
	      }],
	      /**
	       * Border Color Right
	       * @see https://tailwindcss.com/docs/border-color
	       */
	      'border-color-r': [{
	        'border-r': [borderColor]
	      }],
	      /**
	       * Border Color Bottom
	       * @see https://tailwindcss.com/docs/border-color
	       */
	      'border-color-b': [{
	        'border-b': [borderColor]
	      }],
	      /**
	       * Border Color Left
	       * @see https://tailwindcss.com/docs/border-color
	       */
	      'border-color-l': [{
	        'border-l': [borderColor]
	      }],
	      /**
	       * Divide Color
	       * @see https://tailwindcss.com/docs/divide-color
	       */
	      'divide-color': [{
	        divide: [borderColor]
	      }],
	      /**
	       * Outline Style
	       * @see https://tailwindcss.com/docs/outline-style
	       */
	      'outline-style': [{
	        outline: ['', ...getLineStyles()]
	      }],
	      /**
	       * Outline Offset
	       * @see https://tailwindcss.com/docs/outline-offset
	       */
	      'outline-offset': [{
	        'outline-offset': [isLength$1, isArbitraryValue$1]
	      }],
	      /**
	       * Outline Width
	       * @see https://tailwindcss.com/docs/outline-width
	       */
	      'outline-w': [{
	        outline: [isLength$1, isArbitraryLength$1]
	      }],
	      /**
	       * Outline Color
	       * @see https://tailwindcss.com/docs/outline-color
	       */
	      'outline-color': [{
	        outline: [colors]
	      }],
	      /**
	       * Ring Width
	       * @see https://tailwindcss.com/docs/ring-width
	       */
	      'ring-w': [{
	        ring: getLengthWithEmptyAndArbitrary()
	      }],
	      /**
	       * Ring Width Inset
	       * @see https://tailwindcss.com/docs/ring-width
	       */
	      'ring-w-inset': ['ring-inset'],
	      /**
	       * Ring Color
	       * @see https://tailwindcss.com/docs/ring-color
	       */
	      'ring-color': [{
	        ring: [colors]
	      }],
	      /**
	       * Ring Opacity
	       * @see https://tailwindcss.com/docs/ring-opacity
	       */
	      'ring-opacity': [{
	        'ring-opacity': [opacity]
	      }],
	      /**
	       * Ring Offset Width
	       * @see https://tailwindcss.com/docs/ring-offset-width
	       */
	      'ring-offset-w': [{
	        'ring-offset': [isLength$1, isArbitraryLength$1]
	      }],
	      /**
	       * Ring Offset Color
	       * @see https://tailwindcss.com/docs/ring-offset-color
	       */
	      'ring-offset-color': [{
	        'ring-offset': [colors]
	      }],
	      // Effects
	      /**
	       * Box Shadow
	       * @see https://tailwindcss.com/docs/box-shadow
	       */
	      shadow: [{
	        shadow: ['', 'inner', 'none', isTshirtSize$1, isArbitraryShadow$1]
	      }],
	      /**
	       * Box Shadow Color
	       * @see https://tailwindcss.com/docs/box-shadow-color
	       */
	      'shadow-color': [{
	        shadow: [isAny$1]
	      }],
	      /**
	       * Opacity
	       * @see https://tailwindcss.com/docs/opacity
	       */
	      opacity: [{
	        opacity: [opacity]
	      }],
	      /**
	       * Mix Blend Mode
	       * @see https://tailwindcss.com/docs/mix-blend-mode
	       */
	      'mix-blend': [{
	        'mix-blend': getBlendModes()
	      }],
	      /**
	       * Background Blend Mode
	       * @see https://tailwindcss.com/docs/background-blend-mode
	       */
	      'bg-blend': [{
	        'bg-blend': getBlendModes()
	      }],
	      // Filters
	      /**
	       * Filter
	       * @deprecated since Tailwind CSS v3.0.0
	       * @see https://tailwindcss.com/docs/filter
	       */
	      filter: [{
	        filter: ['', 'none']
	      }],
	      /**
	       * Blur
	       * @see https://tailwindcss.com/docs/blur
	       */
	      blur: [{
	        blur: [blur]
	      }],
	      /**
	       * Brightness
	       * @see https://tailwindcss.com/docs/brightness
	       */
	      brightness: [{
	        brightness: [brightness]
	      }],
	      /**
	       * Contrast
	       * @see https://tailwindcss.com/docs/contrast
	       */
	      contrast: [{
	        contrast: [contrast]
	      }],
	      /**
	       * Drop Shadow
	       * @see https://tailwindcss.com/docs/drop-shadow
	       */
	      'drop-shadow': [{
	        'drop-shadow': ['', 'none', isTshirtSize$1, isArbitraryValue$1]
	      }],
	      /**
	       * Grayscale
	       * @see https://tailwindcss.com/docs/grayscale
	       */
	      grayscale: [{
	        grayscale: [grayscale]
	      }],
	      /**
	       * Hue Rotate
	       * @see https://tailwindcss.com/docs/hue-rotate
	       */
	      'hue-rotate': [{
	        'hue-rotate': [hueRotate]
	      }],
	      /**
	       * Invert
	       * @see https://tailwindcss.com/docs/invert
	       */
	      invert: [{
	        invert: [invert]
	      }],
	      /**
	       * Saturate
	       * @see https://tailwindcss.com/docs/saturate
	       */
	      saturate: [{
	        saturate: [saturate]
	      }],
	      /**
	       * Sepia
	       * @see https://tailwindcss.com/docs/sepia
	       */
	      sepia: [{
	        sepia: [sepia]
	      }],
	      /**
	       * Backdrop Filter
	       * @deprecated since Tailwind CSS v3.0.0
	       * @see https://tailwindcss.com/docs/backdrop-filter
	       */
	      'backdrop-filter': [{
	        'backdrop-filter': ['', 'none']
	      }],
	      /**
	       * Backdrop Blur
	       * @see https://tailwindcss.com/docs/backdrop-blur
	       */
	      'backdrop-blur': [{
	        'backdrop-blur': [blur]
	      }],
	      /**
	       * Backdrop Brightness
	       * @see https://tailwindcss.com/docs/backdrop-brightness
	       */
	      'backdrop-brightness': [{
	        'backdrop-brightness': [brightness]
	      }],
	      /**
	       * Backdrop Contrast
	       * @see https://tailwindcss.com/docs/backdrop-contrast
	       */
	      'backdrop-contrast': [{
	        'backdrop-contrast': [contrast]
	      }],
	      /**
	       * Backdrop Grayscale
	       * @see https://tailwindcss.com/docs/backdrop-grayscale
	       */
	      'backdrop-grayscale': [{
	        'backdrop-grayscale': [grayscale]
	      }],
	      /**
	       * Backdrop Hue Rotate
	       * @see https://tailwindcss.com/docs/backdrop-hue-rotate
	       */
	      'backdrop-hue-rotate': [{
	        'backdrop-hue-rotate': [hueRotate]
	      }],
	      /**
	       * Backdrop Invert
	       * @see https://tailwindcss.com/docs/backdrop-invert
	       */
	      'backdrop-invert': [{
	        'backdrop-invert': [invert]
	      }],
	      /**
	       * Backdrop Opacity
	       * @see https://tailwindcss.com/docs/backdrop-opacity
	       */
	      'backdrop-opacity': [{
	        'backdrop-opacity': [opacity]
	      }],
	      /**
	       * Backdrop Saturate
	       * @see https://tailwindcss.com/docs/backdrop-saturate
	       */
	      'backdrop-saturate': [{
	        'backdrop-saturate': [saturate]
	      }],
	      /**
	       * Backdrop Sepia
	       * @see https://tailwindcss.com/docs/backdrop-sepia
	       */
	      'backdrop-sepia': [{
	        'backdrop-sepia': [sepia]
	      }],
	      // Tables
	      /**
	       * Border Collapse
	       * @see https://tailwindcss.com/docs/border-collapse
	       */
	      'border-collapse': [{
	        border: ['collapse', 'separate']
	      }],
	      /**
	       * Border Spacing
	       * @see https://tailwindcss.com/docs/border-spacing
	       */
	      'border-spacing': [{
	        'border-spacing': [borderSpacing]
	      }],
	      /**
	       * Border Spacing X
	       * @see https://tailwindcss.com/docs/border-spacing
	       */
	      'border-spacing-x': [{
	        'border-spacing-x': [borderSpacing]
	      }],
	      /**
	       * Border Spacing Y
	       * @see https://tailwindcss.com/docs/border-spacing
	       */
	      'border-spacing-y': [{
	        'border-spacing-y': [borderSpacing]
	      }],
	      /**
	       * Table Layout
	       * @see https://tailwindcss.com/docs/table-layout
	       */
	      'table-layout': [{
	        table: ['auto', 'fixed']
	      }],
	      /**
	       * Caption Side
	       * @see https://tailwindcss.com/docs/caption-side
	       */
	      caption: [{
	        caption: ['top', 'bottom']
	      }],
	      // Transitions and Animation
	      /**
	       * Tranisition Property
	       * @see https://tailwindcss.com/docs/transition-property
	       */
	      transition: [{
	        transition: ['none', 'all', '', 'colors', 'opacity', 'shadow', 'transform', isArbitraryValue$1]
	      }],
	      /**
	       * Transition Duration
	       * @see https://tailwindcss.com/docs/transition-duration
	       */
	      duration: [{
	        duration: getNumberAndArbitrary()
	      }],
	      /**
	       * Transition Timing Function
	       * @see https://tailwindcss.com/docs/transition-timing-function
	       */
	      ease: [{
	        ease: ['linear', 'in', 'out', 'in-out', isArbitraryValue$1]
	      }],
	      /**
	       * Transition Delay
	       * @see https://tailwindcss.com/docs/transition-delay
	       */
	      delay: [{
	        delay: getNumberAndArbitrary()
	      }],
	      /**
	       * Animation
	       * @see https://tailwindcss.com/docs/animation
	       */
	      animate: [{
	        animate: ['none', 'spin', 'ping', 'pulse', 'bounce', isArbitraryValue$1]
	      }],
	      // Transforms
	      /**
	       * Transform
	       * @see https://tailwindcss.com/docs/transform
	       */
	      transform: [{
	        transform: ['', 'gpu', 'none']
	      }],
	      /**
	       * Scale
	       * @see https://tailwindcss.com/docs/scale
	       */
	      scale: [{
	        scale: [scale]
	      }],
	      /**
	       * Scale X
	       * @see https://tailwindcss.com/docs/scale
	       */
	      'scale-x': [{
	        'scale-x': [scale]
	      }],
	      /**
	       * Scale Y
	       * @see https://tailwindcss.com/docs/scale
	       */
	      'scale-y': [{
	        'scale-y': [scale]
	      }],
	      /**
	       * Rotate
	       * @see https://tailwindcss.com/docs/rotate
	       */
	      rotate: [{
	        rotate: [isInteger$1, isArbitraryValue$1]
	      }],
	      /**
	       * Translate X
	       * @see https://tailwindcss.com/docs/translate
	       */
	      'translate-x': [{
	        'translate-x': [translate]
	      }],
	      /**
	       * Translate Y
	       * @see https://tailwindcss.com/docs/translate
	       */
	      'translate-y': [{
	        'translate-y': [translate]
	      }],
	      /**
	       * Skew X
	       * @see https://tailwindcss.com/docs/skew
	       */
	      'skew-x': [{
	        'skew-x': [skew]
	      }],
	      /**
	       * Skew Y
	       * @see https://tailwindcss.com/docs/skew
	       */
	      'skew-y': [{
	        'skew-y': [skew]
	      }],
	      /**
	       * Transform Origin
	       * @see https://tailwindcss.com/docs/transform-origin
	       */
	      'transform-origin': [{
	        origin: ['center', 'top', 'top-right', 'right', 'bottom-right', 'bottom', 'bottom-left', 'left', 'top-left', isArbitraryValue$1]
	      }],
	      // Interactivity
	      /**
	       * Accent Color
	       * @see https://tailwindcss.com/docs/accent-color
	       */
	      accent: [{
	        accent: ['auto', colors]
	      }],
	      /**
	       * Appearance
	       * @see https://tailwindcss.com/docs/appearance
	       */
	      appearance: [{
	        appearance: ['none', 'auto']
	      }],
	      /**
	       * Cursor
	       * @see https://tailwindcss.com/docs/cursor
	       */
	      cursor: [{
	        cursor: ['auto', 'default', 'pointer', 'wait', 'text', 'move', 'help', 'not-allowed', 'none', 'context-menu', 'progress', 'cell', 'crosshair', 'vertical-text', 'alias', 'copy', 'no-drop', 'grab', 'grabbing', 'all-scroll', 'col-resize', 'row-resize', 'n-resize', 'e-resize', 's-resize', 'w-resize', 'ne-resize', 'nw-resize', 'se-resize', 'sw-resize', 'ew-resize', 'ns-resize', 'nesw-resize', 'nwse-resize', 'zoom-in', 'zoom-out', isArbitraryValue$1]
	      }],
	      /**
	       * Caret Color
	       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
	       */
	      'caret-color': [{
	        caret: [colors]
	      }],
	      /**
	       * Pointer Events
	       * @see https://tailwindcss.com/docs/pointer-events
	       */
	      'pointer-events': [{
	        'pointer-events': ['none', 'auto']
	      }],
	      /**
	       * Resize
	       * @see https://tailwindcss.com/docs/resize
	       */
	      resize: [{
	        resize: ['none', 'y', 'x', '']
	      }],
	      /**
	       * Scroll Behavior
	       * @see https://tailwindcss.com/docs/scroll-behavior
	       */
	      'scroll-behavior': [{
	        scroll: ['auto', 'smooth']
	      }],
	      /**
	       * Scroll Margin
	       * @see https://tailwindcss.com/docs/scroll-margin
	       */
	      'scroll-m': [{
	        'scroll-m': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Margin X
	       * @see https://tailwindcss.com/docs/scroll-margin
	       */
	      'scroll-mx': [{
	        'scroll-mx': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Margin Y
	       * @see https://tailwindcss.com/docs/scroll-margin
	       */
	      'scroll-my': [{
	        'scroll-my': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Margin Start
	       * @see https://tailwindcss.com/docs/scroll-margin
	       */
	      'scroll-ms': [{
	        'scroll-ms': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Margin End
	       * @see https://tailwindcss.com/docs/scroll-margin
	       */
	      'scroll-me': [{
	        'scroll-me': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Margin Top
	       * @see https://tailwindcss.com/docs/scroll-margin
	       */
	      'scroll-mt': [{
	        'scroll-mt': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Margin Right
	       * @see https://tailwindcss.com/docs/scroll-margin
	       */
	      'scroll-mr': [{
	        'scroll-mr': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Margin Bottom
	       * @see https://tailwindcss.com/docs/scroll-margin
	       */
	      'scroll-mb': [{
	        'scroll-mb': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Margin Left
	       * @see https://tailwindcss.com/docs/scroll-margin
	       */
	      'scroll-ml': [{
	        'scroll-ml': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Padding
	       * @see https://tailwindcss.com/docs/scroll-padding
	       */
	      'scroll-p': [{
	        'scroll-p': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Padding X
	       * @see https://tailwindcss.com/docs/scroll-padding
	       */
	      'scroll-px': [{
	        'scroll-px': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Padding Y
	       * @see https://tailwindcss.com/docs/scroll-padding
	       */
	      'scroll-py': [{
	        'scroll-py': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Padding Start
	       * @see https://tailwindcss.com/docs/scroll-padding
	       */
	      'scroll-ps': [{
	        'scroll-ps': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Padding End
	       * @see https://tailwindcss.com/docs/scroll-padding
	       */
	      'scroll-pe': [{
	        'scroll-pe': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Padding Top
	       * @see https://tailwindcss.com/docs/scroll-padding
	       */
	      'scroll-pt': [{
	        'scroll-pt': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Padding Right
	       * @see https://tailwindcss.com/docs/scroll-padding
	       */
	      'scroll-pr': [{
	        'scroll-pr': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Padding Bottom
	       * @see https://tailwindcss.com/docs/scroll-padding
	       */
	      'scroll-pb': [{
	        'scroll-pb': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Padding Left
	       * @see https://tailwindcss.com/docs/scroll-padding
	       */
	      'scroll-pl': [{
	        'scroll-pl': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Snap Align
	       * @see https://tailwindcss.com/docs/scroll-snap-align
	       */
	      'snap-align': [{
	        snap: ['start', 'end', 'center', 'align-none']
	      }],
	      /**
	       * Scroll Snap Stop
	       * @see https://tailwindcss.com/docs/scroll-snap-stop
	       */
	      'snap-stop': [{
	        snap: ['normal', 'always']
	      }],
	      /**
	       * Scroll Snap Type
	       * @see https://tailwindcss.com/docs/scroll-snap-type
	       */
	      'snap-type': [{
	        snap: ['none', 'x', 'y', 'both']
	      }],
	      /**
	       * Scroll Snap Type Strictness
	       * @see https://tailwindcss.com/docs/scroll-snap-type
	       */
	      'snap-strictness': [{
	        snap: ['mandatory', 'proximity']
	      }],
	      /**
	       * Touch Action
	       * @see https://tailwindcss.com/docs/touch-action
	       */
	      touch: [{
	        touch: ['auto', 'none', 'manipulation']
	      }],
	      /**
	       * Touch Action X
	       * @see https://tailwindcss.com/docs/touch-action
	       */
	      'touch-x': [{
	        'touch-pan': ['x', 'left', 'right']
	      }],
	      /**
	       * Touch Action Y
	       * @see https://tailwindcss.com/docs/touch-action
	       */
	      'touch-y': [{
	        'touch-pan': ['y', 'up', 'down']
	      }],
	      /**
	       * Touch Action Pinch Zoom
	       * @see https://tailwindcss.com/docs/touch-action
	       */
	      'touch-pz': ['touch-pinch-zoom'],
	      /**
	       * User Select
	       * @see https://tailwindcss.com/docs/user-select
	       */
	      select: [{
	        select: ['none', 'text', 'all', 'auto']
	      }],
	      /**
	       * Will Change
	       * @see https://tailwindcss.com/docs/will-change
	       */
	      'will-change': [{
	        'will-change': ['auto', 'scroll', 'contents', 'transform', isArbitraryValue$1]
	      }],
	      // SVG
	      /**
	       * Fill
	       * @see https://tailwindcss.com/docs/fill
	       */
	      fill: [{
	        fill: [colors, 'none']
	      }],
	      /**
	       * Stroke Width
	       * @see https://tailwindcss.com/docs/stroke-width
	       */
	      'stroke-w': [{
	        stroke: [isLength$1, isArbitraryLength$1, isArbitraryNumber$1]
	      }],
	      /**
	       * Stroke
	       * @see https://tailwindcss.com/docs/stroke
	       */
	      stroke: [{
	        stroke: [colors, 'none']
	      }],
	      // Accessibility
	      /**
	       * Screen Readers
	       * @see https://tailwindcss.com/docs/screen-readers
	       */
	      sr: ['sr-only', 'not-sr-only'],
	      /**
	       * Forced Color Adjust
	       * @see https://tailwindcss.com/docs/forced-color-adjust
	       */
	      'forced-color-adjust': [{
	        'forced-color-adjust': ['auto', 'none']
	      }]
	    },
	    conflictingClassGroups: {
	      overflow: ['overflow-x', 'overflow-y'],
	      overscroll: ['overscroll-x', 'overscroll-y'],
	      inset: ['inset-x', 'inset-y', 'start', 'end', 'top', 'right', 'bottom', 'left'],
	      'inset-x': ['right', 'left'],
	      'inset-y': ['top', 'bottom'],
	      flex: ['basis', 'grow', 'shrink'],
	      gap: ['gap-x', 'gap-y'],
	      p: ['px', 'py', 'ps', 'pe', 'pt', 'pr', 'pb', 'pl'],
	      px: ['pr', 'pl'],
	      py: ['pt', 'pb'],
	      m: ['mx', 'my', 'ms', 'me', 'mt', 'mr', 'mb', 'ml'],
	      mx: ['mr', 'ml'],
	      my: ['mt', 'mb'],
	      size: ['w', 'h'],
	      'font-size': ['leading'],
	      'fvn-normal': ['fvn-ordinal', 'fvn-slashed-zero', 'fvn-figure', 'fvn-spacing', 'fvn-fraction'],
	      'fvn-ordinal': ['fvn-normal'],
	      'fvn-slashed-zero': ['fvn-normal'],
	      'fvn-figure': ['fvn-normal'],
	      'fvn-spacing': ['fvn-normal'],
	      'fvn-fraction': ['fvn-normal'],
	      'line-clamp': ['display', 'overflow'],
	      rounded: ['rounded-s', 'rounded-e', 'rounded-t', 'rounded-r', 'rounded-b', 'rounded-l', 'rounded-ss', 'rounded-se', 'rounded-ee', 'rounded-es', 'rounded-tl', 'rounded-tr', 'rounded-br', 'rounded-bl'],
	      'rounded-s': ['rounded-ss', 'rounded-es'],
	      'rounded-e': ['rounded-se', 'rounded-ee'],
	      'rounded-t': ['rounded-tl', 'rounded-tr'],
	      'rounded-r': ['rounded-tr', 'rounded-br'],
	      'rounded-b': ['rounded-br', 'rounded-bl'],
	      'rounded-l': ['rounded-tl', 'rounded-bl'],
	      'border-spacing': ['border-spacing-x', 'border-spacing-y'],
	      'border-w': ['border-w-s', 'border-w-e', 'border-w-t', 'border-w-r', 'border-w-b', 'border-w-l'],
	      'border-w-x': ['border-w-r', 'border-w-l'],
	      'border-w-y': ['border-w-t', 'border-w-b'],
	      'border-color': ['border-color-t', 'border-color-r', 'border-color-b', 'border-color-l'],
	      'border-color-x': ['border-color-r', 'border-color-l'],
	      'border-color-y': ['border-color-t', 'border-color-b'],
	      'scroll-m': ['scroll-mx', 'scroll-my', 'scroll-ms', 'scroll-me', 'scroll-mt', 'scroll-mr', 'scroll-mb', 'scroll-ml'],
	      'scroll-mx': ['scroll-mr', 'scroll-ml'],
	      'scroll-my': ['scroll-mt', 'scroll-mb'],
	      'scroll-p': ['scroll-px', 'scroll-py', 'scroll-ps', 'scroll-pe', 'scroll-pt', 'scroll-pr', 'scroll-pb', 'scroll-pl'],
	      'scroll-px': ['scroll-pr', 'scroll-pl'],
	      'scroll-py': ['scroll-pt', 'scroll-pb'],
	      touch: ['touch-x', 'touch-y', 'touch-pz'],
	      'touch-x': ['touch'],
	      'touch-y': ['touch'],
	      'touch-pz': ['touch']
	    },
	    conflictingClassGroupModifiers: {
	      'font-size': ['leading']
	    }
	  };
	}
	const twMerge$1 = /*#__PURE__*/createTailwindMerge$1(getDefaultConfig$1);

	/*
	Adapted from https://github.com/mattdesl
	Distributed under MIT License https://github.com/mattdesl/eases/blob/master/LICENSE.md
	*/

	/**
	 * https://svelte.dev/docs/svelte-easing
	 * @param {number} t
	 * @returns {number}
	 */
	function cubicOut(t) {
		const f = t - 1.0;
		return f * f * f + 1.0;
	}

	function cn(...inputs) {
	    return twMerge$1(clsx(inputs));
	}

	/* src/lib/components/ui/card/card.svelte generated by Svelte v4.2.10 */
	const file$G = "src/lib/components/ui/card/card.svelte";

	function create_fragment$1d(ctx) {
		let div;
		let div_class_value;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[3].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

		let div_levels = [
			{
				class: div_class_value = cn("rounded-xl border bg-card text-card-foreground shadow", /*className*/ ctx[0])
			},
			/*$$restProps*/ ctx[1]
		];

		let div_data = {};

		for (let i = 0; i < div_levels.length; i += 1) {
			div_data = assign(div_data, div_levels[i]);
		}

		const block = {
			c: function create() {
				div = element("div");
				if (default_slot) default_slot.c();
				set_attributes(div, div_data);
				add_location(div, file$G, 11, 0, 179);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				current = true;

				if (!mounted) {
					dispose = [
						listen_dev(div, "click", /*click_handler*/ ctx[4], false, false, false, false),
						listen_dev(div, "focusin", /*focusin_handler*/ ctx[5], false, false, false, false),
						listen_dev(div, "focusout", /*focusout_handler*/ ctx[6], false, false, false, false),
						listen_dev(div, "mouseenter", /*mouseenter_handler*/ ctx[7], false, false, false, false),
						listen_dev(div, "mouseleave", /*mouseleave_handler*/ ctx[8], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[2],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
							null
						);
					}
				}

				set_attributes(div, div_data = get_spread_update(div_levels, [
					(!current || dirty & /*className*/ 1 && div_class_value !== (div_class_value = cn("rounded-xl border bg-card text-card-foreground shadow", /*className*/ ctx[0]))) && { class: div_class_value },
					dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]
				]));
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (default_slot) default_slot.d(detaching);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$1d.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$1d($$self, $$props, $$invalidate) {
		const omit_props_names = ["class"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Card', slots, ['default']);
		let { class: className = undefined } = $$props;

		function click_handler(event) {
			bubble.call(this, $$self, event);
		}

		function focusin_handler(event) {
			bubble.call(this, $$self, event);
		}

		function focusout_handler(event) {
			bubble.call(this, $$self, event);
		}

		function mouseenter_handler(event) {
			bubble.call(this, $$self, event);
		}

		function mouseleave_handler(event) {
			bubble.call(this, $$self, event);
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
			if ('$$scope' in $$new_props) $$invalidate(2, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({ cn, className });

		$$self.$inject_state = $$new_props => {
			if ('className' in $$props) $$invalidate(0, className = $$new_props.className);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			className,
			$$restProps,
			$$scope,
			slots,
			click_handler,
			focusin_handler,
			focusout_handler,
			mouseenter_handler,
			mouseleave_handler
		];
	}

	let Card$1 = class Card extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$1d, create_fragment$1d, safe_not_equal, { class: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Card",
				options,
				id: create_fragment$1d.name
			});
		}

		get class() {
			throw new Error("<Card>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Card>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	};

	/* src/lib/components/ui/card/card-content.svelte generated by Svelte v4.2.10 */
	const file$F = "src/lib/components/ui/card/card-content.svelte";

	function create_fragment$1c(ctx) {
		let div;
		let div_class_value;
		let current;
		const default_slot_template = /*#slots*/ ctx[3].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

		let div_levels = [
			{
				class: div_class_value = cn("p-4 pt-0", /*className*/ ctx[0])
			},
			/*$$restProps*/ ctx[1]
		];

		let div_data = {};

		for (let i = 0; i < div_levels.length; i += 1) {
			div_data = assign(div_data, div_levels[i]);
		}

		const block = {
			c: function create() {
				div = element("div");
				if (default_slot) default_slot.c();
				set_attributes(div, div_data);
				add_location(div, file$F, 10, 0, 120);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[2],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
							null
						);
					}
				}

				set_attributes(div, div_data = get_spread_update(div_levels, [
					(!current || dirty & /*className*/ 1 && div_class_value !== (div_class_value = cn("p-4 pt-0", /*className*/ ctx[0]))) && { class: div_class_value },
					dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]
				]));
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$1c.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$1c($$self, $$props, $$invalidate) {
		const omit_props_names = ["class"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Card_content', slots, ['default']);
		let { class: className = undefined } = $$props;

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
			if ('$$scope' in $$new_props) $$invalidate(2, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({ cn, className });

		$$self.$inject_state = $$new_props => {
			if ('className' in $$props) $$invalidate(0, className = $$new_props.className);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [className, $$restProps, $$scope, slots];
	}

	class Card_content extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$1c, create_fragment$1c, safe_not_equal, { class: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Card_content",
				options,
				id: create_fragment$1c.name
			});
		}

		get class() {
			throw new Error("<Card_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Card_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/lib/components/ui/card/card-description.svelte generated by Svelte v4.2.10 */
	const file$E = "src/lib/components/ui/card/card-description.svelte";

	function create_fragment$1b(ctx) {
		let p;
		let p_class_value;
		let current;
		const default_slot_template = /*#slots*/ ctx[3].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

		let p_levels = [
			{
				class: p_class_value = cn("text-sm text-muted-foreground", /*className*/ ctx[0])
			},
			/*$$restProps*/ ctx[1]
		];

		let p_data = {};

		for (let i = 0; i < p_levels.length; i += 1) {
			p_data = assign(p_data, p_levels[i]);
		}

		const block = {
			c: function create() {
				p = element("p");
				if (default_slot) default_slot.c();
				set_attributes(p, p_data);
				add_location(p, file$E, 10, 0, 120);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, p, anchor);

				if (default_slot) {
					default_slot.m(p, null);
				}

				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[2],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
							null
						);
					}
				}

				set_attributes(p, p_data = get_spread_update(p_levels, [
					(!current || dirty & /*className*/ 1 && p_class_value !== (p_class_value = cn("text-sm text-muted-foreground", /*className*/ ctx[0]))) && { class: p_class_value },
					dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]
				]));
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(p);
				}

				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$1b.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$1b($$self, $$props, $$invalidate) {
		const omit_props_names = ["class"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Card_description', slots, ['default']);
		let { class: className = undefined } = $$props;

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
			if ('$$scope' in $$new_props) $$invalidate(2, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({ cn, className });

		$$self.$inject_state = $$new_props => {
			if ('className' in $$props) $$invalidate(0, className = $$new_props.className);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [className, $$restProps, $$scope, slots];
	}

	class Card_description extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$1b, create_fragment$1b, safe_not_equal, { class: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Card_description",
				options,
				id: create_fragment$1b.name
			});
		}

		get class() {
			throw new Error("<Card_description>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Card_description>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/lib/components/ui/card/card-footer.svelte generated by Svelte v4.2.10 */
	const file$D = "src/lib/components/ui/card/card-footer.svelte";

	function create_fragment$1a(ctx) {
		let div;
		let div_class_value;
		let current;
		const default_slot_template = /*#slots*/ ctx[3].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

		let div_levels = [
			{
				class: div_class_value = cn("flex items-center p-6 pt-0", /*className*/ ctx[0])
			},
			/*$$restProps*/ ctx[1]
		];

		let div_data = {};

		for (let i = 0; i < div_levels.length; i += 1) {
			div_data = assign(div_data, div_levels[i]);
		}

		const block = {
			c: function create() {
				div = element("div");
				if (default_slot) default_slot.c();
				set_attributes(div, div_data);
				add_location(div, file$D, 10, 0, 120);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[2],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
							null
						);
					}
				}

				set_attributes(div, div_data = get_spread_update(div_levels, [
					(!current || dirty & /*className*/ 1 && div_class_value !== (div_class_value = cn("flex items-center p-6 pt-0", /*className*/ ctx[0]))) && { class: div_class_value },
					dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]
				]));
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$1a.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$1a($$self, $$props, $$invalidate) {
		const omit_props_names = ["class"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Card_footer', slots, ['default']);
		let { class: className = undefined } = $$props;

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
			if ('$$scope' in $$new_props) $$invalidate(2, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({ cn, className });

		$$self.$inject_state = $$new_props => {
			if ('className' in $$props) $$invalidate(0, className = $$new_props.className);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [className, $$restProps, $$scope, slots];
	}

	class Card_footer extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$1a, create_fragment$1a, safe_not_equal, { class: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Card_footer",
				options,
				id: create_fragment$1a.name
			});
		}

		get class() {
			throw new Error("<Card_footer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Card_footer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/lib/components/ui/card/card-header.svelte generated by Svelte v4.2.10 */
	const file$C = "src/lib/components/ui/card/card-header.svelte";

	function create_fragment$19(ctx) {
		let div;
		let div_class_value;
		let current;
		const default_slot_template = /*#slots*/ ctx[3].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

		let div_levels = [
			{
				class: div_class_value = cn("flex flex-col space-y-1.5 p-6", /*className*/ ctx[0])
			},
			/*$$restProps*/ ctx[1]
		];

		let div_data = {};

		for (let i = 0; i < div_levels.length; i += 1) {
			div_data = assign(div_data, div_levels[i]);
		}

		const block = {
			c: function create() {
				div = element("div");
				if (default_slot) default_slot.c();
				set_attributes(div, div_data);
				add_location(div, file$C, 10, 0, 120);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[2],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
							null
						);
					}
				}

				set_attributes(div, div_data = get_spread_update(div_levels, [
					(!current || dirty & /*className*/ 1 && div_class_value !== (div_class_value = cn("flex flex-col space-y-1.5 p-6", /*className*/ ctx[0]))) && { class: div_class_value },
					dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]
				]));
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$19.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$19($$self, $$props, $$invalidate) {
		const omit_props_names = ["class"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Card_header', slots, ['default']);
		let { class: className = undefined } = $$props;

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
			if ('$$scope' in $$new_props) $$invalidate(2, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({ cn, className });

		$$self.$inject_state = $$new_props => {
			if ('className' in $$props) $$invalidate(0, className = $$new_props.className);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [className, $$restProps, $$scope, slots];
	}

	class Card_header extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$19, create_fragment$19, safe_not_equal, { class: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Card_header",
				options,
				id: create_fragment$19.name
			});
		}

		get class() {
			throw new Error("<Card_header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Card_header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/lib/components/ui/card/card-title.svelte generated by Svelte v4.2.10 */
	const file$B = "src/lib/components/ui/card/card-title.svelte";

	// (7:0) <svelte:element  this={tag}  class={cn("font-semibold leading-none tracking-tight", className)}  {...$$restProps} >
	function create_dynamic_element$1(ctx) {
		let svelte_element;
		let svelte_element_class_value;
		let current;
		const default_slot_template = /*#slots*/ ctx[4].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

		let svelte_element_levels = [
			{
				class: svelte_element_class_value = cn("font-semibold leading-none tracking-tight", /*className*/ ctx[0])
			},
			/*$$restProps*/ ctx[2]
		];

		let svelte_element_data = {};

		for (let i = 0; i < svelte_element_levels.length; i += 1) {
			svelte_element_data = assign(svelte_element_data, svelte_element_levels[i]);
		}

		const block = {
			c: function create() {
				svelte_element = element(/*tag*/ ctx[1]);
				if (default_slot) default_slot.c();
				set_dynamic_element_data(/*tag*/ ctx[1])(svelte_element, svelte_element_data);
				add_location(svelte_element, file$B, 14, 0, 143);
			},
			m: function mount(target, anchor) {
				insert_dev(target, svelte_element, anchor);

				if (default_slot) {
					default_slot.m(svelte_element, null);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[3],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
							null
						);
					}
				}

				set_dynamic_element_data(/*tag*/ ctx[1])(svelte_element, svelte_element_data = get_spread_update(svelte_element_levels, [
					(!current || dirty & /*className*/ 1 && svelte_element_class_value !== (svelte_element_class_value = cn("font-semibold leading-none tracking-tight", /*className*/ ctx[0]))) && { class: svelte_element_class_value },
					dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
				]));
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(svelte_element);
				}

				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_dynamic_element$1.name,
			type: "child_dynamic_element",
			source: "(7:0) <svelte:element  this={tag}  class={cn(\\\"font-semibold leading-none tracking-tight\\\", className)}  {...$$restProps} >",
			ctx
		});

		return block;
	}

	function create_fragment$18(ctx) {
		let previous_tag = /*tag*/ ctx[1];
		let svelte_element_anchor;
		let current;
		validate_dynamic_element(/*tag*/ ctx[1]);
		validate_void_dynamic_element(/*tag*/ ctx[1]);
		let svelte_element = /*tag*/ ctx[1] && create_dynamic_element$1(ctx);

		const block = {
			c: function create() {
				if (svelte_element) svelte_element.c();
				svelte_element_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (svelte_element) svelte_element.m(target, anchor);
				insert_dev(target, svelte_element_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (/*tag*/ ctx[1]) {
					if (!previous_tag) {
						svelte_element = create_dynamic_element$1(ctx);
						previous_tag = /*tag*/ ctx[1];
						svelte_element.c();
						svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
					} else if (safe_not_equal(previous_tag, /*tag*/ ctx[1])) {
						svelte_element.d(1);
						validate_dynamic_element(/*tag*/ ctx[1]);
						validate_void_dynamic_element(/*tag*/ ctx[1]);
						svelte_element = create_dynamic_element$1(ctx);
						previous_tag = /*tag*/ ctx[1];
						svelte_element.c();
						svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
					} else {
						svelte_element.p(ctx, dirty);
					}
				} else if (previous_tag) {
					svelte_element.d(1);
					svelte_element = null;
					previous_tag = /*tag*/ ctx[1];
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(svelte_element, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(svelte_element, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(svelte_element_anchor);
				}

				if (svelte_element) svelte_element.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$18.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$18($$self, $$props, $$invalidate) {
		const omit_props_names = ["class","tag"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Card_title', slots, ['default']);
		let { class: className = undefined } = $$props;
		let { tag = "h3" } = $$props;

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
			if ('tag' in $$new_props) $$invalidate(1, tag = $$new_props.tag);
			if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({ cn, className, tag });

		$$self.$inject_state = $$new_props => {
			if ('className' in $$props) $$invalidate(0, className = $$new_props.className);
			if ('tag' in $$props) $$invalidate(1, tag = $$new_props.tag);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [className, tag, $$restProps, $$scope, slots];
	}

	class Card_title extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$18, create_fragment$18, safe_not_equal, { class: 0, tag: 1 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Card_title",
				options,
				id: create_fragment$18.name
			});
		}

		get class() {
			throw new Error("<Card_title>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Card_title>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get tag() {
			throw new Error("<Card_title>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set tag(value) {
			throw new Error("<Card_title>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var Card = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Card: Card$1,
		CardContent: Card_content,
		CardDescription: Card_description,
		CardFooter: Card_footer,
		CardHeader: Card_header,
		CardTitle: Card_title,
		Content: Card_content,
		Description: Card_description,
		Footer: Card_footer,
		Header: Card_header,
		Root: Card$1,
		Title: Card_title
	});

	/* node_modules/radix-icons-svelte/Icons/BoxModel.svelte generated by Svelte v4.2.10 */
	const file$A = "node_modules/radix-icons-svelte/Icons/BoxModel.svelte";

	function create_fragment$17(ctx) {
		let svg;
		let path;

		let svg_levels = [
			{ width: /*size*/ ctx[1] },
			{ height: /*size*/ ctx[1] },
			{ viewBox: "0 0 15 15" },
			{ fill: "none" },
			{ xmlns: "http://www.w3.org/2000/svg" },
			/*$$restProps*/ ctx[2]
		];

		let svg_data = {};

		for (let i = 0; i < svg_levels.length; i += 1) {
			svg_data = assign(svg_data, svg_levels[i]);
		}

		const block = {
			c: function create() {
				svg = svg_element("svg");
				path = svg_element("path");
				attr_dev(path, "fill-rule", "evenodd");
				attr_dev(path, "clip-rule", "evenodd");
				attr_dev(path, "d", "M1.99998 0.999976C1.44769 0.999976 0.999976 1.44769 0.999976 1.99998V13C0.999976 13.5523 1.44769 14 1.99998 14H13C13.5523 14 14 13.5523 14 13V1.99998C14 1.44769 13.5523 0.999976 13 0.999976H1.99998ZM1.99998 1.99998L13 1.99998V13H1.99998V1.99998ZM4.49996 3.99996C4.22382 3.99996 3.99996 4.22382 3.99996 4.49996V10.5C3.99996 10.7761 4.22382 11 4.49996 11H10.5C10.7761 11 11 10.7761 11 10.5V4.49996C11 4.22382 10.7761 3.99996 10.5 3.99996H4.49996ZM4.99996 9.99996V4.99996H9.99996V9.99996H4.99996Z");
				attr_dev(path, "fill", /*color*/ ctx[0]);
				add_location(path, file$A, 13, 1, 204);
				set_svg_attributes(svg, svg_data);
				add_location(svg, file$A, 5, 0, 79);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, svg, anchor);
				append_dev(svg, path);
			},
			p: function update(ctx, [dirty]) {
				if (dirty & /*color*/ 1) {
					attr_dev(path, "fill", /*color*/ ctx[0]);
				}

				set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
					dirty & /*size*/ 2 && { width: /*size*/ ctx[1] },
					dirty & /*size*/ 2 && { height: /*size*/ ctx[1] },
					{ viewBox: "0 0 15 15" },
					{ fill: "none" },
					{ xmlns: "http://www.w3.org/2000/svg" },
					dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
				]));
			},
			i: noop$3,
			o: noop$3,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(svg);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$17.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$17($$self, $$props, $$invalidate) {
		const omit_props_names = ["color","size"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('BoxModel', slots, []);
		let { color = 'currentColor' } = $$props;
		let { size = 15 } = $$props;

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('color' in $$new_props) $$invalidate(0, color = $$new_props.color);
			if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
		};

		$$self.$capture_state = () => ({ color, size });

		$$self.$inject_state = $$new_props => {
			if ('color' in $$props) $$invalidate(0, color = $$new_props.color);
			if ('size' in $$props) $$invalidate(1, size = $$new_props.size);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [color, size, $$restProps];
	}

	class BoxModel extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$17, create_fragment$17, safe_not_equal, { color: 0, size: 1 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "BoxModel",
				options,
				id: create_fragment$17.name
			});
		}

		get color() {
			throw new Error("<BoxModel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set color(value) {
			throw new Error("<BoxModel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get size() {
			throw new Error("<BoxModel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set size(value) {
			throw new Error("<BoxModel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var BoxModel$1 = BoxModel;

	/* node_modules/radix-icons-svelte/Icons/ChevronDown.svelte generated by Svelte v4.2.10 */
	const file$z = "node_modules/radix-icons-svelte/Icons/ChevronDown.svelte";

	function create_fragment$16(ctx) {
		let svg;
		let path;

		let svg_levels = [
			{ width: /*size*/ ctx[1] },
			{ height: /*size*/ ctx[1] },
			{ viewBox: "0 0 15 15" },
			{ fill: "none" },
			{ xmlns: "http://www.w3.org/2000/svg" },
			/*$$restProps*/ ctx[2]
		];

		let svg_data = {};

		for (let i = 0; i < svg_levels.length; i += 1) {
			svg_data = assign(svg_data, svg_levels[i]);
		}

		const block = {
			c: function create() {
				svg = svg_element("svg");
				path = svg_element("path");
				attr_dev(path, "fill-rule", "evenodd");
				attr_dev(path, "clip-rule", "evenodd");
				attr_dev(path, "d", "M3.13523 6.15803C3.3241 5.95657 3.64052 5.94637 3.84197 6.13523L7.5 9.56464L11.158 6.13523C11.3595 5.94637 11.6759 5.95657 11.8648 6.15803C12.0536 6.35949 12.0434 6.67591 11.842 6.86477L7.84197 10.6148C7.64964 10.7951 7.35036 10.7951 7.15803 10.6148L3.15803 6.86477C2.95657 6.67591 2.94637 6.35949 3.13523 6.15803Z");
				attr_dev(path, "fill", /*color*/ ctx[0]);
				add_location(path, file$z, 13, 1, 204);
				set_svg_attributes(svg, svg_data);
				add_location(svg, file$z, 5, 0, 79);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, svg, anchor);
				append_dev(svg, path);
			},
			p: function update(ctx, [dirty]) {
				if (dirty & /*color*/ 1) {
					attr_dev(path, "fill", /*color*/ ctx[0]);
				}

				set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
					dirty & /*size*/ 2 && { width: /*size*/ ctx[1] },
					dirty & /*size*/ 2 && { height: /*size*/ ctx[1] },
					{ viewBox: "0 0 15 15" },
					{ fill: "none" },
					{ xmlns: "http://www.w3.org/2000/svg" },
					dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
				]));
			},
			i: noop$3,
			o: noop$3,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(svg);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$16.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$16($$self, $$props, $$invalidate) {
		const omit_props_names = ["color","size"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('ChevronDown', slots, []);
		let { color = 'currentColor' } = $$props;
		let { size = 15 } = $$props;

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('color' in $$new_props) $$invalidate(0, color = $$new_props.color);
			if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
		};

		$$self.$capture_state = () => ({ color, size });

		$$self.$inject_state = $$new_props => {
			if ('color' in $$props) $$invalidate(0, color = $$new_props.color);
			if ('size' in $$props) $$invalidate(1, size = $$new_props.size);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [color, size, $$restProps];
	}

	class ChevronDown extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$16, create_fragment$16, safe_not_equal, { color: 0, size: 1 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "ChevronDown",
				options,
				id: create_fragment$16.name
			});
		}

		get color() {
			throw new Error("<ChevronDown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set color(value) {
			throw new Error("<ChevronDown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get size() {
			throw new Error("<ChevronDown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set size(value) {
			throw new Error("<ChevronDown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var ChevronDown$1 = ChevronDown;

	/* node_modules/radix-icons-svelte/Icons/Component1.svelte generated by Svelte v4.2.10 */
	const file$y = "node_modules/radix-icons-svelte/Icons/Component1.svelte";

	function create_fragment$15(ctx) {
		let svg;
		let path;

		let svg_levels = [
			{ width: /*size*/ ctx[1] },
			{ height: /*size*/ ctx[1] },
			{ viewBox: "0 0 15 15" },
			{ fill: "none" },
			{ xmlns: "http://www.w3.org/2000/svg" },
			/*$$restProps*/ ctx[2]
		];

		let svg_data = {};

		for (let i = 0; i < svg_levels.length; i += 1) {
			svg_data = assign(svg_data, svg_levels[i]);
		}

		const block = {
			c: function create() {
				svg = svg_element("svg");
				path = svg_element("path");
				attr_dev(path, "fill-rule", "evenodd");
				attr_dev(path, "clip-rule", "evenodd");
				attr_dev(path, "d", "M4.67129 3.14634C4.47603 3.34161 4.47603 3.65819 4.67129 3.85345L7.14616 6.32833C7.34142 6.52359 7.65801 6.52359 7.85327 6.32833L10.3281 3.85345C10.5234 3.65819 10.5234 3.34161 10.3281 3.14634L7.85327 0.671471C7.65801 0.476209 7.34142 0.476209 7.14616 0.671471L4.67129 3.14634ZM7.49971 5.26766L5.73195 3.4999L7.49971 1.73213L9.26748 3.4999L7.49971 5.26766ZM8.67129 7.14634C8.47603 7.34161 8.47603 7.65819 8.67129 7.85345L11.1462 10.3283C11.3414 10.5236 11.658 10.5236 11.8533 10.3283L14.3281 7.85345C14.5234 7.65819 14.5234 7.34161 14.3281 7.14634L11.8533 4.67147C11.658 4.47621 11.3414 4.47621 11.1462 4.67147L8.67129 7.14634ZM11.4997 9.26766L9.73195 7.4999L11.4997 5.73213L13.2675 7.4999L11.4997 9.26766ZM4.67129 11.8535C4.47603 11.6582 4.47603 11.3416 4.67129 11.1463L7.14616 8.67147C7.34142 8.47621 7.65801 8.47621 7.85327 8.67147L10.3281 11.1463C10.5234 11.3416 10.5234 11.6582 10.3281 11.8535L7.85327 14.3283C7.65801 14.5236 7.34142 14.5236 7.14616 14.3283L4.67129 11.8535ZM5.73195 11.4999L7.49971 13.2677L9.26748 11.4999L7.49971 9.73213L5.73195 11.4999ZM0.671288 7.14649C0.476026 7.34175 0.476026 7.65834 0.671288 7.8536L3.14616 10.3285C3.34142 10.5237 3.65801 10.5237 3.85327 10.3285L6.32814 7.8536C6.5234 7.65834 6.5234 7.34175 6.32814 7.14649L3.85327 4.67162C3.65801 4.47636 3.34142 4.47636 3.14616 4.67162L0.671288 7.14649ZM3.49972 9.26781L1.73195 7.50005L3.49972 5.73228L5.26748 7.50005L3.49972 9.26781Z");
				attr_dev(path, "fill", /*color*/ ctx[0]);
				add_location(path, file$y, 13, 1, 204);
				set_svg_attributes(svg, svg_data);
				add_location(svg, file$y, 5, 0, 79);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, svg, anchor);
				append_dev(svg, path);
			},
			p: function update(ctx, [dirty]) {
				if (dirty & /*color*/ 1) {
					attr_dev(path, "fill", /*color*/ ctx[0]);
				}

				set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
					dirty & /*size*/ 2 && { width: /*size*/ ctx[1] },
					dirty & /*size*/ 2 && { height: /*size*/ ctx[1] },
					{ viewBox: "0 0 15 15" },
					{ fill: "none" },
					{ xmlns: "http://www.w3.org/2000/svg" },
					dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
				]));
			},
			i: noop$3,
			o: noop$3,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(svg);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$15.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$15($$self, $$props, $$invalidate) {
		const omit_props_names = ["color","size"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Component1', slots, []);
		let { color = 'currentColor' } = $$props;
		let { size = 15 } = $$props;

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('color' in $$new_props) $$invalidate(0, color = $$new_props.color);
			if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
		};

		$$self.$capture_state = () => ({ color, size });

		$$self.$inject_state = $$new_props => {
			if ('color' in $$props) $$invalidate(0, color = $$new_props.color);
			if ('size' in $$props) $$invalidate(1, size = $$new_props.size);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [color, size, $$restProps];
	}

	class Component1 extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$15, create_fragment$15, safe_not_equal, { color: 0, size: 1 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Component1",
				options,
				id: create_fragment$15.name
			});
		}

		get color() {
			throw new Error("<Component1>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set color(value) {
			throw new Error("<Component1>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get size() {
			throw new Error("<Component1>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set size(value) {
			throw new Error("<Component1>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var Component1$1 = Component1;

	/* node_modules/radix-icons-svelte/Icons/ExternalLink.svelte generated by Svelte v4.2.10 */
	const file$x = "node_modules/radix-icons-svelte/Icons/ExternalLink.svelte";

	function create_fragment$14(ctx) {
		let svg;
		let path;

		let svg_levels = [
			{ width: /*size*/ ctx[1] },
			{ height: /*size*/ ctx[1] },
			{ viewBox: "0 0 15 15" },
			{ fill: "none" },
			{ xmlns: "http://www.w3.org/2000/svg" },
			/*$$restProps*/ ctx[2]
		];

		let svg_data = {};

		for (let i = 0; i < svg_levels.length; i += 1) {
			svg_data = assign(svg_data, svg_levels[i]);
		}

		const block = {
			c: function create() {
				svg = svg_element("svg");
				path = svg_element("path");
				attr_dev(path, "fill-rule", "evenodd");
				attr_dev(path, "clip-rule", "evenodd");
				attr_dev(path, "d", "M3 2C2.44772 2 2 2.44772 2 3V12C2 12.5523 2.44772 13 3 13H12C12.5523 13 13 12.5523 13 12V8.5C13 8.22386 12.7761 8 12.5 8C12.2239 8 12 8.22386 12 8.5V12H3V3L6.5 3C6.77614 3 7 2.77614 7 2.5C7 2.22386 6.77614 2 6.5 2H3ZM12.8536 2.14645C12.9015 2.19439 12.9377 2.24964 12.9621 2.30861C12.9861 2.36669 12.9996 2.4303 13 2.497L13 2.5V2.50049V5.5C13 5.77614 12.7761 6 12.5 6C12.2239 6 12 5.77614 12 5.5V3.70711L6.85355 8.85355C6.65829 9.04882 6.34171 9.04882 6.14645 8.85355C5.95118 8.65829 5.95118 8.34171 6.14645 8.14645L11.2929 3H9.5C9.22386 3 9 2.77614 9 2.5C9 2.22386 9.22386 2 9.5 2H12.4999H12.5C12.5678 2 12.6324 2.01349 12.6914 2.03794C12.7504 2.06234 12.8056 2.09851 12.8536 2.14645Z");
				attr_dev(path, "fill", /*color*/ ctx[0]);
				add_location(path, file$x, 13, 1, 204);
				set_svg_attributes(svg, svg_data);
				add_location(svg, file$x, 5, 0, 79);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, svg, anchor);
				append_dev(svg, path);
			},
			p: function update(ctx, [dirty]) {
				if (dirty & /*color*/ 1) {
					attr_dev(path, "fill", /*color*/ ctx[0]);
				}

				set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
					dirty & /*size*/ 2 && { width: /*size*/ ctx[1] },
					dirty & /*size*/ 2 && { height: /*size*/ ctx[1] },
					{ viewBox: "0 0 15 15" },
					{ fill: "none" },
					{ xmlns: "http://www.w3.org/2000/svg" },
					dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
				]));
			},
			i: noop$3,
			o: noop$3,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(svg);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$14.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$14($$self, $$props, $$invalidate) {
		const omit_props_names = ["color","size"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('ExternalLink', slots, []);
		let { color = 'currentColor' } = $$props;
		let { size = 15 } = $$props;

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('color' in $$new_props) $$invalidate(0, color = $$new_props.color);
			if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
		};

		$$self.$capture_state = () => ({ color, size });

		$$self.$inject_state = $$new_props => {
			if ('color' in $$props) $$invalidate(0, color = $$new_props.color);
			if ('size' in $$props) $$invalidate(1, size = $$new_props.size);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [color, size, $$restProps];
	}

	class ExternalLink extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$14, create_fragment$14, safe_not_equal, { color: 0, size: 1 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "ExternalLink",
				options,
				id: create_fragment$14.name
			});
		}

		get color() {
			throw new Error("<ExternalLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set color(value) {
			throw new Error("<ExternalLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get size() {
			throw new Error("<ExternalLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set size(value) {
			throw new Error("<ExternalLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var ExternalLink$1 = ExternalLink;

	/* node_modules/radix-icons-svelte/Icons/Pencil1.svelte generated by Svelte v4.2.10 */
	const file$w = "node_modules/radix-icons-svelte/Icons/Pencil1.svelte";

	function create_fragment$13(ctx) {
		let svg;
		let path;

		let svg_levels = [
			{ width: /*size*/ ctx[1] },
			{ height: /*size*/ ctx[1] },
			{ viewBox: "0 0 15 15" },
			{ fill: "none" },
			{ xmlns: "http://www.w3.org/2000/svg" },
			/*$$restProps*/ ctx[2]
		];

		let svg_data = {};

		for (let i = 0; i < svg_levels.length; i += 1) {
			svg_data = assign(svg_data, svg_levels[i]);
		}

		const block = {
			c: function create() {
				svg = svg_element("svg");
				path = svg_element("path");
				attr_dev(path, "fill-rule", "evenodd");
				attr_dev(path, "clip-rule", "evenodd");
				attr_dev(path, "d", "M11.8536 1.14645C11.6583 0.951184 11.3417 0.951184 11.1465 1.14645L3.71455 8.57836C3.62459 8.66832 3.55263 8.77461 3.50251 8.89155L2.04044 12.303C1.9599 12.491 2.00189 12.709 2.14646 12.8536C2.29103 12.9981 2.50905 13.0401 2.69697 12.9596L6.10847 11.4975C6.2254 11.4474 6.3317 11.3754 6.42166 11.2855L13.8536 3.85355C14.0488 3.65829 14.0488 3.34171 13.8536 3.14645L11.8536 1.14645ZM4.42166 9.28547L11.5 2.20711L12.7929 3.5L5.71455 10.5784L4.21924 11.2192L3.78081 10.7808L4.42166 9.28547Z");
				attr_dev(path, "fill", /*color*/ ctx[0]);
				add_location(path, file$w, 13, 1, 204);
				set_svg_attributes(svg, svg_data);
				add_location(svg, file$w, 5, 0, 79);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, svg, anchor);
				append_dev(svg, path);
			},
			p: function update(ctx, [dirty]) {
				if (dirty & /*color*/ 1) {
					attr_dev(path, "fill", /*color*/ ctx[0]);
				}

				set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
					dirty & /*size*/ 2 && { width: /*size*/ ctx[1] },
					dirty & /*size*/ 2 && { height: /*size*/ ctx[1] },
					{ viewBox: "0 0 15 15" },
					{ fill: "none" },
					{ xmlns: "http://www.w3.org/2000/svg" },
					dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
				]));
			},
			i: noop$3,
			o: noop$3,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(svg);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$13.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$13($$self, $$props, $$invalidate) {
		const omit_props_names = ["color","size"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Pencil1', slots, []);
		let { color = 'currentColor' } = $$props;
		let { size = 15 } = $$props;

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('color' in $$new_props) $$invalidate(0, color = $$new_props.color);
			if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
		};

		$$self.$capture_state = () => ({ color, size });

		$$self.$inject_state = $$new_props => {
			if ('color' in $$props) $$invalidate(0, color = $$new_props.color);
			if ('size' in $$props) $$invalidate(1, size = $$new_props.size);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [color, size, $$restProps];
	}

	class Pencil1 extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$13, create_fragment$13, safe_not_equal, { color: 0, size: 1 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Pencil1",
				options,
				id: create_fragment$13.name
			});
		}

		get color() {
			throw new Error("<Pencil1>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set color(value) {
			throw new Error("<Pencil1>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get size() {
			throw new Error("<Pencil1>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set size(value) {
			throw new Error("<Pencil1>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var Pencil1$1 = Pencil1;

	/* node_modules/radix-icons-svelte/Icons/Stop.svelte generated by Svelte v4.2.10 */
	const file$v = "node_modules/radix-icons-svelte/Icons/Stop.svelte";

	function create_fragment$12(ctx) {
		let svg;
		let path;

		let svg_levels = [
			{ width: /*size*/ ctx[1] },
			{ height: /*size*/ ctx[1] },
			{ viewBox: "0 0 15 15" },
			{ fill: "none" },
			{ xmlns: "http://www.w3.org/2000/svg" },
			/*$$restProps*/ ctx[2]
		];

		let svg_data = {};

		for (let i = 0; i < svg_levels.length; i += 1) {
			svg_data = assign(svg_data, svg_levels[i]);
		}

		const block = {
			c: function create() {
				svg = svg_element("svg");
				path = svg_element("path");
				attr_dev(path, "fill-rule", "evenodd");
				attr_dev(path, "clip-rule", "evenodd");
				attr_dev(path, "d", "M2 3C2 2.44772 2.44772 2 3 2H12C12.5523 2 13 2.44772 13 3V12C13 12.5523 12.5523 13 12 13H3C2.44772 13 2 12.5523 2 12V3ZM12 3H3V12H12V3Z");
				attr_dev(path, "fill", /*color*/ ctx[0]);
				add_location(path, file$v, 13, 1, 204);
				set_svg_attributes(svg, svg_data);
				add_location(svg, file$v, 5, 0, 79);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, svg, anchor);
				append_dev(svg, path);
			},
			p: function update(ctx, [dirty]) {
				if (dirty & /*color*/ 1) {
					attr_dev(path, "fill", /*color*/ ctx[0]);
				}

				set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
					dirty & /*size*/ 2 && { width: /*size*/ ctx[1] },
					dirty & /*size*/ 2 && { height: /*size*/ ctx[1] },
					{ viewBox: "0 0 15 15" },
					{ fill: "none" },
					{ xmlns: "http://www.w3.org/2000/svg" },
					dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
				]));
			},
			i: noop$3,
			o: noop$3,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(svg);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$12.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$12($$self, $$props, $$invalidate) {
		const omit_props_names = ["color","size"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Stop', slots, []);
		let { color = 'currentColor' } = $$props;
		let { size = 15 } = $$props;

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('color' in $$new_props) $$invalidate(0, color = $$new_props.color);
			if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
		};

		$$self.$capture_state = () => ({ color, size });

		$$self.$inject_state = $$new_props => {
			if ('color' in $$props) $$invalidate(0, color = $$new_props.color);
			if ('size' in $$props) $$invalidate(1, size = $$new_props.size);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [color, size, $$restProps];
	}

	class Stop extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$12, create_fragment$12, safe_not_equal, { color: 0, size: 1 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Stop",
				options,
				id: create_fragment$12.name
			});
		}

		get color() {
			throw new Error("<Stop>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set color(value) {
			throw new Error("<Stop>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get size() {
			throw new Error("<Stop>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set size(value) {
			throw new Error("<Stop>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var Stop$1 = Stop;

	/* node_modules/radix-icons-svelte/Icons/Text.svelte generated by Svelte v4.2.10 */
	const file$u = "node_modules/radix-icons-svelte/Icons/Text.svelte";

	function create_fragment$11(ctx) {
		let svg;
		let path;

		let svg_levels = [
			{ width: /*size*/ ctx[1] },
			{ height: /*size*/ ctx[1] },
			{ viewBox: "0 0 15 15" },
			{ fill: "none" },
			{ xmlns: "http://www.w3.org/2000/svg" },
			/*$$restProps*/ ctx[2]
		];

		let svg_data = {};

		for (let i = 0; i < svg_levels.length; i += 1) {
			svg_data = assign(svg_data, svg_levels[i]);
		}

		const block = {
			c: function create() {
				svg = svg_element("svg");
				path = svg_element("path");
				attr_dev(path, "fill-rule", "evenodd");
				attr_dev(path, "clip-rule", "evenodd");
				attr_dev(path, "d", "M3.94993 2.95002L3.94993 4.49998C3.94993 4.74851 3.74845 4.94998 3.49993 4.94998C3.2514 4.94998 3.04993 4.74851 3.04993 4.49998V2.50004C3.04993 2.45246 3.05731 2.40661 3.07099 2.36357C3.12878 2.18175 3.29897 2.05002 3.49993 2.05002H11.4999C11.6553 2.05002 11.7922 2.12872 11.8731 2.24842C11.9216 2.32024 11.9499 2.40682 11.9499 2.50002L11.9499 2.50004V4.49998C11.9499 4.74851 11.7485 4.94998 11.4999 4.94998C11.2514 4.94998 11.0499 4.74851 11.0499 4.49998V2.95002H8.04993V12.05H9.25428C9.50281 12.05 9.70428 12.2515 9.70428 12.5C9.70428 12.7486 9.50281 12.95 9.25428 12.95H5.75428C5.50575 12.95 5.30428 12.7486 5.30428 12.5C5.30428 12.2515 5.50575 12.05 5.75428 12.05H6.94993V2.95002H3.94993Z");
				attr_dev(path, "fill", /*color*/ ctx[0]);
				add_location(path, file$u, 13, 1, 204);
				set_svg_attributes(svg, svg_data);
				add_location(svg, file$u, 5, 0, 79);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, svg, anchor);
				append_dev(svg, path);
			},
			p: function update(ctx, [dirty]) {
				if (dirty & /*color*/ 1) {
					attr_dev(path, "fill", /*color*/ ctx[0]);
				}

				set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
					dirty & /*size*/ 2 && { width: /*size*/ ctx[1] },
					dirty & /*size*/ 2 && { height: /*size*/ ctx[1] },
					{ viewBox: "0 0 15 15" },
					{ fill: "none" },
					{ xmlns: "http://www.w3.org/2000/svg" },
					dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
				]));
			},
			i: noop$3,
			o: noop$3,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(svg);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$11.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$11($$self, $$props, $$invalidate) {
		const omit_props_names = ["color","size"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Text', slots, []);
		let { color = 'currentColor' } = $$props;
		let { size = 15 } = $$props;

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('color' in $$new_props) $$invalidate(0, color = $$new_props.color);
			if ('size' in $$new_props) $$invalidate(1, size = $$new_props.size);
		};

		$$self.$capture_state = () => ({ color, size });

		$$self.$inject_state = $$new_props => {
			if ('color' in $$props) $$invalidate(0, color = $$new_props.color);
			if ('size' in $$props) $$invalidate(1, size = $$new_props.size);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [color, size, $$restProps];
	}

	class Text extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$11, create_fragment$11, safe_not_equal, { color: 0, size: 1 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Text",
				options,
				id: create_fragment$11.name
			});
		}

		get color() {
			throw new Error("<Text>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set color(value) {
			throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get size() {
			throw new Error("<Text>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set size(value) {
			throw new Error("<Text>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var Text$1 = Text;

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	/**
	 * @public
	 */
	var Presence;
	(function (Presence) {
	    Presence[Presence["Entering"] = 0] = "Entering";
	    Presence[Presence["Present"] = 1] = "Present";
	    Presence[Presence["Exiting"] = 2] = "Exiting";
	})(Presence || (Presence = {}));
	/**
	 * @public
	 */
	var VisibilityAction$1;
	(function (VisibilityAction) {
	    VisibilityAction[VisibilityAction["Hide"] = 0] = "Hide";
	    VisibilityAction[VisibilityAction["Show"] = 1] = "Show";
	})(VisibilityAction$1 || (VisibilityAction$1 = {}));

	const fix = ()=>{
	    try{
	        
	        if (!process.env){
	            process.env={};
	        }
	        return true;;
	    }catch(e){}
	    
	    if (!window || (window.process && window.process.env)){
	        return false;
	    }
	    
	    if (!window.process){
	        window.process={};
	    }
	    window.process.env={};
	    return true;    
	};

	const fixed = fix();

	const defaultTimestep = (1 / 60) * 1000;
	const getCurrentTime = typeof performance !== "undefined"
	    ? () => performance.now()
	    : () => Date.now();
	const onNextFrame = typeof window !== "undefined"
	    ? (callback) => window.requestAnimationFrame(callback)
	    : (callback) => setTimeout(() => callback(getCurrentTime()), defaultTimestep);

	function createRenderStep(runNextFrame) {
	    let toRun = [];
	    let toRunNextFrame = [];
	    let numToRun = 0;
	    let isProcessing = false;
	    let flushNextFrame = false;
	    const toKeepAlive = new WeakSet();
	    const step = {
	        schedule: (callback, keepAlive = false, immediate = false) => {
	            const addToCurrentFrame = immediate && isProcessing;
	            const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
	            if (keepAlive)
	                toKeepAlive.add(callback);
	            if (buffer.indexOf(callback) === -1) {
	                buffer.push(callback);
	                if (addToCurrentFrame && isProcessing)
	                    numToRun = toRun.length;
	            }
	            return callback;
	        },
	        cancel: (callback) => {
	            const index = toRunNextFrame.indexOf(callback);
	            if (index !== -1)
	                toRunNextFrame.splice(index, 1);
	            toKeepAlive.delete(callback);
	        },
	        process: (frameData) => {
	            if (isProcessing) {
	                flushNextFrame = true;
	                return;
	            }
	            isProcessing = true;
	            [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
	            toRunNextFrame.length = 0;
	            numToRun = toRun.length;
	            if (numToRun) {
	                for (let i = 0; i < numToRun; i++) {
	                    const callback = toRun[i];
	                    callback(frameData);
	                    if (toKeepAlive.has(callback)) {
	                        step.schedule(callback);
	                        runNextFrame();
	                    }
	                }
	            }
	            isProcessing = false;
	            if (flushNextFrame) {
	                flushNextFrame = false;
	                step.process(frameData);
	            }
	        },
	    };
	    return step;
	}

	const maxElapsed = 40;
	let useDefaultElapsed = true;
	let runNextFrame = false;
	let isProcessing = false;
	const frame = {
	    delta: 0,
	    timestamp: 0,
	};
	const stepsOrder = [
	    "read",
	    "update",
	    "preRender",
	    "render",
	    "postRender",
	];
	const steps$1 = stepsOrder.reduce((acc, key) => {
	    acc[key] = createRenderStep(() => (runNextFrame = true));
	    return acc;
	}, {});
	const sync = stepsOrder.reduce((acc, key) => {
	    const step = steps$1[key];
	    acc[key] = (process, keepAlive = false, immediate = false) => {
	        if (!runNextFrame)
	            startLoop();
	        return step.schedule(process, keepAlive, immediate);
	    };
	    return acc;
	}, {});
	const cancelSync = stepsOrder.reduce((acc, key) => {
	    acc[key] = steps$1[key].cancel;
	    return acc;
	}, {});
	const flushSync = stepsOrder.reduce((acc, key) => {
	    acc[key] = () => steps$1[key].process(frame);
	    return acc;
	}, {});
	const processStep = (stepId) => steps$1[stepId].process(frame);
	const processFrame = (timestamp) => {
	    runNextFrame = false;
	    frame.delta = useDefaultElapsed
	        ? defaultTimestep
	        : Math.max(Math.min(timestamp - frame.timestamp, maxElapsed), 1);
	    frame.timestamp = timestamp;
	    isProcessing = true;
	    stepsOrder.forEach(processStep);
	    isProcessing = false;
	    if (runNextFrame) {
	        useDefaultElapsed = false;
	        onNextFrame(processFrame);
	    }
	};
	const startLoop = () => {
	    runNextFrame = true;
	    useDefaultElapsed = true;
	    if (!isProcessing)
	        onNextFrame(processFrame);
	};
	const getFrameData = () => frame;

	/******************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */
	/* global Reflect, Promise, SuppressedError, Symbol */


	var __assign = function() {
	    __assign = Object.assign || function __assign(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign.apply(this, arguments);
	};

	function __rest(s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	}

	function __read(o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	}

	function __spreadArray(to, from, pack) {
	    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
	        if (ar || !(i in from)) {
	            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
	            ar[i] = from[i];
	        }
	    }
	    return to.concat(ar || Array.prototype.slice.call(from));
	}

	typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
	    var e = new Error(message);
	    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
	};

	var warning = function () { };
	var invariant = function () { };

	const clamp$1 = (min, max, v) => Math.min(Math.max(v, min), max);

	const safeMin = 0.001;
	const minDuration = 0.01;
	const maxDuration = 10.0;
	const minDamping = 0.05;
	const maxDamping = 1;
	function findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1, }) {
	    let envelope;
	    let derivative;
	    warning(duration <= maxDuration * 1000);
	    let dampingRatio = 1 - bounce;
	    dampingRatio = clamp$1(minDamping, maxDamping, dampingRatio);
	    duration = clamp$1(minDuration, maxDuration, duration / 1000);
	    if (dampingRatio < 1) {
	        envelope = (undampedFreq) => {
	            const exponentialDecay = undampedFreq * dampingRatio;
	            const delta = exponentialDecay * duration;
	            const a = exponentialDecay - velocity;
	            const b = calcAngularFreq(undampedFreq, dampingRatio);
	            const c = Math.exp(-delta);
	            return safeMin - (a / b) * c;
	        };
	        derivative = (undampedFreq) => {
	            const exponentialDecay = undampedFreq * dampingRatio;
	            const delta = exponentialDecay * duration;
	            const d = delta * velocity + velocity;
	            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;
	            const f = Math.exp(-delta);
	            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);
	            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;
	            return (factor * ((d - e) * f)) / g;
	        };
	    }
	    else {
	        envelope = (undampedFreq) => {
	            const a = Math.exp(-undampedFreq * duration);
	            const b = (undampedFreq - velocity) * duration + 1;
	            return -safeMin + a * b;
	        };
	        derivative = (undampedFreq) => {
	            const a = Math.exp(-undampedFreq * duration);
	            const b = (velocity - undampedFreq) * (duration * duration);
	            return a * b;
	        };
	    }
	    const initialGuess = 5 / duration;
	    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);
	    duration = duration * 1000;
	    if (isNaN(undampedFreq)) {
	        return {
	            stiffness: 100,
	            damping: 10,
	            duration,
	        };
	    }
	    else {
	        const stiffness = Math.pow(undampedFreq, 2) * mass;
	        return {
	            stiffness,
	            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
	            duration,
	        };
	    }
	}
	const rootIterations = 12;
	function approximateRoot(envelope, derivative, initialGuess) {
	    let result = initialGuess;
	    for (let i = 1; i < rootIterations; i++) {
	        result = result - envelope(result) / derivative(result);
	    }
	    return result;
	}
	function calcAngularFreq(undampedFreq, dampingRatio) {
	    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
	}

	const durationKeys = ["duration", "bounce"];
	const physicsKeys = ["stiffness", "damping", "mass"];
	function isSpringType(options, keys) {
	    return keys.some((key) => options[key] !== undefined);
	}
	function getSpringOptions(options) {
	    let springOptions = Object.assign({ velocity: 0.0, stiffness: 100, damping: 10, mass: 1.0, isResolvedFromDuration: false }, options);
	    if (!isSpringType(options, physicsKeys) &&
	        isSpringType(options, durationKeys)) {
	        const derived = findSpring(options);
	        springOptions = Object.assign(Object.assign(Object.assign({}, springOptions), derived), { velocity: 0.0, mass: 1.0 });
	        springOptions.isResolvedFromDuration = true;
	    }
	    return springOptions;
	}
	function spring(_a) {
	    var { from = 0.0, to = 1.0, restSpeed = 2, restDelta } = _a, options = __rest(_a, ["from", "to", "restSpeed", "restDelta"]);
	    const state = { done: false, value: from };
	    let { stiffness, damping, mass, velocity, duration, isResolvedFromDuration, } = getSpringOptions(options);
	    let resolveSpring = zero;
	    let resolveVelocity = zero;
	    function createSpring() {
	        const initialVelocity = velocity ? -(velocity / 1000) : 0.0;
	        const initialDelta = to - from;
	        const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
	        const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;
	        if (restDelta === undefined) {
	            restDelta = Math.min(Math.abs(to - from) / 100, 0.4);
	        }
	        if (dampingRatio < 1) {
	            const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);
	            resolveSpring = (t) => {
	                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
	                return (to -
	                    envelope *
	                        (((initialVelocity +
	                            dampingRatio * undampedAngularFreq * initialDelta) /
	                            angularFreq) *
	                            Math.sin(angularFreq * t) +
	                            initialDelta * Math.cos(angularFreq * t)));
	            };
	            resolveVelocity = (t) => {
	                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
	                return (dampingRatio *
	                    undampedAngularFreq *
	                    envelope *
	                    ((Math.sin(angularFreq * t) *
	                        (initialVelocity +
	                            dampingRatio *
	                                undampedAngularFreq *
	                                initialDelta)) /
	                        angularFreq +
	                        initialDelta * Math.cos(angularFreq * t)) -
	                    envelope *
	                        (Math.cos(angularFreq * t) *
	                            (initialVelocity +
	                                dampingRatio *
	                                    undampedAngularFreq *
	                                    initialDelta) -
	                            angularFreq *
	                                initialDelta *
	                                Math.sin(angularFreq * t)));
	            };
	        }
	        else if (dampingRatio === 1) {
	            resolveSpring = (t) => to -
	                Math.exp(-undampedAngularFreq * t) *
	                    (initialDelta +
	                        (initialVelocity + undampedAngularFreq * initialDelta) *
	                            t);
	        }
	        else {
	            const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
	            resolveSpring = (t) => {
	                const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
	                const freqForT = Math.min(dampedAngularFreq * t, 300);
	                return (to -
	                    (envelope *
	                        ((initialVelocity +
	                            dampingRatio * undampedAngularFreq * initialDelta) *
	                            Math.sinh(freqForT) +
	                            dampedAngularFreq *
	                                initialDelta *
	                                Math.cosh(freqForT))) /
	                        dampedAngularFreq);
	            };
	        }
	    }
	    createSpring();
	    return {
	        next: (t) => {
	            const current = resolveSpring(t);
	            if (!isResolvedFromDuration) {
	                const currentVelocity = resolveVelocity(t) * 1000;
	                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
	                const isBelowDisplacementThreshold = Math.abs(to - current) <= restDelta;
	                state.done =
	                    isBelowVelocityThreshold && isBelowDisplacementThreshold;
	            }
	            else {
	                state.done = t >= duration;
	            }
	            state.value = state.done ? to : current;
	            return state;
	        },
	        flipTarget: () => {
	            velocity = -velocity;
	            [from, to] = [to, from];
	            createSpring();
	        },
	    };
	}
	spring.needsInterpolation = (a, b) => typeof a === "string" || typeof b === "string";
	const zero = (_t) => 0;

	const progress = (from, to, value) => {
	    const toFromDifference = to - from;
	    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;
	};

	const mix$1 = (from, to, progress) => -progress * from + progress * to + from;

	const clamp = (min, max) => (v) => Math.max(Math.min(v, max), min);
	const sanitize = (v) => (v % 1 ? Number(v.toFixed(5)) : v);
	const floatRegex = /(-)?([\d]*\.?[\d])+/g;
	const colorRegex = /(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi;
	const singleColorRegex = /^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;
	function isString$1(v) {
	    return typeof v === 'string';
	}

	const number = {
	    test: (v) => typeof v === 'number',
	    parse: parseFloat,
	    transform: (v) => v,
	};
	const alpha = Object.assign(Object.assign({}, number), { transform: clamp(0, 1) });
	const scale$1 = Object.assign(Object.assign({}, number), { default: 1 });

	const createUnitType = (unit) => ({
	    test: (v) => isString$1(v) && v.endsWith(unit) && v.split(' ').length === 1,
	    parse: parseFloat,
	    transform: (v) => `${v}${unit}`,
	});
	const degrees = createUnitType('deg');
	const percent = createUnitType('%');
	const px = createUnitType('px');
	const vh = createUnitType('vh');
	const vw = createUnitType('vw');
	const progressPercentage = Object.assign(Object.assign({}, percent), { parse: (v) => percent.parse(v) / 100, transform: (v) => percent.transform(v * 100) });

	const isColorString = (type, testProp) => (v) => {
	    return Boolean((isString$1(v) && singleColorRegex.test(v) && v.startsWith(type)) ||
	        (testProp && Object.prototype.hasOwnProperty.call(v, testProp)));
	};
	const splitColor = (aName, bName, cName) => (v) => {
	    if (!isString$1(v))
	        return v;
	    const [a, b, c, alpha] = v.match(floatRegex);
	    return {
	        [aName]: parseFloat(a),
	        [bName]: parseFloat(b),
	        [cName]: parseFloat(c),
	        alpha: alpha !== undefined ? parseFloat(alpha) : 1,
	    };
	};

	const hsla = {
	    test: isColorString('hsl', 'hue'),
	    parse: splitColor('hue', 'saturation', 'lightness'),
	    transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {
	        return ('hsla(' +
	            Math.round(hue) +
	            ', ' +
	            percent.transform(sanitize(saturation)) +
	            ', ' +
	            percent.transform(sanitize(lightness)) +
	            ', ' +
	            sanitize(alpha.transform(alpha$1)) +
	            ')');
	    },
	};

	const clampRgbUnit = clamp(0, 255);
	const rgbUnit = Object.assign(Object.assign({}, number), { transform: (v) => Math.round(clampRgbUnit(v)) });
	const rgba = {
	    test: isColorString('rgb', 'red'),
	    parse: splitColor('red', 'green', 'blue'),
	    transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => 'rgba(' +
	        rgbUnit.transform(red) +
	        ', ' +
	        rgbUnit.transform(green) +
	        ', ' +
	        rgbUnit.transform(blue) +
	        ', ' +
	        sanitize(alpha.transform(alpha$1)) +
	        ')',
	};

	function parseHex(v) {
	    let r = '';
	    let g = '';
	    let b = '';
	    let a = '';
	    if (v.length > 5) {
	        r = v.substr(1, 2);
	        g = v.substr(3, 2);
	        b = v.substr(5, 2);
	        a = v.substr(7, 2);
	    }
	    else {
	        r = v.substr(1, 1);
	        g = v.substr(2, 1);
	        b = v.substr(3, 1);
	        a = v.substr(4, 1);
	        r += r;
	        g += g;
	        b += b;
	        a += a;
	    }
	    return {
	        red: parseInt(r, 16),
	        green: parseInt(g, 16),
	        blue: parseInt(b, 16),
	        alpha: a ? parseInt(a, 16) / 255 : 1,
	    };
	}
	const hex = {
	    test: isColorString('#'),
	    parse: parseHex,
	    transform: rgba.transform,
	};

	const color = {
	    test: (v) => rgba.test(v) || hex.test(v) || hsla.test(v),
	    parse: (v) => {
	        if (rgba.test(v)) {
	            return rgba.parse(v);
	        }
	        else if (hsla.test(v)) {
	            return hsla.parse(v);
	        }
	        else {
	            return hex.parse(v);
	        }
	    },
	    transform: (v) => {
	        return isString$1(v)
	            ? v
	            : v.hasOwnProperty('red')
	                ? rgba.transform(v)
	                : hsla.transform(v);
	    },
	};

	const colorToken = '${c}';
	const numberToken = '${n}';
	function test(v) {
	    var _a, _b, _c, _d;
	    return (isNaN(v) &&
	        isString$1(v) &&
	        ((_b = (_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) + ((_d = (_c = v.match(colorRegex)) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) > 0);
	}
	function analyse$1(v) {
	    if (typeof v === 'number')
	        v = `${v}`;
	    const values = [];
	    let numColors = 0;
	    const colors = v.match(colorRegex);
	    if (colors) {
	        numColors = colors.length;
	        v = v.replace(colorRegex, colorToken);
	        values.push(...colors.map(color.parse));
	    }
	    const numbers = v.match(floatRegex);
	    if (numbers) {
	        v = v.replace(floatRegex, numberToken);
	        values.push(...numbers.map(number.parse));
	    }
	    return { values, numColors, tokenised: v };
	}
	function parse$2(v) {
	    return analyse$1(v).values;
	}
	function createTransformer(v) {
	    const { values, numColors, tokenised } = analyse$1(v);
	    const numValues = values.length;
	    return (v) => {
	        let output = tokenised;
	        for (let i = 0; i < numValues; i++) {
	            output = output.replace(i < numColors ? colorToken : numberToken, i < numColors ? color.transform(v[i]) : sanitize(v[i]));
	        }
	        return output;
	    };
	}
	const convertNumbersToZero = (v) => typeof v === 'number' ? 0 : v;
	function getAnimatableNone$1(v) {
	    const parsed = parse$2(v);
	    const transformer = createTransformer(v);
	    return transformer(parsed.map(convertNumbersToZero));
	}
	const complex = { test, parse: parse$2, createTransformer, getAnimatableNone: getAnimatableNone$1 };

	const maxDefaults = new Set(['brightness', 'contrast', 'saturate', 'opacity']);
	function applyDefaultFilter(v) {
	    let [name, value] = v.slice(0, -1).split('(');
	    if (name === 'drop-shadow')
	        return v;
	    const [number] = value.match(floatRegex) || [];
	    if (!number)
	        return v;
	    const unit = value.replace(number, '');
	    let defaultValue = maxDefaults.has(name) ? 1 : 0;
	    if (number !== value)
	        defaultValue *= 100;
	    return name + '(' + defaultValue + unit + ')';
	}
	const functionRegex = /([a-z-]*)\(.*?\)/g;
	const filter$2 = Object.assign(Object.assign({}, complex), { getAnimatableNone: (v) => {
	        const functions = v.match(functionRegex);
	        return functions ? functions.map(applyDefaultFilter).join(' ') : v;
	    } });

	function hueToRgb(p, q, t) {
	    if (t < 0)
	        t += 1;
	    if (t > 1)
	        t -= 1;
	    if (t < 1 / 6)
	        return p + (q - p) * 6 * t;
	    if (t < 1 / 2)
	        return q;
	    if (t < 2 / 3)
	        return p + (q - p) * (2 / 3 - t) * 6;
	    return p;
	}
	function hslaToRgba({ hue, saturation, lightness, alpha }) {
	    hue /= 360;
	    saturation /= 100;
	    lightness /= 100;
	    let red = 0;
	    let green = 0;
	    let blue = 0;
	    if (!saturation) {
	        red = green = blue = lightness;
	    }
	    else {
	        const q = lightness < 0.5
	            ? lightness * (1 + saturation)
	            : lightness + saturation - lightness * saturation;
	        const p = 2 * lightness - q;
	        red = hueToRgb(p, q, hue + 1 / 3);
	        green = hueToRgb(p, q, hue);
	        blue = hueToRgb(p, q, hue - 1 / 3);
	    }
	    return {
	        red: Math.round(red * 255),
	        green: Math.round(green * 255),
	        blue: Math.round(blue * 255),
	        alpha,
	    };
	}

	const mixLinearColor = (from, to, v) => {
	    const fromExpo = from * from;
	    const toExpo = to * to;
	    return Math.sqrt(Math.max(0, v * (toExpo - fromExpo) + fromExpo));
	};
	const colorTypes = [hex, rgba, hsla];
	const getColorType = (v) => colorTypes.find((type) => type.test(v));
	const mixColor = (from, to) => {
	    let fromColorType = getColorType(from);
	    let toColorType = getColorType(to);
	    let fromColor = fromColorType.parse(from);
	    let toColor = toColorType.parse(to);
	    if (fromColorType === hsla) {
	        fromColor = hslaToRgba(fromColor);
	        fromColorType = rgba;
	    }
	    if (toColorType === hsla) {
	        toColor = hslaToRgba(toColor);
	        toColorType = rgba;
	    }
	    const blended = Object.assign({}, fromColor);
	    return (v) => {
	        for (const key in blended) {
	            if (key !== "alpha") {
	                blended[key] = mixLinearColor(fromColor[key], toColor[key], v);
	            }
	        }
	        blended.alpha = mix$1(fromColor.alpha, toColor.alpha, v);
	        return fromColorType.transform(blended);
	    };
	};

	const isNum = (v) => typeof v === 'number';

	const combineFunctions = (a, b) => (v) => b(a(v));
	const pipe = (...transformers) => transformers.reduce(combineFunctions);

	function getMixer(origin, target) {
	    if (isNum(origin)) {
	        return (v) => mix$1(origin, target, v);
	    }
	    else if (color.test(origin)) {
	        return mixColor(origin, target);
	    }
	    else {
	        return mixComplex(origin, target);
	    }
	}
	const mixArray = (from, to) => {
	    const output = [...from];
	    const numValues = output.length;
	    const blendValue = from.map((fromThis, i) => getMixer(fromThis, to[i]));
	    return (v) => {
	        for (let i = 0; i < numValues; i++) {
	            output[i] = blendValue[i](v);
	        }
	        return output;
	    };
	};
	const mixObject = (origin, target) => {
	    const output = Object.assign(Object.assign({}, origin), target);
	    const blendValue = {};
	    for (const key in output) {
	        if (origin[key] !== undefined && target[key] !== undefined) {
	            blendValue[key] = getMixer(origin[key], target[key]);
	        }
	    }
	    return (v) => {
	        for (const key in blendValue) {
	            output[key] = blendValue[key](v);
	        }
	        return output;
	    };
	};
	function analyse(value) {
	    const parsed = complex.parse(value);
	    const numValues = parsed.length;
	    let numNumbers = 0;
	    let numRGB = 0;
	    let numHSL = 0;
	    for (let i = 0; i < numValues; i++) {
	        if (numNumbers || typeof parsed[i] === "number") {
	            numNumbers++;
	        }
	        else {
	            if (parsed[i].hue !== undefined) {
	                numHSL++;
	            }
	            else {
	                numRGB++;
	            }
	        }
	    }
	    return { parsed, numNumbers, numRGB, numHSL };
	}
	const mixComplex = (origin, target) => {
	    const template = complex.createTransformer(target);
	    const originStats = analyse(origin);
	    const targetStats = analyse(target);
	    const canInterpolate = originStats.numHSL === targetStats.numHSL &&
	        originStats.numRGB === targetStats.numRGB &&
	        originStats.numNumbers >= targetStats.numNumbers;
	    if (canInterpolate) {
	        return pipe(mixArray(originStats.parsed, targetStats.parsed), template);
	    }
	    else {
	        return (p) => `${p > 0 ? target : origin}`;
	    }
	};

	const mixNumber = (from, to) => (p) => mix$1(from, to, p);
	function detectMixerFactory(v) {
	    if (typeof v === 'number') {
	        return mixNumber;
	    }
	    else if (typeof v === 'string') {
	        if (color.test(v)) {
	            return mixColor;
	        }
	        else {
	            return mixComplex;
	        }
	    }
	    else if (Array.isArray(v)) {
	        return mixArray;
	    }
	    else if (typeof v === 'object') {
	        return mixObject;
	    }
	}
	function createMixers(output, ease, customMixer) {
	    const mixers = [];
	    const mixerFactory = customMixer || detectMixerFactory(output[0]);
	    const numMixers = output.length - 1;
	    for (let i = 0; i < numMixers; i++) {
	        let mixer = mixerFactory(output[i], output[i + 1]);
	        if (ease) {
	            const easingFunction = Array.isArray(ease) ? ease[i] : ease;
	            mixer = pipe(easingFunction, mixer);
	        }
	        mixers.push(mixer);
	    }
	    return mixers;
	}
	function fastInterpolate([from, to], [mixer]) {
	    return (v) => mixer(progress(from, to, v));
	}
	function slowInterpolate(input, mixers) {
	    const inputLength = input.length;
	    const lastInputIndex = inputLength - 1;
	    return (v) => {
	        let mixerIndex = 0;
	        let foundMixerIndex = false;
	        if (v <= input[0]) {
	            foundMixerIndex = true;
	        }
	        else if (v >= input[lastInputIndex]) {
	            mixerIndex = lastInputIndex - 1;
	            foundMixerIndex = true;
	        }
	        if (!foundMixerIndex) {
	            let i = 1;
	            for (; i < inputLength; i++) {
	                if (input[i] > v || i === lastInputIndex) {
	                    break;
	                }
	            }
	            mixerIndex = i - 1;
	        }
	        const progressInRange = progress(input[mixerIndex], input[mixerIndex + 1], v);
	        return mixers[mixerIndex](progressInRange);
	    };
	}
	function interpolate$1(input, output, { clamp: isClamp = true, ease, mixer } = {}) {
	    const inputLength = input.length;
	    invariant(inputLength === output.length);
	    invariant(!ease || !Array.isArray(ease) || ease.length === inputLength - 1);
	    if (input[0] > input[inputLength - 1]) {
	        input = [].concat(input);
	        output = [].concat(output);
	        input.reverse();
	        output.reverse();
	    }
	    const mixers = createMixers(output, ease, mixer);
	    const interpolator = inputLength === 2
	        ? fastInterpolate(input, mixers)
	        : slowInterpolate(input, mixers);
	    return isClamp
	        ? (v) => interpolator(clamp$1(input[0], input[inputLength - 1], v))
	        : interpolator;
	}

	const reverseEasing = easing => p => 1 - easing(1 - p);
	const mirrorEasing = easing => p => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;
	const createExpoIn = (power) => p => Math.pow(p, power);
	const createBackIn = (power) => p => p * p * ((power + 1) * p - power);
	const createAnticipate = (power) => {
	    const backEasing = createBackIn(power);
	    return p => (p *= 2) < 1
	        ? 0.5 * backEasing(p)
	        : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));
	};

	const DEFAULT_OVERSHOOT_STRENGTH = 1.525;
	const BOUNCE_FIRST_THRESHOLD = 4.0 / 11.0;
	const BOUNCE_SECOND_THRESHOLD = 8.0 / 11.0;
	const BOUNCE_THIRD_THRESHOLD = 9.0 / 10.0;
	const linear$1 = p => p;
	const easeIn = createExpoIn(2);
	const easeOut = reverseEasing(easeIn);
	const easeInOut = mirrorEasing(easeIn);
	const circIn = p => 1 - Math.sin(Math.acos(p));
	const circOut = reverseEasing(circIn);
	const circInOut = mirrorEasing(circOut);
	const backIn = createBackIn(DEFAULT_OVERSHOOT_STRENGTH);
	const backOut = reverseEasing(backIn);
	const backInOut = mirrorEasing(backIn);
	const anticipate = createAnticipate(DEFAULT_OVERSHOOT_STRENGTH);
	const ca = 4356.0 / 361.0;
	const cb = 35442.0 / 1805.0;
	const cc = 16061.0 / 1805.0;
	const bounceOut = (p) => {
	    if (p === 1 || p === 0)
	        return p;
	    const p2 = p * p;
	    return p < BOUNCE_FIRST_THRESHOLD
	        ? 7.5625 * p2
	        : p < BOUNCE_SECOND_THRESHOLD
	            ? 9.075 * p2 - 9.9 * p + 3.4
	            : p < BOUNCE_THIRD_THRESHOLD
	                ? ca * p2 - cb * p + cc
	                : 10.8 * p * p - 20.52 * p + 10.72;
	};
	const bounceIn = reverseEasing(bounceOut);
	const bounceInOut = (p) => p < 0.5
	    ? 0.5 * (1.0 - bounceOut(1.0 - p * 2.0))
	    : 0.5 * bounceOut(p * 2.0 - 1.0) + 0.5;

	function defaultEasing(values, easing) {
	    return values.map(() => easing || easeInOut).splice(0, values.length - 1);
	}
	function defaultOffset(values) {
	    const numValues = values.length;
	    return values.map((_value, i) => i !== 0 ? i / (numValues - 1) : 0);
	}
	function convertOffsetToTimes(offset, duration) {
	    return offset.map((o) => o * duration);
	}
	function keyframes$1({ from = 0, to = 1, ease, offset, duration = 300, }) {
	    const state = { done: false, value: from };
	    const values = Array.isArray(to) ? to : [from, to];
	    const times = convertOffsetToTimes(offset && offset.length === values.length
	        ? offset
	        : defaultOffset(values), duration);
	    function createInterpolator() {
	        return interpolate$1(times, values, {
	            ease: Array.isArray(ease) ? ease : defaultEasing(values, ease),
	        });
	    }
	    let interpolator = createInterpolator();
	    return {
	        next: (t) => {
	            state.value = interpolator(t);
	            state.done = t >= duration;
	            return state;
	        },
	        flipTarget: () => {
	            values.reverse();
	            interpolator = createInterpolator();
	        },
	    };
	}

	function decay({ velocity = 0, from = 0, power = 0.8, timeConstant = 350, restDelta = 0.5, modifyTarget, }) {
	    const state = { done: false, value: from };
	    let amplitude = power * velocity;
	    const ideal = from + amplitude;
	    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);
	    if (target !== ideal)
	        amplitude = target - from;
	    return {
	        next: (t) => {
	            const delta = -amplitude * Math.exp(-t / timeConstant);
	            state.done = !(delta > restDelta || delta < -restDelta);
	            state.value = state.done ? target : target + delta;
	            return state;
	        },
	        flipTarget: () => { },
	    };
	}

	const types = { keyframes: keyframes$1, spring, decay };
	function detectAnimationFromOptions(config) {
	    if (Array.isArray(config.to)) {
	        return keyframes$1;
	    }
	    else if (types[config.type]) {
	        return types[config.type];
	    }
	    const keys = new Set(Object.keys(config));
	    if (keys.has("ease") ||
	        (keys.has("duration") && !keys.has("dampingRatio"))) {
	        return keyframes$1;
	    }
	    else if (keys.has("dampingRatio") ||
	        keys.has("stiffness") ||
	        keys.has("mass") ||
	        keys.has("damping") ||
	        keys.has("restSpeed") ||
	        keys.has("restDelta")) {
	        return spring;
	    }
	    return keyframes$1;
	}

	function loopElapsed(elapsed, duration, delay = 0) {
	    return elapsed - duration - delay;
	}
	function reverseElapsed(elapsed, duration, delay = 0, isForwardPlayback = true) {
	    return isForwardPlayback
	        ? loopElapsed(duration + -elapsed, duration, delay)
	        : duration - (elapsed - duration) + delay;
	}
	function hasRepeatDelayElapsed(elapsed, duration, delay, isForwardPlayback) {
	    return isForwardPlayback ? elapsed >= duration + delay : elapsed <= -delay;
	}

	const framesync = (update) => {
	    const passTimestamp = ({ delta }) => update(delta);
	    return {
	        start: () => sync.update(passTimestamp, true),
	        stop: () => cancelSync.update(passTimestamp),
	    };
	};
	function animate(_a) {
	    var _b, _c;
	    var { from, autoplay = true, driver = framesync, elapsed = 0, repeat: repeatMax = 0, repeatType = "loop", repeatDelay = 0, onPlay, onStop, onComplete, onRepeat, onUpdate } = _a, options = __rest(_a, ["from", "autoplay", "driver", "elapsed", "repeat", "repeatType", "repeatDelay", "onPlay", "onStop", "onComplete", "onRepeat", "onUpdate"]);
	    let { to } = options;
	    let driverControls;
	    let repeatCount = 0;
	    let computedDuration = options.duration;
	    let latest;
	    let isComplete = false;
	    let isForwardPlayback = true;
	    let interpolateFromNumber;
	    const animator = detectAnimationFromOptions(options);
	    if ((_c = (_b = animator).needsInterpolation) === null || _c === void 0 ? void 0 : _c.call(_b, from, to)) {
	        interpolateFromNumber = interpolate$1([0, 100], [from, to], {
	            clamp: false,
	        });
	        from = 0;
	        to = 100;
	    }
	    const animation = animator(Object.assign(Object.assign({}, options), { from, to }));
	    function repeat() {
	        repeatCount++;
	        if (repeatType === "reverse") {
	            isForwardPlayback = repeatCount % 2 === 0;
	            elapsed = reverseElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback);
	        }
	        else {
	            elapsed = loopElapsed(elapsed, computedDuration, repeatDelay);
	            if (repeatType === "mirror")
	                animation.flipTarget();
	        }
	        isComplete = false;
	        onRepeat && onRepeat();
	    }
	    function complete() {
	        driverControls.stop();
	        onComplete && onComplete();
	    }
	    function update(delta) {
	        if (!isForwardPlayback)
	            delta = -delta;
	        elapsed += delta;
	        if (!isComplete) {
	            const state = animation.next(Math.max(0, elapsed));
	            latest = state.value;
	            if (interpolateFromNumber)
	                latest = interpolateFromNumber(latest);
	            isComplete = isForwardPlayback ? state.done : elapsed <= 0;
	        }
	        onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(latest);
	        if (isComplete) {
	            if (repeatCount === 0)
	                computedDuration !== null && computedDuration !== void 0 ? computedDuration : (computedDuration = elapsed);
	            if (repeatCount < repeatMax) {
	                hasRepeatDelayElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback) && repeat();
	            }
	            else {
	                complete();
	            }
	        }
	    }
	    function play() {
	        onPlay === null || onPlay === void 0 ? void 0 : onPlay();
	        driverControls = driver(update);
	        driverControls.start();
	    }
	    autoplay && play();
	    return {
	        stop: () => {
	            onStop === null || onStop === void 0 ? void 0 : onStop();
	            driverControls.stop();
	        },
	    };
	}

	function velocityPerSecond(velocity, frameDuration) {
	    return frameDuration ? velocity * (1000 / frameDuration) : 0;
	}

	function inertia({ from = 0, velocity = 0, min, max, power = 0.8, timeConstant = 750, bounceStiffness = 500, bounceDamping = 10, restDelta = 1, modifyTarget, driver, onUpdate, onComplete, onStop, }) {
	    let currentAnimation;
	    function isOutOfBounds(v) {
	        return (min !== undefined && v < min) || (max !== undefined && v > max);
	    }
	    function boundaryNearest(v) {
	        if (min === undefined)
	            return max;
	        if (max === undefined)
	            return min;
	        return Math.abs(min - v) < Math.abs(max - v) ? min : max;
	    }
	    function startAnimation(options) {
	        currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop();
	        currentAnimation = animate(Object.assign(Object.assign({}, options), { driver, onUpdate: (v) => {
	                var _a;
	                onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(v);
	                (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, v);
	            }, onComplete,
	            onStop }));
	    }
	    function startSpring(options) {
	        startAnimation(Object.assign({ type: "spring", stiffness: bounceStiffness, damping: bounceDamping, restDelta }, options));
	    }
	    if (isOutOfBounds(from)) {
	        startSpring({ from, velocity, to: boundaryNearest(from) });
	    }
	    else {
	        let target = power * velocity + from;
	        if (typeof modifyTarget !== "undefined")
	            target = modifyTarget(target);
	        const boundary = boundaryNearest(target);
	        const heading = boundary === min ? -1 : 1;
	        let prev;
	        let current;
	        const checkBoundary = (v) => {
	            prev = current;
	            current = v;
	            velocity = velocityPerSecond(v - prev, getFrameData().delta);
	            if ((heading === 1 && v > boundary) ||
	                (heading === -1 && v < boundary)) {
	                startSpring({ from: v, to: boundary, velocity });
	            }
	        };
	        startAnimation({
	            type: "decay",
	            from,
	            velocity,
	            timeConstant,
	            power,
	            restDelta,
	            modifyTarget,
	            onUpdate: isOutOfBounds(target) ? checkBoundary : undefined,
	        });
	    }
	    return {
	        stop: () => currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop(),
	    };
	}

	const isPoint = (point) => point.hasOwnProperty('x') && point.hasOwnProperty('y');

	const isPoint3D = (point) => isPoint(point) && point.hasOwnProperty('z');

	const distance1D = (a, b) => Math.abs(a - b);
	function distance$1(a, b) {
	    if (isNum(a) && isNum(b)) {
	        return distance1D(a, b);
	    }
	    else if (isPoint(a) && isPoint(b)) {
	        const xDelta = distance1D(a.x, b.x);
	        const yDelta = distance1D(a.y, b.y);
	        const zDelta = isPoint3D(a) && isPoint3D(b) ? distance1D(a.z, b.z) : 0;
	        return Math.sqrt(Math.pow(xDelta, 2) + Math.pow(yDelta, 2) + Math.pow(zDelta, 2));
	    }
	}

	const a$3 = (a1, a2) => 1.0 - 3.0 * a2 + 3.0 * a1;
	const b$2 = (a1, a2) => 3.0 * a2 - 6.0 * a1;
	const c$1 = (a1) => 3.0 * a1;
	const calcBezier = (t, a1, a2) => ((a$3(a1, a2) * t + b$2(a1, a2)) * t + c$1(a1)) * t;
	const getSlope = (t, a1, a2) => 3.0 * a$3(a1, a2) * t * t + 2.0 * b$2(a1, a2) * t + c$1(a1);
	const subdivisionPrecision = 0.0000001;
	const subdivisionMaxIterations = 10;
	function binarySubdivide(aX, aA, aB, mX1, mX2) {
	    let currentX;
	    let currentT;
	    let i = 0;
	    do {
	        currentT = aA + (aB - aA) / 2.0;
	        currentX = calcBezier(currentT, mX1, mX2) - aX;
	        if (currentX > 0.0) {
	            aB = currentT;
	        }
	        else {
	            aA = currentT;
	        }
	    } while (Math.abs(currentX) > subdivisionPrecision &&
	        ++i < subdivisionMaxIterations);
	    return currentT;
	}
	const newtonIterations = 8;
	const newtonMinSlope = 0.001;
	function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
	    for (let i = 0; i < newtonIterations; ++i) {
	        const currentSlope = getSlope(aGuessT, mX1, mX2);
	        if (currentSlope === 0.0) {
	            return aGuessT;
	        }
	        const currentX = calcBezier(aGuessT, mX1, mX2) - aX;
	        aGuessT -= currentX / currentSlope;
	    }
	    return aGuessT;
	}
	const kSplineTableSize = 11;
	const kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);
	function cubicBezier(mX1, mY1, mX2, mY2) {
	    if (mX1 === mY1 && mX2 === mY2)
	        return linear$1;
	    const sampleValues = new Float32Array(kSplineTableSize);
	    for (let i = 0; i < kSplineTableSize; ++i) {
	        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
	    }
	    function getTForX(aX) {
	        let intervalStart = 0.0;
	        let currentSample = 1;
	        const lastSample = kSplineTableSize - 1;
	        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
	            intervalStart += kSampleStepSize;
	        }
	        --currentSample;
	        const dist = (aX - sampleValues[currentSample]) /
	            (sampleValues[currentSample + 1] - sampleValues[currentSample]);
	        const guessForT = intervalStart + dist * kSampleStepSize;
	        const initialSlope = getSlope(guessForT, mX1, mX2);
	        if (initialSlope >= newtonMinSlope) {
	            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
	        }
	        else if (initialSlope === 0.0) {
	            return guessForT;
	        }
	        else {
	            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
	        }
	    }
	    return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/
	function addUniqueItem(arr, item) {
	    arr.indexOf(item) === -1 && arr.push(item);
	}
	function removeItem(arr, item) {
	    var index = arr.indexOf(item);
	    index > -1 && arr.splice(index, 1);
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	var SubscriptionManager = /** @class */ (function () {
	    function SubscriptionManager() {
	        this.subscriptions = [];
	    }
	    SubscriptionManager.prototype.add = function (handler) {
	        var _this = this;
	        addUniqueItem(this.subscriptions, handler);
	        return function () { return removeItem(_this.subscriptions, handler); };
	    };
	    SubscriptionManager.prototype.notify = function (a, b, c) {
	        var numSubscriptions = this.subscriptions.length;
	        if (!numSubscriptions)
	            return;
	        if (numSubscriptions === 1) {
	            /**
	             * If there's only a single handler we can just call it without invoking a loop.
	             */
	            this.subscriptions[0](a, b, c);
	        }
	        else {
	            for (var i = 0; i < numSubscriptions; i++) {
	                /**
	                 * Check whether the handler exists before firing as it's possible
	                 * the subscriptions were modified during this loop running.
	                 */
	                var handler = this.subscriptions[i];
	                handler && handler(a, b, c);
	            }
	        }
	    };
	    SubscriptionManager.prototype.getSize = function () {
	        return this.subscriptions.length;
	    };
	    SubscriptionManager.prototype.clear = function () {
	        this.subscriptions.length = 0;
	    };
	    return SubscriptionManager;
	}());

	var isFloat = function (value) {
	    return !isNaN(parseFloat(value));
	};
	/**
	 * `MotionValue` is used to track the state and velocity of motion values.
	 *
	 * @public
	 */
	var MotionValue = /** @class */ (function () {
	    /**
	     * @param init - The initiating value
	     * @param config - Optional configuration options
	     *
	     * -  `transformer`: A function to transform incoming values with.
	     *
	     * @internal
	     */
	    function MotionValue(init, startStopNotifier) {
	        var _this = this;
	        /**
	         * Duration, in milliseconds, since last updating frame.
	         *
	         * @internal
	         */
	        this.timeDelta = 0;
	        /**
	         * Timestamp of the last time this `MotionValue` was updated.
	         *
	         * @internal
	         */
	        this.lastUpdated = 0;
	        /**
	         * Functions to notify when the `MotionValue` updates.
	         *
	         * @internal
	         */
	        this.updateSubscribers = new SubscriptionManager();
	        /**
	         * Functions to notify when the velocity updates.
	         *
	         * @internal
	         */
	        this.velocityUpdateSubscribers = new SubscriptionManager();
	        /**
	         * Functions to notify when the `MotionValue` updates and `render` is set to `true`.
	         *
	         * @internal
	         */
	        this.renderSubscribers = new SubscriptionManager();
	        /**
	         * Tracks whether this value can output a velocity. Currently this is only true
	         * if the value is numerical, but we might be able to widen the scope here and support
	         * other value types.
	         *
	         * @internal
	         */
	        this.canTrackVelocity = false;
	        this.updateAndNotify = function (v, render) {
	            if (render === void 0) { render = true; }
	            _this.prev = _this.current;
	            _this.current = v;
	            // Update timestamp
	            var _a = getFrameData(), delta = _a.delta, timestamp = _a.timestamp;
	            if (_this.lastUpdated !== timestamp) {
	                _this.timeDelta = delta;
	                _this.lastUpdated = timestamp;
	                sync.postRender(_this.scheduleVelocityCheck);
	            }
	            // Update update subscribers
	            if (_this.prev !== _this.current) {
	                _this.updateSubscribers.notify(_this.current);
	            }
	            // Update velocity subscribers
	            if (_this.velocityUpdateSubscribers.getSize()) {
	                _this.velocityUpdateSubscribers.notify(_this.getVelocity());
	            }
	            // Update render subscribers
	            if (render) {
	                _this.renderSubscribers.notify(_this.current);
	            }
	        };
	        /**
	         * Schedule a velocity check for the next frame.
	         *
	         * This is an instanced and bound function to prevent generating a new
	         * function once per frame.
	         *
	         * @internal
	         */
	        this.scheduleVelocityCheck = function () { return sync.postRender(_this.velocityCheck); };
	        /**
	         * Updates `prev` with `current` if the value hasn't been updated this frame.
	         * This ensures velocity calculations return `0`.
	         *
	         * This is an instanced and bound function to prevent generating a new
	         * function once per frame.
	         *
	         * @internal
	         */
	        this.velocityCheck = function (_a) {
	            var timestamp = _a.timestamp;
	            if (timestamp !== _this.lastUpdated) {
	                _this.prev = _this.current;
	                _this.velocityUpdateSubscribers.notify(_this.getVelocity());
	            }
	        };
	        this.hasAnimated = false;
	        this.prev = this.current = init;
	        this.canTrackVelocity = isFloat(this.current);
	        this.onSubscription = () => { };
	        this.onUnsubscription = () => { };
	        if (startStopNotifier) {
	            this.onSubscription = () => {
	                if (this.updateSubscribers.getSize() + this.velocityUpdateSubscribers.getSize() + this.renderSubscribers.getSize() === 0) {

	                    const unsub = startStopNotifier();
	                    this.onUnsubscription = () => { };
	                    if (unsub) {
	                        this.onUnsubscription = () => {
	                            if (this.updateSubscribers.getSize() + this.velocityUpdateSubscribers.getSize() + this.renderSubscribers.getSize() === 0) {
	                                unsub();
	                            }
	                        };
	                    }

	                }
	            };
	        }
	    }
	    /**
	     * Adds a function that will be notified when the `MotionValue` is updated.
	     *
	     * It returns a function that, when called, will cancel the subscription.
	     *
	     * When calling `onChange` inside a React component, it should be wrapped with the
	     * `useEffect` hook. As it returns an unsubscribe function, this should be returned
	     * from the `useEffect` function to ensure you don't add duplicate subscribers..
	     *
	     * @motion
	     *
	     * ```jsx
	     * export const MyComponent = () => {
	     *   const x = useMotionValue(0)
	     *   const y = useMotionValue(0)
	     *   const opacity = useMotionValue(1)
	     *
	     *   useEffect(() => {
	     *     function updateOpacity() {
	     *       const maxXY = Math.max(x.get(), y.get())
	     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])
	     *       opacity.set(newOpacity)
	     *     }
	     *
	     *     const unsubscribeX = x.onChange(updateOpacity)
	     *     const unsubscribeY = y.onChange(updateOpacity)
	     *
	     *     return () => {
	     *       unsubscribeX()
	     *       unsubscribeY()
	     *     }
	     *   }, [])
	     *
	     *   return <MotionDiv style={{ x }} />
	     * }
	     * ```
	     *
	     * @internalremarks
	     *
	     * We could look into a `useOnChange` hook if the above lifecycle management proves confusing.
	     *
	     * ```jsx
	     * useOnChange(x, () => {})
	     * ```
	     *
	     * @param subscriber - A function that receives the latest value.
	     * @returns A function that, when called, will cancel this subscription.
	     *
	     * @public
	     */
	    MotionValue.prototype.onChange = function (subscription) {
	        this.onSubscription();
	        const unsub = this.updateSubscribers.add(subscription);
	        return () => {
	            unsub();
	            this.onUnsubscription();

	        }
	    };
	    /** Add subscribe method for Svelte store interface */
	    MotionValue.prototype.subscribe = function (subscription) {
	        return this.onChange(subscription);
	    };

	    MotionValue.prototype.clearListeners = function () {
	        this.updateSubscribers.clear();
	        this.onUnsubscription();
	    };
	    /**
	     * Adds a function that will be notified when the `MotionValue` requests a render.
	     *
	     * @param subscriber - A function that's provided the latest value.
	     * @returns A function that, when called, will cancel this subscription.
	     *
	     * @internal
	     */
	    MotionValue.prototype.onRenderRequest = function (subscription) {
	        this.onSubscription();
	        // Render immediately
	        subscription(this.get());
	        const unsub = this.renderSubscribers.add(subscription);
	        return () => {
	            unsub();
	            this.onUnsubscription();
	        }
	    };
	    /**
	     * Attaches a passive effect to the `MotionValue`.
	     *
	     * @internal
	     */
	    MotionValue.prototype.attach = function (passiveEffect) {
	        this.passiveEffect = passiveEffect;
	    };
	    /**
	     * Sets the state of the `MotionValue`.
	     *
	     * @remarks
	     *
	     * ```jsx
	     * const x = useMotionValue(0)
	     * x.set(10)
	     * ```
	     *
	     * @param latest - Latest value to set.
	     * @param render - Whether to notify render subscribers. Defaults to `true`
	     *
	     * @public
	     */
	    MotionValue.prototype.set = function (v, render) {
	        if (render === void 0) { render = true; }
	        if (!render || !this.passiveEffect) {
	            this.updateAndNotify(v, render);
	        }
	        else {
	            this.passiveEffect(v, this.updateAndNotify);
	        }
	    };
	    /** Add update method for Svelte Store behavior */
	    MotionValue.prototype.update = function (v) {
	        this.set(v(this.get()));
	    };
	    /**
	     * Returns the latest state of `MotionValue`
	     *
	     * @returns - The latest state of `MotionValue`
	     *
	     * @public
	     */
	    MotionValue.prototype.get = function () {
	        this.onSubscription();
	        const curr = this.current;
	        this.onUnsubscription();
	        return curr
	    };
	    /**
	     * @public
	     */
	    MotionValue.prototype.getPrevious = function () {
	        return this.prev;
	    };
	    /**
	     * Returns the latest velocity of `MotionValue`
	     *
	     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.
	     *
	     * @public
	     */
	    MotionValue.prototype.getVelocity = function () {
	        // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful
	        this.onSubscription();
	        const vel = this.canTrackVelocity
	            ? // These casts could be avoided if parseFloat would be typed better
	            velocityPerSecond(parseFloat(this.current) -
	                parseFloat(this.prev), this.timeDelta)
	            : 0;
	        this.onUnsubscription();
	        return vel;
	    };
	    /**
	     * Registers a new animation to control this `MotionValue`. Only one
	     * animation can drive a `MotionValue` at one time.
	     *
	     * ```jsx
	     * value.start()
	     * ```
	     *
	     * @param animation - A function that starts the provided animation
	     *
	     * @internal
	     */
	    MotionValue.prototype.start = function (animation) {
	        var _this = this;
	        this.stop();
	        return new Promise(function (resolve) {
	            _this.hasAnimated = true;
	            _this.stopAnimation = animation(resolve);
	        }).then(function () { return _this.clearAnimation(); });
	    };
	    /**
	     * Stop the currently active animation.
	     *
	     * @public
	     */
	    MotionValue.prototype.stop = function () {
	        if (this.stopAnimation)
	            this.stopAnimation();
	        this.clearAnimation();
	    };
	    /**
	     * Returns `true` if this value is currently animating.
	     *
	     * @public
	     */
	    MotionValue.prototype.isAnimating = function () {
	        return !!this.stopAnimation;
	    };
	    MotionValue.prototype.clearAnimation = function () {
	        this.stopAnimation = null;
	    };
	    /**
	     * Destroy and clean up subscribers to this `MotionValue`.
	     *
	     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically
	     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually
	     * created a `MotionValue` via the `motionValue` function.
	     *
	     * @public
	     */
	    MotionValue.prototype.destroy = function () {
	        this.updateSubscribers.clear();
	        this.renderSubscribers.clear();
	        this.stop();
	        this.onUnsubscription();
	    };
	    return MotionValue;
	}());
	/**
	 * @internal
	 */
	function motionValue(init, startStopNotifier) {
	    return new MotionValue(init, startStopNotifier);
	}

	const subscriber_queue = [];

	/**
	 * Creates a `Readable` store that allows reading by subscription.
	 *
	 * https://svelte.dev/docs/svelte-store#readable
	 * @template T
	 * @param {T} [value] initial value
	 * @param {import('./public.js').StartStopNotifier<T>} [start]
	 * @returns {import('./public.js').Readable<T>}
	 */
	function readable(value, start) {
		return {
			subscribe: writable(value, start).subscribe
		};
	}

	/**
	 * Create a `Writable` store that allows both updating and reading by subscription.
	 *
	 * https://svelte.dev/docs/svelte-store#writable
	 * @template T
	 * @param {T} [value] initial value
	 * @param {import('./public.js').StartStopNotifier<T>} [start]
	 * @returns {import('./public.js').Writable<T>}
	 */
	function writable(value, start = noop$3) {
		/** @type {import('./public.js').Unsubscriber} */
		let stop;
		/** @type {Set<import('./private.js').SubscribeInvalidateTuple<T>>} */
		const subscribers = new Set();
		/** @param {T} new_value
		 * @returns {void}
		 */
		function set(new_value) {
			if (safe_not_equal(value, new_value)) {
				value = new_value;
				if (stop) {
					// store is ready
					const run_queue = !subscriber_queue.length;
					for (const subscriber of subscribers) {
						subscriber[1]();
						subscriber_queue.push(subscriber, value);
					}
					if (run_queue) {
						for (let i = 0; i < subscriber_queue.length; i += 2) {
							subscriber_queue[i][0](subscriber_queue[i + 1]);
						}
						subscriber_queue.length = 0;
					}
				}
			}
		}

		/**
		 * @param {import('./public.js').Updater<T>} fn
		 * @returns {void}
		 */
		function update(fn) {
			set(fn(value));
		}

		/**
		 * @param {import('./public.js').Subscriber<T>} run
		 * @param {import('./private.js').Invalidator<T>} [invalidate]
		 * @returns {import('./public.js').Unsubscriber}
		 */
		function subscribe(run, invalidate = noop$3) {
			/** @type {import('./private.js').SubscribeInvalidateTuple<T>} */
			const subscriber = [run, invalidate];
			subscribers.add(subscriber);
			if (subscribers.size === 1) {
				stop = start(set, update) || noop$3;
			}
			run(value);
			return () => {
				subscribers.delete(subscriber);
				if (subscribers.size === 0 && stop) {
					stop();
					stop = null;
				}
			};
		}
		return { set, update, subscribe };
	}

	/**
	 * Derived value store by synchronizing one or more readable stores and
	 * applying an aggregation function over its input values.
	 *
	 * https://svelte.dev/docs/svelte-store#derived
	 * @template {import('./private.js').Stores} S
	 * @template T
	 * @overload
	 * @param {S} stores - input stores
	 * @param {(values: import('./private.js').StoresValues<S>, set: (value: T) => void, update: (fn: import('./public.js').Updater<T>) => void) => import('./public.js').Unsubscriber | void} fn - function callback that aggregates the values
	 * @param {T} [initial_value] - initial value
	 * @returns {import('./public.js').Readable<T>}
	 */

	/**
	 * Derived value store by synchronizing one or more readable stores and
	 * applying an aggregation function over its input values.
	 *
	 * https://svelte.dev/docs/svelte-store#derived
	 * @template {import('./private.js').Stores} S
	 * @template T
	 * @overload
	 * @param {S} stores - input stores
	 * @param {(values: import('./private.js').StoresValues<S>) => T} fn - function callback that aggregates the values
	 * @param {T} [initial_value] - initial value
	 * @returns {import('./public.js').Readable<T>}
	 */

	/**
	 * @template {import('./private.js').Stores} S
	 * @template T
	 * @param {S} stores
	 * @param {Function} fn
	 * @param {T} [initial_value]
	 * @returns {import('./public.js').Readable<T>}
	 */
	function derived(stores, fn, initial_value) {
		const single = !Array.isArray(stores);
		/** @type {Array<import('./public.js').Readable<any>>} */
		const stores_array = single ? [stores] : stores;
		if (!stores_array.every(Boolean)) {
			throw new Error('derived() expects stores as input, got a falsy value');
		}
		const auto = fn.length < 2;
		return readable(initial_value, (set, update) => {
			let started = false;
			const values = [];
			let pending = 0;
			let cleanup = noop$3;
			const sync = () => {
				if (pending) {
					return;
				}
				cleanup();
				const result = fn(single ? values[0] : values, set, update);
				if (auto) {
					set(result);
				} else {
					cleanup = is_function(result) ? result : noop$3;
				}
			};
			const unsubscribers = stores_array.map((store, i) =>
				subscribe(
					store,
					(value) => {
						values[i] = value;
						pending &= ~(1 << i);
						if (started) {
							sync();
						}
					},
					() => {
						pending |= 1 << i;
					}
				)
			);
			started = true;
			sync();
			return function stop() {
				run_all(unsubscribers);
				cleanup();
				// We need to set this to false because callbacks can still happen despite having unsubscribed:
				// Callbacks might already be placed in the queue which doesn't know it should no longer
				// invoke this derived store.
				started = false;
			};
		});
	}

	const getDomContext = (name,el) => {
	    if (!el || !window){
	        return undefined;
	    }
	    let par = el;
	    while(par = par.parentNode){
	        if (par.motionDomContext && par.motionDomContext.has(name)){
	            return par.motionDomContext.get(name)
	        }
	    }
	    return undefined;
	};

	const setDomContext = (name,el,value) => {
	    if (el && window){
	        if (!el.motionDomContext){
	            el.motionDomContext = new Map();
	        }
	        el.motionDomContext.set(name,value);
	    }
	};

	/**
	 * @public
	 */
	var MotionConfigContext = (c)=> getDomContext("MotionConfig",c)||writable({
	    transformPagePoint: function (p) { return p; },
	    isStatic: false,
	});

	/* node_modules/svelte-motion/src/context/ScaleCorrectionProvider.svelte generated by Svelte v4.2.10 */

	function create_fragment$10(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[2].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[1],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$10.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const ScaleCorrectionContext = isCustom => getDomContext("ScaleCorrection", isCustom) || writable([]);
	const ScaleCorrectionParentContext = () => writable([]);

	const provideScaleCorrection = isCustom => {
		const fromParent = getContext(ScaleCorrectionContext) || ScaleCorrectionContext(isCustom);
		const ctx = ScaleCorrectionContext();
		setContext(ScaleCorrectionContext, ctx);
		setDomContext("ScaleCorrection", isCustom, ctx);
		setContext(ScaleCorrectionParentContext, fromParent);
	};

	function instance$10($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('ScaleCorrectionProvider', slots, ['default']);
		let { isCustom } = $$props;
		provideScaleCorrection(isCustom);

		$$self.$$.on_mount.push(function () {
			if (isCustom === undefined && !('isCustom' in $$props || $$self.$$.bound[$$self.$$.props['isCustom']])) {
				console.warn("<ScaleCorrectionProvider> was created without expected prop 'isCustom'");
			}
		});

		const writable_props = ['isCustom'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ScaleCorrectionProvider> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('isCustom' in $$props) $$invalidate(0, isCustom = $$props.isCustom);
			if ('$$scope' in $$props) $$invalidate(1, $$scope = $$props.$$scope);
		};

		$$self.$capture_state = () => ({
			writable,
			getContext,
			setContext,
			getDomContext,
			setDomContext,
			ScaleCorrectionContext,
			ScaleCorrectionParentContext,
			provideScaleCorrection,
			isCustom
		});

		$$self.$inject_state = $$props => {
			if ('isCustom' in $$props) $$invalidate(0, isCustom = $$props.isCustom);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [isCustom, $$scope, slots];
	}

	class ScaleCorrectionProvider extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$10, create_fragment$10, safe_not_equal, { isCustom: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "ScaleCorrectionProvider",
				options,
				id: create_fragment$10.name
			});
		}

		get isCustom() {
			throw new Error("<ScaleCorrectionProvider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set isCustom(value) {
			throw new Error("<ScaleCorrectionProvider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var ScaleCorrectionProvider$1 = ScaleCorrectionProvider;

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/
	/**
	 * Converts seconds to milliseconds
	 *
	 * @param seconds - Time in seconds.
	 * @return milliseconds - Converted time in milliseconds.
	 */
	var secondsToMilliseconds = function (seconds) { return seconds * 1000; };

	//import { invariant } from 'hey-listen';

	var easingLookup = {
	    linear: linear$1,
	    easeIn: easeIn,
	    easeInOut: easeInOut,
	    easeOut: easeOut,
	    circIn: circIn,
	    circInOut: circInOut,
	    circOut: circOut,
	    backIn: backIn,
	    backInOut: backInOut,
	    backOut: backOut,
	    anticipate: anticipate,
	    bounceIn: bounceIn,
	    bounceInOut: bounceInOut,
	    bounceOut: bounceOut,
	};
	var easingDefinitionToFunction = function (definition) {
	    if (Array.isArray(definition)) {
	        // If cubic bezier definition, create bezier curve
	        //invariant(definition.length === 4, "Cubic bezier arrays must contain four numerical values.");
	        var _a = __read(definition, 4), x1 = _a[0], y1 = _a[1], x2 = _a[2], y2 = _a[3];
	        return cubicBezier(x1, y1, x2, y2);
	    }
	    else if (typeof definition === "string") {
	        // Else lookup from table
	        //invariant(easingLookup[definition] !== undefined, "Invalid easing type '" + definition + "'");
	        return easingLookup[definition];
	    }
	    return definition;
	};
	var isEasingArray = function (ease) {
	    return Array.isArray(ease) && typeof ease[0] !== "number";
	};

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	/**
	 * Check if a value is animatable. Examples:
	 *
	 * ✅: 100, "100px", "#fff"
	 * ❌: "block", "url(2.jpg)"
	 * @param value
	 *
	 * @internal
	 */
	var isAnimatable = function (key, value) {
	    // If the list of keys tat might be non-animatable grows, replace with Set
	    if (key === "zIndex")
	        return false;
	    // If it's a number or a keyframes array, we can animate it. We might at some point
	    // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,
	    // but for now lets leave it like this for performance reasons
	    if (typeof value === "number" || Array.isArray(value))
	        return true;
	    if (typeof value === "string" && // It's animatable if we have a string
	        complex.test(value) && // And it contains numbers and/or colors
	        !value.startsWith("url(") // Unless it starts with "url("
	    ) {
	        return true;
	    }
	    return false;
	};

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	var isKeyframesTarget = function (v) {
	    return Array.isArray(v);
	};

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/


	var underDampedSpring = function () { return ({
	    type: "spring",
	    stiffness: 500,
	    damping: 25,
	    restDelta: 0.5,
	    restSpeed: 10,
	}); };
	var criticallyDampedSpring = function (to) { return ({
	    type: "spring",
	    stiffness: 550,
	    damping: to === 0 ? 2 * Math.sqrt(550) : 30,
	    restDelta: 0.01,
	    restSpeed: 10,
	}); };
	var linearTween = function () { return ({
	    type: "keyframes",
	    ease: "linear",
	    duration: 0.3,
	}); };
	var keyframes = function (values) { return ({
	    type: "keyframes",
	    duration: 0.8,
	    values: values,
	}); };
	var defaultTransitions = {
	    x: underDampedSpring,
	    y: underDampedSpring,
	    z: underDampedSpring,
	    rotate: underDampedSpring,
	    rotateX: underDampedSpring,
	    rotateY: underDampedSpring,
	    rotateZ: underDampedSpring,
	    scaleX: criticallyDampedSpring,
	    scaleY: criticallyDampedSpring,
	    scale: criticallyDampedSpring,
	    opacity: linearTween,
	    backgroundColor: linearTween,
	    color: linearTween,
	    default: criticallyDampedSpring,
	};
	var getDefaultTransition = function (valueKey, to) {
	    var transitionFactory;
	    if (isKeyframesTarget(to)) {
	        transitionFactory = keyframes;
	    }
	    else {
	        transitionFactory =
	            defaultTransitions[valueKey] || defaultTransitions.default;
	    }
	    return __assign({ to: to }, transitionFactory(to));
	};

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	var int = __assign(__assign({}, number), { transform: Math.round });

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	var numberValueTypes = {
	    // Border props
	    borderWidth: px,
	    borderTopWidth: px,
	    borderRightWidth: px,
	    borderBottomWidth: px,
	    borderLeftWidth: px,
	    borderRadius: px,
	    radius: px,
	    borderTopLeftRadius: px,
	    borderTopRightRadius: px,
	    borderBottomRightRadius: px,
	    borderBottomLeftRadius: px,
	    // Positioning props
	    width: px,
	    maxWidth: px,
	    height: px,
	    maxHeight: px,
	    size: px,
	    top: px,
	    right: px,
	    bottom: px,
	    left: px,
	    // Spacing props
	    padding: px,
	    paddingTop: px,
	    paddingRight: px,
	    paddingBottom: px,
	    paddingLeft: px,
	    margin: px,
	    marginTop: px,
	    marginRight: px,
	    marginBottom: px,
	    marginLeft: px,
	    // Transform props
	    rotate: degrees,
	    rotateX: degrees,
	    rotateY: degrees,
	    rotateZ: degrees,
	    scale: scale$1,
	    scaleX: scale$1,
	    scaleY: scale$1,
	    scaleZ: scale$1,
	    skew: degrees,
	    skewX: degrees,
	    skewY: degrees,
	    distance: px,
	    translateX: px,
	    translateY: px,
	    translateZ: px,
	    x: px,
	    y: px,
	    z: px,
	    perspective: px,
	    transformPerspective: px,
	    opacity: alpha,
	    originX: progressPercentage,
	    originY: progressPercentage,
	    originZ: px,
	    // Misc
	    zIndex: int,
	    // SVG
	    fillOpacity: alpha,
	    strokeOpacity: alpha,
	    numOctaves: int,
	};

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	/**
	 * A map of default value types for common values
	 */
	var defaultValueTypes = __assign(__assign({}, numberValueTypes), { 
	    // Color props
	    color: color, backgroundColor: color, outlineColor: color, fill: color, stroke: color, 
	    // Border props
	    borderColor: color, borderTopColor: color, borderRightColor: color, borderBottomColor: color, borderLeftColor: color, filter: filter$2, WebkitFilter: filter$2 });
	/**
	 * Gets the default ValueType for the provided value key
	 */
	var getDefaultValueType = function (key) { return defaultValueTypes[key]; };

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	function getAnimatableNone(key, value) {
	    var _a;
	    var defaultValueType = getDefaultValueType(key);
	    if (defaultValueType !== filter$2)
	        defaultValueType = complex;
	    // If value is not recognised as animatable, ie "none", create an animatable version origin based on the target
	    return (_a = defaultValueType.getAnimatableNone) === null || _a === void 0 ? void 0 : _a.call(defaultValueType, value);
	}

	/** 
	based on framer-motion@4.1.15,
	Copyright (c) 2018 Framer B.V.
	*/

	/**
	 * Decide whether a transition is defined on a given Transition.
	 * This filters out orchestration options and returns true
	 * if any options are left.
	 */
	function isTransitionDefined(_a) {
	    _a.when; _a.delay; _a.delayChildren; _a.staggerChildren; _a.staggerDirection; _a.repeat; _a.repeatType; _a.repeatDelay; _a.from; var transition = __rest(_a, ["when", "delay", "delayChildren", "staggerChildren", "staggerDirection", "repeat", "repeatType", "repeatDelay", "from"]);
	    return !!Object.keys(transition).length;
	}
	/**
	 * Convert Framer Motion's Transition type into Popmotion-compatible options.
	 */
	function convertTransitionToAnimationOptions(_a) {
	    var ease = _a.ease, times = _a.times, yoyo = _a.yoyo, flip = _a.flip, loop = _a.loop, transition = __rest(_a, ["ease", "times", "yoyo", "flip", "loop"]);
	    var options = __assign({}, transition);
	    if (times)
	        options["offset"] = times;
	    /**
	     * Convert any existing durations from seconds to milliseconds
	     */
	    if (transition.duration)
	        options["duration"] = secondsToMilliseconds(transition.duration);
	    if (transition.repeatDelay)
	        options.repeatDelay = secondsToMilliseconds(transition.repeatDelay);
	    /**
	     * Map easing names to Popmotion's easing functions
	     */
	    if (ease) {
	        options["ease"] = isEasingArray(ease)
	            ? ease.map(easingDefinitionToFunction)
	            : easingDefinitionToFunction(ease);
	    }
	    /**
	     * Support legacy transition API
	     */
	    if (transition.type === "tween")
	        options.type = "keyframes";
	    /**
	     * TODO: These options are officially removed from the API.
	     */
	    if (yoyo || loop || flip) {
	        if (yoyo) {
	            options.repeatType = "reverse";
	        }
	        else if (loop) {
	            options.repeatType = "loop";
	        }
	        else if (flip) {
	            options.repeatType = "mirror";
	        }
	        options.repeat = loop || yoyo || flip || transition.repeat;
	    }
	    /**
	     * TODO: Popmotion 9 has the ability to automatically detect whether to use
	     * a keyframes or spring animation, but does so by detecting velocity and other spring options.
	     * It'd be good to introduce a similar thing here.
	     */
	    if (transition.type !== "spring")
	        options.type = "keyframes";
	    return options;
	}
	/**
	 * Get the delay for a value by checking Transition with decreasing specificity.
	 */
	function getDelayFromTransition(transition, key) {
	    var _a;
	    var valueTransition = getValueTransition(transition, key) || {};
	    return (_a = valueTransition.delay) !== null && _a !== void 0 ? _a : 0;
	}
	function hydrateKeyframes(options) {
	    if (Array.isArray(options.to) && options.to[0] === null) {
	        options.to = __spreadArray([], __read(options.to));
	        options.to[0] = options.from;
	    }
	    return options;
	}
	function getPopmotionAnimationOptions(transition, options, key) {
	    var _a;
	    if (Array.isArray(options.to)) {
	        (_a = transition.duration) !== null && _a !== void 0 ? _a : (transition.duration = 0.8);
	    }
	    hydrateKeyframes(options);
	    /**
	     * Get a default transition if none is determined to be defined.
	     */
	    if (!isTransitionDefined(transition)) {
	        transition = __assign(__assign({}, transition), getDefaultTransition(key, options.to));
	    }
	    return __assign(__assign({}, options), convertTransitionToAnimationOptions(transition));
	}
	/**
	 *
	 */
	function getAnimation(key, value, target, transition, onComplete) {
	    var _a;
	    var valueTransition = getValueTransition(transition, key);
	    var origin = (_a = valueTransition.from) !== null && _a !== void 0 ? _a : value.get();
	    var isTargetAnimatable = isAnimatable(key, target);
	    if (origin === "none" && isTargetAnimatable && typeof target === "string") {
	        /**
	         * If we're trying to animate from "none", try and get an animatable version
	         * of the target. This could be improved to work both ways.
	         */
	        origin = getAnimatableNone(key, target);
	    }
	    else if (isZero(origin) && typeof target === "string") {
	        origin = getZeroUnit(target);
	    }
	    else if (!Array.isArray(target) &&
	        isZero(target) &&
	        typeof origin === "string") {
	        target = getZeroUnit(origin);
	    }
	    var isOriginAnimatable = isAnimatable(key, origin);
	    function start() {
	        var options = {
	            from: origin,
	            to: target,
	            velocity: value.getVelocity(),
	            onComplete: onComplete,
	            onUpdate: function (v) { return value.set(v); },
	        };
	        return valueTransition.type === "inertia" ||
	            valueTransition.type === "decay"
	            ? inertia(__assign(__assign({}, options), valueTransition))
	            : animate(__assign(__assign({}, getPopmotionAnimationOptions(valueTransition, options, key)), { onUpdate: function (v) {
	                    var _a;
	                    options.onUpdate(v);
	                    (_a = valueTransition.onUpdate) === null || _a === void 0 ? void 0 : _a.call(valueTransition, v);
	                }, onComplete: function () {
	                    var _a;
	                    options.onComplete();
	                    (_a = valueTransition.onComplete) === null || _a === void 0 ? void 0 : _a.call(valueTransition);
	                } }));
	    }
	    function set() {
	        var _a;
	        value.set(target);
	        onComplete();
	        (_a = valueTransition === null || valueTransition === void 0 ? void 0 : valueTransition.onComplete) === null || _a === void 0 ? void 0 : _a.call(valueTransition);
	        return { stop: function () { } };
	    }
	    return !isOriginAnimatable ||
	        !isTargetAnimatable ||
	        valueTransition.type === false
	        ? set
	        : start;
	}
	function isZero(value) {
	    return (value === 0 ||
	        (typeof value === "string" &&
	            parseFloat(value) === 0 &&
	            value.indexOf(" ") === -1));
	}
	function getZeroUnit(potentialUnitType) {
	    return typeof potentialUnitType === "number"
	        ? 0
	        : getAnimatableNone("", potentialUnitType);
	}
	function getValueTransition(transition, key) {
	    return transition[key] || transition["default"] || transition;
	}
	/**
	 * Start animation on a MotionValue. This function is an interface between
	 * Framer Motion and Popmotion
	 *
	 * @internal
	 */
	function startAnimation(key, value, target, transition) {
	    if (transition === void 0) { transition = {}; }
	    return value.start(function (onComplete) {
	        var delayTimer;
	        var controls;
	        var animation = getAnimation(key, value, target, transition, onComplete);
	        var delay = getDelayFromTransition(transition, key);
	        var start = function () { return (controls = animation()); };
	        if (delay) {
	            delayTimer = setTimeout(start, secondsToMilliseconds(delay));
	        }
	        else {
	            start();
	        }
	        return function () {
	            clearTimeout(delayTimer);
	            controls === null || controls === void 0 ? void 0 : controls.stop();
	        };
	    });
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/
	/**
	 * Check if value is a numerical string, ie a string that is purely a number eg "100" or "-100.1"
	 */
	var isNumericalString = function (v) { return /^\-?\d*\.?\d+$/.test(v); };

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	var isCustomValue = function (v) {
	    return Boolean(v && typeof v === "object" && v.mix && v.toValue);
	};
	var resolveFinalValueInKeyframes = function (v) {
	    // TODO maybe throw if v.length - 1 is placeholder token?
	    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;
	};

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/
	/**
	 * Tests a provided value against a ValueType
	 */
	var testValueType = function (v) { return function (type) { return type.test(v); }; };

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	/**
	 * ValueType for "auto"
	 */
	var auto$1 = {
	    test: function (v) { return v === "auto"; },
	    parse: function (v) { return v; },
	};

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	/**
	 * A list of value types commonly used for dimensions
	 */
	var dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto$1];
	/**
	 * Tests a dimensional value against the list of dimension ValueTypes
	 */
	var findDimensionValueType = function (v) {
	    return dimensionValueTypes.find(testValueType(v));
	};

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	/**
	 * A list of all ValueTypes
	 */
	var valueTypes = __spreadArray(__spreadArray([], __read(dimensionValueTypes)), [color, complex]);
	/**
	 * Tests a value against the list of ValueTypes
	 */
	var findValueType = function (v) { return valueTypes.find(testValueType(v)); };

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/
	/**
	 * Decides if the supplied variable is an array of variant labels
	 */
	function isVariantLabels(v) {
	    return Array.isArray(v);
	}
	/**
	 * Decides if the supplied variable is variant label
	 */
	function isVariantLabel(v) {
	    return typeof v === "string" || isVariantLabels(v);
	}
	/**
	 * Creates an object containing the latest state of every MotionValue on a VisualElement
	 */
	function getCurrent(visualElement) {
	    var current = {};
	    visualElement.forEachValue(function (value, key) { return (current[key] = value.get()); });
	    return current;
	}
	/**
	 * Creates an object containing the latest velocity of every MotionValue on a VisualElement
	 */
	function getVelocity$1(visualElement) {
	    var velocity = {};
	    visualElement.forEachValue(function (value, key) { return (velocity[key] = value.getVelocity()); });
	    return velocity;
	}
	function resolveVariantFromProps(props, definition, custom, currentValues, currentVelocity) {
	    var _a;
	    if (currentValues === void 0) { currentValues = {}; }
	    if (currentVelocity === void 0) { currentVelocity = {}; }
	    if (typeof definition === "string") {
	        definition = (_a = props.variants) === null || _a === void 0 ? void 0 : _a[definition];
	    }
	    return typeof definition === "function"
	        ? definition(custom !== null && custom !== void 0 ? custom : props.custom, currentValues, currentVelocity)
	        : definition;
	}
	function resolveVariant(visualElement, definition, custom) {
	    var props = visualElement.getProps();
	    return resolveVariantFromProps(props, definition, custom !== null && custom !== void 0 ? custom : props.custom, getCurrent(visualElement), getVelocity$1(visualElement));
	}
	function checkIfControllingVariants(props) {
	    var _a;
	    return (typeof ((_a = props.animate) === null || _a === void 0 ? void 0 : _a.start) === "function" ||
	        isVariantLabel(props.initial) ||
	        isVariantLabel(props.animate) ||
	        isVariantLabel(props.whileHover) ||
	        isVariantLabel(props.whileDrag) ||
	        isVariantLabel(props.whileTap) ||
	        isVariantLabel(props.whileFocus) ||
	        isVariantLabel(props.exit));
	}
	function checkIfVariantNode(props) {
	    return Boolean(checkIfControllingVariants(props) || props.variants);
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	/**
	 * Set VisualElement's MotionValue, creating a new MotionValue for it if
	 * it doesn't exist.
	 */
	function setMotionValue(visualElement, key, value) {
	    if (visualElement.hasValue(key)) {
	        visualElement.getValue(key).set(value);
	    }
	    else {
	        visualElement.addValue(key, motionValue(value));
	    }
	}
	function setTarget(visualElement, definition) {
	    var resolved = resolveVariant(visualElement, definition);
	    var _a = resolved
	        ? visualElement.makeTargetAnimatable(resolved, false)
	        : {}, _b = _a.transitionEnd, transitionEnd = _b === void 0 ? {} : _b; _a.transition; var target = __rest(_a, ["transitionEnd", "transition"]);
	    target = __assign(__assign({}, target), transitionEnd);
	    for (var key in target) {
	        var value = resolveFinalValueInKeyframes(target[key]);
	        setMotionValue(visualElement, key, value);
	    }
	}
	function setVariants(visualElement, variantLabels) {
	    var reversedLabels = __spreadArray([], __read(variantLabels)).reverse();
	    reversedLabels.forEach(function (key) {
	        var _a;
	        var variant = visualElement.getVariant(key);
	        variant && setTarget(visualElement, variant);
	        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function (child) {
	            setVariants(child, variantLabels);
	        });
	    });
	}
	function setValues(visualElement, definition) {
	    if (Array.isArray(definition)) {
	        return setVariants(visualElement, definition);
	    }
	    else if (typeof definition === "string") {
	        return setVariants(visualElement, [definition]);
	    }
	    else {
	        setTarget(visualElement, definition);
	    }
	}
	function checkTargetForNewValues(visualElement, target, origin) {
	    var _a, _b, _c;
	    var _d;
	    var newValueKeys = Object.keys(target).filter(function (key) { return !visualElement.hasValue(key); });
	    var numNewValues = newValueKeys.length;
	    if (!numNewValues)
	        return;
	    for (var i = 0; i < numNewValues; i++) {
	        var key = newValueKeys[i];
	        var targetValue = target[key];
	        var value = null;
	        /**
	         * If the target is a series of keyframes, we can use the first value
	         * in the array. If this first value is null, we'll still need to read from the DOM.
	         */
	        if (Array.isArray(targetValue)) {
	            value = targetValue[0];
	        }
	        /**
	         * If the target isn't keyframes, or the first keyframe was null, we need to
	         * first check if an origin value was explicitly defined in the transition as "from",
	         * if not read the value from the DOM. As an absolute fallback, take the defined target value.
	         */
	        if (value === null) {
	            value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key];
	        }
	        /**
	         * If value is still undefined or null, ignore it. Preferably this would throw,
	         * but this was causing issues in Framer.
	         */
	        if (value === undefined || value === null)
	            continue;
	        if (typeof value === "string" && isNumericalString(value)) {
	            // If this is a number read as a string, ie "0" or "200", convert it to a number
	            value = parseFloat(value);
	        }
	        else if (!findValueType(value) && complex.test(targetValue)) {
	            value = getAnimatableNone(key, targetValue);
	        }
	        visualElement.addValue(key, motionValue(value));
	        (_c = (_d = origin)[key]) !== null && _c !== void 0 ? _c : (_d[key] = value);
	        visualElement.setBaseTarget(key, value);
	    }
	}
	function getOriginFromTransition(key, transition) {
	    if (!transition)
	        return;
	    var valueTransition = transition[key] || transition["default"] || transition;
	    return valueTransition.from;
	}
	function getOrigin(target, transition, visualElement) {
	    var _a, _b;
	    var origin = {};
	    for (var key in target) {
	        origin[key] =
	            (_a = getOriginFromTransition(key, transition)) !== null && _a !== void 0 ? _a : (_b = visualElement.getValue(key)) === null || _b === void 0 ? void 0 : _b.get();
	    }
	    return origin;
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	/**
	 * @internal
	 */
	function animateVisualElement(visualElement, definition, options) {
	    if (options === void 0) { options = {}; }
	    visualElement.notifyAnimationStart();
	    var animation;
	    if (Array.isArray(definition)) {
	        var animations = definition.map(function (variant) {
	            return animateVariant(visualElement, variant, options);
	        });
	        animation = Promise.all(animations);
	    }
	    else if (typeof definition === "string") {
	        animation = animateVariant(visualElement, definition, options);
	    }
	    else {
	        var resolvedDefinition = typeof definition === "function"
	            ? resolveVariant(visualElement, definition, options.custom)
	            : definition;
	        animation = animateTarget(visualElement, resolvedDefinition, options);
	    }
	    return animation.then(function () {
	        return visualElement.notifyAnimationComplete(definition);
	    });
	}
	function animateVariant(visualElement, variant, options) {
	    var _a;
	    if (options === void 0) { options = {}; }
	    var resolved = resolveVariant(visualElement, variant, options.custom);
	    var _b = (resolved || {}).transition, transition = _b === void 0 ? visualElement.getDefaultTransition() || {} : _b;
	    if (options.transitionOverride) {
	        transition = options.transitionOverride;
	    }
	    /**
	     * If we have a variant, create a callback that runs it as an animation.
	     * Otherwise, we resolve a Promise immediately for a composable no-op.
	     */
	    var getAnimation = resolved
	        ? function () { return animateTarget(visualElement, resolved, options); }
	        : function () { return Promise.resolve(); };
	    /**
	     * If we have children, create a callback that runs all their animations.
	     * Otherwise, we resolve a Promise immediately for a composable no-op.
	     */
	    var getChildAnimations = ((_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.size)
	        ? function (forwardDelay) {
	            if (forwardDelay === void 0) { forwardDelay = 0; }
	            var _a = transition.delayChildren, delayChildren = _a === void 0 ? 0 : _a, staggerChildren = transition.staggerChildren, staggerDirection = transition.staggerDirection;
	            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);
	        }
	        : function () { return Promise.resolve(); };
	    /**
	     * If the transition explicitly defines a "when" option, we need to resolve either
	     * this animation or all children animations before playing the other.
	     */
	    var when = transition.when;
	    if (when) {
	        var _c = __read(when === "beforeChildren"
	            ? [getAnimation, getChildAnimations]
	            : [getChildAnimations, getAnimation], 2), first = _c[0], last = _c[1];
	        return first().then(last);
	    }
	    else {
	        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);
	    }
	}
	/**
	 * @internal
	 */
	function animateTarget(visualElement, definition, _a) {
	    var _b;
	    var _c = _a === void 0 ? {} : _a, _d = _c.delay, delay = _d === void 0 ? 0 : _d, transitionOverride = _c.transitionOverride, type = _c.type;
	    var _e = visualElement.makeTargetAnimatable(definition), _f = _e.transition, transition = _f === void 0 ? visualElement.getDefaultTransition() : _f, transitionEnd = _e.transitionEnd, target = __rest(_e, ["transition", "transitionEnd"]);
	    if (transitionOverride)
	        transition = transitionOverride;
	    var animations = [];
	    var animationTypeState = type && ((_b = visualElement.animationState) === null || _b === void 0 ? void 0 : _b.getState()[type]);
	    for (var key in target) {
	        var value = visualElement.getValue(key);
	        var valueTarget = target[key];
	        if (!value ||
	            valueTarget === undefined ||
	            (animationTypeState &&
	                shouldBlockAnimation(animationTypeState, key))) {
	            continue;
	        }
	        var animation = startAnimation(key, value, valueTarget, __assign({ delay: delay }, transition));
	        animations.push(animation);
	    }
	    return Promise.all(animations).then(function () {
	        transitionEnd && setTarget(visualElement, transitionEnd);
	    });
	}
	function animateChildren(visualElement, variant, delayChildren, staggerChildren, staggerDirection, options) {
	    if (delayChildren === void 0) { delayChildren = 0; }
	    if (staggerChildren === void 0) { staggerChildren = 0; }
	    if (staggerDirection === void 0) { staggerDirection = 1; }
	    var animations = [];
	    var maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;
	    var generateStaggerDuration = staggerDirection === 1
	        ? function (i) {
	            if (i === void 0) { i = 0; }
	            return i * staggerChildren;
	        }
	        : function (i) {
	            if (i === void 0) { i = 0; }
	            return maxStaggerDuration - i * staggerChildren;
	        };
	    Array.from(visualElement.variantChildren)
	        .sort(sortByTreeOrder)
	        .forEach(function (child, i) {
	        animations.push(animateVariant(child, variant, __assign(__assign({}, options), { delay: delayChildren + generateStaggerDuration(i) })).then(function () { return child.notifyAnimationComplete(variant); }));
	    });
	    return Promise.all(animations);
	}
	function stopAnimation(visualElement) {
	    visualElement.forEachValue(function (value) { return value.stop(); });
	}
	function sortByTreeOrder(a, b) {
	    return a.sortNodePosition(b);
	}
	/**
	 * Decide whether we should block this animation. Previously, we achieved this
	 * just by checking whether the key was listed in protectedKeys, but this
	 * posed problems if an animation was triggered by afterChildren and protectedKeys
	 * had been set to true in the meantime.
	 */
	function shouldBlockAnimation(_a, key) {
	    
	    var protectedKeys = _a.protectedKeys, needsAnimating = _a.needsAnimating;
	    var shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;
	    needsAnimating[key] = false;
	    return shouldBlock;
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/


	/**
	 * @public
	 */
	function animationControls(startStopNotifier) {
	    /**
	     * Track whether the host component has mounted.
	     */
	    var hasMounted = false;
	    /**
	     * Pending animations that are started before a component is mounted.
	     * TODO: Remove this as animations should only run in effects
	     */
	    var pendingAnimations = [];
	    /**
	     * A collection of linked component animation controls.
	     */
	    var subscribers = new Set();
	    var stopNotification;
	    var controls = {
	        subscribe: function (visualElement) {
	            if (subscribers.size === 0){
	                stopNotification = startStopNotifier?.();
	            }
	            subscribers.add(visualElement);
	            return function () { 
	                subscribers.delete(visualElement); 
	                if (subscribers.size===0){
	                    stopNotification?.();
	                }
	            };
	        },
	        start: function (definition, transitionOverride) {
	            /**
	             * TODO: We only perform this hasMounted check because in Framer we used to
	             * encourage the ability to start an animation within the render phase. This
	             * isn't behaviour concurrent-safe so when we make Framer concurrent-safe
	             * we can ditch this.
	             */
	            if (hasMounted) {
	                var animations_1 = [];
	                subscribers.forEach(function (visualElement) {
	                    animations_1.push(animateVisualElement(visualElement, definition, {
	                        transitionOverride: transitionOverride,
	                    }));
	                });
	                return Promise.all(animations_1);
	            }
	            else {
	                return new Promise(function (resolve) {
	                    pendingAnimations.push({
	                        animation: [definition, transitionOverride],
	                        resolve: resolve,
	                    });
	                });
	            }
	        },
	        set: function (definition) {
	            //invariant(hasMounted, "controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.");
	            return subscribers.forEach(function (visualElement) {
	                setValues(visualElement, definition);
	            });
	        },
	        stop: function () {
	            subscribers.forEach(function (visualElement) {
	                stopAnimation(visualElement);
	            });
	        },
	        mount: function () {
	            hasMounted = true;
	            pendingAnimations.forEach(function (_a) {
	                var animation = _a.animation, resolve = _a.resolve;
	                controls.start.apply(controls, __spreadArray([], __read(animation))).then(resolve);
	            });
	            return function () {
	                hasMounted = false;
	                controls.stop();
	            };
	        },
	    };
	    return controls;
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/
	var valueScaleCorrection = {};
	/**
	 * @internal
	 */
	function addScaleCorrection(correctors) {
	    for (var key in correctors) {
	        valueScaleCorrection[key] = correctors[key];
	    }
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/
	// Call a handler once for each axis
	function eachAxis(handler) {
	    return [handler("x"), handler("y")];
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/
	function noop$2(any) {
	    return any;
	}

	/** 
	based on framer-motion@4.1.15,
	Copyright (c) 2018 Framer B.V.
	*/

	/**
	 * Bounding boxes tend to be defined as top, left, right, bottom. For various operations
	 * it's easier to consider each axis individually. This function returns a bounding box
	 * as a map of single-axis min/max values.
	 */
	function convertBoundingBoxToAxisBox(_a) {
	    var top = _a.top, left = _a.left, right = _a.right, bottom = _a.bottom;
	    return {
	        x: { min: left, max: right },
	        y: { min: top, max: bottom },
	    };
	}
	function convertAxisBoxToBoundingBox(_a) {
	    var x = _a.x, y = _a.y;
	    return {
	        top: y.min,
	        bottom: y.max,
	        left: x.min,
	        right: x.max,
	    };
	}
	/**
	 * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function
	 * provided by Framer to allow measured points to be corrected for device scaling. This is used
	 * when measuring DOM elements and DOM event points.
	 */
	function transformBoundingBox(_a, transformPoint) {
	    var top = _a.top, left = _a.left, bottom = _a.bottom, right = _a.right;
	    if (transformPoint === void 0) { transformPoint = noop$2; }
	    var topLeft = transformPoint({ x: left, y: top });
	    var bottomRight = transformPoint({ x: right, y: bottom });
	    return {
	        top: topLeft.y,
	        left: topLeft.x,
	        bottom: bottomRight.y,
	        right: bottomRight.x,
	    };
	}
	/**
	 * Create an empty axis box of zero size
	 */
	function axisBox() {
	    return { x: { min: 0, max: 1 }, y: { min: 0, max: 1 } };
	}
	function copyAxisBox(box) {
	    return {
	        x: __assign({}, box.x),
	        y: __assign({}, box.y),
	    };
	}
	/**
	 * Create an empty box delta
	 */
	var zeroDelta = {
	    translate: 0,
	    scale: 1,
	    origin: 0,
	    originPoint: 0,
	};
	function delta() {
	    return {
	        x: __assign({}, zeroDelta),
	        y: __assign({}, zeroDelta),
	    };
	}

	/** 
	based on framer-motion@4.1.11,
	Copyright (c) 2018 Framer B.V.
	*/
	function isDraggable(visualElement) {
	    var _a = visualElement.getProps(), drag = _a.drag, _dragX = _a._dragX;
	    return drag && !_dragX;
	}

	/** 
	based on framer-motion@4.1.15,
	Copyright (c) 2018 Framer B.V.
	*/

	/**
	 * Reset an axis to the provided origin box.
	 *
	 * This is a mutative operation.
	 */
	function resetAxis(axis, originAxis) {
	    axis.min = originAxis.min;
	    axis.max = originAxis.max;
	}
	/**
	 * Reset a box to the provided origin box.
	 *
	 * This is a mutative operation.
	 */
	function resetBox(box, originBox) {
	    resetAxis(box.x, originBox.x);
	    resetAxis(box.y, originBox.y);
	}
	/**
	 * Scales a point based on a factor and an originPoint
	 */
	function scalePoint(point, scale, originPoint) {
	    var distanceFromOrigin = point - originPoint;
	    var scaled = scale * distanceFromOrigin;
	    return originPoint + scaled;
	}
	/**
	 * Applies a translate/scale delta to a point
	 */
	function applyPointDelta(point, translate, scale, originPoint, boxScale) {
	    if (boxScale !== undefined) {
	        point = scalePoint(point, boxScale, originPoint);
	    }
	    return scalePoint(point, scale, originPoint) + translate;
	}
	/**
	 * Applies a translate/scale delta to an axis
	 */
	function applyAxisDelta(axis, translate, scale, originPoint, boxScale) {
	    if (translate === void 0) { translate = 0; }
	    if (scale === void 0) { scale = 1; }
	    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);
	    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);
	}
	/**
	 * Applies a translate/scale delta to a box
	 */
	function applyBoxDelta(box, _a) {
	    var x = _a.x, y = _a.y;
	    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);
	    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);
	}
	/**
	 * Apply a transform to an axis from the latest resolved motion values.
	 * This function basically acts as a bridge between a flat motion value map
	 * and applyAxisDelta
	 */
	function applyAxisTransforms(final, axis, transforms, _a) {
	    var _b = __read(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];
	    // Copy the current axis to the final axis before mutation
	    final.min = axis.min;
	    final.max = axis.max;
	    var axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;
	    var originPoint = mix$1(axis.min, axis.max, axisOrigin);
	    // Apply the axis delta to the final axis
	    applyAxisDelta(final, transforms[key], transforms[scaleKey], originPoint, transforms.scale);
	}
	/**
	 * The names of the motion values we want to apply as translation, scale and origin.
	 */
	var xKeys = ["x", "scaleX", "originX"];
	var yKeys = ["y", "scaleY", "originY"];
	/**
	 * Apply a transform to a box from the latest resolved motion values.
	 */
	function applyBoxTransforms(finalBox, box, transforms) {
	    applyAxisTransforms(finalBox.x, box.x, transforms, xKeys);
	    applyAxisTransforms(finalBox.y, box.y, transforms, yKeys);
	}
	/**
	 * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse
	 */
	function removePointDelta(point, translate, scale, originPoint, boxScale) {
	    point -= translate;
	    point = scalePoint(point, 1 / scale, originPoint);
	    if (boxScale !== undefined) {
	        point = scalePoint(point, 1 / boxScale, originPoint);
	    }
	    return point;
	}
	/**
	 * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse
	 */
	function removeAxisDelta(axis, translate, scale, origin, boxScale) {
	    if (translate === void 0) { translate = 0; }
	    if (scale === void 0) { scale = 1; }
	    if (origin === void 0) { origin = 0.5; }
	    var originPoint = mix$1(axis.min, axis.max, origin) - translate;
	    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);
	    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);
	}
	/**
	 * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse
	 * and acts as a bridge between motion values and removeAxisDelta
	 */
	function removeAxisTransforms(axis, transforms, _a) {
	    var _b = __read(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];
	    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale);
	}
	/**
	 * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse
	 * and acts as a bridge between motion values and removeAxisDelta
	 */
	function removeBoxTransforms(box, transforms) {
	    removeAxisTransforms(box.x, transforms, xKeys);
	    removeAxisTransforms(box.y, transforms, yKeys);
	}
	/**
	 * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms
	 * in a tree upon our box before then calculating how to project it into our desired viewport-relative box
	 *
	 * This is the final nested loop within updateLayoutDelta for future refactoring
	 */
	function applyTreeDeltas(box, treeScale, treePath) {
	    var treeLength = treePath.length;
	    if (!treeLength)
	        return;
	    // Reset the treeScale
	    treeScale.x = treeScale.y = 1;
	    var node;
	    var delta;
	    for (var i = 0; i < treeLength; i++) {
	        node = treePath[i];
	        delta = node.getLayoutState().delta;
	        // Incoporate each ancestor's scale into a culmulative treeScale for this component
	        treeScale.x *= delta.x.scale;
	        treeScale.y *= delta.y.scale;
	        // Apply each ancestor's calculated delta into this component's recorded layout box
	        applyBoxDelta(box, delta);
	        // If this is a draggable ancestor, also incorporate the node's transform to the layout box
	        if (isDraggable(node)) {
	            applyBoxTransforms(box, box, node.getLatestValues());
	        }
	    }
	}

	/** 
	based on framer-motion@4.1.15,
	Copyright (c) 2018 Framer B.V.
	*/

	var clampProgress = function (v) { return clamp$1(0, 1, v); };
	/**
	 * Returns true if the provided value is within maxDistance of the provided target
	 */
	function isNear(value, target, maxDistance) {
	    if (target === void 0) { target = 0; }
	    if (maxDistance === void 0) { maxDistance = 0.01; }
	    return distance$1(value, target) < maxDistance;
	}
	function calcLength(axis) {
	    return axis.max - axis.min;
	}
	/**
	 * Calculate a transform origin relative to the source axis, between 0-1, that results
	 * in an asthetically pleasing scale/transform needed to project from source to target.
	 */
	function calcOrigin$1(source, target) {
	    var origin = 0.5;
	    var sourceLength = calcLength(source);
	    var targetLength = calcLength(target);
	    if (targetLength > sourceLength) {
	        origin = progress(target.min, target.max - sourceLength, source.min);
	    }
	    else if (sourceLength > targetLength) {
	        origin = progress(source.min, source.max - targetLength, target.min);
	    }
	    return clampProgress(origin);
	}
	/**
	 * Update the AxisDelta with a transform that projects source into target.
	 *
	 * The transform `origin` is optional. If not provided, it'll be automatically
	 * calculated based on the relative positions of the two bounding boxes.
	 */
	function updateAxisDelta(delta, source, target, origin) {
	    if (origin === void 0) { origin = 0.5; }
	    delta.origin = origin;
	    delta.originPoint = mix$1(source.min, source.max, delta.origin);
	    delta.scale = calcLength(target) / calcLength(source);
	    if (isNear(delta.scale, 1, 0.0001))
	        delta.scale = 1;
	    delta.translate =
	        mix$1(target.min, target.max, delta.origin) - delta.originPoint;
	    if (isNear(delta.translate))
	        delta.translate = 0;
	}
	/**
	 * Update the BoxDelta with a transform that projects the source into the target.
	 *
	 * The transform `origin` is optional. If not provided, it'll be automatically
	 * calculated based on the relative positions of the two bounding boxes.
	 */
	function updateBoxDelta(delta, source, target, origin) {
	    updateAxisDelta(delta.x, source.x, target.x, defaultOrigin(origin.originX));
	    updateAxisDelta(delta.y, source.y, target.y, defaultOrigin(origin.originY));
	}
	/**
	 * Currently this only accepts numerical origins, measured as 0-1, but could
	 * accept pixel values by comparing to the target axis.
	 */
	function defaultOrigin(origin) {
	    return typeof origin === "number" ? origin : 0.5;
	}
	function calcRelativeAxis(target, relative, parent) {
	    target.min = parent.min + relative.min;
	    target.max = target.min + calcLength(relative);
	}
	function calcRelativeBox(projection, parentProjection) {
	    calcRelativeAxis(projection.target.x, projection.relativeTarget.x, parentProjection.target.x);
	    calcRelativeAxis(projection.target.y, projection.relativeTarget.y, parentProjection.target.y);
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/
	var isMotionValue = function (value) {
	    return value !== null && typeof value === "object" && value.getVelocity;
	};

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	var createProjectionState = function () { return ({
	    isEnabled: false,
	    isTargetLocked: false,
	    target: axisBox(),
	    targetFinal: axisBox(),
	}); };
	function createLayoutState() {
	    return {
	        isHydrated: false,
	        layout: axisBox(),
	        layoutCorrected: axisBox(),
	        treeScale: { x: 1, y: 1 },
	        delta: delta(),
	        deltaFinal: delta(),
	        deltaTransform: "",
	    };
	}
	var zeroLayout = createLayoutState();

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	/**
	 * Build a transform style that takes a calculated delta between the element's current
	 * space on screen and projects it into the desired space.
	 */
	function buildLayoutProjectionTransform(_a, treeScale, latestTransform) {
	    var x = _a.x, y = _a.y;
	    /**
	     * The translations we use to calculate are always relative to the viewport coordinate space.
	     * But when we apply scales, we also scale the coordinate space of an element and its children.
	     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need
	     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.
	     */
	    var xTranslate = x.translate / treeScale.x;
	    var yTranslate = y.translate / treeScale.y;
	    var transform = "translate3d(" + xTranslate + "px, " + yTranslate + "px, 0) ";
	    if (latestTransform) {
	        var rotate = latestTransform.rotate, rotateX = latestTransform.rotateX, rotateY = latestTransform.rotateY;
	        if (rotate)
	            transform += "rotate(" + rotate + ") ";
	        if (rotateX)
	            transform += "rotateX(" + rotateX + ") ";
	        if (rotateY)
	            transform += "rotateY(" + rotateY + ") ";
	    }
	    transform += "scale(" + x.scale + ", " + y.scale + ")";
	    return !latestTransform && transform === identityProjection ? "" : transform;
	}
	/**
	 * Take the calculated delta origin and apply it as a transform string.
	 */
	function buildLayoutProjectionTransformOrigin(_a) {
	    var deltaFinal = _a.deltaFinal;
	    return deltaFinal.x.origin * 100 + "% " + deltaFinal.y.origin * 100 + "% 0";
	}
	var identityProjection = buildLayoutProjectionTransform(zeroLayout.delta, zeroLayout.treeScale, { x: 1, y: 1 });

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	var isAnimationControls = function (v) {
	    return typeof v === "object" && typeof (v).start === "function"
	};

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/
	function shallowCompare(next, prev) {
	    if (!Array.isArray(prev))
	        return false;
	    var prevLength = prev.length;
	    if (prevLength !== next.length)
	        return false;
	    for (var i = 0; i < prevLength; i++) {
	        if (prev[i] !== next[i])
	            return false;
	    }
	    return true;
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/
	var AnimationType;
	(function (AnimationType) {
	    AnimationType["Animate"] = "animate";
	    AnimationType["Hover"] = "whileHover";
	    AnimationType["Tap"] = "whileTap";
	    AnimationType["Drag"] = "whileDrag";
	    AnimationType["Focus"] = "whileFocus";
	    AnimationType["Exit"] = "exit";
	})(AnimationType || (AnimationType = {}));

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	var variantPriorityOrder = [
	    AnimationType.Animate,
	    AnimationType.Hover,
	    AnimationType.Tap,
	    AnimationType.Drag,
	    AnimationType.Focus,
	    AnimationType.Exit,
	];
	var reversePriorityOrder = __spreadArray([], __read(variantPriorityOrder)).reverse();
	var numAnimationTypes = variantPriorityOrder.length;
	function animateList(visualElement) {
	    return function (animations) {
	        return Promise.all(animations.map(function (_a) {
	            var animation = _a.animation, options = _a.options;
	            return animateVisualElement(visualElement, animation, options);
	        }));
	    };
	}
	function createAnimationState(visualElement) {
	    var animate = animateList(visualElement);
	    var state = createState();
	    var allAnimatedKeys = {};
	    var isInitialRender = true;
	    /**
	     * This function will be used to reduce the animation definitions for
	     * each active animation type into an object of resolved values for it.
	     */
	    var buildResolvedTypeValues = function (acc, definition) {
	        var resolved = resolveVariant(visualElement, definition);
	        if (resolved) {
	            resolved.transition; var transitionEnd = resolved.transitionEnd, target = __rest(resolved, ["transition", "transitionEnd"]);
	            acc = __assign(__assign(__assign({}, acc), target), transitionEnd);
	        }
	        return acc;
	    };
	    function isAnimated(key) {
	        return allAnimatedKeys[key] !== undefined;
	    }
	    /**
	     * This just allows us to inject mocked animation functions
	     * @internal
	     */
	    function setAnimateFunction(makeAnimator) {
	        animate = makeAnimator(visualElement);
	    }
	    /**
	     * When we receive new props, we need to:
	     * 1. Create a list of protected keys for each type. This is a directory of
	     *    value keys that are currently being "handled" by types of a higher priority
	     *    so that whenever an animation is played of a given type, these values are
	     *    protected from being animated.
	     * 2. Determine if an animation type needs animating.
	     * 3. Determine if any values have been removed from a type and figure out
	     *    what to animate those to.
	     */
	    function animateChanges(options, changedActiveType) {
	        var _a;
	        var props = visualElement.getProps();
	        var context = visualElement.getVariantContext(true) || {};
	        /**
	         * A list of animations that we'll build into as we iterate through the animation
	         * types. This will get executed at the end of the function.
	         */
	        var animations = [];
	        /**
	         * Keep track of which values have been removed. Then, as we hit lower priority
	         * animation types, we can check if they contain removed values and animate to that.
	         */
	        var removedKeys = new Set();
	        /**
	         * A dictionary of all encountered keys. This is an object to let us build into and
	         * copy it without iteration. Each time we hit an animation type we set its protected
	         * keys - the keys its not allowed to animate - to the latest version of this object.
	         */
	        var encounteredKeys = {};
	        /**
	         * If a variant has been removed at a given index, and this component is controlling
	         * variant animations, we want to ensure lower-priority variants are forced to animate.
	         */
	        var removedVariantIndex = Infinity;
	        var _loop_1 = function (i) {
	            var type = reversePriorityOrder[i];
	            var typeState = state[type];
	            var prop = (_a = props[type]) !== null && _a !== void 0 ? _a : context[type];
	            var propIsVariant = isVariantLabel(prop);
	            /**
	             * If this type has *just* changed isActive status, set activeDelta
	             * to that status. Otherwise set to null.
	             */
	            var activeDelta = type === changedActiveType ? typeState.isActive : null;
	            if (activeDelta === false)
	                removedVariantIndex = i;
	            /**
	             * If this prop is an inherited variant, rather than been set directly on the
	             * component itself, we want to make sure we allow the parent to trigger animations.
	             *
	             * TODO: Can probably change this to a !isControllingVariants check
	             */
	            var isInherited = prop === context[type] && prop !== props[type] && propIsVariant;
	            /**
	             *
	             */
	            if (isInherited &&
	                isInitialRender &&
	                visualElement.manuallyAnimateOnMount) {
	                isInherited = false;
	            }
	            /**
	             * Set all encountered keys so far as the protected keys for this type. This will
	             * be any key that has been animated or otherwise handled by active, higher-priortiy types.
	             */
	            typeState.protectedKeys = __assign({}, encounteredKeys);
	            // Check if we can skip analysing this prop early
	            if (
	            // If it isn't active and hasn't *just* been set as inactive
	            (!typeState.isActive && activeDelta === null) ||
	                // If we didn't and don't have any defined prop for this animation type
	                (!prop && !typeState.prevProp) ||
	                // Or if the prop doesn't define an animation
	                isAnimationControls(prop) ||
	                typeof prop === "boolean") {
	                return "continue";
	            }
	            /**
	             * As we go look through the values defined on this type, if we detect
	             * a changed value or a value that was removed in a higher priority, we set
	             * this to true and add this prop to the animation list.
	             */
	            var shouldAnimateType = variantsHaveChanged(typeState.prevProp, prop) ||
	                // If we're making this variant active, we want to always make it active
	                (type === changedActiveType &&
	                    typeState.isActive &&
	                    !isInherited &&
	                    propIsVariant) ||
	                // If we removed a higher-priority variant (i is in reverse order)
	                (i > removedVariantIndex && propIsVariant);
	            /**
	             * As animations can be set as variant lists, variants or target objects, we
	             * coerce everything to an array if it isn't one already
	             */
	            var definitionList = Array.isArray(prop) ? prop : [prop];
	            /**
	             * Build an object of all the resolved values. We'll use this in the subsequent
	             * animateChanges calls to determine whether a value has changed.
	             */
	            var resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});
	            if (activeDelta === false)
	                resolvedValues = {};
	            /**
	             * Now we need to loop through all the keys in the prev prop and this prop,
	             * and decide:
	             * 1. If the value has changed, and needs animating
	             * 2. If it has been removed, and needs adding to the removedKeys set
	             * 3. If it has been removed in a higher priority type and needs animating
	             * 4. If it hasn't been removed in a higher priority but hasn't changed, and
	             *    needs adding to the type's protectedKeys list.
	             */
	            var _b = typeState.prevResolvedValues, prevResolvedValues = _b === void 0 ? {} : _b;
	            var allKeys = __assign(__assign({}, prevResolvedValues), resolvedValues);
	            var markToAnimate = function (key) {
	                shouldAnimateType = true;
	                removedKeys.delete(key);
	                typeState.needsAnimating[key] = true;
	            };
	            for (var key in allKeys) {
	                var next = resolvedValues[key];
	                var prev = prevResolvedValues[key];
	                // If we've already handled this we can just skip ahead
	                if (encounteredKeys.hasOwnProperty(key))
	                    continue;
	                /**
	                 * If the value has changed, we probably want to animate it.
	                 */
	                if (next !== prev) {
	                    /**
	                     * If both values are keyframes, we need to shallow compare them to
	                     * detect whether any value has changed. If it has, we animate it.
	                     */
	                    if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {
	                        if (!shallowCompare(next, prev)) {
	                            markToAnimate(key);
	                        }
	                        else {
	                            /**
	                             * If it hasn't changed, we want to ensure it doesn't animate by
	                             * adding it to the list of protected keys.
	                             */
	                            typeState.protectedKeys[key] = true;
	                        }
	                    }
	                    else if (next !== undefined) {
	                        // If next is defined and doesn't equal prev, it needs animating
	                        markToAnimate(key);
	                    }
	                    else {
	                        // If it's undefined, it's been removed.
	                        removedKeys.add(key);
	                    }
	                }
	                else if (next !== undefined && removedKeys.has(key)) {
	                    /**
	                     * If next hasn't changed and it isn't undefined, we want to check if it's
	                     * been removed by a higher priority
	                     */
	                    markToAnimate(key);
	                }
	                else {
	                    /**
	                     * If it hasn't changed, we add it to the list of protected values
	                     * to ensure it doesn't get animated.
	                     */
	                    typeState.protectedKeys[key] = true;
	                }
	            }
	            /**
	             * Update the typeState so next time animateChanges is called we can compare the
	             * latest prop and resolvedValues to these.
	             */
	            typeState.prevProp = prop;
	            typeState.prevResolvedValues = resolvedValues;
	            /**
	             *
	             */
	            if (typeState.isActive) {
	                encounteredKeys = __assign(__assign({}, encounteredKeys), resolvedValues);
	            }
	            if (isInitialRender && visualElement.blockInitialAnimation) {
	                shouldAnimateType = false;
	            }
	            /**
	             * If this is an inherited prop we want to hard-block animations
	             * TODO: Test as this should probably still handle animations triggered
	             * by removed values?
	             */
	            if (shouldAnimateType && !isInherited) {
	                animations.push.apply(animations, __spreadArray([], __read(definitionList.map(function (animation) { return ({
	                    animation: animation,
	                    options: __assign({ type: type }, options),
	                }); }))));
	            }
	        };
	        /**
	         * Iterate through all animation types in reverse priority order. For each, we want to
	         * detect which values it's handling and whether or not they've changed (and therefore
	         * need to be animated). If any values have been removed, we want to detect those in
	         * lower priority props and flag for animation.
	         */
	        for (var i = 0; i < numAnimationTypes; i++) {
	            _loop_1(i);
	        }
	        allAnimatedKeys = __assign({}, encounteredKeys);
	        /**
	         * If there are some removed value that haven't been dealt with,
	         * we need to create a new animation that falls back either to the value
	         * defined in the style prop, or the last read value.
	         */
	        if (removedKeys.size) {
	            var fallbackAnimation_1 = {};
	            removedKeys.forEach(function (key) {
	                var fallbackTarget = visualElement.getBaseTarget(key);
	                if (fallbackTarget !== undefined) {
	                    fallbackAnimation_1[key] = fallbackTarget;
	                }
	            });
	            animations.push({ animation: fallbackAnimation_1 });
	        }
	        var shouldAnimate = Boolean(animations.length);
	        if (isInitialRender &&
	            props.initial === false &&
	            !visualElement.manuallyAnimateOnMount) {
	            shouldAnimate = false;
	        }
	        isInitialRender = false;
	        return shouldAnimate ? animate(animations) : Promise.resolve();
	    }
	    /**
	     * Change whether a certain animation type is active.
	     */
	    function setActive(type, isActive, options) {
	        var _a;
	        // If the active state hasn't changed, we can safely do nothing here
	        if (state[type].isActive === isActive)
	            return Promise.resolve();
	        // Propagate active change to children
	        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function (child) { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });
	        state[type].isActive = isActive;
	        return animateChanges(options, type);
	    }
	    return {
	        isAnimated: isAnimated,
	        animateChanges: animateChanges,
	        setActive: setActive,
	        setAnimateFunction: setAnimateFunction,
	        getState: function () { return state; },
	    };
	}
	function variantsHaveChanged(prev, next) {
	    if (typeof next === "string") {
	        return next !== prev;
	    }
	    else if (isVariantLabels(next)) {
	        return !shallowCompare(next, prev);
	    }
	    return false;
	}
	function createTypeState(isActive) {
	    if (isActive === void 0) { isActive = false; }
	    return {
	        isActive: isActive,
	        protectedKeys: {},
	        needsAnimating: {},
	        prevResolvedValues: {},
	    };
	}
	function createState() {
	    var _a;
	    return _a = {},
	        _a[AnimationType.Animate] = createTypeState(true),
	        _a[AnimationType.Hover] = createTypeState(),
	        _a[AnimationType.Tap] = createTypeState(),
	        _a[AnimationType.Drag] = createTypeState(),
	        _a[AnimationType.Focus] = createTypeState(),
	        _a[AnimationType.Exit] = createTypeState(),
	        _a;
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	var names = [
	    "LayoutMeasure",
	    "BeforeLayoutMeasure",
	    "LayoutUpdate",
	    "ViewportBoxUpdate",
	    "Update",
	    "Render",
	    "AnimationComplete",
	    "LayoutAnimationComplete",
	    "AnimationStart",
	    "SetAxisTarget",
	    "Unmount",
	];
	function createLifecycles() {
	    var managers = names.map(function () { return new SubscriptionManager(); });
	    var propSubscriptions = {};
	    var lifecycles = {
	        clearAllListeners: function () { return managers.forEach(function (manager) { return manager.clear(); }); },
	        updatePropListeners: function (props) {
	            return names.forEach(function (name) {
	                var _a;
	                (_a = propSubscriptions[name]) === null || _a === void 0 ? void 0 : _a.call(propSubscriptions);
	                var on = "on" + name;
	                var propListener = props[on];
	                if (propListener) {
	                    propSubscriptions[name] = lifecycles[on](propListener);
	                }
	            });
	        },
	    };
	    managers.forEach(function (manager, i) {
	        lifecycles["on" + names[i]] = function (handler) { return manager.add(handler); };
	        lifecycles["notify" + names[i]] = function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            return manager.notify.apply(manager, __spreadArray([], __read(args)));
	        };
	    });
	    return lifecycles;
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	function updateMotionValuesFromProps(element, next, prev) {
	    var _a;
	    for (var key in next) {
	        var nextValue = next[key];
	        var prevValue = prev[key];
	        if (isMotionValue(nextValue)) {
	            /**
	             * If this is a motion value found in props or style, we want to add it
	             * to our visual element's motion value map.
	             */
	            element.addValue(key, nextValue);
	        }
	        else if (isMotionValue(prevValue)) {
	            /**
	             * If we're swapping to a new motion value, create a new motion value
	             * from that
	             */
	            element.addValue(key, motionValue(nextValue));
	        }
	        else if (prevValue !== nextValue) {
	            /**
	             * If this is a flat value that has changed, update the motion value
	             * or create one if it doesn't exist. We only want to do this if we're
	             * not handling the value with our animation state.
	             */
	            if (element.hasValue(key)) {
	                var existingValue = element.getValue(key);
	                // TODO: Only update values that aren't being animated or even looked at
	                !existingValue.hasAnimated && existingValue.set(nextValue);
	            }
	            else {
	                element.addValue(key, motionValue((_a = element.getStaticValue(key)) !== null && _a !== void 0 ? _a : nextValue));
	            }
	        }
	    }
	    // Handle removed values
	    for (var key in prev) {
	        if (next[key] === undefined)
	            element.removeValue(key);
	    }
	    return next;
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	function updateLayoutDeltas(_a, _b, treePath, transformOrigin) {
	    var delta = _a.delta, layout = _a.layout, layoutCorrected = _a.layoutCorrected, treeScale = _a.treeScale;
	    var target = _b.target;
	    /**
	     * Reset the corrected box with the latest values from box, as we're then going
	     * to perform mutative operations on it.
	     */
	    resetBox(layoutCorrected, layout);
	    /**
	     * Apply all the parent deltas to this box to produce the corrected box. This
	     * is the layout box, as it will appear on screen as a result of the transforms of its parents.
	     */
	    applyTreeDeltas(layoutCorrected, treeScale, treePath);
	    /**
	     * Update the delta between the corrected box and the target box before user-set transforms were applied.
	     * This will allow us to calculate the corrected borderRadius and boxShadow to compensate
	     * for our layout reprojection, but still allow them to be scaled correctly by the user.
	     * It might be that to simplify this we may want to accept that user-set scale1 is also corrected
	     * and we wouldn't have to keep and calc both deltas, OR we could support a user setting
	     * to allow people to choose whether these styles are corrected based on just the
	     * layout reprojection or the final bounding box.
	     */
	    updateBoxDelta(delta, layoutCorrected, target, transformOrigin);
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/
	var compareByDepth = function (a, b) {
	    return a.depth - b.depth;
	};

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	var FlatTree = /** @class */ (function () {
	    function FlatTree() {
	        this.children = [];
	        this.isDirty = false;
	    }
	    FlatTree.prototype.add = function (child) {
	        addUniqueItem(this.children, child);
	        this.isDirty = true;
	    };
	    FlatTree.prototype.remove = function (child) {
	        removeItem(this.children, child);
	        this.isDirty = true;
	    };
	    FlatTree.prototype.forEach = function (callback) {
	        this.isDirty && this.children.sort(compareByDepth);
	        var numChildren = this.children.length;
	        for (var i = 0; i < numChildren; i++) {
	            callback(this.children[i]);
	        }
	    };
	    return FlatTree;
	}());

	/** 
	based on framer-motion@4.1.11,
	Copyright (c) 2018 Framer B.V.
	*/

	function tweenAxis(target, prev, next, p) {
	    target.min = mix$1(prev.min, next.min, p);
	    target.max = mix$1(prev.max, next.max, p);
	}
	function calcRelativeOffsetAxis(parent, child) {
	    return {
	        min: child.min - parent.min,
	        max: child.max - parent.min,
	    };
	}
	function calcRelativeOffset(parent, child) {
	    return {
	        x: calcRelativeOffsetAxis(parent.x, child.x),
	        y: calcRelativeOffsetAxis(parent.y, child.y),
	    };
	}

	/** 
	based on framer-motion@4.1.11,
	Copyright (c) 2018 Framer B.V.
	*/

	function setCurrentViewportBox(visualElement) {
	    var projectionParent = visualElement.getProjectionParent();
	    if (!projectionParent) {
	        visualElement.rebaseProjectionTarget();
	        return;
	    }
	    var relativeOffset = calcRelativeOffset(projectionParent.getLayoutState().layout, visualElement.getLayoutState().layout);
	    eachAxis(function (axis) {
	        visualElement.setProjectionTargetAxis(axis, relativeOffset[axis].min, relativeOffset[axis].max, true);
	    });
	}

	/** 
	based on framer-motion@4.1.1,
	Copyright (c) 2018 Framer B.V.
	*/

	var visualElement = function (_a) {
	    var _b = _a.treeType, treeType = _b === void 0 ? "" : _b, build = _a.build, getBaseTarget = _a.getBaseTarget, makeTargetAnimatable = _a.makeTargetAnimatable, measureViewportBox = _a.measureViewportBox, renderInstance = _a.render, readValueFromInstance = _a.readValueFromInstance, resetTransform = _a.resetTransform, restoreTransform = _a.restoreTransform, removeValueFromRenderState = _a.removeValueFromRenderState, sortNodePosition = _a.sortNodePosition, scrapeMotionValuesFromProps = _a.scrapeMotionValuesFromProps;
	    return function (_a, options) {
	        var parent = _a.parent, props = _a.props, presenceId = _a.presenceId, blockInitialAnimation = _a.blockInitialAnimation, visualState = _a.visualState;
	        if (options === void 0) { options = {}; }
	        var latestValues = visualState.latestValues, renderState = visualState.renderState;
	        /**
	         * The instance of the render-specific node that will be hydrated by the
	         * exposed React ref. So for example, this visual element can host a
	         * HTMLElement, plain object, or Three.js object. The functions provided
	         * in VisualElementConfig allow us to interface with this instance.
	         */
	        var instance;
	        /**
	         * Manages the subscriptions for a visual element's lifecycle, for instance
	         * onRender and onViewportBoxUpdate.
	         */
	        var lifecycles = createLifecycles();
	        /**
	         *
	         */
	        var projection = createProjectionState();
	        /**
	         * A reference to the nearest projecting parent. This is either
	         * undefined if we haven't looked for the nearest projecting parent,
	         * false if there is no parent performing layout projection, or a reference
	         * to the projecting parent.
	         */
	        var projectionParent;
	        /**
	         * This is a reference to the visual state of the "lead" visual element.
	         * Usually, this will be this visual element. But if it shares a layoutId
	         * with other visual elements, only one of them will be designated lead by
	         * AnimateSharedLayout. All the other visual elements will take on the visual
	         * appearance of the lead while they crossfade to it.
	         */
	        var leadProjection = projection;
	        var leadLatestValues = latestValues;
	        var unsubscribeFromLeadVisualElement;
	        /**
	         * The latest layout measurements and calculated projections. This
	         * is seperate from the target projection data in visualState as
	         * many visual elements might point to the same piece of visualState as
	         * a target, whereas they might each have different layouts and thus
	         * projection calculations needed to project into the same viewport box.
	         */
	        var layoutState = createLayoutState();
	        /**
	         *
	         */
	        var crossfader;
	        /**
	         * Keep track of whether the viewport box has been updated since the
	         * last time the layout projection was re-calculated.
	         */
	        var hasViewportBoxUpdated = false;
	        /**
	         * A map of all motion values attached to this visual element. Motion
	         * values are source of truth for any given animated value. A motion
	         * value might be provided externally by the component via props.
	         */
	        var values = new Map();
	        /**
	         * A map of every subscription that binds the provided or generated
	         * motion values onChange listeners to this visual element.
	         */
	        var valueSubscriptions = new Map();
	        /**
	         * A reference to the previously-provided motion values as returned
	         * from scrapeMotionValuesFromProps. We use the keys in here to determine
	         * if any motion values need to be removed after props are updated.
	         */
	        var prevMotionValues = {};
	        /**
	         * x/y motion values that track the progress of initiated layout
	         * animations.
	         *
	         * TODO: Target for removal
	         */
	        var projectionTargetProgress;
	        /**
	         * When values are removed from all animation props we need to search
	         * for a fallback value to animate to. These values are tracked in baseTarget.
	         */
	        var baseTarget = __assign({}, latestValues);
	        // Internal methods ========================
	        /**
	         * On mount, this will be hydrated with a callback to disconnect
	         * this visual element from its parent on unmount.
	         */
	        var removeFromVariantTree;
	        /**
	         *
	         */
	        function render() {
	            if (!instance)
	                return;
	            if (element.isProjectionReady()) {
	                /**
	                 * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.
	                 * This is the final box that we will then project into by calculating a transform delta and
	                 * applying it to the corrected box.
	                 */
	                applyBoxTransforms(leadProjection.targetFinal, leadProjection.target, leadLatestValues);
	                /**
	                 * Update the delta between the corrected box and the final target box, after
	                 * user-set transforms are applied to it. This will be used by the renderer to
	                 * create a transform style that will reproject the element from its actual layout
	                 * into the desired bounding box.
	                 */
	                updateBoxDelta(layoutState.deltaFinal, layoutState.layoutCorrected, leadProjection.targetFinal, latestValues);
	            }
	            triggerBuild();
	            renderInstance(instance, renderState);
	        }
	        function triggerBuild() {
	            var valuesToRender = latestValues;
	            if (crossfader && crossfader.isActive()) {
	                var crossfadedValues = crossfader.getCrossfadeState(element);
	                if (crossfadedValues)
	                    valuesToRender = crossfadedValues;
	            }
	            build(element, renderState, valuesToRender, leadProjection, layoutState, options, props);
	        }
	        function update() {
	            lifecycles.notifyUpdate(latestValues);
	        }
	        function updateLayoutProjection() {
	            if (!element.isProjectionReady())
	                return;
	            var delta = layoutState.delta, treeScale = layoutState.treeScale;
	            var prevTreeScaleX = treeScale.x;
	            var prevTreeScaleY = treeScale.y;
	            var prevDeltaTransform = layoutState.deltaTransform;
	            updateLayoutDeltas(layoutState, leadProjection, element.path, latestValues);
	            hasViewportBoxUpdated &&
	                element.notifyViewportBoxUpdate(leadProjection.target, delta);
	            hasViewportBoxUpdated = false;
	            var deltaTransform = buildLayoutProjectionTransform(delta, treeScale);
	            if (deltaTransform !== prevDeltaTransform ||
	                // Also compare calculated treeScale, for values that rely on this only for scale correction
	                prevTreeScaleX !== treeScale.x ||
	                prevTreeScaleY !== treeScale.y) {
	                element.scheduleRender();
	            }
	            layoutState.deltaTransform = deltaTransform;
	        }
	        function updateTreeLayoutProjection() {
	            element.layoutTree.forEach(fireUpdateLayoutProjection);
	        }
	        /**
	         *
	         */
	        function bindToMotionValue(key, value) {
	            var removeOnChange = value.onChange(function (latestValue) {
	                latestValues[key] = latestValue;
	                props.onUpdate && sync.update(update, false, true);
	            });
	            var removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);
	            valueSubscriptions.set(key, function () {
	                removeOnChange();
	                removeOnRenderRequest();
	            });
	        }
	        /**
	         * Any motion values that are provided to the element when created
	         * aren't yet bound to the element, as this would technically be impure.
	         * However, we iterate through the motion values and set them to the
	         * initial values for this component.
	         *
	         * TODO: This is impure and we should look at changing this to run on mount.
	         * Doing so will break some tests but this isn't neccessarily a breaking change,
	         * more a reflection of the test.
	         */
	        var initialMotionValues = scrapeMotionValuesFromProps(props);
	        for (var key in initialMotionValues) {
	            var value = initialMotionValues[key];
	            if (latestValues[key] !== undefined && isMotionValue(value)) {
	                value.set(latestValues[key], false);
	            }
	        }
	        /**
	         * Determine what role this visual element should take in the variant tree.
	         */
	        var isControllingVariants = checkIfControllingVariants(props);
	        var isVariantNode = checkIfVariantNode(props);
	        var element = __assign(__assign({ treeType: treeType, 
	            /**
	             * This is a mirror of the internal instance prop, which keeps
	             * VisualElement type-compatible with React's RefObject.
	             */
	            current: null, 
	            /**
	             * The depth of this visual element within the visual element tree.
	             */
	            depth: parent ? parent.depth + 1 : 0, parent: parent, children: new Set(), 
	            /**
	             * An ancestor path back to the root visual element. This is used
	             * by layout projection to quickly recurse back up the tree.
	             */
	            path: parent ? __spreadArray(__spreadArray([], __read(parent.path)), [parent]) : [], layoutTree: parent ? parent.layoutTree : new FlatTree(), 
	            /**
	             *
	             */
	            presenceId: presenceId,
	            projection: projection, 
	            /**
	             * If this component is part of the variant tree, it should track
	             * any children that are also part of the tree. This is essentially
	             * a shadow tree to simplify logic around how to stagger over children.
	             */
	            variantChildren: isVariantNode ? new Set() : undefined, 
	            /**
	             * Whether this instance is visible. This can be changed imperatively
	             * by AnimateSharedLayout, is analogous to CSS's visibility in that
	             * hidden elements should take up layout, and needs enacting by the configured
	             * render function.
	             */
	            isVisible: undefined, 
	            /**
	             * Normally, if a component is controlled by a parent's variants, it can
	             * rely on that ancestor to trigger animations further down the tree.
	             * However, if a component is created after its parent is mounted, the parent
	             * won't trigger that mount animation so the child needs to.
	             *
	             * TODO: This might be better replaced with a method isParentMounted
	             */
	            manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()), 
	            /**
	             * This can be set by AnimatePresence to force components that mount
	             * at the same time as it to mount as if they have initial={false} set.
	             */
	            blockInitialAnimation: blockInitialAnimation, 
	            /**
	             * Determine whether this component has mounted yet. This is mostly used
	             * by variant children to determine whether they need to trigger their
	             * own animations on mount.
	             */
	            isMounted: function () { return Boolean(instance); }, mount: function (newInstance) {
	                instance = element.current = newInstance;
	                element.pointTo(element);
	                if (isVariantNode && parent && !isControllingVariants) {
	                    removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);
	                }
	                parent === null || parent === void 0 ? void 0 : parent.children.add(element);
	            },
	            /**
	             *
	             */
	            unmount: function () {
	                cancelSync.update(update);
	                cancelSync.render(render);
	                cancelSync.preRender(element.updateLayoutProjection);
	                valueSubscriptions.forEach(function (remove) { return remove(); });
	                element.stopLayoutAnimation();
	                element.layoutTree.remove(element);
	                removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();
	                parent === null || parent === void 0 ? void 0 : parent.children.delete(element);
	                unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();
	                lifecycles.clearAllListeners();
	            },
	            /**
	             * Add a child visual element to our set of children.
	             */
	            addVariantChild: function (child) {
	                var _a;
	                var closestVariantNode = element.getClosestVariantNode();
	                if (closestVariantNode) {
	                    (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);
	                    return function () { return closestVariantNode.variantChildren.delete(child); };
	                }
	            },
	            sortNodePosition: function (other) {
	                /**
	                 * If these nodes aren't even of the same type we can't compare their depth.
	                 */
	                if (!sortNodePosition || treeType !== other.treeType)
	                    return 0;
	                return sortNodePosition(element.getInstance(), other.getInstance());
	            }, 
	            /**
	             * Returns the closest variant node in the tree starting from
	             * this visual element.
	             */
	            getClosestVariantNode: function () {
	                return isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();
	            }, 
	            /**
	             * A method that schedules an update to layout projections throughout
	             * the tree. We inherit from the parent so there's only ever one
	             * job scheduled on the next frame - that of the root visual element.
	             */
	            scheduleUpdateLayoutProjection: parent
	                ? parent.scheduleUpdateLayoutProjection
	                : function () {
	                    return sync.preRender(element.updateTreeLayoutProjection, false, true);
	                }, 
	            /**
	             * Expose the latest layoutId prop.
	             */
	            getLayoutId: function () { return props.layoutId; }, 
	            /**
	             * Returns the current instance.
	             */
	            getInstance: function () { return instance; }, 
	            /**
	             * Get/set the latest static values.
	             */
	            getStaticValue: function (key) { return latestValues[key]; }, setStaticValue: function (key, value) { return (latestValues[key] = value); }, 
	            /**
	             * Returns the latest motion value state. Currently only used to take
	             * a snapshot of the visual element - perhaps this can return the whole
	             * visual state
	             */
	            getLatestValues: function () { return latestValues; }, 
	            /**
	             * Set the visiblity of the visual element. If it's changed, schedule
	             * a render to reflect these changes.
	             */
	            setVisibility: function (visibility) {
	                if (element.isVisible === visibility)
	                    return;
	                element.isVisible = visibility;
	                element.scheduleRender();
	            },
	            /**
	             * Make a target animatable by Popmotion. For instance, if we're
	             * trying to animate width from 100px to 100vw we need to measure 100vw
	             * in pixels to determine what we really need to animate to. This is also
	             * pluggable to support Framer's custom value types like Color,
	             * and CSS variables.
	             */
	            makeTargetAnimatable: function (target, canMutate) {
	                if (canMutate === void 0) { canMutate = true; }
	                return makeTargetAnimatable(element, target, props, canMutate);
	            },
	            // Motion values ========================
	            /**
	             * Add a motion value and bind it to this visual element.
	             */
	            addValue: function (key, value) {
	                // Remove existing value if it exists
	                if (element.hasValue(key))
	                    element.removeValue(key);
	                values.set(key, value);
	                latestValues[key] = value.get();
	                bindToMotionValue(key, value);
	            },
	            /**
	             * Remove a motion value and unbind any active subscriptions.
	             */
	            removeValue: function (key) {
	                var _a;
	                values.delete(key);
	                (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();
	                valueSubscriptions.delete(key);
	                delete latestValues[key];
	                removeValueFromRenderState(key, renderState);
	            }, 
	            /**
	             * Check whether we have a motion value for this key
	             */
	            hasValue: function (key) { return values.has(key); }, 
	            /**
	             * Get a motion value for this key. If called with a default
	             * value, we'll create one if none exists.
	             */
	            getValue: function (key, defaultValue) {
	                var value = values.get(key);
	                if (value === undefined && defaultValue !== undefined) {
	                    value = motionValue(defaultValue);
	                    element.addValue(key, value);
	                }
	                return value;
	            }, 
	            /**
	             * Iterate over our motion values.
	             */
	            forEachValue: function (callback) { return values.forEach(callback); }, 
	            /**
	             * If we're trying to animate to a previously unencountered value,
	             * we need to check for it in our state and as a last resort read it
	             * directly from the instance (which might have performance implications).
	             */
	            readValue: function (key) { var _a; return (_a = latestValues[key]) !== null && _a !== void 0 ? _a : readValueFromInstance(instance, key, options); }, 
	            /**
	             * Set the base target to later animate back to. This is currently
	             * only hydrated on creation and when we first read a value.
	             */
	            setBaseTarget: function (key, value) {
	                baseTarget[key] = value;
	            },
	            /**
	             * Find the base target for a value thats been removed from all animation
	             * props.
	             */
	            getBaseTarget: function (key) {
	                if (getBaseTarget) {
	                    var target = getBaseTarget(props, key);
	                    if (target !== undefined && !isMotionValue(target))
	                        return target;
	                }
	                return baseTarget[key];
	            } }, lifecycles), { 
	            /**
	             * Build the renderer state based on the latest visual state.
	             */
	            build: function () {
	                triggerBuild();
	                return renderState;
	            },
	            /**
	             * Schedule a render on the next animation frame.
	             */
	            scheduleRender: function () {
	                sync.render(render, false, true);
	            }, 
	            /**
	             * Synchronously fire render. It's prefered that we batch renders but
	             * in many circumstances, like layout measurement, we need to run this
	             * synchronously. However in those instances other measures should be taken
	             * to batch reads/writes.
	             */
	            syncRender: render, 
	            /**
	             * Update the provided props. Ensure any newly-added motion values are
	             * added to our map, old ones removed, and listeners updated.
	             */
	            setProps: function (newProps) {
	                props = newProps;
	                lifecycles.updatePropListeners(newProps);
	                prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);
	            }, getProps: function () { return props; }, 
	            // Variants ==============================
	            /**
	             * Returns the variant definition with a given name.
	             */
	            getVariant: function (name) { var _a; return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name]; }, 
	            /**
	             * Returns the defined default transition on this component.
	             */
	            getDefaultTransition: function () { return props.transition; }, 
	            /**
	             * Used by child variant nodes to get the closest ancestor variant props.
	             */
	            getVariantContext: function (startAtParent) {
	                if (startAtParent === void 0) { startAtParent = false; }
	                if (startAtParent)
	                    return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();
	                if (!isControllingVariants) {
	                    var context_1 = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};
	                    if (props.initial !== undefined) {
	                        context_1.initial = props.initial;
	                    }
	                    return context_1;
	                }
	                var context = {};
	                for (var i = 0; i < numVariantProps; i++) {
	                    var name_1 = variantProps[i];
	                    var prop = props[name_1];
	                    if (isVariantLabel(prop) || prop === false) {
	                        context[name_1] = prop;
	                    }
	                }
	                return context;
	            },
	            // Layout projection ==============================
	            /**
	             * Enable layout projection for this visual element. Won't actually
	             * occur until we also have hydrated layout measurements.
	             */
	            enableLayoutProjection: function () {
	                projection.isEnabled = true;
	                element.layoutTree.add(element);
	            },
	            /**
	             * Lock the projection target, for instance when dragging, so
	             * nothing else can try and animate it.
	             */
	            lockProjectionTarget: function () {
	                projection.isTargetLocked = true;
	            },
	            unlockProjectionTarget: function () {
	                element.stopLayoutAnimation();
	                projection.isTargetLocked = false;
	            }, getLayoutState: function () { return layoutState; }, setCrossfader: function (newCrossfader) {
	                crossfader = newCrossfader;
	            }, isProjectionReady: function () {
	                return projection.isEnabled &&
	                    projection.isHydrated &&
	                    layoutState.isHydrated;
	            }, 
	            /**
	             * Start a layout animation on a given axis.
	             */
	            startLayoutAnimation: function (axis, transition, isRelative) {
	                if (isRelative === void 0) { isRelative = false; }
	                var progress = element.getProjectionAnimationProgress()[axis];
	                var _a = isRelative
	                    ? projection.relativeTarget[axis]
	                    : projection.target[axis], min = _a.min, max = _a.max;
	                var length = max - min;
	                progress.clearListeners();
	                progress.set(min);
	                progress.set(min); // Set twice to hard-reset velocity
	                progress.onChange(function (v) {
	                    element.setProjectionTargetAxis(axis, v, v + length, isRelative);
	                });
	                return element.animateMotionValue(axis, progress, 0, transition);
	            },
	            /**
	             * Stop layout animations.
	             */
	            stopLayoutAnimation: function () {
	                eachAxis(function (axis) {
	                    return element.getProjectionAnimationProgress()[axis].stop();
	                });
	            },
	            /**
	             * Measure the current viewport box with or without transforms.
	             * Only measures axis-aligned boxes, rotate and skew must be manually
	             * removed with a re-render to work.
	             */
	            measureViewportBox: function (withTransform) {
	                if (withTransform === void 0) { withTransform = true; }
	                var viewportBox = measureViewportBox(instance, options);
	                if (!withTransform)
	                    removeBoxTransforms(viewportBox, latestValues);
	                return viewportBox;
	            },
	            /**
	             * Get the motion values tracking the layout animations on each
	             * axis. Lazy init if not already created.
	             */
	            getProjectionAnimationProgress: function () {
	                projectionTargetProgress || (projectionTargetProgress = {
	                    x: motionValue(0),
	                    y: motionValue(0),
	                });
	                return projectionTargetProgress;
	            },
	            /**
	             * Update the projection of a single axis. Schedule an update to
	             * the tree layout projection.
	             */
	            setProjectionTargetAxis: function (axis, min, max, isRelative) {
	                if (isRelative === void 0) { isRelative = false; }
	                var target;
	                if (isRelative) {
	                    if (!projection.relativeTarget) {
	                        projection.relativeTarget = axisBox();
	                    }
	                    target = projection.relativeTarget[axis];
	                }
	                else {
	                    projection.relativeTarget = undefined;
	                    target = projection.target[axis];
	                }
	                projection.isHydrated = true;
	                target.min = min;
	                target.max = max;
	                // Flag that we want to fire the onViewportBoxUpdate event handler
	                hasViewportBoxUpdated = true;
	                lifecycles.notifySetAxisTarget();
	            },
	            /**
	             * Rebase the projection target on top of the provided viewport box
	             * or the measured layout. This ensures that non-animating elements
	             * don't fall out of sync differences in measurements vs projections
	             * after a page scroll or other relayout.
	             */
	            rebaseProjectionTarget: function (force, box) {
	                if (box === void 0) { box = layoutState.layout; }
	                var _a = element.getProjectionAnimationProgress(), x = _a.x, y = _a.y;
	                var shouldRebase = !projection.relativeTarget &&
	                    !projection.isTargetLocked &&
	                    !x.isAnimating() &&
	                    !y.isAnimating();
	                if (force || shouldRebase) {
	                    eachAxis(function (axis) {
	                        var _a = box[axis], min = _a.min, max = _a.max;
	                        element.setProjectionTargetAxis(axis, min, max);
	                    });
	                }
	            },
	            /**
	             * Notify the visual element that its layout is up-to-date.
	             * Currently Animate.tsx uses this to check whether a layout animation
	             * needs to be performed.
	             */
	            notifyLayoutReady: function (config) {
	                setCurrentViewportBox(element);
	                element.notifyLayoutUpdate(layoutState.layout, element.prevViewportBox || layoutState.layout, config);
	            }, 
	            /**
	             * Temporarily reset the transform of the instance.
	             */
	            resetTransform: function () { return resetTransform(element, instance, props); }, restoreTransform: function () { return restoreTransform(instance, renderState); }, updateLayoutProjection: updateLayoutProjection,
	            updateTreeLayoutProjection: function () {
	                element.layoutTree.forEach(fireResolveRelativeTargetBox);
	                /**
	                 * Schedule the projection updates at the end of the current preRender
	                 * step. This will ensure that all layout trees will first resolve
	                 * relative projection boxes into viewport boxes, and *then*
	                 * update projections.
	                 */
	                sync.preRender(updateTreeLayoutProjection, false, true);
	                // sync.postRender(() => element.scheduleUpdateLayoutProjection())
	            },
	            getProjectionParent: function () {
	                if (projectionParent === undefined) {
	                    var foundParent = false;
	                    // Search backwards through the tree path
	                    for (var i = element.path.length - 1; i >= 0; i--) {
	                        var ancestor = element.path[i];
	                        if (ancestor.projection.isEnabled) {
	                            foundParent = ancestor;
	                            break;
	                        }
	                    }
	                    projectionParent = foundParent;
	                }
	                return projectionParent;
	            },
	            resolveRelativeTargetBox: function () {
	                var relativeParent = element.getProjectionParent();
	                if (!projection.relativeTarget || !relativeParent)
	                    return;
	                calcRelativeBox(projection, relativeParent.projection);
	                if (isDraggable(relativeParent)) {
	                    var target = projection.target;
	                    applyBoxTransforms(target, target, relativeParent.getLatestValues());
	                }
	            },
	            shouldResetTransform: function () {
	                return Boolean(props._layoutResetTransform);
	            },
	            /**
	             *
	             */
	            pointTo: function (newLead) {
	                leadProjection = newLead.projection;
	                leadLatestValues = newLead.getLatestValues();
	                /**
	                 * Subscribe to lead component's layout animations
	                 */
	                unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();
	                unsubscribeFromLeadVisualElement = pipe(newLead.onSetAxisTarget(element.scheduleUpdateLayoutProjection), newLead.onLayoutAnimationComplete(function () {
	                    var _a;
	                    if (element.isPresent) {
	                        element.presence = Presence.Present;
	                    }
	                    else {
	                        (_a = element.layoutSafeToRemove) === null || _a === void 0 ? void 0 : _a.call(element);
	                    }
	                }));
	            }, 
	            // TODO: Clean this up
	            isPresent: true, presence: Presence.Entering });
	        return element;
	    };
	};
	function fireResolveRelativeTargetBox(child) {
	    child.resolveRelativeTargetBox();
	}
	function fireUpdateLayoutProjection(child) {
	    child.updateLayoutProjection();
	}
	var variantProps = __spreadArray(["initial"], __read(variantPriorityOrder));
	var numVariantProps = variantProps.length;

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/
	/**
	 * A list of all valid MotionProps.
	 *
	 * @internalremarks
	 * This doesn't throw if a `MotionProp` name is missing - it should.
	 */
	var validMotionProps = new Set([
	    "initial",
	    "animate",
	    "exit",
	    "style",
	    "variants",
	    "transition",
	    "transformTemplate",
	    "transformValues",
	    "custom",
	    "inherit",
	    "layout",
	    "layoutId",
	    "onLayoutAnimationComplete",
	    "onViewportBoxUpdate",
	    "onLayoutMeasure",
	    "onBeforeLayoutMeasure",
	    "onAnimationStart",
	    "onAnimationComplete",
	    "onUpdate",
	    "onDragStart",
	    "onDrag",
	    "onDragEnd",
	    "onMeasureDragConstraints",
	    "onDirectionLock",
	    "onDragTransitionEnd",
	    "drag",
	    "dragControls",
	    "dragListener",
	    "dragConstraints",
	    "dragDirectionLock",
	    "_dragX",
	    "_dragY",
	    "dragElastic",
	    "dragMomentum",
	    "dragPropagation",
	    "dragTransition",
	    "whileDrag",
	    "onPan",
	    "onPanStart",
	    "onPanEnd",
	    "onPanSessionStart",
	    "onTap",
	    "onTapStart",
	    "onTapCancel",
	    "onHoverStart",
	    "onHoverEnd",
	    "whileFocus",
	    "whileTap",
	    "whileHover",
	]);
	/**
	 * Check whether a prop name is a valid `MotionProp` key.
	 *
	 * @param key - Name of the property to check
	 * @returns `true` is key is a valid `MotionProp`.
	 *
	 * @public
	 */
	function isValidMotionProp(key) {
	    return validMotionProps.has(key);
	}

	/**
	 * @public
	 */
	const PresenceContext = (c)=> getDomContext("Presence",c)||writable(null);

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	let counter = 0;
	const incrementId = () => counter++;

	function isPresent(context) {
	    return context === null ? true : context.isPresent
	}

	const usePresence = (isCustom=false) => {

	    const context = getContext(PresenceContext)||PresenceContext(isCustom);
	    const id = get_store_value(context) === null ? undefined : incrementId();
	    onMount(()=>{
	        if (get_store_value(context)!==null){
	            get_store_value(context).register(id);
	        }
	    });

	    if (get_store_value(context) === null){
	        return readable([true,null]);
	    }
	    return derived(context,$v=>
	        (!$v.isPresent && $v.onExitComplete) ? 
	            [false, ()=>$v.onExitComplete?.(id)] :
	            [true]
	    )
	};

	/**
	 * @internal
	 */
	const LayoutGroupContext = (c)=>getDomContext("LayoutGroup",c)||writable(null);

	/** 
	based on framer-motion@4.1.11,
	Copyright (c) 2018 Framer B.V.
	*/


	function isProjecting(visualElement) {
	    var isEnabled = visualElement.projection.isEnabled;
	    return isEnabled || visualElement.shouldResetTransform();
	}
	function collectProjectingAncestors(visualElement, ancestors) {
	    if (ancestors === void 0) { ancestors = []; }
	    var parent = visualElement.parent;
	    if (parent)
	        collectProjectingAncestors(parent, ancestors);
	    if (isProjecting(visualElement))
	        ancestors.push(visualElement);
	    return ancestors;
	}
	function collectProjectingChildren(visualElement) {
	    var children = [];
	    var addChild = function (child) {
	        if (isProjecting(child))
	            children.push(child);
	        child.children.forEach(addChild);
	    };
	    visualElement.children.forEach(addChild);
	    return children.sort(compareByDepth);
	}
	/**
	 * Update the layoutState by measuring the DOM layout. This
	 * should be called after resetting any layout-affecting transforms.
	 */
	function updateLayoutMeasurement(visualElement) {
	    if (visualElement.shouldResetTransform())
	        return;
	    var layoutState = visualElement.getLayoutState();
	    visualElement.notifyBeforeLayoutMeasure(layoutState.layout);
	    layoutState.isHydrated = true;
	    layoutState.layout = visualElement.measureViewportBox();
	    layoutState.layoutCorrected = copyAxisBox(layoutState.layout);
	    visualElement.notifyLayoutMeasure(layoutState.layout, visualElement.prevViewportBox || layoutState.layout);
	    sync.update(function () { return visualElement.rebaseProjectionTarget(); });
	}
	/**
	 * Record the viewport box as it was before an expected mutation/re-render
	 */
	function snapshotViewportBox(visualElement,nc) {
	    if (visualElement.shouldResetTransform())
	        return;
	    if (!nc) visualElement.prevViewportBox = visualElement.measureViewportBox(false);
	    /**
	     * Update targetBox to match the prevViewportBox. This is just to ensure
	     * that targetBox is affected by scroll in the same way as the measured box
	     */
	    visualElement.rebaseProjectionTarget(false, visualElement.prevViewportBox);
	}

	/** 
	based on framer-motion@4.1.15,
	Copyright (c) 2018 Framer B.V.
	*/

	var unresolvedJobs = new Set();
	function pushJob(stack, job, pointer) {
	    if (!stack[pointer])
	        stack[pointer] = [];
	    stack[pointer].push(job);
	}
	function batchLayout(callback) {
	    unresolvedJobs.add(callback);
	    return function () { return unresolvedJobs.delete(callback); };
	}
	function flushLayout() {
	    if (!unresolvedJobs.size)
	        return;
	    var pointer = 0;
	    var reads = [[]];
	    var writes = [];
	    var setRead = function (job) { return pushJob(reads, job, pointer); };
	    var setWrite = function (job) {
	        pushJob(writes, job, pointer);
	        pointer++;
	    };
	    /**
	     * Resolve jobs into their array stacks
	     */
	    unresolvedJobs.forEach(function (callback) {
	        callback(setRead, setWrite);
	        pointer = 0;
	    });
	    unresolvedJobs.clear();
	    sync.postRender(function () {
	        setTimeout(function () { return (false); }, 10);
	    });
	    /**
	     * Execute jobs
	     */
	    var numStacks = writes.length;
	    for (var i = 0; i <= numStacks; i++) {
	        reads[i] && reads[i].forEach(executeJob);
	        writes[i] && writes[i].forEach(executeJob);
	    }
	}
	var executeJob = function (job) { return job(); };

	/** 
	based on framer-motion@4.1.15,
	Copyright (c) 2018 Framer B.V.
	*/


	/**
	 * Default handlers for batching VisualElements
	 */
	var defaultHandler = {
	    layoutReady: function (child) { return child.notifyLayoutReady(); },
	};
	/**
	 * Create a batcher to process VisualElements
	 */
	function createBatcher() {
	    var queue = new Set();
	    return {
	        add: function (child) { return queue.add(child); },
	        flush: function (_a) {
	            var _b = _a === void 0 ? defaultHandler : _a, layoutReady = _b.layoutReady, parent = _b.parent;
	            batchLayout(function (read, write) {
	                var order = Array.from(queue).sort(compareByDepth);
	                var ancestors = parent
	                    ? collectProjectingAncestors(parent)
	                    : [];
	                write(function () {
	                    var allElements = __spreadArray(__spreadArray([], __read(ancestors)), __read(order));
	                    allElements.forEach(function (element) { return element.resetTransform(); });
	                });
	                read(function () {
	                    order.forEach(updateLayoutMeasurement);
	                });
	                write(function () {
	                    ancestors.forEach(function (element) { return element.restoreTransform(); });
	                    order.forEach(layoutReady);
	                });
	                read(function () {
	                    /**
	                     * After all children have started animating, ensure any Entering components are set to Present.
	                     * If we add deferred animations (set up all animations and then start them in two loops) this
	                     * could be moved to the start loop. But it needs to happen after all the animations configs
	                     * are generated in AnimateSharedLayout as this relies on presence data
	                     */
	                    order.forEach(function (child) {
	                        if (child.isPresent)
	                            child.presence = Presence.Present;
	                    });
	                });
	                write(function () {
	                    /**
	                     * Starting these animations will have queued jobs on the frame loop. In some situations,
	                     * like when removing an element, these will be processed too late after the DOM is manipulated,
	                     * leaving a flash of incorrectly-projected content. By manually flushing these jobs
	                     * we ensure there's no flash.
	                     */
	                    flushSync.preRender();
	                    flushSync.render();
	                });
	                read(function () {
	                    /**
	                     * Schedule a callback at the end of the following frame to assign the latest projection
	                     * box to the prevViewportBox snapshot. Once global batching is in place this could be run
	                     * synchronously. But for now it ensures that if any nested `AnimateSharedLayout` top-level
	                     * child attempts to calculate its previous relative position against a prevViewportBox
	                     * it will be against its latest projection box instead, as the snapshot is useless beyond this
	                     * render.
	                     */
	                    sync.postRender(function () {
	                        return order.forEach(assignProjectionToSnapshot);
	                    });
	                    queue.clear();
	                });
	            });
	            // TODO: Need to find a layout-synchronous way of flushing this
	            flushLayout();
	        },
	    };
	}
	function assignProjectionToSnapshot(child) {
	    child.prevViewportBox = child.projection.target;
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/


	var SharedLayoutContext = (custom) => getDomContext("SharedLayout",custom)||writable(createBatcher());
	/**
	 * @internal
	 */
	var FramerTreeLayoutContext = ()=> writable(createBatcher());

	function isSharedLayout(context) {
	    return !!context.forceUpdate;
	}

	const LazyContext = (c) => getDomContext("Lazy",c) || writable({ strict: false });

	/* node_modules/svelte-motion/src/context/MotionContext/MotionContext.svelte generated by Svelte v4.2.10 */

	const MotionContext = c => getDomContext("Motion", c) || writable({});

	/* node_modules/svelte-motion/src/motion/utils/UseVisualElement.svelte generated by Svelte v4.2.10 */

	const get_default_slot_changes$m = dirty => ({
		visualElement: dirty & /*visualElement*/ 1
	});

	const get_default_slot_context$m = ctx => ({ visualElement: /*visualElement*/ ctx[0] });

	function create_fragment$$(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[19].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], get_default_slot_context$m);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, visualElement*/ 262145)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[18],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[18], dirty, get_default_slot_changes$m),
							get_default_slot_context$m
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$$.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const ssr = false;

	function instance$$($$self, $$props, $$invalidate) {
		let $presenceContext;
		let $config;
		let $lazyContext;
		let $layoutGroupId;
		let $mc;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('UseVisualElement', slots, ['default']);
		let { createVisualElement = undefined, props, Component, visualState, isCustom } = $$props;
		const config = getContext(MotionConfigContext) || MotionConfigContext(isCustom);
		validate_store(config, 'config');
		component_subscribe($$self, config, value => $$invalidate(15, $config = value));
		const presenceContext = getContext(PresenceContext) || PresenceContext(isCustom);
		validate_store(presenceContext, 'presenceContext');
		component_subscribe($$self, presenceContext, value => $$invalidate(14, $presenceContext = value));
		const lazyContext = getContext(LazyContext) || LazyContext(isCustom);
		validate_store(lazyContext, 'lazyContext');
		component_subscribe($$self, lazyContext, value => $$invalidate(20, $lazyContext = value));
		const mc = getContext(MotionContext) || MotionContext(isCustom);
		validate_store(mc, 'mc');
		component_subscribe($$self, mc, value => $$invalidate(17, $mc = value));
		let parent = get_store_value(mc).visualElement;
		const layoutGroupId = getContext(LayoutGroupContext) || LayoutGroupContext(isCustom);
		validate_store(layoutGroupId, 'layoutGroupId');
		component_subscribe($$self, layoutGroupId, value => $$invalidate(16, $layoutGroupId = value));

		let layoutId = $layoutGroupId && props.layoutId !== undefined
		? $layoutGroupId + "-" + props.layoutId
		: props.layoutId;

		let visualElementRef = undefined;

		/**
	 * If we haven't preloaded a renderer, check to see if we have one lazy-loaded
	 */
		if (!createVisualElement) {
			createVisualElement = $lazyContext.renderer;
		}

		let visualElement = visualElementRef;

		afterUpdate(() => {
			tick().then(() => {
				visualElement.animationState?.animateChanges();
			});
		});

		onDestroy(() => {
			visualElement?.notifyUnmount();
		});

		$$self.$$.on_mount.push(function () {
			if (props === undefined && !('props' in $$props || $$self.$$.bound[$$self.$$.props['props']])) {
				console.warn("<UseVisualElement> was created without expected prop 'props'");
			}

			if (Component === undefined && !('Component' in $$props || $$self.$$.bound[$$self.$$.props['Component']])) {
				console.warn("<UseVisualElement> was created without expected prop 'Component'");
			}

			if (visualState === undefined && !('visualState' in $$props || $$self.$$.bound[$$self.$$.props['visualState']])) {
				console.warn("<UseVisualElement> was created without expected prop 'visualState'");
			}

			if (isCustom === undefined && !('isCustom' in $$props || $$self.$$.bound[$$self.$$.props['isCustom']])) {
				console.warn("<UseVisualElement> was created without expected prop 'isCustom'");
			}
		});

		const writable_props = ['createVisualElement', 'props', 'Component', 'visualState', 'isCustom'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UseVisualElement> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('createVisualElement' in $$props) $$invalidate(6, createVisualElement = $$props.createVisualElement);
			if ('props' in $$props) $$invalidate(7, props = $$props.props);
			if ('Component' in $$props) $$invalidate(8, Component = $$props.Component);
			if ('visualState' in $$props) $$invalidate(9, visualState = $$props.visualState);
			if ('isCustom' in $$props) $$invalidate(10, isCustom = $$props.isCustom);
			if ('$$scope' in $$props) $$invalidate(18, $$scope = $$props.$$scope);
		};

		$$self.$capture_state = () => ({
			ssr,
			afterUpdate,
			getContext,
			onDestroy,
			tick,
			PresenceContext,
			LazyContext,
			MotionConfigContext,
			LayoutGroupContext,
			MotionContext,
			isPresent,
			get: get_store_value,
			createVisualElement,
			props,
			Component,
			visualState,
			isCustom,
			config,
			presenceContext,
			lazyContext,
			mc,
			parent,
			layoutGroupId,
			layoutId,
			visualElementRef,
			visualElement,
			$presenceContext,
			$config,
			$lazyContext,
			$layoutGroupId,
			$mc
		});

		$$self.$inject_state = $$props => {
			if ('createVisualElement' in $$props) $$invalidate(6, createVisualElement = $$props.createVisualElement);
			if ('props' in $$props) $$invalidate(7, props = $$props.props);
			if ('Component' in $$props) $$invalidate(8, Component = $$props.Component);
			if ('visualState' in $$props) $$invalidate(9, visualState = $$props.visualState);
			if ('isCustom' in $$props) $$invalidate(10, isCustom = $$props.isCustom);
			if ('parent' in $$props) $$invalidate(11, parent = $$props.parent);
			if ('layoutId' in $$props) $$invalidate(12, layoutId = $$props.layoutId);
			if ('visualElementRef' in $$props) $$invalidate(13, visualElementRef = $$props.visualElementRef);
			if ('visualElement' in $$props) $$invalidate(0, visualElement = $$props.visualElement);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*$mc*/ 131072) {
				$$invalidate(11, parent = $mc.visualElement);
			}

			if ($$self.$$.dirty & /*$layoutGroupId, props*/ 65664) {
				$$invalidate(12, layoutId = $layoutGroupId && props.layoutId !== undefined
				? $layoutGroupId + "-" + props.layoutId
				: props.layoutId);
			}

			if ($$self.$$.dirty & /*visualElementRef, createVisualElement, Component, visualState, parent, props, layoutId, $presenceContext*/ 31680) {
				if (!visualElementRef && createVisualElement) {
					$$invalidate(13, visualElementRef = createVisualElement(Component, {
						visualState,
						parent,
						props: { ...props, layoutId },
						presenceId: $presenceContext?.id,
						blockInitialAnimation: $presenceContext?.initial === false
					}));
				}
			}

			if ($$self.$$.dirty & /*visualElementRef*/ 8192) {
				$$invalidate(0, visualElement = visualElementRef);
			}

			if ($$self.$$.dirty & /*visualElement, $config, props, layoutId, $presenceContext, parent*/ 55425) {
				if (visualElement) {
					visualElement.setProps({ ...$config, ...props, layoutId });
					$$invalidate(0, visualElement.isPresent = isPresent($presenceContext), visualElement);
					$$invalidate(0, visualElement.isPresenceRoot = !parent || parent.presenceId !== $presenceContext?.id, visualElement);

					/**
	 * Fire a render to ensure the latest state is reflected on-screen.
	 */
					visualElement.syncRender();
				}
			}
		};

		return [
			visualElement,
			config,
			presenceContext,
			lazyContext,
			mc,
			layoutGroupId,
			createVisualElement,
			props,
			Component,
			visualState,
			isCustom,
			parent,
			layoutId,
			visualElementRef,
			$presenceContext,
			$config,
			$layoutGroupId,
			$mc,
			$$scope,
			slots
		];
	}

	class UseVisualElement extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$$, create_fragment$$, safe_not_equal, {
				createVisualElement: 6,
				props: 7,
				Component: 8,
				visualState: 9,
				isCustom: 10
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "UseVisualElement",
				options,
				id: create_fragment$$.name
			});
		}

		get createVisualElement() {
			throw new Error("<UseVisualElement>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set createVisualElement(value) {
			throw new Error("<UseVisualElement>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get props() {
			throw new Error("<UseVisualElement>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set props(value) {
			throw new Error("<UseVisualElement>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get Component() {
			throw new Error("<UseVisualElement>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set Component(value) {
			throw new Error("<UseVisualElement>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get visualState() {
			throw new Error("<UseVisualElement>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set visualState(value) {
			throw new Error("<UseVisualElement>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get isCustom() {
			throw new Error("<UseVisualElement>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set isCustom(value) {
			throw new Error("<UseVisualElement>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var UseVisualElement$1 = UseVisualElement;

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	var createDefinition = function (propNames) { return ({
	    isEnabled: function (props) { return propNames.some(function (name) { return !!props[name]; }); },
	}); };
	var featureDefinitions = {
	    measureLayout: createDefinition(["layout", "layoutId", "drag"]),
	    animation: createDefinition([
	        "animate",
	        "exit",
	        "variants",
	        "whileHover",
	        "whileTap",
	        "whileFocus",
	        "whileDrag",
	    ]),
	    exit: createDefinition(["exit"]),
	    drag: createDefinition(["drag", "dragControls"]),
	    focus: createDefinition(["whileFocus"]),
	    hover: createDefinition(["whileHover", "onHoverStart", "onHoverEnd"]),
	    tap: createDefinition(["whileTap", "onTap", "onTapStart", "onTapCancel"]),
	    pan: createDefinition([
	        "onPan",
	        "onPanStart",
	        "onPanSessionStart",
	        "onPanEnd",
	    ]),
	    layoutAnimation: createDefinition(["layout", "layoutId"]),
	};
	function loadFeatures(features) {
	    for (var key in features) {
	        var Component = features[key];
	        if (Component !== null){
	            featureDefinitions[key].Component = Component;
	        }
	    }
	}

	/* node_modules/svelte-motion/src/motion/features/UseFeatures.svelte generated by Svelte v4.2.10 */

	const { Object: Object_1$2 } = globals;
	const get_default_slot_changes$l = dirty => ({ features: dirty & /*features*/ 2 });
	const get_default_slot_context$l = ctx => ({ features: /*features*/ ctx[1] });

	// (40:0) {#if visualElement}
	function create_if_block$n(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[4].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], get_default_slot_context$l);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, features*/ 10)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[3],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, get_default_slot_changes$l),
							get_default_slot_context$l
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$n.name,
			type: "if",
			source: "(40:0) {#if visualElement}",
			ctx
		});

		return block;
	}

	function create_fragment$_(ctx) {
		let if_block_anchor;
		let current;
		let if_block = /*visualElement*/ ctx[0] && create_if_block$n(ctx);

		const block = {
			c: function create() {
				if (if_block) if_block.c();
				if_block_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (if_block) if_block.m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (/*visualElement*/ ctx[0]) {
					if (if_block) {
						if_block.p(ctx, dirty);

						if (dirty & /*visualElement*/ 1) {
							transition_in(if_block, 1);
						}
					} else {
						if_block = create_if_block$n(ctx);
						if_block.c();
						transition_in(if_block, 1);
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					group_outros();

					transition_out(if_block, 1, 1, () => {
						if_block = null;
					});

					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if (if_block) if_block.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$_.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$_($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('UseFeatures', slots, ['default']);
		const featureNames = Object.keys(featureDefinitions);
		const numFeatures = featureNames.length;
		let { visualElement, props } = $$props;
		let features = [];

		$$self.$$.on_mount.push(function () {
			if (visualElement === undefined && !('visualElement' in $$props || $$self.$$.bound[$$self.$$.props['visualElement']])) {
				console.warn("<UseFeatures> was created without expected prop 'visualElement'");
			}

			if (props === undefined && !('props' in $$props || $$self.$$.bound[$$self.$$.props['props']])) {
				console.warn("<UseFeatures> was created without expected prop 'props'");
			}
		});

		const writable_props = ['visualElement', 'props'];

		Object_1$2.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UseFeatures> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('visualElement' in $$props) $$invalidate(0, visualElement = $$props.visualElement);
			if ('props' in $$props) $$invalidate(2, props = $$props.props);
			if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
		};

		$$self.$capture_state = () => ({
			featureDefinitions,
			featureNames,
			numFeatures,
			visualElement,
			props,
			features
		});

		$$self.$inject_state = $$props => {
			if ('visualElement' in $$props) $$invalidate(0, visualElement = $$props.visualElement);
			if ('props' in $$props) $$invalidate(2, props = $$props.props);
			if ('features' in $$props) $$invalidate(1, features = $$props.features);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*props, features, visualElement*/ 7) {
				// If this is a static component, or we're rendering on the server, we don't load
				// any feature components
				// Decide which features we should render and add them to the returned array
				{
					$$invalidate(1, features = []);

					for (let i = 0; i < numFeatures; i++) {
						const name = featureNames[i];
						const { isEnabled, Component } = featureDefinitions[name];

						/**
	 * It might be possible in the future to use this moment to
	 * dynamically request functionality. In initial tests this
	 * was producing a lot of duplication amongst bundles.
	 */
						if (isEnabled(props) && Component) {
							features.push({
								Component,
								key: name,
								props,
								visualElement
							});
						}
					}
				}
			}
		};

		return [visualElement, features, props, $$scope, slots];
	}

	class UseFeatures extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$_, create_fragment$_, safe_not_equal, { visualElement: 0, props: 2 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "UseFeatures",
				options,
				id: create_fragment$_.name
			});
		}

		get visualElement() {
			throw new Error("<UseFeatures>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set visualElement(value) {
			throw new Error("<UseFeatures>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get props() {
			throw new Error("<UseFeatures>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set props(value) {
			throw new Error("<UseFeatures>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var UseFeatures$1 = UseFeatures;

	/* node_modules/svelte-motion/src/context/MotionContext/MotionContextProvider.svelte generated by Svelte v4.2.10 */

	function create_fragment$Z(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[3].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[2],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$Z.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$Z($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('MotionContextProvider', slots, ['default']);
		let { value, isCustom } = $$props;
		let store = writable(value);
		setContext(MotionContext, store);
		setDomContext("Motion", isCustom, store);

		// Since useMotionRef is not called on destroy, the visual element is unmounted here
		onDestroy(() => {
			value?.visualElement?.unmount();
		});

		$$self.$$.on_mount.push(function () {
			if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
				console.warn("<MotionContextProvider> was created without expected prop 'value'");
			}

			if (isCustom === undefined && !('isCustom' in $$props || $$self.$$.bound[$$self.$$.props['isCustom']])) {
				console.warn("<MotionContextProvider> was created without expected prop 'isCustom'");
			}
		});

		const writable_props = ['value', 'isCustom'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<MotionContextProvider> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('value' in $$props) $$invalidate(0, value = $$props.value);
			if ('isCustom' in $$props) $$invalidate(1, isCustom = $$props.isCustom);
			if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
		};

		$$self.$capture_state = () => ({
			onDestroy,
			setContext,
			writable,
			setDomContext,
			MotionContext,
			value,
			isCustom,
			store
		});

		$$self.$inject_state = $$props => {
			if ('value' in $$props) $$invalidate(0, value = $$props.value);
			if ('isCustom' in $$props) $$invalidate(1, isCustom = $$props.isCustom);
			if ('store' in $$props) $$invalidate(4, store = $$props.store);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*value*/ 1) {
				store.set(value);
			}
		};

		return [value, isCustom, $$scope, slots];
	}

	class MotionContextProvider extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$Z, create_fragment$Z, safe_not_equal, { value: 0, isCustom: 1 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "MotionContextProvider",
				options,
				id: create_fragment$Z.name
			});
		}

		get value() {
			throw new Error("<MotionContextProvider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set value(value) {
			throw new Error("<MotionContextProvider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get isCustom() {
			throw new Error("<MotionContextProvider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set isCustom(value) {
			throw new Error("<MotionContextProvider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var MotionContextProvider$1 = MotionContextProvider;

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/
	var createHtmlRenderState = function () { return ({
	    style: {},
	    transform: {},
	    transformKeys: [],
	    transformOrigin: {},
	    vars: {},
	}); };

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	var createSvgRenderState = function () { return (__assign(__assign({}, createHtmlRenderState()), { attrs: {} })); };

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	/**
	 * A list of all transformable axes. We'll use this list to generated a version
	 * of each axes for each transform.
	 */
	var transformAxes = ["", "X", "Y", "Z"];
	/**
	 * An ordered array of each transformable value. By default, transform values
	 * will be sorted to this order.
	 */
	var order = ["translate", "scale", "rotate", "skew"];
	/**
	 * Generate a list of every possible transform key.
	 */
	var transformProps = ["transformPerspective", "x", "y", "z"];
	order.forEach(function (operationKey) {
	    return transformAxes.forEach(function (axesKey) {
	        return transformProps.push(operationKey + axesKey);
	    });
	});
	/**
	 * A function to use with Array.sort to sort transform keys by their default order.
	 */
	function sortTransformProps(a, b) {
	    return transformProps.indexOf(a) - transformProps.indexOf(b);
	}
	/**
	 * A quick lookup for transform props.
	 */
	var transformPropSet = new Set(transformProps);
	function isTransformProp(key) {
	    return transformPropSet.has(key);
	}
	/**
	 * A quick lookup for transform origin props
	 */
	var transformOriginProps = new Set(["originX", "originY", "originZ"]);
	function isTransformOriginProp(key) {
	    return transformOriginProps.has(key);
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	function isForcedMotionValue(key, _a) {
	    var layout = _a.layout, layoutId = _a.layoutId;
	    return (isTransformProp(key) ||
	        isTransformOriginProp(key) ||
	        ((layout || layoutId !== undefined) && !!valueScaleCorrection[key]));
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	var translateAlias = {
	    x: "translateX",
	    y: "translateY",
	    z: "translateZ",
	    transformPerspective: "perspective",
	};
	/**
	 * Build a CSS transform style from individual x/y/scale etc properties.
	 *
	 * This outputs with a default order of transforms/scales/rotations, this can be customised by
	 * providing a transformTemplate function.
	 */
	function buildTransform(_a, _b, transformIsDefault, transformTemplate) {
	    var transform = _a.transform, transformKeys = _a.transformKeys;
	    var _c = _b.enableHardwareAcceleration, enableHardwareAcceleration = _c === void 0 ? true : _c, _d = _b.allowTransformNone, allowTransformNone = _d === void 0 ? true : _d;
	    // The transform string we're going to build into.
	    var transformString = "";
	    // Transform keys into their default order - this will determine the output order.
	    transformKeys.sort(sortTransformProps);
	    // Track whether the defined transform has a defined z so we don't add a
	    // second to enable hardware acceleration
	    var transformHasZ = false;
	    // Loop over each transform and build them into transformString
	    var numTransformKeys = transformKeys.length;
	    for (var i = 0; i < numTransformKeys; i++) {
	        var key = transformKeys[i];
	        transformString += (translateAlias[key] || key) + "(" + transform[key] + ") ";
	        if (key === "z")
	            transformHasZ = true;
	    }
	    if (!transformHasZ && enableHardwareAcceleration) {
	        transformString += "translateZ(0)";
	    }
	    else {
	        transformString = transformString.trim();
	    }
	    // If we have a custom `transform` template, pass our transform values and
	    // generated transformString to that before returning
	    if (transformTemplate) {
	        transformString = transformTemplate(transform, transformIsDefault ? "" : transformString);
	    }
	    else if (allowTransformNone && transformIsDefault) {
	        transformString = "none";
	    }
	    return transformString;
	}
	/**
	 * Build a transformOrigin style. Uses the same defaults as the browser for
	 * undefined origins.
	 */
	function buildTransformOrigin(_a) {
	    var _b = _a.originX, originX = _b === void 0 ? "50%" : _b, _c = _a.originY, originY = _c === void 0 ? "50%" : _c, _d = _a.originZ, originZ = _d === void 0 ? 0 : _d;
	    return originX + " " + originY + " " + originZ;
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/
	/**
	 * Returns true if the provided key is a CSS variable
	 */
	function isCSSVariable$1(key) {
	    return key.startsWith("--");
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/
	/**
	 * Provided a value and a ValueType, returns the value as that value type.
	 */
	var getValueAsType = function (value, type) {
	    return type && typeof value === "number"
	        ? type.transform(value)
	        : value;
	};

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	function buildHTMLStyles(state, latestValues, projection, layoutState, options, transformTemplate, buildProjectionTransform, buildProjectionTransformOrigin) {
	    var _a;
	    var style = state.style, vars = state.vars, transform = state.transform, transformKeys = state.transformKeys, transformOrigin = state.transformOrigin;
	    // Empty the transformKeys array. As we're throwing out refs to its items
	    // this might not be as cheap as suspected. Maybe using the array as a buffer
	    // with a manual incrementation would be better.
	    transformKeys.length = 0;
	    // Track whether we encounter any transform or transformOrigin values.
	    var hasTransform = false;
	    var hasTransformOrigin = false;
	    // Does the calculated transform essentially equal "none"?
	    var transformIsNone = true;
	    /**
	     * Loop over all our latest animated values and decide whether to handle them
	     * as a style or CSS variable.
	     *
	     * Transforms and transform origins are kept seperately for further processing.
	     */
	    for (var key in latestValues) {
	        var value = latestValues[key];
	        /**
	         * If this is a CSS variable we don't do any further processing.
	         */
	        if (isCSSVariable$1(key)) {
	            vars[key] = value;
	            continue;
	        }
	        // Convert the value to its default value type, ie 0 -> "0px"
	        var valueType = numberValueTypes[key];
	        var valueAsType = getValueAsType(value, valueType);
	        if (isTransformProp(key)) {
	            // If this is a transform, flag to enable further transform processing
	            hasTransform = true;
	            transform[key] = valueAsType;
	            transformKeys.push(key);
	            // If we already know we have a non-default transform, early return
	            if (!transformIsNone)
	                continue;
	            // Otherwise check to see if this is a default transform
	            if (value !== ((_a = valueType.default) !== null && _a !== void 0 ? _a : 0))
	                transformIsNone = false;
	        }
	        else if (isTransformOriginProp(key)) {
	            transformOrigin[key] = valueAsType;
	            // If this is a transform origin, flag and enable further transform-origin processing
	            hasTransformOrigin = true;
	        }
	        else {
	            /**
	             * If layout projection is on, and we need to perform scale correction for this
	             * value type, perform it.
	             */
	            if (layoutState &&
	                projection &&
	                layoutState.isHydrated &&
	                valueScaleCorrection[key]) {
	                var correctedValue = valueScaleCorrection[key].process(value, layoutState, projection);
	                /**
	                 * Scale-correctable values can define a number of other values to break
	                 * down into. For instance borderRadius needs applying to borderBottomLeftRadius etc
	                 */
	                var applyTo = valueScaleCorrection[key].applyTo;
	                if (applyTo) {
	                    var num = applyTo.length;
	                    for (var i = 0; i < num; i++) {
	                        style[applyTo[i]] = correctedValue;
	                    }
	                }
	                else {
	                    style[key] = correctedValue;
	                }
	            }
	            else {
	                style[key] = valueAsType;
	            }
	        }
	    }
	    if (layoutState &&
	        projection &&
	        buildProjectionTransform &&
	        buildProjectionTransformOrigin) {
	        style.transform = buildProjectionTransform(layoutState.deltaFinal, layoutState.treeScale, hasTransform ? transform : undefined);
	        if (transformTemplate) {
	            style.transform = transformTemplate(transform, style.transform);
	        }
	        style.transformOrigin = buildProjectionTransformOrigin(layoutState);
	    }
	    else {
	        if (hasTransform) {
	            style.transform = buildTransform(state, options, transformIsNone, transformTemplate);
	        }
	        if (hasTransformOrigin) {
	            style.transformOrigin = buildTransformOrigin(transformOrigin);
	        }
	    }
	}

	/* node_modules/svelte-motion/src/render/html/UseInitialMotionValues.svelte generated by Svelte v4.2.10 */
	const get_default_slot_changes$k = dirty => ({ styles: dirty & /*styles*/ 1 });
	const get_default_slot_context$k = ctx => ({ styles: /*styles*/ ctx[0] });

	function create_fragment$Y(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[5].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], get_default_slot_context$k);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, styles*/ 17)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[4],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, get_default_slot_changes$k),
							get_default_slot_context$k
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$Y.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$Y($$self, $$props, $$invalidate) {
		let styles;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('UseInitialMotionValues', slots, ['default']);
		let { visualState, isStatic, props } = $$props;

		const memo = () => {
			let state = createHtmlRenderState();
			buildHTMLStyles(state, visualState, undefined, undefined, { enableHardwareAcceleration: !isStatic }, props.transformTemplate);
			const { vars, style } = state;
			return { ...vars, ...style };
		};

		$$self.$$.on_mount.push(function () {
			if (visualState === undefined && !('visualState' in $$props || $$self.$$.bound[$$self.$$.props['visualState']])) {
				console.warn("<UseInitialMotionValues> was created without expected prop 'visualState'");
			}

			if (isStatic === undefined && !('isStatic' in $$props || $$self.$$.bound[$$self.$$.props['isStatic']])) {
				console.warn("<UseInitialMotionValues> was created without expected prop 'isStatic'");
			}

			if (props === undefined && !('props' in $$props || $$self.$$.bound[$$self.$$.props['props']])) {
				console.warn("<UseInitialMotionValues> was created without expected prop 'props'");
			}
		});

		const writable_props = ['visualState', 'isStatic', 'props'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UseInitialMotionValues> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('visualState' in $$props) $$invalidate(1, visualState = $$props.visualState);
			if ('isStatic' in $$props) $$invalidate(2, isStatic = $$props.isStatic);
			if ('props' in $$props) $$invalidate(3, props = $$props.props);
			if ('$$scope' in $$props) $$invalidate(4, $$scope = $$props.$$scope);
		};

		$$self.$capture_state = () => ({
			buildHTMLStyles,
			createHtmlRenderState,
			visualState,
			isStatic,
			props,
			memo,
			styles
		});

		$$self.$inject_state = $$props => {
			if ('visualState' in $$props) $$invalidate(1, visualState = $$props.visualState);
			if ('isStatic' in $$props) $$invalidate(2, isStatic = $$props.isStatic);
			if ('props' in $$props) $$invalidate(3, props = $$props.props);
			if ('styles' in $$props) $$invalidate(0, styles = $$props.styles);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*visualState*/ 2) {
				$$invalidate(0, styles = memo());
			}
		};

		return [styles, visualState, isStatic, props, $$scope, slots];
	}

	class UseInitialMotionValues extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$Y, create_fragment$Y, safe_not_equal, { visualState: 1, isStatic: 2, props: 3 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "UseInitialMotionValues",
				options,
				id: create_fragment$Y.name
			});
		}

		get visualState() {
			throw new Error("<UseInitialMotionValues>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set visualState(value) {
			throw new Error("<UseInitialMotionValues>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get isStatic() {
			throw new Error("<UseInitialMotionValues>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set isStatic(value) {
			throw new Error("<UseInitialMotionValues>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get props() {
			throw new Error("<UseInitialMotionValues>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set props(value) {
			throw new Error("<UseInitialMotionValues>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var UseInitialMotionValues$1 = UseInitialMotionValues;

	/* node_modules/svelte-motion/src/render/html/UseStyle.svelte generated by Svelte v4.2.10 */

	const { Object: Object_1$1 } = globals;
	const get_default_slot_changes$j = dirty => ({ styles: dirty & /*s1, props, style*/ 522 });

	const get_default_slot_context$j = ctx => ({
		styles: /*toStyle*/ ctx[4](/*s1*/ ctx[9], /*props*/ ctx[1], /*style*/ ctx[3])
	});

	// (41:0) <UseInitialMotionValues {props} {visualState} {isStatic} let:styles={s1}>
	function create_default_slot$m(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[6].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], get_default_slot_context$j);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, s1, props, style*/ 650)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[7],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, get_default_slot_changes$j),
							get_default_slot_context$j
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$m.name,
			type: "slot",
			source: "(41:0) <UseInitialMotionValues {props} {visualState} {isStatic} let:styles={s1}>",
			ctx
		});

		return block;
	}

	function create_fragment$X(ctx) {
		let useinitialmotionvalues;
		let current;

		useinitialmotionvalues = new UseInitialMotionValues$1({
				props: {
					props: /*props*/ ctx[1],
					visualState: /*visualState*/ ctx[0],
					isStatic: /*isStatic*/ ctx[2],
					$$slots: {
						default: [
							create_default_slot$m,
							({ styles: s1 }) => ({ 9: s1 }),
							({ styles: s1 }) => s1 ? 512 : 0
						]
					},
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(useinitialmotionvalues.$$.fragment);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(useinitialmotionvalues, target, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const useinitialmotionvalues_changes = {};
				if (dirty & /*props*/ 2) useinitialmotionvalues_changes.props = /*props*/ ctx[1];
				if (dirty & /*visualState*/ 1) useinitialmotionvalues_changes.visualState = /*visualState*/ ctx[0];
				if (dirty & /*isStatic*/ 4) useinitialmotionvalues_changes.isStatic = /*isStatic*/ ctx[2];

				if (dirty & /*$$scope, s1, props, style*/ 650) {
					useinitialmotionvalues_changes.$$scope = { dirty, ctx };
				}

				useinitialmotionvalues.$set(useinitialmotionvalues_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(useinitialmotionvalues.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(useinitialmotionvalues.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(useinitialmotionvalues, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$X.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function copyRawValuesOnly(target, source, props) {
		for (const key in source) {
			if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {
				target[key] = source[key];
			}
		}
	}

	function instance$X($$self, $$props, $$invalidate) {
		let styleProp;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('UseStyle', slots, ['default']);
		let { visualState, props, isStatic } = $$props;
		let style = {};

		/**
	 * Copy non-Motion Values straight into style
	 */
		const cRVO = copyRawValuesOnly;

		const toStyle = s1 => {
			Object.assign(style, s1);

			if (props.transformValues) {
				$$invalidate(3, style = props.transformValues(style));
			}

			return style;
		};

		$$self.$$.on_mount.push(function () {
			if (visualState === undefined && !('visualState' in $$props || $$self.$$.bound[$$self.$$.props['visualState']])) {
				console.warn("<UseStyle> was created without expected prop 'visualState'");
			}

			if (props === undefined && !('props' in $$props || $$self.$$.bound[$$self.$$.props['props']])) {
				console.warn("<UseStyle> was created without expected prop 'props'");
			}

			if (isStatic === undefined && !('isStatic' in $$props || $$self.$$.bound[$$self.$$.props['isStatic']])) {
				console.warn("<UseStyle> was created without expected prop 'isStatic'");
			}
		});

		const writable_props = ['visualState', 'props', 'isStatic'];

		Object_1$1.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UseStyle> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('visualState' in $$props) $$invalidate(0, visualState = $$props.visualState);
			if ('props' in $$props) $$invalidate(1, props = $$props.props);
			if ('isStatic' in $$props) $$invalidate(2, isStatic = $$props.isStatic);
			if ('$$scope' in $$props) $$invalidate(7, $$scope = $$props.$$scope);
		};

		$$self.$capture_state = () => ({
			copyRawValuesOnly,
			isMotionValue,
			isForcedMotionValue,
			UseInitialMotionValues: UseInitialMotionValues$1,
			visualState,
			props,
			isStatic,
			style,
			cRVO,
			toStyle,
			styleProp
		});

		$$self.$inject_state = $$props => {
			if ('visualState' in $$props) $$invalidate(0, visualState = $$props.visualState);
			if ('props' in $$props) $$invalidate(1, props = $$props.props);
			if ('isStatic' in $$props) $$invalidate(2, isStatic = $$props.isStatic);
			if ('style' in $$props) $$invalidate(3, style = $$props.style);
			if ('styleProp' in $$props) $$invalidate(5, styleProp = $$props.styleProp);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*props*/ 2) {
				$$invalidate(5, styleProp = props.style || {});
			}

			if ($$self.$$.dirty & /*style, styleProp, props*/ 42) {
				cRVO(style, styleProp, props);
			}
		};

		return [visualState, props, isStatic, style, toStyle, styleProp, slots, $$scope];
	}

	class UseStyle extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$X, create_fragment$X, safe_not_equal, { visualState: 0, props: 1, isStatic: 2 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "UseStyle",
				options,
				id: create_fragment$X.name
			});
		}

		get visualState() {
			throw new Error("<UseStyle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set visualState(value) {
			throw new Error("<UseStyle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get props() {
			throw new Error("<UseStyle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set props(value) {
			throw new Error("<UseStyle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get isStatic() {
			throw new Error("<UseStyle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set isStatic(value) {
			throw new Error("<UseStyle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var UseStyle$1 = UseStyle;

	/* node_modules/svelte-motion/src/render/html/UseHTMLProps.svelte generated by Svelte v4.2.10 */

	const get_default_slot_changes$i = dirty => ({
		visualProps: dirty & /*styles, props*/ 65
	});

	const get_default_slot_context$i = ctx => ({
		visualProps: /*getHTMLProps*/ ctx[3](/*styles*/ ctx[6], /*props*/ ctx[0])
	});

	// (36:0) <UseStyle let:styles {visualState} {props} {isStatic}>
	function create_default_slot$l(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[4].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], get_default_slot_context$i);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, styles, props*/ 97)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[5],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, get_default_slot_changes$i),
							get_default_slot_context$i
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$l.name,
			type: "slot",
			source: "(36:0) <UseStyle let:styles {visualState} {props} {isStatic}>",
			ctx
		});

		return block;
	}

	function create_fragment$W(ctx) {
		let usestyle;
		let current;

		usestyle = new UseStyle$1({
				props: {
					visualState: /*visualState*/ ctx[1],
					props: /*props*/ ctx[0],
					isStatic: /*isStatic*/ ctx[2],
					$$slots: {
						default: [
							create_default_slot$l,
							({ styles }) => ({ 6: styles }),
							({ styles }) => styles ? 64 : 0
						]
					},
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(usestyle.$$.fragment);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(usestyle, target, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const usestyle_changes = {};
				if (dirty & /*visualState*/ 2) usestyle_changes.visualState = /*visualState*/ ctx[1];
				if (dirty & /*props*/ 1) usestyle_changes.props = /*props*/ ctx[0];
				if (dirty & /*isStatic*/ 4) usestyle_changes.isStatic = /*isStatic*/ ctx[2];

				if (dirty & /*$$scope, styles, props*/ 97) {
					usestyle_changes.$$scope = { dirty, ctx };
				}

				usestyle.$set(usestyle_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(usestyle.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(usestyle.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(usestyle, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$W.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$W($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('UseHTMLProps', slots, ['default']);
		let { props, visualState, isStatic } = $$props;

		const getHTMLProps = (style, props) => {
			let htmlProps = {};

			if (Boolean(props.drag)) {
				// Disable the ghost element when a user drags
				htmlProps.draggable = false;

				// Disable text selection
				style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = "none";

				// Disable scrolling on the draggable direction
				style.touchAction = props.drag === true
				? "none"
				: `pan-${props.drag === "x" ? "y" : "x"}`;
			}

			htmlProps.style = style;
			return htmlProps;
		};

		$$self.$$.on_mount.push(function () {
			if (props === undefined && !('props' in $$props || $$self.$$.bound[$$self.$$.props['props']])) {
				console.warn("<UseHTMLProps> was created without expected prop 'props'");
			}

			if (visualState === undefined && !('visualState' in $$props || $$self.$$.bound[$$self.$$.props['visualState']])) {
				console.warn("<UseHTMLProps> was created without expected prop 'visualState'");
			}

			if (isStatic === undefined && !('isStatic' in $$props || $$self.$$.bound[$$self.$$.props['isStatic']])) {
				console.warn("<UseHTMLProps> was created without expected prop 'isStatic'");
			}
		});

		const writable_props = ['props', 'visualState', 'isStatic'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UseHTMLProps> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('props' in $$props) $$invalidate(0, props = $$props.props);
			if ('visualState' in $$props) $$invalidate(1, visualState = $$props.visualState);
			if ('isStatic' in $$props) $$invalidate(2, isStatic = $$props.isStatic);
			if ('$$scope' in $$props) $$invalidate(5, $$scope = $$props.$$scope);
		};

		$$self.$capture_state = () => ({
			UseStyle: UseStyle$1,
			props,
			visualState,
			isStatic,
			getHTMLProps
		});

		$$self.$inject_state = $$props => {
			if ('props' in $$props) $$invalidate(0, props = $$props.props);
			if ('visualState' in $$props) $$invalidate(1, visualState = $$props.visualState);
			if ('isStatic' in $$props) $$invalidate(2, isStatic = $$props.isStatic);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [props, visualState, isStatic, getHTMLProps, slots, $$scope];
	}

	class UseHTMLProps extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$W, create_fragment$W, safe_not_equal, { props: 0, visualState: 1, isStatic: 2 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "UseHTMLProps",
				options,
				id: create_fragment$W.name
			});
		}

		get props() {
			throw new Error("<UseHTMLProps>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set props(value) {
			throw new Error("<UseHTMLProps>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get visualState() {
			throw new Error("<UseHTMLProps>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set visualState(value) {
			throw new Error("<UseHTMLProps>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get isStatic() {
			throw new Error("<UseHTMLProps>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set isStatic(value) {
			throw new Error("<UseHTMLProps>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var UseHTMLProps$1 = UseHTMLProps;

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	function calcOrigin(origin, offset, size) {
	    return typeof origin === "string"
	        ? origin
	        : px.transform(offset + size * origin);
	}
	/**
	 * The SVG transform origin defaults are different to CSS and is less intuitive,
	 * so we use the measured dimensions of the SVG to reconcile these.
	 */
	function calcSVGTransformOrigin(dimensions, originX, originY) {
	    var pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);
	    var pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);
	    return pxOriginX + " " + pxOriginY;
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	// Convert a progress 0-1 to a pixels value based on the provided length
	var progressToPixels = function (progress, length) {
	    return px.transform(progress * length);
	};
	var dashKeys = {
	    offset: "stroke-dashoffset",
	    array: "stroke-dasharray",
	};
	var camelKeys = {
	    offset: "strokeDashoffset",
	    array: "strokeDasharray",
	};
	/**
	 * Build SVG path properties. Uses the path's measured length to convert
	 * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset
	 * and stroke-dasharray attributes.
	 *
	 * This function is mutative to reduce per-frame GC.
	 */
	function buildSVGPath(attrs, totalLength, length, spacing, offset, useDashCase) {
	    if (spacing === void 0) { spacing = 1; }
	    if (offset === void 0) { offset = 0; }
	    if (useDashCase === void 0) { useDashCase = true; }
	    // We use dash case when setting attributes directly to the DOM node and camel case
	    // when defining props on a React component.
	    var keys = useDashCase ? dashKeys : camelKeys;
	    // Build the dash offset
	    attrs[keys.offset] = progressToPixels(-offset, totalLength);
	    // Build the dash array
	    var pathLength = progressToPixels(length, totalLength);
	    var pathSpacing = progressToPixels(spacing, totalLength);
	    attrs[keys.array] = pathLength + " " + pathSpacing;
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	/**
	 * Build SVG visual attrbutes, like cx and style.transform
	 */
	function buildSVGAttrs(state, _a, projection, layoutState, options, transformTemplate, buildProjectionTransform, buildProjectionTransformOrigin) {
	    var attrX = _a.attrX, attrY = _a.attrY, originX = _a.originX, originY = _a.originY, pathLength = _a.pathLength, _b = _a.pathSpacing, pathSpacing = _b === void 0 ? 1 : _b, _c = _a.pathOffset, pathOffset = _c === void 0 ? 0 : _c, 
	    // This is object creation, which we try to avoid per-frame.
	    latest = __rest(_a, ["attrX", "attrY", "originX", "originY", "pathLength", "pathSpacing", "pathOffset"]);
	    buildHTMLStyles(state, latest, projection, layoutState, options, transformTemplate, buildProjectionTransform, buildProjectionTransformOrigin);
	    state.attrs = state.style;
	    state.style = {};
	    var attrs = state.attrs, style = state.style, dimensions = state.dimensions, totalPathLength = state.totalPathLength;
	    /**
	     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs
	     * and copy it into style.
	     */
	    if (attrs.transform) {
	        if (dimensions)
	            style.transform = attrs.transform;
	        delete attrs.transform;
	    }
	    // Parse transformOrigin
	    if (dimensions &&
	        (originX !== undefined || originY !== undefined || style.transform)) {
	        style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);
	    }
	    // Treat x/y not as shortcuts but as actual attributes
	    if (attrX !== undefined)
	        attrs.x = attrX;
	    if (attrY !== undefined)
	        attrs.y = attrY;
	    // Build SVG path if one has been measured
	    if (totalPathLength !== undefined && pathLength !== undefined) {
	        buildSVGPath(attrs, totalPathLength, pathLength, pathSpacing, pathOffset, false);
	    }
	}

	/* node_modules/svelte-motion/src/render/svg/UseSVGProps.svelte generated by Svelte v4.2.10 */
	const get_default_slot_changes$h = dirty => ({ visualProps: dirty & /*visualProps*/ 1 });
	const get_default_slot_context$h = ctx => ({ visualProps: /*visualProps*/ ctx[0] });

	function create_fragment$V(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[4].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], get_default_slot_context$h);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, visualProps*/ 9)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[3],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, get_default_slot_changes$h),
							get_default_slot_context$h
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$V.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$V($$self, $$props, $$invalidate) {
		let visualProps;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('UseSVGProps', slots, ['default']);
		let { visualState, props } = $$props;

		let memo = () => {
			const state = createSvgRenderState();
			buildSVGAttrs(state, visualState, undefined, undefined, { enableHardwareAcceleration: false }, props.transformTemplate);

			return {
				...state.attrs,
				style: { ...state.style }
			};
		};

		$$self.$$.on_mount.push(function () {
			if (visualState === undefined && !('visualState' in $$props || $$self.$$.bound[$$self.$$.props['visualState']])) {
				console.warn("<UseSVGProps> was created without expected prop 'visualState'");
			}

			if (props === undefined && !('props' in $$props || $$self.$$.bound[$$self.$$.props['props']])) {
				console.warn("<UseSVGProps> was created without expected prop 'props'");
			}
		});

		const writable_props = ['visualState', 'props'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UseSVGProps> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('visualState' in $$props) $$invalidate(1, visualState = $$props.visualState);
			if ('props' in $$props) $$invalidate(2, props = $$props.props);
			if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
		};

		$$self.$capture_state = () => ({
			createSvgRenderState,
			copyRawValuesOnly,
			buildSVGAttrs,
			visualState,
			props,
			memo,
			visualProps
		});

		$$self.$inject_state = $$props => {
			if ('visualState' in $$props) $$invalidate(1, visualState = $$props.visualState);
			if ('props' in $$props) $$invalidate(2, props = $$props.props);
			if ('memo' in $$props) $$invalidate(5, memo = $$props.memo);
			if ('visualProps' in $$props) $$invalidate(0, visualProps = $$props.visualProps);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*visualState*/ 2) {
				$$invalidate(0, visualProps = memo(visualState));
			}

			if ($$self.$$.dirty & /*props, visualProps*/ 5) {
				if (props.style) {
					const rawStyles = {};
					copyRawValuesOnly(rawStyles, props.style, props);
					$$invalidate(0, visualProps.style = { ...rawStyles, ...visualProps.style }, visualProps);
				}
			}
		};

		return [visualProps, visualState, props, $$scope, slots];
	}

	class UseSVGProps extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$V, create_fragment$V, safe_not_equal, { visualState: 1, props: 2 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "UseSVGProps",
				options,
				id: create_fragment$V.name
			});
		}

		get visualState() {
			throw new Error("<UseSVGProps>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set visualState(value) {
			throw new Error("<UseSVGProps>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get props() {
			throw new Error("<UseSVGProps>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set props(value) {
			throw new Error("<UseSVGProps>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var UseSVGProps$1 = UseSVGProps;

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	var shouldForward = function (key) { return !isValidMotionProp(key); };
	/**
	 * Emotion and Styled Components both allow users to pass through arbitrary props to their components
	 * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which
	 * of these should be passed to the underlying DOM node.
	 *
	 * However, when styling a Motion component `styled(MotionDiv)`, both packages pass through *all* props
	 * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props
	 * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of
	 * `@emotion/is-prop-valid`, however to fix this problem we need to use it.
	 *
	 * By making it an optionalDependency we can offer this functionality only in the situations where it's
	 * actually required.
	 */
	try {
	    var emotionIsPropValid_1 = require("@emotion/is-prop-valid").default;
	    shouldForward = function (key) {
	        // Handle events explicitly as Emotion validates them all as true
	        if (key.startsWith("on")) {
	            return !isValidMotionProp(key);
	        }
	        else {
	            return emotionIsPropValid_1(key);
	        }
	    };
	}
	catch (_a) {
	    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.
	}
	function filterProps(props, isDom, forwardMotionProps) {
	    var filteredProps = {};
	    for (var key in props) {
	        if (shouldForward(key) ||
	            (forwardMotionProps === true && isValidMotionProp(key)) ||
	            (!isDom && !isValidMotionProp(key))) {
	            filteredProps[key] = props[key];
	        }
	    }
	    return filteredProps;
	}

	/* node_modules/svelte-motion/src/render/dom/UseRender.svelte generated by Svelte v4.2.10 */

	const get_default_slot_changes$g = dirty => ({
		props: dirty & /*filteredProps, visualProps*/ 2064
	});

	const get_default_slot_context$g = ctx => ({
		motion: /*motion*/ ctx[5],
		props: {
			.../*filteredProps*/ ctx[4],
			.../*visualProps*/ ctx[11]
		}
	});

	// (33:0) <svelte:component     this={Component === 'SVG' ? UseSVGProps : UseHTMLProps}     {visualState}     {isStatic}     {props}     let:visualProps>
	function create_default_slot$k(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[9].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], get_default_slot_context$g);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, filteredProps, visualProps*/ 3088)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[10],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, get_default_slot_changes$g),
							get_default_slot_context$g
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$k.name,
			type: "slot",
			source: "(33:0) <svelte:component     this={Component === 'SVG' ? UseSVGProps : UseHTMLProps}     {visualState}     {isStatic}     {props}     let:visualProps>",
			ctx
		});

		return block;
	}

	function create_fragment$U(ctx) {
		let switch_instance;
		let switch_instance_anchor;
		let current;

		var switch_value = /*Component*/ ctx[2] === 'SVG'
		? UseSVGProps$1
		: UseHTMLProps$1;

		function switch_props(ctx, dirty) {
			return {
				props: {
					visualState: /*visualState*/ ctx[1],
					isStatic: /*isStatic*/ ctx[3],
					props: /*props*/ ctx[0],
					$$slots: {
						default: [
							create_default_slot$k,
							({ visualProps }) => ({ 11: visualProps }),
							({ visualProps }) => visualProps ? 2048 : 0
						]
					},
					$$scope: { ctx }
				},
				$$inline: true
			};
		}

		if (switch_value) {
			switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
		}

		const block = {
			c: function create() {
				if (switch_instance) create_component(switch_instance.$$.fragment);
				switch_instance_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (switch_instance) mount_component(switch_instance, target, anchor);
				insert_dev(target, switch_instance_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (dirty & /*Component*/ 4 && switch_value !== (switch_value = /*Component*/ ctx[2] === 'SVG'
				? UseSVGProps$1
				: UseHTMLProps$1)) {
					if (switch_instance) {
						group_outros();
						const old_component = switch_instance;

						transition_out(old_component.$$.fragment, 1, 0, () => {
							destroy_component(old_component, 1);
						});

						check_outros();
					}

					if (switch_value) {
						switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
						create_component(switch_instance.$$.fragment);
						transition_in(switch_instance.$$.fragment, 1);
						mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
					} else {
						switch_instance = null;
					}
				} else if (switch_value) {
					const switch_instance_changes = {};
					if (dirty & /*visualState*/ 2) switch_instance_changes.visualState = /*visualState*/ ctx[1];
					if (dirty & /*isStatic*/ 8) switch_instance_changes.isStatic = /*isStatic*/ ctx[3];
					if (dirty & /*props*/ 1) switch_instance_changes.props = /*props*/ ctx[0];

					if (dirty & /*$$scope, filteredProps, visualProps*/ 3088) {
						switch_instance_changes.$$scope = { dirty, ctx };
					}

					switch_instance.$set(switch_instance_changes);
				}
			},
			i: function intro(local) {
				if (current) return;
				if (switch_instance) transition_in(switch_instance.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				if (switch_instance) transition_out(switch_instance.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(switch_instance_anchor);
				}

				if (switch_instance) destroy_component(switch_instance, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$U.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$U($$self, $$props, $$invalidate) {
		let filteredProps;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('UseRender', slots, ['default']);
		let { props, visualState, Component, forwardMotionProps = false, isStatic, ref, targetEl = undefined } = $$props;

		const motion = node => {
			ref(node);
		};

		$$self.$$.on_mount.push(function () {
			if (props === undefined && !('props' in $$props || $$self.$$.bound[$$self.$$.props['props']])) {
				console.warn("<UseRender> was created without expected prop 'props'");
			}

			if (visualState === undefined && !('visualState' in $$props || $$self.$$.bound[$$self.$$.props['visualState']])) {
				console.warn("<UseRender> was created without expected prop 'visualState'");
			}

			if (Component === undefined && !('Component' in $$props || $$self.$$.bound[$$self.$$.props['Component']])) {
				console.warn("<UseRender> was created without expected prop 'Component'");
			}

			if (isStatic === undefined && !('isStatic' in $$props || $$self.$$.bound[$$self.$$.props['isStatic']])) {
				console.warn("<UseRender> was created without expected prop 'isStatic'");
			}

			if (ref === undefined && !('ref' in $$props || $$self.$$.bound[$$self.$$.props['ref']])) {
				console.warn("<UseRender> was created without expected prop 'ref'");
			}
		});

		const writable_props = [
			'props',
			'visualState',
			'Component',
			'forwardMotionProps',
			'isStatic',
			'ref',
			'targetEl'
		];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UseRender> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('props' in $$props) $$invalidate(0, props = $$props.props);
			if ('visualState' in $$props) $$invalidate(1, visualState = $$props.visualState);
			if ('Component' in $$props) $$invalidate(2, Component = $$props.Component);
			if ('forwardMotionProps' in $$props) $$invalidate(6, forwardMotionProps = $$props.forwardMotionProps);
			if ('isStatic' in $$props) $$invalidate(3, isStatic = $$props.isStatic);
			if ('ref' in $$props) $$invalidate(7, ref = $$props.ref);
			if ('targetEl' in $$props) $$invalidate(8, targetEl = $$props.targetEl);
			if ('$$scope' in $$props) $$invalidate(10, $$scope = $$props.$$scope);
		};

		$$self.$capture_state = () => ({
			UseSVGProps: UseSVGProps$1,
			UseHTMLProps: UseHTMLProps$1,
			filterProps,
			props,
			visualState,
			Component,
			forwardMotionProps,
			isStatic,
			ref,
			targetEl,
			motion,
			filteredProps
		});

		$$self.$inject_state = $$props => {
			if ('props' in $$props) $$invalidate(0, props = $$props.props);
			if ('visualState' in $$props) $$invalidate(1, visualState = $$props.visualState);
			if ('Component' in $$props) $$invalidate(2, Component = $$props.Component);
			if ('forwardMotionProps' in $$props) $$invalidate(6, forwardMotionProps = $$props.forwardMotionProps);
			if ('isStatic' in $$props) $$invalidate(3, isStatic = $$props.isStatic);
			if ('ref' in $$props) $$invalidate(7, ref = $$props.ref);
			if ('targetEl' in $$props) $$invalidate(8, targetEl = $$props.targetEl);
			if ('filteredProps' in $$props) $$invalidate(4, filteredProps = $$props.filteredProps);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*props, Component, forwardMotionProps*/ 69) {
				$$invalidate(4, filteredProps = filterProps(props, typeof Component === "string", forwardMotionProps));
			}

			if ($$self.$$.dirty & /*targetEl*/ 256) {
				if (targetEl) {
					motion(targetEl);
				}
			}
		};

		return [
			props,
			visualState,
			Component,
			isStatic,
			filteredProps,
			motion,
			forwardMotionProps,
			ref,
			targetEl,
			slots,
			$$scope
		];
	}

	class UseRender extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$U, create_fragment$U, safe_not_equal, {
				props: 0,
				visualState: 1,
				Component: 2,
				forwardMotionProps: 6,
				isStatic: 3,
				ref: 7,
				targetEl: 8
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "UseRender",
				options,
				id: create_fragment$U.name
			});
		}

		get props() {
			throw new Error("<UseRender>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set props(value) {
			throw new Error("<UseRender>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get visualState() {
			throw new Error("<UseRender>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set visualState(value) {
			throw new Error("<UseRender>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get Component() {
			throw new Error("<UseRender>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set Component(value) {
			throw new Error("<UseRender>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get forwardMotionProps() {
			throw new Error("<UseRender>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set forwardMotionProps(value) {
			throw new Error("<UseRender>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get isStatic() {
			throw new Error("<UseRender>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set isStatic(value) {
			throw new Error("<UseRender>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get ref() {
			throw new Error("<UseRender>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set ref(value) {
			throw new Error("<UseRender>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get targetEl() {
			throw new Error("<UseRender>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set targetEl(value) {
			throw new Error("<UseRender>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var UseRender$1 = UseRender;

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	/**
	 * Measure and return the element bounding box.
	 *
	 * We convert the box into an AxisBox2D to make it easier to work with each axis
	 * individually and programmatically.
	 *
	 * This function optionally accepts a transformPagePoint function which allows us to compensate
	 * for, for instance, measuring the element within a scaled plane like a Framer devivce preview component.
	 */
	function getBoundingBox(element, transformPagePoint) {
	    var box = element.getBoundingClientRect();
	    return convertBoundingBoxToAxisBox(transformBoundingBox(box, transformPagePoint));
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/
	//import { invariant } from 'hey-listen';

	function isCSSVariable(value) {
	    return typeof value === "string" && value.startsWith("var(--");
	}
	/**
	 * Parse Framer's special CSS variable format into a CSS token and a fallback.
	 *
	 * ```
	 * `var(--foo, #fff)` => [`--foo`, '#fff']
	 * ```
	 *
	 * @param current
	 */
	var cssVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
	function parseCSSVariable(current) {
	    var match = cssVariableRegex.exec(current);
	    if (!match)
	        return [,];
	    var _a = __read(match, 3), token = _a[1], fallback = _a[2];
	    return [token, fallback];
	}
	function getVariableValue(current, element, depth) {
	    //invariant(depth <= maxDepth, "Max CSS variable fallback depth detected in property \"" + current + "\". This may indicate a circular fallback dependency.");
	    var _a = __read(parseCSSVariable(current), 2), token = _a[0], fallback = _a[1];
	    // No CSS variable detected
	    if (!token)
	        return;
	    // Attempt to read this CSS variable off the element
	    var resolved = window.getComputedStyle(element).getPropertyValue(token);
	    if (resolved) {
	        return resolved.trim();
	    }
	    else if (isCSSVariable(fallback)) {
	        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.
	        return getVariableValue(fallback, element);
	    }
	    else {
	        return fallback;
	    }
	}
	/**
	 * Resolve CSS variables from
	 *
	 * @internal
	 */
	function resolveCSSVariables(visualElement, _a, transitionEnd) {
	    var _b;
	    var target = __rest(_a, []);
	    var element = visualElement.getInstance();
	    if (!(element instanceof HTMLElement))
	        return { target: target, transitionEnd: transitionEnd };
	    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`
	    // only if they change but I think this reads clearer and this isn't a performance-critical path.
	    if (transitionEnd) {
	        transitionEnd = __assign({}, transitionEnd);
	    }
	    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved
	    visualElement.forEachValue(function (value) {
	        var current = value.get();
	        if (!isCSSVariable(current))
	            return;
	        var resolved = getVariableValue(current, element);
	        if (resolved)
	            value.set(resolved);
	    });
	    // Cycle through every target property and resolve CSS variables. Currently
	    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`
	    for (var key in target) {
	        var current = target[key];
	        if (!isCSSVariable(current))
	            continue;
	        var resolved = getVariableValue(current, element);
	        if (!resolved)
	            continue;
	        // Clone target if it hasn't already been
	        target[key] = resolved;
	        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved
	        // CSS variable. This will ensure that after the animation the component will reflect
	        // changes in the value of the CSS variable.
	        if (transitionEnd)
	            (_b = transitionEnd[key]) !== null && _b !== void 0 ? _b : (transitionEnd[key] = current);
	    }
	    return { target: target, transitionEnd: transitionEnd };
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	var positionalKeys = new Set([
	    "width",
	    "height",
	    "top",
	    "left",
	    "right",
	    "bottom",
	    "x",
	    "y",
	]);
	var isPositionalKey = function (key) { return positionalKeys.has(key); };
	var hasPositionalKey = function (target) {
	    return Object.keys(target).some(isPositionalKey);
	};
	var setAndResetVelocity = function (value, to) {
	    // Looks odd but setting it twice doesn't render, it'll just
	    // set both prev and current to the latest value
	    value.set(to, false);
	    value.set(to);
	};
	var isNumOrPxType = function (v) {
	    return v === number || v === px;
	};
	var BoundingBoxDimension;
	(function (BoundingBoxDimension) {
	    BoundingBoxDimension["width"] = "width";
	    BoundingBoxDimension["height"] = "height";
	    BoundingBoxDimension["left"] = "left";
	    BoundingBoxDimension["right"] = "right";
	    BoundingBoxDimension["top"] = "top";
	    BoundingBoxDimension["bottom"] = "bottom";
	})(BoundingBoxDimension || (BoundingBoxDimension = {}));
	var getPosFromMatrix = function (matrix, pos) {
	    return parseFloat(matrix.split(", ")[pos]);
	};
	var getTranslateFromMatrix = function (pos2, pos3) { return function (_bbox, _a) {
	    var transform = _a.transform;
	    if (transform === "none" || !transform)
	        return 0;
	    var matrix3d = transform.match(/^matrix3d\((.+)\)$/);
	    if (matrix3d) {
	        return getPosFromMatrix(matrix3d[1], pos3);
	    }
	    else {
	        var matrix = transform.match(/^matrix\((.+)\)$/);
	        if (matrix) {
	            return getPosFromMatrix(matrix[1], pos2);
	        }
	        else {
	            return 0;
	        }
	    }
	}; };
	var transformKeys = new Set(["x", "y", "z"]);
	var nonTranslationalTransformKeys = transformProps.filter(function (key) { return !transformKeys.has(key); });
	function removeNonTranslationalTransform(visualElement) {
	    var removedTransforms = [];
	    nonTranslationalTransformKeys.forEach(function (key) {
	        var value = visualElement.getValue(key);
	        if (value !== undefined) {
	            removedTransforms.push([key, value.get()]);
	            value.set(key.startsWith("scale") ? 1 : 0);
	        }
	    });
	    // Apply changes to element before measurement
	    if (removedTransforms.length)
	        visualElement.syncRender();
	    return removedTransforms;
	}
	var positionalValues = {
	    // Dimensions
	    width: function (_a) {
	        var x = _a.x;
	        return x.max - x.min;
	    },
	    height: function (_a) {
	        var y = _a.y;
	        return y.max - y.min;
	    },
	    top: function (_bbox, _a) {
	        var top = _a.top;
	        return parseFloat(top);
	    },
	    left: function (_bbox, _a) {
	        var left = _a.left;
	        return parseFloat(left);
	    },
	    bottom: function (_a, _b) {
	        var y = _a.y;
	        var top = _b.top;
	        return parseFloat(top) + (y.max - y.min);
	    },
	    right: function (_a, _b) {
	        var x = _a.x;
	        var left = _b.left;
	        return parseFloat(left) + (x.max - x.min);
	    },
	    // Transform
	    x: getTranslateFromMatrix(4, 13),
	    y: getTranslateFromMatrix(5, 14),
	};
	var convertChangedValueTypes = function (target, visualElement, changedKeys) {
	    var originBbox = visualElement.measureViewportBox();
	    var element = visualElement.getInstance();
	    var elementComputedStyle = getComputedStyle(element);
	    var display = elementComputedStyle.display, top = elementComputedStyle.top, left = elementComputedStyle.left, bottom = elementComputedStyle.bottom, right = elementComputedStyle.right, transform = elementComputedStyle.transform;
	    var originComputedStyle = { top: top, left: left, bottom: bottom, right: right, transform: transform };
	    // If the element is currently set to display: "none", make it visible before
	    // measuring the target bounding box
	    if (display === "none") {
	        visualElement.setStaticValue("display", target.display || "block");
	    }
	    // Apply the latest values (as set in checkAndConvertChangedValueTypes)
	    visualElement.syncRender();
	    var targetBbox = visualElement.measureViewportBox();
	    changedKeys.forEach(function (key) {
	        // Restore styles to their **calculated computed style**, not their actual
	        // originally set style. This allows us to animate between equivalent pixel units.
	        var value = visualElement.getValue(key);
	        setAndResetVelocity(value, positionalValues[key](originBbox, originComputedStyle));
	        target[key] = positionalValues[key](targetBbox, elementComputedStyle);
	    });
	    return target;
	};
	var checkAndConvertChangedValueTypes = function (visualElement, target, origin, transitionEnd) {
	    if (origin === void 0) { origin = {}; }
	    if (transitionEnd === void 0) { transitionEnd = {}; }
	    target = __assign({}, target);
	    transitionEnd = __assign({}, transitionEnd);
	    var targetPositionalKeys = Object.keys(target).filter(isPositionalKey);
	    // We want to remove any transform values that could affect the element's bounding box before
	    // it's measured. We'll reapply these later.
	    var removedTransformValues = [];
	    var hasAttemptedToRemoveTransformValues = false;
	    var changedValueTypeKeys = [];
	    targetPositionalKeys.forEach(function (key) {
	        var value = visualElement.getValue(key);
	        if (!visualElement.hasValue(key))
	            return;
	        var from = origin[key];
	        var to = target[key];
	        var fromType = findDimensionValueType(from);
	        var toType;
	        // TODO: The current implementation of this basically throws an error
	        // if you try and do value conversion via keyframes. There's probably
	        // a way of doing this but the performance implications would need greater scrutiny,
	        // as it'd be doing multiple resize-remeasure operations.
	        if (isKeyframesTarget(to)) {
	            var numKeyframes = to.length;
	            for (var i = to[0] === null ? 1 : 0; i < numKeyframes; i++) {
	                if (!toType) {
	                    toType = findDimensionValueType(to[i]);
	                    //invariant(toType === fromType ||
	                    //    (isNumOrPxType(fromType) && isNumOrPxType(toType)), "Keyframes must be of the same dimension as the current value");
	                }
	                //else {
	                ///    invariant(findDimensionValueType(to[i]) === toType, "All keyframes must be of the same type");
	                //}
	            }
	        }
	        else {
	            toType = findDimensionValueType(to);
	        }
	        if (fromType !== toType) {
	            // If they're both just number or px, convert them both to numbers rather than
	            // relying on resize/remeasure to convert (which is wasteful in this situation)
	            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {
	                var current = value.get();
	                if (typeof current === "string") {
	                    value.set(parseFloat(current));
	                }
	                if (typeof to === "string") {
	                    target[key] = parseFloat(to);
	                }
	                else if (Array.isArray(to) && toType === px) {
	                    target[key] = to.map(parseFloat);
	                }
	            }
	            else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) &&
	                (toType === null || toType === void 0 ? void 0 : toType.transform) &&
	                (from === 0 || to === 0)) {
	                // If one or the other value is 0, it's safe to coerce it to the
	                // type of the other without measurement
	                if (from === 0) {
	                    value.set(toType.transform(from));
	                }
	                else {
	                    target[key] = fromType.transform(to);
	                }
	            }
	            else {
	                // If we're going to do value conversion via DOM measurements, we first
	                // need to remove non-positional transform values that could affect the bbox measurements.
	                if (!hasAttemptedToRemoveTransformValues) {
	                    removedTransformValues = removeNonTranslationalTransform(visualElement);
	                    hasAttemptedToRemoveTransformValues = true;
	                }
	                changedValueTypeKeys.push(key);
	                transitionEnd[key] =
	                    transitionEnd[key] !== undefined
	                        ? transitionEnd[key]
	                        : target[key];
	                setAndResetVelocity(value, to);
	            }
	        }
	    });
	    if (changedValueTypeKeys.length) {
	        var convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);
	        // If we removed transform values, reapply them before the next render
	        if (removedTransformValues.length) {
	            removedTransformValues.forEach(function (_a) {
	                var _b = __read(_a, 2), key = _b[0], value = _b[1];
	                visualElement.getValue(key).set(value);
	            });
	        }
	        // Reapply original values
	        visualElement.syncRender();
	        return { target: convertedTarget, transitionEnd: transitionEnd };
	    }
	    else {
	        return { target: target, transitionEnd: transitionEnd };
	    }
	};
	/**
	 * Convert value types for x/y/width/height/top/left/bottom/right
	 *
	 * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`
	 *
	 * @internal
	 */
	function unitConversion(visualElement, target, origin, transitionEnd) {
	    return hasPositionalKey(target)
	        ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd)
	        : { target: target, transitionEnd: transitionEnd };
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	/**
	 * Parse a DOM variant to make it animatable. This involves resolving CSS variables
	 * and ensuring animations like "20%" => "calc(50vw)" are performed in pixels.
	 */
	var parseDomVariant = function (visualElement, target, origin, transitionEnd) {
	    var resolved = resolveCSSVariables(visualElement, target, transitionEnd);
	    target = resolved.target;
	    transitionEnd = resolved.transitionEnd;
	    return unitConversion(visualElement, target, origin, transitionEnd);
	};

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	function scrapeMotionValuesFromProps$1(props) {
	    var style = props.style;
	    var newValues = {};
	    for (var key in style) {
	        if (isMotionValue(style[key]) || isForcedMotionValue(key, props)) {
	            newValues[key] = style[key];
	        }
	    }
	    return newValues;
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/
	function renderHTML(element, _a) {
	    var style = _a.style, vars = _a.vars;
	    // Directly assign style into the Element's style prop. In tests Object.assign is the
	    // fastest way to assign styles.
	    Object.assign(element.style, style);
	    // Loop over any CSS variables and assign those.
	    for (var key in vars) {
	        element.style.setProperty(key, vars[key]);
	    }
	}

	/** 
	based on framer-motion@4.1.15,
	Copyright (c) 2018 Framer B.V.
	*/

	function getComputedStyle$1(element) {
	    return window.getComputedStyle(element);
	}
	var htmlConfig = {
	    treeType: "dom",
	    readValueFromInstance: function (domElement, key) {
	        if (isTransformProp(key)) {
	            var defaultType = getDefaultValueType(key);
	            return defaultType ? defaultType.default || 0 : 0;
	        }
	        else {
	            var computedStyle = getComputedStyle$1(domElement);
	            return ((isCSSVariable$1(key)
	                ? computedStyle.getPropertyValue(key)
	                : computedStyle[key]) || 0);
	        }
	    },
	    sortNodePosition: function (a, b) {
	        /**
	         * compareDocumentPosition returns a bitmask, by using the bitwise &
	         * we're returning true if 2 in that bitmask is set to true. 2 is set
	         * to true if b preceeds a.
	         */
	        return a.compareDocumentPosition(b) & 2 ? 1 : -1;
	    },
	    getBaseTarget: function (props, key) {
	        var _a;
	        return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];
	    },
	    measureViewportBox: function (element, _a) {
	        var transformPagePoint = _a.transformPagePoint;
	        return getBoundingBox(element, transformPagePoint);
	    },
	    /**
	     * Reset the transform on the current Element. This is called as part
	     * of a batched process across the entire layout tree. To remove this write
	     * cycle it'd be interesting to see if it's possible to "undo" all the current
	     * layout transforms up the tree in the same way this.getBoundingBoxWithoutTransforms
	     * works
	     */
	    resetTransform: function (element, domElement, props) {
	        var transformTemplate = props.transformTemplate;
	        domElement.style.transform = transformTemplate
	            ? transformTemplate({}, "")
	            : "none";
	        // Ensure that whatever happens next, we restore our transform on the next frame
	        element.scheduleRender();
	    },
	    restoreTransform: function (instance, mutableState) {
	        instance.style.transform = mutableState.style.transform;
	    },
	    removeValueFromRenderState: function (key, _a) {
	        var vars = _a.vars, style = _a.style;
	        delete vars[key];
	        delete style[key];
	    },
	    /**
	     * Ensure that HTML and Framer-specific value types like `px`->`%` and `Color`
	     * can be animated by Motion.
	     */
	    makeTargetAnimatable: function (element, _a, _b, isMounted) {
	        var transformValues = _b.transformValues;
	        if (isMounted === void 0) { isMounted = true; }
	        var transition = _a.transition, transitionEnd = _a.transitionEnd, target = __rest(_a, ["transition", "transitionEnd"]);
	        var origin = getOrigin(target, transition || {}, element);
	        /**
	         * If Framer has provided a function to convert `Color` etc value types, convert them
	         */
	        if (transformValues) {
	            if (transitionEnd)
	                transitionEnd = transformValues(transitionEnd);
	            if (target)
	                target = transformValues(target);
	            if (origin)
	                origin = transformValues(origin);
	        }
	        if (isMounted) {
	            checkTargetForNewValues(element, target, origin);
	            var parsed = parseDomVariant(element, target, origin, transitionEnd);
	            transitionEnd = parsed.transitionEnd;
	            target = parsed.target;
	        }
	        return __assign({ transition: transition,
	            transitionEnd: transitionEnd }, target);
	    },
	    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps$1,
	    build: function (element, renderState, latestValues, projection, layoutState, options, props) {
	        if (element.isVisible !== undefined) {
	            renderState.style.visibility = element.isVisible
	                ? "visible"
	                : "hidden";
	        }
	        var isProjectionTranform = projection.isEnabled && layoutState.isHydrated;
	        buildHTMLStyles(renderState, latestValues, projection, layoutState, options, props.transformTemplate, isProjectionTranform ? buildLayoutProjectionTransform : undefined, isProjectionTranform
	            ? buildLayoutProjectionTransformOrigin
	            : undefined);
	    },
	    render: renderHTML,
	};
	var htmlVisualElement = visualElement(htmlConfig);

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	function scrapeMotionValuesFromProps(props) {
	    var newValues = scrapeMotionValuesFromProps$1(props);
	    for (var key in props) {
	        if (isMotionValue(props[key])) {
	            var targetKey = key === "x" || key === "y" ? "attr" + key.toUpperCase() : key;
	            newValues[targetKey] = props[key];
	        }
	    }
	    return newValues;
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/
	var CAMEL_CASE_PATTERN = /([a-z])([A-Z])/g;
	var REPLACE_TEMPLATE = "$1-$2";
	/**
	 * Convert camelCase to dash-case properties.
	 */
	var camelToDash = function (str) {
	    return str.replace(CAMEL_CASE_PATTERN, REPLACE_TEMPLATE).toLowerCase();
	};

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/
	/**
	 * A set of attribute names that are always read/written as camel case.
	 */
	var camelCaseAttributes = new Set([
	    "baseFrequency",
	    "diffuseConstant",
	    "kernelMatrix",
	    "kernelUnitLength",
	    "keySplines",
	    "keyTimes",
	    "limitingConeAngle",
	    "markerHeight",
	    "markerWidth",
	    "numOctaves",
	    "targetX",
	    "targetY",
	    "surfaceScale",
	    "specularConstant",
	    "specularExponent",
	    "stdDeviation",
	    "tableValues",
	    "viewBox",
	]);

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	function renderSVG(element, renderState) {
	    renderHTML(element, renderState);
	    for (var key in renderState.attrs) {
	        element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);
	    }
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	var svgVisualElement = visualElement(__assign(__assign({}, htmlConfig), { getBaseTarget: function (props, key) {
	        return props[key];
	    },
	    readValueFromInstance: function (domElement, key) {
	        var _a;
	        if (isTransformProp(key)) {
	            return ((_a = getDefaultValueType(key)) === null || _a === void 0 ? void 0 : _a.default) || 0;
	        }
	        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;
	        return domElement.getAttribute(key);
	    },
	    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,
	    build: function (_element, renderState, latestValues, projection, layoutState, options, props) {
	        var isProjectionTranform = projection.isEnabled && layoutState.isHydrated;
	        buildSVGAttrs(renderState, latestValues, projection, layoutState, options, props.transformTemplate, isProjectionTranform ? buildLayoutProjectionTransform : undefined, isProjectionTranform
	            ? buildLayoutProjectionTransformOrigin
	            : undefined);
	    }, render: renderSVG }));

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/


	var createDomVisualElement = function (Component, options) {
	   
	    return Component === "SVG"
	        ? svgVisualElement(options, { enableHardwareAcceleration: false })
	        : htmlVisualElement(options, { enableHardwareAcceleration: true });
	};

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	var svgMotionConfig = {
	        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,
	        createRenderState: createSvgRenderState,
	        onMount: function (props, instance, _a) {
	            var renderState = _a.renderState, latestValues = _a.latestValues;
	            try {
	                renderState.dimensions =
	                    typeof instance.getBBox ===
	                        "function"
	                        ? instance.getBBox()
	                        : instance.getBoundingClientRect();
	            }
	            catch (e) {
	                // Most likely trying to measure an unrendered element under Firefox
	                renderState.dimensions = {
	                    x: 0,
	                    y: 0,
	                    width: 0,
	                    height: 0,
	                };
	            }
	            if (isPath(instance)) {
	                renderState.totalPathLength = instance.getTotalLength();
	            }
	            buildSVGAttrs(renderState, latestValues, undefined, undefined, { enableHardwareAcceleration: false }, props.transformTemplate);
	            // TODO: Replace with direct assignment
	            renderSVG(instance, renderState);
	        },
	    };
	function isPath(element) {
	    return element.tagName === "path";
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	var htmlMotionConfig = {
	        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps$1,
	        createRenderState: createHtmlRenderState,   
	};

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/


	function getCurrentTreeVariants(props, context) {
	    if (checkIfControllingVariants(props)) {
	        var initial = props.initial, animate = props.animate;
	        return {
	            initial: initial === false || isVariantLabel(initial)
	                ? initial
	                : undefined,
	            animate: isVariantLabel(animate) ? animate : undefined,
	        };
	    }
	    return props.inherit !== false ? (context||{}) : {};
	}

	/* node_modules/svelte-motion/src/context/MotionContext/UseCreateMotionContext.svelte generated by Svelte v4.2.10 */
	const get_default_slot_changes$f = dirty => ({ value: dirty & /*value*/ 1 });
	const get_default_slot_context$f = ctx => ({ value: /*value*/ ctx[0] });

	function create_fragment$T(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[9].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], get_default_slot_context$f);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, value*/ 257)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[8],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, get_default_slot_changes$f),
							get_default_slot_context$f
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$T.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$T($$self, $$props, $$invalidate) {
		let $mc;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('UseCreateMotionContext', slots, ['default']);
		let { props, isStatic, isCustom } = $$props;
		let mc = getContext(MotionContext) || MotionContext(isCustom);
		validate_store(mc, 'mc');
		component_subscribe($$self, mc, value => $$invalidate(7, $mc = value));
		let { initial, animate } = getCurrentTreeVariants(props, get_store_value(mc));

		const variantLabelsAsDependency = prop => {
			return Array.isArray(prop) ? prop.join(" ") : prop;
		};

		const memo = () => {
			return { initial, animate };
		};

		/**
	 * Only break memoisation in static mode
	 */
		let value = memo();

		$$self.$$.on_mount.push(function () {
			if (props === undefined && !('props' in $$props || $$self.$$.bound[$$self.$$.props['props']])) {
				console.warn("<UseCreateMotionContext> was created without expected prop 'props'");
			}

			if (isStatic === undefined && !('isStatic' in $$props || $$self.$$.bound[$$self.$$.props['isStatic']])) {
				console.warn("<UseCreateMotionContext> was created without expected prop 'isStatic'");
			}

			if (isCustom === undefined && !('isCustom' in $$props || $$self.$$.bound[$$self.$$.props['isCustom']])) {
				console.warn("<UseCreateMotionContext> was created without expected prop 'isCustom'");
			}
		});

		const writable_props = ['props', 'isStatic', 'isCustom'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UseCreateMotionContext> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('props' in $$props) $$invalidate(2, props = $$props.props);
			if ('isStatic' in $$props) $$invalidate(3, isStatic = $$props.isStatic);
			if ('isCustom' in $$props) $$invalidate(4, isCustom = $$props.isCustom);
			if ('$$scope' in $$props) $$invalidate(8, $$scope = $$props.$$scope);
		};

		$$self.$capture_state = () => ({
			getContext,
			get: get_store_value,
			MotionContext,
			getCurrentTreeVariants,
			props,
			isStatic,
			isCustom,
			mc,
			initial,
			animate,
			variantLabelsAsDependency,
			memo,
			value,
			$mc
		});

		$$self.$inject_state = $$props => {
			if ('props' in $$props) $$invalidate(2, props = $$props.props);
			if ('isStatic' in $$props) $$invalidate(3, isStatic = $$props.isStatic);
			if ('isCustom' in $$props) $$invalidate(4, isCustom = $$props.isCustom);
			if ('mc' in $$props) $$invalidate(1, mc = $$props.mc);
			if ('initial' in $$props) $$invalidate(5, initial = $$props.initial);
			if ('animate' in $$props) $$invalidate(6, animate = $$props.animate);
			if ('value' in $$props) $$invalidate(0, value = $$props.value);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*props, $mc*/ 132) {
				$$invalidate(5, { initial, animate } = getCurrentTreeVariants(props, $mc), initial, (($$invalidate(6, animate), $$invalidate(2, props)), $$invalidate(7, $mc)));
			}

			if ($$self.$$.dirty & /*isStatic, initial, animate*/ 104) {
				if (isStatic) {
					$$invalidate(0, value = memo(variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)));
				}
			}
		};

		return [value, mc, props, isStatic, isCustom, initial, animate, $mc, $$scope, slots];
	}

	class UseCreateMotionContext extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$T, create_fragment$T, safe_not_equal, { props: 2, isStatic: 3, isCustom: 4 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "UseCreateMotionContext",
				options,
				id: create_fragment$T.name
			});
		}

		get props() {
			throw new Error("<UseCreateMotionContext>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set props(value) {
			throw new Error("<UseCreateMotionContext>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get isStatic() {
			throw new Error("<UseCreateMotionContext>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set isStatic(value) {
			throw new Error("<UseCreateMotionContext>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get isCustom() {
			throw new Error("<UseCreateMotionContext>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set isCustom(value) {
			throw new Error("<UseCreateMotionContext>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var UseCreateMotionContext$1 = UseCreateMotionContext;

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	/**
	 * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself
	 *
	 * TODO: Remove and move to library
	 *
	 * @internal
	 */
	function resolveMotionValue(value) {
	    var unwrappedValue = isMotionValue(value) ? value.get() : value;
	    return isCustomValue(unwrappedValue)
	        ? unwrappedValue.toValue()
	        : unwrappedValue;
	}

	/* node_modules/svelte-motion/src/motion/utils/UseVisualState.svelte generated by Svelte v4.2.10 */
	const get_default_slot_changes$e = dirty => ({ state: dirty & /*state*/ 1 });
	const get_default_slot_context$e = ctx => ({ state: /*state*/ ctx[0] });

	function create_fragment$S(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[10].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], get_default_slot_context$e);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, state*/ 513)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[9],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, get_default_slot_changes$e),
							get_default_slot_context$e
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$S.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const makeState = ({ scrapeMotionValuesFromProps, createRenderState, onMount }, props, context, presenceContext) => {
		const state = {
			latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),
			renderState: createRenderState()
		};

		if (onMount) {
			state.mount = instance => onMount(props, instance, state);
		}

		return state;
	};

	function makeLatestValues(props, context, presenceContext, scrapeMotionValues) {
		const values = {};
		const blockInitialAnimation = presenceContext?.initial === false;
		const motionValues = scrapeMotionValues(props);

		for (const key in motionValues) {
			values[key] = resolveMotionValue(motionValues[key]);
		}

		let { initial, animate } = props;
		const isControllingVariants = checkIfControllingVariants(props);
		const isVariantNode = checkIfVariantNode(props);

		if (context && isVariantNode && !isControllingVariants && props.inherit !== false) {
			initial !== null && initial !== void 0
			? initial
			: initial = context.initial;

			animate !== null && animate !== void 0
			? animate
			: animate = context.animate;
		}

		const variantToSet = blockInitialAnimation || initial === false
		? animate
		: initial;

		if (variantToSet && typeof variantToSet !== "boolean" && !isAnimationControls(variantToSet)) {
			const list = Array.isArray(variantToSet)
			? variantToSet
			: [variantToSet];

			list.forEach(definition => {
				const resolved = resolveVariantFromProps(props, definition);
				if (!resolved) return;
				const { transitionEnd, transition, ...target } = resolved;
				for (const key in target) values[key] = target[key];
				for (const key in transitionEnd) values[key] = transitionEnd[key];
			});
		}

		return values;
	}

	function instance$S($$self, $$props, $$invalidate) {
		let $presenceContext;
		let $context;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('UseVisualState', slots, ['default']);
		let { config, props, isStatic, isCustom } = $$props;
		const context = getContext(MotionContext) || MotionContext(isCustom);
		validate_store(context, 'context');
		component_subscribe($$self, context, value => $$invalidate(8, $context = value));
		const presenceContext = getContext(PresenceContext) || PresenceContext(isCustom);
		validate_store(presenceContext, 'presenceContext');
		component_subscribe($$self, presenceContext, value => $$invalidate(7, $presenceContext = value));
		let state = makeState(config, props, get_store_value(context), get_store_value(presenceContext));
		const ms = makeState;

		$$self.$$.on_mount.push(function () {
			if (config === undefined && !('config' in $$props || $$self.$$.bound[$$self.$$.props['config']])) {
				console.warn("<UseVisualState> was created without expected prop 'config'");
			}

			if (props === undefined && !('props' in $$props || $$self.$$.bound[$$self.$$.props['props']])) {
				console.warn("<UseVisualState> was created without expected prop 'props'");
			}

			if (isStatic === undefined && !('isStatic' in $$props || $$self.$$.bound[$$self.$$.props['isStatic']])) {
				console.warn("<UseVisualState> was created without expected prop 'isStatic'");
			}

			if (isCustom === undefined && !('isCustom' in $$props || $$self.$$.bound[$$self.$$.props['isCustom']])) {
				console.warn("<UseVisualState> was created without expected prop 'isCustom'");
			}
		});

		const writable_props = ['config', 'props', 'isStatic', 'isCustom'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UseVisualState> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('config' in $$props) $$invalidate(3, config = $$props.config);
			if ('props' in $$props) $$invalidate(4, props = $$props.props);
			if ('isStatic' in $$props) $$invalidate(5, isStatic = $$props.isStatic);
			if ('isCustom' in $$props) $$invalidate(6, isCustom = $$props.isCustom);
			if ('$$scope' in $$props) $$invalidate(9, $$scope = $$props.$$scope);
		};

		$$self.$capture_state = () => ({
			resolveMotionValue,
			checkIfControllingVariants,
			checkIfVariantNode,
			resolveVariantFromProps,
			isAnimationControls,
			makeState,
			makeLatestValues,
			getContext,
			get: get_store_value,
			PresenceContext,
			MotionContext,
			config,
			props,
			isStatic,
			isCustom,
			context,
			presenceContext,
			state,
			ms,
			$presenceContext,
			$context
		});

		$$self.$inject_state = $$props => {
			if ('config' in $$props) $$invalidate(3, config = $$props.config);
			if ('props' in $$props) $$invalidate(4, props = $$props.props);
			if ('isStatic' in $$props) $$invalidate(5, isStatic = $$props.isStatic);
			if ('isCustom' in $$props) $$invalidate(6, isCustom = $$props.isCustom);
			if ('state' in $$props) $$invalidate(0, state = $$props.state);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*isStatic, config, props, $context, $presenceContext*/ 440) {
				if (isStatic) {
					$$invalidate(0, state = ms(config, props, $context, $presenceContext));
				}
			}
		};

		return [
			state,
			context,
			presenceContext,
			config,
			props,
			isStatic,
			isCustom,
			$presenceContext,
			$context,
			$$scope,
			slots
		];
	}

	class UseVisualState extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$S, create_fragment$S, safe_not_equal, {
				config: 3,
				props: 4,
				isStatic: 5,
				isCustom: 6
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "UseVisualState",
				options,
				id: create_fragment$S.name
			});
		}

		get config() {
			throw new Error("<UseVisualState>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set config(value) {
			throw new Error("<UseVisualState>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get props() {
			throw new Error("<UseVisualState>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set props(value) {
			throw new Error("<UseVisualState>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get isStatic() {
			throw new Error("<UseVisualState>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set isStatic(value) {
			throw new Error("<UseVisualState>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get isCustom() {
			throw new Error("<UseVisualState>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set isCustom(value) {
			throw new Error("<UseVisualState>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var UseVisualState$1 = UseVisualState;

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/
	function isRefObject(ref) {
	    return (typeof ref === "object" &&
	        Object.prototype.hasOwnProperty.call(ref, "current"));
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/


	/**
	 * Creates a ref function that, when called, hydrates the provided
	 * external ref and VisualElement.
	 */
	function useMotionRef(visualState, visualElement, externalRef) {
	    return function (instance) {
	        var _a;
	        instance && ((_a = visualState.mount) === null || _a === void 0 ? void 0 : _a.call(visualState, instance));
	        if (visualElement) {
	            instance
	                ? visualElement.mount(instance)
	                : visualElement.unmount();
	        }
	        if (externalRef) {
	            if (typeof externalRef === "function") {
	                externalRef(instance);
	            }
	            else if (isRefObject(externalRef)) {
	                externalRef.current = instance;
	            }
	        }
	    }
	}

	/* node_modules/svelte-motion/src/motion/Motion.svelte generated by Svelte v4.2.10 */

	function get_each_context$5(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[21] = list[i];
		return child_ctx;
	}

	const get_default_slot_changes$d = dirty => ({
		motion: dirty & /*motion*/ 16777216,
		props: dirty & /*renderProps*/ 33554432
	});

	const get_default_slot_context$d = ctx => ({
		motion: /*motion*/ ctx[24],
		props: /*renderProps*/ ctx[25]
	});

	// (193:24) <UseRender                             {Component}                             props={motionProps}                             ref={useMotionRef(visualState, context.visualElement, externalRef)}                             {visualState}                             {isStatic}                             {forwardMotionProps}                             let:motion                             let:props={renderProps}>
	function create_default_slot_6$2(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[14].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], get_default_slot_context$d);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, motion, renderProps*/ 50364416)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[15],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[15], dirty, get_default_slot_changes$d),
							get_default_slot_context$d
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_6$2.name,
			type: "slot",
			source: "(193:24) <UseRender                             {Component}                             props={motionProps}                             ref={useMotionRef(visualState, context.visualElement, externalRef)}                             {visualState}                             {isStatic}                             {forwardMotionProps}                             let:motion                             let:props={renderProps}>",
			ctx
		});

		return block;
	}

	// (192:20) <MotionContextProvider value={context} {isCustom}>
	function create_default_slot_5$3(ctx) {
		let userender;
		let current;

		userender = new UseRender$1({
				props: {
					Component: /*Component*/ ctx[6],
					props: /*motionProps*/ ctx[4],
					ref: useMotionRef(/*visualState*/ ctx[18], /*context*/ ctx[17].visualElement, /*externalRef*/ ctx[1]),
					visualState: /*visualState*/ ctx[18],
					isStatic: /*isStatic*/ ctx[3],
					forwardMotionProps: /*forwardMotionProps*/ ctx[0],
					$$slots: {
						default: [
							create_default_slot_6$2,
							({ motion, props: renderProps }) => ({ 24: motion, 25: renderProps }),
							({ motion, props: renderProps }) => (motion ? 16777216 : 0) | (renderProps ? 33554432 : 0)
						]
					},
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(userender.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(userender, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const userender_changes = {};
				if (dirty & /*motionProps*/ 16) userender_changes.props = /*motionProps*/ ctx[4];
				if (dirty & /*visualState, context, externalRef*/ 393218) userender_changes.ref = useMotionRef(/*visualState*/ ctx[18], /*context*/ ctx[17].visualElement, /*externalRef*/ ctx[1]);
				if (dirty & /*visualState*/ 262144) userender_changes.visualState = /*visualState*/ ctx[18];
				if (dirty & /*isStatic*/ 8) userender_changes.isStatic = /*isStatic*/ ctx[3];
				if (dirty & /*forwardMotionProps*/ 1) userender_changes.forwardMotionProps = /*forwardMotionProps*/ ctx[0];

				if (dirty & /*$$scope, motion, renderProps*/ 50364416) {
					userender_changes.$$scope = { dirty, ctx };
				}

				userender.$set(userender_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(userender.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(userender.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(userender, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_5$3.name,
			type: "slot",
			source: "(192:20) <MotionContextProvider value={context} {isCustom}>",
			ctx
		});

		return block;
	}

	// (206:20) {#if mounted}
	function create_if_block$m(ctx) {
		let each_blocks = [];
		let each_1_lookup = new Map();
		let each_1_anchor;
		let current;
		let each_value = ensure_array_like_dev(/*_features*/ ctx[20]);
		const get_key = ctx => /*feat*/ ctx[21].key;
		validate_each_keys(ctx, each_value, get_each_context$5, get_key);

		for (let i = 0; i < each_value.length; i += 1) {
			let child_ctx = get_each_context$5(ctx, each_value, i);
			let key = get_key(child_ctx);
			each_1_lookup.set(key, each_blocks[i] = create_each_block$5(key, child_ctx));
		}

		const block = {
			c: function create() {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_1_anchor = empty();
			},
			m: function mount(target, anchor) {
				for (let i = 0; i < each_blocks.length; i += 1) {
					if (each_blocks[i]) {
						each_blocks[i].m(target, anchor);
					}
				}

				insert_dev(target, each_1_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (dirty & /*_features, isCustom*/ 1048608) {
					each_value = ensure_array_like_dev(/*_features*/ ctx[20]);
					group_outros();
					validate_each_keys(ctx, each_value, get_each_context$5, get_key);
					each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$5, each_1_anchor, get_each_context$5);
					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;

				for (let i = 0; i < each_value.length; i += 1) {
					transition_in(each_blocks[i]);
				}

				current = true;
			},
			o: function outro(local) {
				for (let i = 0; i < each_blocks.length; i += 1) {
					transition_out(each_blocks[i]);
				}

				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(each_1_anchor);
				}

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].d(detaching);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$m.name,
			type: "if",
			source: "(206:20) {#if mounted}",
			ctx
		});

		return block;
	}

	// (207:24) {#each _features as feat (feat.key)}
	function create_each_block$5(key_1, ctx) {
		let first;
		let switch_instance;
		let switch_instance_anchor;
		let current;
		var switch_value = /*feat*/ ctx[21].Component;

		function switch_props(ctx, dirty) {
			return {
				props: {
					props: /*feat*/ ctx[21].props,
					visualElement: /*feat*/ ctx[21].visualElement,
					isCustom: /*isCustom*/ ctx[5]
				},
				$$inline: true
			};
		}

		if (switch_value) {
			switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
		}

		const block = {
			key: key_1,
			first: null,
			c: function create() {
				first = empty();
				if (switch_instance) create_component(switch_instance.$$.fragment);
				switch_instance_anchor = empty();
				this.first = first;
			},
			m: function mount(target, anchor) {
				insert_dev(target, first, anchor);
				if (switch_instance) mount_component(switch_instance, target, anchor);
				insert_dev(target, switch_instance_anchor, anchor);
				current = true;
			},
			p: function update(new_ctx, dirty) {
				ctx = new_ctx;

				if (dirty & /*_features*/ 1048576 && switch_value !== (switch_value = /*feat*/ ctx[21].Component)) {
					if (switch_instance) {
						group_outros();
						const old_component = switch_instance;

						transition_out(old_component.$$.fragment, 1, 0, () => {
							destroy_component(old_component, 1);
						});

						check_outros();
					}

					if (switch_value) {
						switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
						create_component(switch_instance.$$.fragment);
						transition_in(switch_instance.$$.fragment, 1);
						mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
					} else {
						switch_instance = null;
					}
				} else if (switch_value) {
					const switch_instance_changes = {};
					if (dirty & /*_features*/ 1048576) switch_instance_changes.props = /*feat*/ ctx[21].props;
					if (dirty & /*_features*/ 1048576) switch_instance_changes.visualElement = /*feat*/ ctx[21].visualElement;
					switch_instance.$set(switch_instance_changes);
				}
			},
			i: function intro(local) {
				if (current) return;
				if (switch_instance) transition_in(switch_instance.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				if (switch_instance) transition_out(switch_instance.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(first);
					detach_dev(switch_instance_anchor);
				}

				if (switch_instance) destroy_component(switch_instance, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_each_block$5.name,
			type: "each",
			source: "(207:24) {#each _features as feat (feat.key)}",
			ctx
		});

		return block;
	}

	// (188:16) <UseFeatures                     visualElement={setContext(context, visualElement)}                     props={motionProps}                     let:features={_features}>
	function create_default_slot_4$3(ctx) {
		let motioncontextprovider;
		let t;
		let if_block_anchor;
		let current;

		motioncontextprovider = new MotionContextProvider$1({
				props: {
					value: /*context*/ ctx[17],
					isCustom: /*isCustom*/ ctx[5],
					$$slots: { default: [create_default_slot_5$3] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		let if_block = /*mounted*/ ctx[2] && create_if_block$m(ctx);

		const block = {
			c: function create() {
				create_component(motioncontextprovider.$$.fragment);
				t = space();
				if (if_block) if_block.c();
				if_block_anchor = empty();
			},
			m: function mount(target, anchor) {
				mount_component(motioncontextprovider, target, anchor);
				insert_dev(target, t, anchor);
				if (if_block) if_block.m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const motioncontextprovider_changes = {};
				if (dirty & /*context*/ 131072) motioncontextprovider_changes.value = /*context*/ ctx[17];

				if (dirty & /*$$scope, motionProps, visualState, context, externalRef, isStatic, forwardMotionProps*/ 426011) {
					motioncontextprovider_changes.$$scope = { dirty, ctx };
				}

				motioncontextprovider.$set(motioncontextprovider_changes);

				if (/*mounted*/ ctx[2]) {
					if (if_block) {
						if_block.p(ctx, dirty);

						if (dirty & /*mounted*/ 4) {
							transition_in(if_block, 1);
						}
					} else {
						if_block = create_if_block$m(ctx);
						if_block.c();
						transition_in(if_block, 1);
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					group_outros();

					transition_out(if_block, 1, 1, () => {
						if_block = null;
					});

					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(motioncontextprovider.$$.fragment, local);
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(motioncontextprovider.$$.fragment, local);
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
					detach_dev(if_block_anchor);
				}

				destroy_component(motioncontextprovider, detaching);
				if (if_block) if_block.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_4$3.name,
			type: "slot",
			source: "(188:16) <UseFeatures                     visualElement={setContext(context, visualElement)}                     props={motionProps}                     let:features={_features}>",
			ctx
		});

		return block;
	}

	// (181:12) <UseVisualElement                 {Component}                 {visualState}                 {createVisualElement}                 props={motionProps}                 {isCustom}                 let:visualElement>
	function create_default_slot_3$5(ctx) {
		let usefeatures;
		let current;

		usefeatures = new UseFeatures$1({
				props: {
					visualElement: /*setContext*/ ctx[10](/*context*/ ctx[17], /*visualElement*/ ctx[19]),
					props: /*motionProps*/ ctx[4],
					$$slots: {
						default: [
							create_default_slot_4$3,
							({ features: _features }) => ({ 20: _features }),
							({ features: _features }) => _features ? 1048576 : 0
						]
					},
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(usefeatures.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(usefeatures, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const usefeatures_changes = {};
				if (dirty & /*context, visualElement*/ 655360) usefeatures_changes.visualElement = /*setContext*/ ctx[10](/*context*/ ctx[17], /*visualElement*/ ctx[19]);
				if (dirty & /*motionProps*/ 16) usefeatures_changes.props = /*motionProps*/ ctx[4];

				if (dirty & /*$$scope, _features, mounted, context, motionProps, visualState, externalRef, isStatic, forwardMotionProps*/ 1474591) {
					usefeatures_changes.$$scope = { dirty, ctx };
				}

				usefeatures.$set(usefeatures_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(usefeatures.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(usefeatures.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(usefeatures, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_3$5.name,
			type: "slot",
			source: "(181:12) <UseVisualElement                 {Component}                 {visualState}                 {createVisualElement}                 props={motionProps}                 {isCustom}                 let:visualElement>",
			ctx
		});

		return block;
	}

	// (175:8) <UseVisualState             config={visualStateConfig}             props={motionProps}             {isStatic}             {isCustom}             let:state={visualState}>
	function create_default_slot_2$5(ctx) {
		let usevisualelement;
		let current;

		usevisualelement = new UseVisualElement$1({
				props: {
					Component: /*Component*/ ctx[6],
					visualState: /*visualState*/ ctx[18],
					createVisualElement: /*createVisualElement*/ ctx[7],
					props: /*motionProps*/ ctx[4],
					isCustom: /*isCustom*/ ctx[5],
					$$slots: {
						default: [
							create_default_slot_3$5,
							({ visualElement }) => ({ 19: visualElement }),
							({ visualElement }) => visualElement ? 524288 : 0
						]
					},
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(usevisualelement.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(usevisualelement, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const usevisualelement_changes = {};
				if (dirty & /*visualState*/ 262144) usevisualelement_changes.visualState = /*visualState*/ ctx[18];
				if (dirty & /*motionProps*/ 16) usevisualelement_changes.props = /*motionProps*/ ctx[4];

				if (dirty & /*$$scope, context, visualElement, motionProps, mounted, visualState, externalRef, isStatic, forwardMotionProps*/ 950303) {
					usevisualelement_changes.$$scope = { dirty, ctx };
				}

				usevisualelement.$set(usevisualelement_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(usevisualelement.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(usevisualelement.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(usevisualelement, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_2$5.name,
			type: "slot",
			source: "(175:8) <UseVisualState             config={visualStateConfig}             props={motionProps}             {isStatic}             {isCustom}             let:state={visualState}>",
			ctx
		});

		return block;
	}

	// (174:4) <UseCreateMotionContext props={motionProps} {isStatic} let:value={context} {isCustom}>
	function create_default_slot_1$7(ctx) {
		let usevisualstate;
		let current;

		usevisualstate = new UseVisualState$1({
				props: {
					config: /*visualStateConfig*/ ctx[8],
					props: /*motionProps*/ ctx[4],
					isStatic: /*isStatic*/ ctx[3],
					isCustom: /*isCustom*/ ctx[5],
					$$slots: {
						default: [
							create_default_slot_2$5,
							({ state: visualState }) => ({ 18: visualState }),
							({ state: visualState }) => visualState ? 262144 : 0
						]
					},
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(usevisualstate.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(usevisualstate, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const usevisualstate_changes = {};
				if (dirty & /*motionProps*/ 16) usevisualstate_changes.props = /*motionProps*/ ctx[4];
				if (dirty & /*isStatic*/ 8) usevisualstate_changes.isStatic = /*isStatic*/ ctx[3];

				if (dirty & /*$$scope, visualState, motionProps, context, mounted, externalRef, isStatic, forwardMotionProps*/ 426015) {
					usevisualstate_changes.$$scope = { dirty, ctx };
				}

				usevisualstate.$set(usevisualstate_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(usevisualstate.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(usevisualstate.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(usevisualstate, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_1$7.name,
			type: "slot",
			source: "(174:4) <UseCreateMotionContext props={motionProps} {isStatic} let:value={context} {isCustom}>",
			ctx
		});

		return block;
	}

	// (173:0) <ScaleCorrectionProvider {isCustom}>
	function create_default_slot$j(ctx) {
		let usecreatemotioncontext;
		let current;

		usecreatemotioncontext = new UseCreateMotionContext$1({
				props: {
					props: /*motionProps*/ ctx[4],
					isStatic: /*isStatic*/ ctx[3],
					isCustom: /*isCustom*/ ctx[5],
					$$slots: {
						default: [
							create_default_slot_1$7,
							({ value: context }) => ({ 17: context }),
							({ value: context }) => context ? 131072 : 0
						]
					},
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(usecreatemotioncontext.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(usecreatemotioncontext, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const usecreatemotioncontext_changes = {};
				if (dirty & /*motionProps*/ 16) usecreatemotioncontext_changes.props = /*motionProps*/ ctx[4];
				if (dirty & /*isStatic*/ 8) usecreatemotioncontext_changes.isStatic = /*isStatic*/ ctx[3];

				if (dirty & /*$$scope, motionProps, isStatic, context, mounted, externalRef, forwardMotionProps*/ 163871) {
					usecreatemotioncontext_changes.$$scope = { dirty, ctx };
				}

				usecreatemotioncontext.$set(usecreatemotioncontext_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(usecreatemotioncontext.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(usecreatemotioncontext.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(usecreatemotioncontext, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$j.name,
			type: "slot",
			source: "(173:0) <ScaleCorrectionProvider {isCustom}>",
			ctx
		});

		return block;
	}

	function create_fragment$R(ctx) {
		let scalecorrectionprovider;
		let current;

		scalecorrectionprovider = new ScaleCorrectionProvider$1({
				props: {
					isCustom: /*isCustom*/ ctx[5],
					$$slots: { default: [create_default_slot$j] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(scalecorrectionprovider.$$.fragment);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(scalecorrectionprovider, target, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const scalecorrectionprovider_changes = {};

				if (dirty & /*$$scope, motionProps, isStatic, mounted, externalRef, forwardMotionProps*/ 32799) {
					scalecorrectionprovider_changes.$$scope = { dirty, ctx };
				}

				scalecorrectionprovider.$set(scalecorrectionprovider_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(scalecorrectionprovider.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(scalecorrectionprovider.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(scalecorrectionprovider, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$R.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$R($$self, $$props, $$invalidate) {
		let motionProps;
		let isStatic;
		const omit_props_names = ["isSVG","forwardMotionProps","externalRef","targetEl"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let $a;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Motion', slots, ['default']);
		let { isSVG = false, forwardMotionProps = false, externalRef = undefined, targetEl = undefined } = $$props;
		const isCustom = targetEl;
		let Component = isSVG ? "SVG" : "DOM";
		let createVisualElement = createDomVisualElement;
		let visualStateConfig = isSVG ? svgMotionConfig : htmlMotionConfig;

		/**
	 * If a component is static, we only visually update it as a
	 * result of a React re-render, rather than any interactions or animations.
	 * If this component or any ancestor is static, we disable hardware acceleration
	 * and don't load any additional functionality.
	 */
		const a = getContext(MotionConfigContext) || MotionConfigContext(isCustom);

		validate_store(a, 'a');
		component_subscribe($$self, a, value => $$invalidate(13, $a = value));
		let mounted = false;

		const setContext = (c, v) => {
			c.visualElement = v;
			return v;
		};

		onMount(() => $$invalidate(2, mounted = true));

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(16, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('isSVG' in $$new_props) $$invalidate(11, isSVG = $$new_props.isSVG);
			if ('forwardMotionProps' in $$new_props) $$invalidate(0, forwardMotionProps = $$new_props.forwardMotionProps);
			if ('externalRef' in $$new_props) $$invalidate(1, externalRef = $$new_props.externalRef);
			if ('targetEl' in $$new_props) $$invalidate(12, targetEl = $$new_props.targetEl);
			if ('$$scope' in $$new_props) $$invalidate(15, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			MotionConfigContext,
			UseVisualElement: UseVisualElement$1,
			UseFeatures: UseFeatures$1,
			MotionContextProvider: MotionContextProvider$1,
			getContext,
			onMount,
			UseRender: UseRender$1,
			createDomVisualElement,
			svgMotionConfig,
			htmlMotionConfig,
			UseCreateMotionContext: UseCreateMotionContext$1,
			UseVisualState: UseVisualState$1,
			useMotionRef,
			ScaleCorrectionProvider: ScaleCorrectionProvider$1,
			isSVG,
			forwardMotionProps,
			externalRef,
			targetEl,
			isCustom,
			Component,
			createVisualElement,
			visualStateConfig,
			a,
			mounted,
			setContext,
			isStatic,
			motionProps,
			$a
		});

		$$self.$inject_state = $$new_props => {
			if ('isSVG' in $$props) $$invalidate(11, isSVG = $$new_props.isSVG);
			if ('forwardMotionProps' in $$props) $$invalidate(0, forwardMotionProps = $$new_props.forwardMotionProps);
			if ('externalRef' in $$props) $$invalidate(1, externalRef = $$new_props.externalRef);
			if ('targetEl' in $$props) $$invalidate(12, targetEl = $$new_props.targetEl);
			if ('Component' in $$props) $$invalidate(6, Component = $$new_props.Component);
			if ('createVisualElement' in $$props) $$invalidate(7, createVisualElement = $$new_props.createVisualElement);
			if ('visualStateConfig' in $$props) $$invalidate(8, visualStateConfig = $$new_props.visualStateConfig);
			if ('mounted' in $$props) $$invalidate(2, mounted = $$new_props.mounted);
			if ('isStatic' in $$props) $$invalidate(3, isStatic = $$new_props.isStatic);
			if ('motionProps' in $$props) $$invalidate(4, motionProps = $$new_props.motionProps);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			$$invalidate(4, motionProps = $$restProps); /*{
	    initial,
	    style,
	    transformTemplate,
	    transformValues,
	    //AnimationProps
	    animate,
	    exit,
	    variants,
	    transition,
	    //VisualElementLifecycles
	    onViewportBoxUpdate,
	    onBeforeLayoutMeasure,
	    onLayoutMeasure,
	    onUpdate,
	    onAnimationStart,
	    onAnimationComplete,
	    onLayoutAnimationComplete,
	    //GestureHandlers
	    // PanHandlers
	    onPan,
	    onPanStart,
	    onPanSessionStart,
	    onPanEnd,
	    // TapHandlers
	    onTap,
	    onTapStart,
	    onTapCancel,
	    whileTap,
	    //HoverHandlers
	    whileHover,
	    onHoverStart,
	    onHoverEnd,
	    //FocusHandlers
	    whileFocus,
	    //DraggableProps
	    drag,
	    whileDrag,
	    dragDirectionLock,
	    dragPropagation,
	    dragConstraints,
	    dragElastic,
	    dragMomentum,
	    dragTransition,
	    dragControls,
	    dragListener,
	    onMeasureDragConstraints,
	    _dragX,
	    _dragY,
	    //DragHandlers
	    onDragStart,
	    onDragEnd,
	    onDrag,
	    onDirectionLock,
	    onDragTransitionEnd,
	    // LayoutProps
	    layout,
	    layoutId,
	    //MotionAdvancedProps
	    custom,
	    inherit,
	    ...(isSVG ? $$restProps : {}),
	};*/

			if ($$self.$$.dirty & /*$a*/ 8192) {
				$$invalidate(3, { isStatic } = $a || {}, isStatic);
			}
		};

		return [
			forwardMotionProps,
			externalRef,
			mounted,
			isStatic,
			motionProps,
			isCustom,
			Component,
			createVisualElement,
			visualStateConfig,
			a,
			setContext,
			isSVG,
			targetEl,
			$a,
			slots,
			$$scope
		];
	}

	class Motion extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$R, create_fragment$R, safe_not_equal, {
				isSVG: 11,
				forwardMotionProps: 0,
				externalRef: 1,
				targetEl: 12
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Motion",
				options,
				id: create_fragment$R.name
			});
		}

		get isSVG() {
			throw new Error("<Motion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set isSVG(value) {
			throw new Error("<Motion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get forwardMotionProps() {
			throw new Error("<Motion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set forwardMotionProps(value) {
			throw new Error("<Motion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get externalRef() {
			throw new Error("<Motion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set externalRef(value) {
			throw new Error("<Motion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get targetEl() {
			throw new Error("<Motion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set targetEl(value) {
			throw new Error("<Motion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var Motion$1 = Motion;

	/* node_modules/svelte-motion/src/events/UseDomEvent.svelte generated by Svelte v4.2.10 */

	function create_fragment$Q(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[5].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[4],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$Q.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function addDomEvent(target, eventName, handler, options) {
		target.addEventListener(eventName, handler, options);

		return function () {
			return target.removeEventListener(eventName, handler, options);
		};
	}

	function instance$Q($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('UseDomEvent', slots, ['default']);
		let { ref, eventName, handler = undefined, options = undefined } = $$props;

		let cleanup = () => {
			
		};

		const effect = () => {
			cleanup();

			if (!ref) {
				return () => {
					
				};
			}

			const element = ref.current;

			if (handler && element) {
				return addDomEvent(element, eventName, handler, options);
			}

			return () => {
				
			};
		};

		onDestroy(cleanup);

		$$self.$$.on_mount.push(function () {
			if (ref === undefined && !('ref' in $$props || $$self.$$.bound[$$self.$$.props['ref']])) {
				console.warn("<UseDomEvent> was created without expected prop 'ref'");
			}

			if (eventName === undefined && !('eventName' in $$props || $$self.$$.bound[$$self.$$.props['eventName']])) {
				console.warn("<UseDomEvent> was created without expected prop 'eventName'");
			}
		});

		const writable_props = ['ref', 'eventName', 'handler', 'options'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UseDomEvent> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('ref' in $$props) $$invalidate(0, ref = $$props.ref);
			if ('eventName' in $$props) $$invalidate(1, eventName = $$props.eventName);
			if ('handler' in $$props) $$invalidate(2, handler = $$props.handler);
			if ('options' in $$props) $$invalidate(3, options = $$props.options);
			if ('$$scope' in $$props) $$invalidate(4, $$scope = $$props.$$scope);
		};

		$$self.$capture_state = () => ({
			addDomEvent,
			onDestroy,
			ref,
			eventName,
			handler,
			options,
			cleanup,
			effect
		});

		$$self.$inject_state = $$props => {
			if ('ref' in $$props) $$invalidate(0, ref = $$props.ref);
			if ('eventName' in $$props) $$invalidate(1, eventName = $$props.eventName);
			if ('handler' in $$props) $$invalidate(2, handler = $$props.handler);
			if ('options' in $$props) $$invalidate(3, options = $$props.options);
			if ('cleanup' in $$props) cleanup = $$props.cleanup;
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*ref, eventName, handler, options*/ 15) {
				cleanup = effect();
			}
		};

		return [ref, eventName, handler, options, $$scope, slots];
	}

	class UseDomEvent extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$Q, create_fragment$Q, safe_not_equal, {
				ref: 0,
				eventName: 1,
				handler: 2,
				options: 3
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "UseDomEvent",
				options,
				id: create_fragment$Q.name
			});
		}

		get ref() {
			throw new Error("<UseDomEvent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set ref(value) {
			throw new Error("<UseDomEvent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get eventName() {
			throw new Error("<UseDomEvent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set eventName(value) {
			throw new Error("<UseDomEvent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get handler() {
			throw new Error("<UseDomEvent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set handler(value) {
			throw new Error("<UseDomEvent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get options() {
			throw new Error("<UseDomEvent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set options(value) {
			throw new Error("<UseDomEvent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var UseDomEvent$1 = UseDomEvent;

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	function isMouseEvent(event) {
	    // PointerEvent inherits from MouseEvent so we can't use a straight instanceof check.
	    if (typeof PointerEvent !== "undefined" && event instanceof PointerEvent) {
	        return !!(event.pointerType === "mouse");
	    }
	    return event instanceof MouseEvent;
	}
	function isTouchEvent(event) {
	    var hasTouches = !!event.touches;
	    return hasTouches;
	}

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/


	/**
	 * Filters out events not attached to the primary pointer (currently left mouse button)
	 * @param eventHandler
	 */
	function filterPrimaryPointer(eventHandler) {
	    return function (event) {
	        var isMouseEvent = event instanceof MouseEvent;
	        var isPrimaryPointer = !isMouseEvent ||
	            (isMouseEvent && event.button === 0);
	        if (isPrimaryPointer) {
	            eventHandler(event);
	        }
	    };
	}
	var defaultPagePoint = { pageX: 0, pageY: 0 };
	function pointFromTouch(e, pointType) {
	    if (pointType === void 0) { pointType = "page"; }
	    var primaryTouch = e.touches[0] || e.changedTouches[0];
	    var point = primaryTouch || defaultPagePoint;
	    return {
	        x: point[pointType + "X"],
	        y: point[pointType + "Y"],
	    };
	}
	function pointFromMouse(point, pointType) {
	    if (pointType === void 0) { pointType = "page"; }
	    return {
	        x: point[pointType + "X"],
	        y: point[pointType + "Y"],
	    };
	}
	function extractEventInfo(event, pointType) {
	    if (pointType === void 0) { pointType = "page"; }
	    return {
	        point: isTouchEvent(event)
	            ? pointFromTouch(event, pointType)
	            : pointFromMouse(event, pointType),
	    };
	}
	function getViewportPointFromEvent(event) {
	    return extractEventInfo(event, "client");
	}
	var wrapHandler = function (handler, shouldFilterPrimaryPointer) {
	    if (shouldFilterPrimaryPointer === void 0) { shouldFilterPrimaryPointer = false; }
	    var listener = function (event) {
	        return handler(event, extractEventInfo(event));
	    };
	    return shouldFilterPrimaryPointer
	        ? filterPrimaryPointer(listener)
	        : listener;
	};

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/
	var isBrowser$1 = typeof window !== "undefined";

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/


	// We check for event support via functions in case they've been mocked by a testing suite.
	var supportsPointerEvents = function () {
	    return isBrowser$1 && window.onpointerdown === null;
	};
	var supportsTouchEvents = function () {
	    return isBrowser$1 && window.ontouchstart === null;
	};
	var supportsMouseEvents = function () {
	    return isBrowser$1 && window.onmousedown === null;
	};

	/* node_modules/svelte-motion/src/events/UsePointerEvent.svelte generated by Svelte v4.2.10 */

	// (65:0) <UseDomEvent {ref}   eventName={getPointerEventName(eventName)} handler={handler && wrapHandler(handler, eventName === "pointerdown")} {options}>
	function create_default_slot$i(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[4].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[5],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$i.name,
			type: "slot",
			source: "(65:0) <UseDomEvent {ref}   eventName={getPointerEventName(eventName)} handler={handler && wrapHandler(handler, eventName === \\\"pointerdown\\\")} {options}>",
			ctx
		});

		return block;
	}

	function create_fragment$P(ctx) {
		let usedomevent;
		let current;

		usedomevent = new UseDomEvent$1({
				props: {
					ref: /*ref*/ ctx[0],
					eventName: getPointerEventName(/*eventName*/ ctx[1]),
					handler: /*handler*/ ctx[2] && wrapHandler(/*handler*/ ctx[2], /*eventName*/ ctx[1] === "pointerdown"),
					options: /*options*/ ctx[3],
					$$slots: { default: [create_default_slot$i] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(usedomevent.$$.fragment);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(usedomevent, target, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const usedomevent_changes = {};
				if (dirty & /*ref*/ 1) usedomevent_changes.ref = /*ref*/ ctx[0];
				if (dirty & /*eventName*/ 2) usedomevent_changes.eventName = getPointerEventName(/*eventName*/ ctx[1]);
				if (dirty & /*handler, eventName*/ 6) usedomevent_changes.handler = /*handler*/ ctx[2] && wrapHandler(/*handler*/ ctx[2], /*eventName*/ ctx[1] === "pointerdown");
				if (dirty & /*options*/ 8) usedomevent_changes.options = /*options*/ ctx[3];

				if (dirty & /*$$scope*/ 32) {
					usedomevent_changes.$$scope = { dirty, ctx };
				}

				usedomevent.$set(usedomevent_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(usedomevent.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(usedomevent.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(usedomevent, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$P.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const mouseEventNames = {
		pointerdown: "mousedown",
		pointermove: "mousemove",
		pointerup: "mouseup",
		pointercancel: "mousecancel",
		pointerover: "mouseover",
		pointerout: "mouseout",
		pointerenter: "mouseenter",
		pointerleave: "mouseleave"
	};

	const touchEventNames = {
		pointerdown: "touchstart",
		pointermove: "touchmove",
		pointerup: "touchend",
		pointercancel: "touchcancel"
	};

	function getPointerEventName(name) {
		if (supportsPointerEvents()) {
			return name;
		} else if (supportsTouchEvents()) {
			return touchEventNames[name];
		} else if (supportsMouseEvents()) {
			return mouseEventNames[name];
		}

		return name;
	}

	function addPointerEvent(target, eventName, handler, options) {
		return addDomEvent(target, getPointerEventName(eventName), wrapHandler(handler, eventName === "pointerdown"), options);
	}

	function instance$P($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('UsePointerEvent', slots, ['default']);
		let { ref, eventName, handler = undefined, options = undefined } = $$props;

		$$self.$$.on_mount.push(function () {
			if (ref === undefined && !('ref' in $$props || $$self.$$.bound[$$self.$$.props['ref']])) {
				console.warn("<UsePointerEvent> was created without expected prop 'ref'");
			}

			if (eventName === undefined && !('eventName' in $$props || $$self.$$.bound[$$self.$$.props['eventName']])) {
				console.warn("<UsePointerEvent> was created without expected prop 'eventName'");
			}
		});

		const writable_props = ['ref', 'eventName', 'handler', 'options'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UsePointerEvent> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('ref' in $$props) $$invalidate(0, ref = $$props.ref);
			if ('eventName' in $$props) $$invalidate(1, eventName = $$props.eventName);
			if ('handler' in $$props) $$invalidate(2, handler = $$props.handler);
			if ('options' in $$props) $$invalidate(3, options = $$props.options);
			if ('$$scope' in $$props) $$invalidate(5, $$scope = $$props.$$scope);
		};

		$$self.$capture_state = () => ({
			UseDomEvent: UseDomEvent$1,
			supportsPointerEvents,
			supportsTouchEvents,
			supportsMouseEvents,
			mouseEventNames,
			touchEventNames,
			getPointerEventName,
			addPointerEvent,
			wrapHandler,
			addDomEvent,
			ref,
			eventName,
			handler,
			options
		});

		$$self.$inject_state = $$props => {
			if ('ref' in $$props) $$invalidate(0, ref = $$props.ref);
			if ('eventName' in $$props) $$invalidate(1, eventName = $$props.eventName);
			if ('handler' in $$props) $$invalidate(2, handler = $$props.handler);
			if ('options' in $$props) $$invalidate(3, options = $$props.options);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [ref, eventName, handler, options, slots, $$scope];
	}

	class UsePointerEvent extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$P, create_fragment$P, safe_not_equal, {
				ref: 0,
				eventName: 1,
				handler: 2,
				options: 3
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "UsePointerEvent",
				options,
				id: create_fragment$P.name
			});
		}

		get ref() {
			throw new Error("<UsePointerEvent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set ref(value) {
			throw new Error("<UsePointerEvent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get eventName() {
			throw new Error("<UsePointerEvent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set eventName(value) {
			throw new Error("<UsePointerEvent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get handler() {
			throw new Error("<UsePointerEvent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set handler(value) {
			throw new Error("<UsePointerEvent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get options() {
			throw new Error("<UsePointerEvent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set options(value) {
			throw new Error("<UsePointerEvent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var UsePointerEvent$1 = UsePointerEvent;

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	/**
	 * @internal
	 */
	var PanSession = /** @class */ (function () {
	    function PanSession(event, handlers, _a) {
	        var _this = this;
	        var _b = _a === void 0 ? {} : _a, transformPagePoint = _b.transformPagePoint;
	        /**
	         * @internal
	         */
	        this.startEvent = null;
	        /**
	         * @internal
	         */
	        this.lastMoveEvent = null;
	        /**
	         * @internal
	         */
	        this.lastMoveEventInfo = null;
	        /**
	         * @internal
	         */
	        this.handlers = {};
	        this.updatePoint = function () {
	            if (!(_this.lastMoveEvent && _this.lastMoveEventInfo))
	                return;
	            var info = getPanInfo(_this.lastMoveEventInfo, _this.history);
	            var isPanStarted = _this.startEvent !== null;
	            // Only start panning if the offset is larger than 3 pixels. If we make it
	            // any larger than this we'll want to reset the pointer history
	            // on the first update to avoid visual snapping to the cursoe.
	            var isDistancePastThreshold = distance$1(info.offset, { x: 0, y: 0 }) >= 3;
	            if (!isPanStarted && !isDistancePastThreshold)
	                return;
	            var point = info.point;
	            var timestamp = getFrameData().timestamp;
	            _this.history.push(__assign(__assign({}, point), { timestamp: timestamp }));
	            var _a = _this.handlers, onStart = _a.onStart, onMove = _a.onMove;
	            if (!isPanStarted) {
	                onStart && onStart(_this.lastMoveEvent, info);
	                _this.startEvent = _this.lastMoveEvent;
	            }
	            onMove && onMove(_this.lastMoveEvent, info);
	        };
	        this.handlePointerMove = function (event, info) {
	            _this.lastMoveEvent = event;
	            _this.lastMoveEventInfo = transformPoint(info, _this.transformPagePoint);
	            // Because Safari doesn't trigger mouseup events when it's above a `<select>`
	            if (isMouseEvent(event) && event.buttons === 0) {
	                _this.handlePointerUp(event, info);
	                return;
	            }
	            // Throttle mouse move event to once per frame
	            sync.update(_this.updatePoint, true);
	        };
	        this.handlePointerUp = function (event, info) {
	            _this.end();
	            var _a = _this.handlers, onEnd = _a.onEnd, onSessionEnd = _a.onSessionEnd;
	            var panInfo = getPanInfo(transformPoint(info, _this.transformPagePoint), _this.history);
	            if (_this.startEvent && onEnd) {
	                onEnd(event, panInfo);
	            }
	            onSessionEnd && onSessionEnd(event, panInfo);
	        };
	        // If we have more than one touch, don't start detecting this gesture
	        if (isTouchEvent(event) && event.touches.length > 1)
	            return;
	        this.handlers = handlers;
	        this.transformPagePoint = transformPagePoint;
	        var info = extractEventInfo(event);
	        var initialInfo = transformPoint(info, this.transformPagePoint);
	        var point = initialInfo.point;
	        var timestamp = getFrameData().timestamp;
	        this.history = [__assign(__assign({}, point), { timestamp: timestamp })];
	        var onSessionStart = handlers.onSessionStart;
	        onSessionStart &&
	            onSessionStart(event, getPanInfo(initialInfo, this.history));
	        this.removeListeners = pipe(addPointerEvent(window, "pointermove", this.handlePointerMove), addPointerEvent(window, "pointerup", this.handlePointerUp), addPointerEvent(window, "pointercancel", this.handlePointerUp));
	    }
	    PanSession.prototype.updateHandlers = function (handlers) {
	        this.handlers = handlers;
	    };
	    PanSession.prototype.end = function () {
	        this.removeListeners && this.removeListeners();
	        cancelSync.update(this.updatePoint);
	    };
	    return PanSession;
	}());
	function transformPoint(info, transformPagePoint) {
	    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;
	}
	function subtractPoint(a, b) {
	    return { x: a.x - b.x, y: a.y - b.y };
	}
	function getPanInfo(_a, history) {
	    var point = _a.point;
	    return {
	        point: point,
	        delta: subtractPoint(point, lastDevicePoint(history)),
	        offset: subtractPoint(point, startDevicePoint(history)),
	        velocity: getVelocity(history, 0.1),
	    };
	}
	function startDevicePoint(history) {
	    return history[0];
	}
	function lastDevicePoint(history) {
	    return history[history.length - 1];
	}
	function getVelocity(history, timeDelta) {
	    if (history.length < 2) {
	        return { x: 0, y: 0 };
	    }
	    var i = history.length - 1;
	    var timestampedPoint = null;
	    var lastPoint = lastDevicePoint(history);
	    while (i >= 0) {
	        timestampedPoint = history[i];
	        if (lastPoint.timestamp - timestampedPoint.timestamp >
	            secondsToMilliseconds(timeDelta)) {
	            break;
	        }
	        i--;
	    }
	    if (!timestampedPoint) {
	        return { x: 0, y: 0 };
	    }
	    var time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1000;
	    if (time === 0) {
	        return { x: 0, y: 0 };
	    }
	    var currentVelocity = {
	        x: (lastPoint.x - timestampedPoint.x) / time,
	        y: (lastPoint.y - timestampedPoint.y) / time,
	    };
	    if (currentVelocity.x === Infinity) {
	        currentVelocity.x = 0;
	    }
	    if (currentVelocity.y === Infinity) {
	        currentVelocity.y = 0;
	    }
	    return currentVelocity;
	}

	/* node_modules/svelte-motion/src/gestures/UsePanGesture.svelte generated by Svelte v4.2.10 */

	// (61:0) <UsePointerEvent ref={visualElement} eventName="pointerdown" handler={hasPanEvents && onPointerDown}>
	function create_default_slot$h(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[11].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[12],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$h.name,
			type: "slot",
			source: "(61:0) <UsePointerEvent ref={visualElement} eventName=\\\"pointerdown\\\" handler={hasPanEvents && onPointerDown}>",
			ctx
		});

		return block;
	}

	function create_fragment$O(ctx) {
		let usepointerevent;
		let current;

		usepointerevent = new UsePointerEvent$1({
				props: {
					ref: /*visualElement*/ ctx[0],
					eventName: "pointerdown",
					handler: /*hasPanEvents*/ ctx[1] && /*onPointerDown*/ ctx[3],
					$$slots: { default: [create_default_slot$h] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(usepointerevent.$$.fragment);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(usepointerevent, target, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const usepointerevent_changes = {};
				if (dirty & /*visualElement*/ 1) usepointerevent_changes.ref = /*visualElement*/ ctx[0];
				if (dirty & /*hasPanEvents*/ 2) usepointerevent_changes.handler = /*hasPanEvents*/ ctx[1] && /*onPointerDown*/ ctx[3];

				if (dirty & /*$$scope*/ 4096) {
					usepointerevent_changes.$$scope = { dirty, ctx };
				}

				usepointerevent.$set(usepointerevent_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(usepointerevent.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(usepointerevent.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(usepointerevent, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$O.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$O($$self, $$props, $$invalidate) {
		let hasPanEvents;
		let $mcc;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('UsePanGesture', slots, ['default']);
		let { props, visualElement, isCustom } = $$props;
		let { onPan, onPanStart, onPanEnd, onPanSessionStart } = props;
		let panSession = null;
		const mcc = getContext(MotionConfigContext) || MotionConfigContext(isCustom);
		validate_store(mcc, 'mcc');
		component_subscribe($$self, mcc, value => $$invalidate(10, $mcc = value));
		let { transformPagePoint } = get_store_value(mcc);

		let handlers = {
			onSessionStart: onPanSessionStart,
			onStart: onPanStart,
			onMove: onPan,
			onEnd: (event, info) => {
				panSession = null;
				onPanEnd && onPanEnd(event, info);
			}
		};

		function onPointerDown(event) {
			panSession = new PanSession(event, handlers, { transformPagePoint });
		}

		afterUpdate(() => {
			if (panSession !== null) {
				panSession.updateHandlers(handlers);
			}
		});

		onDestroy(() => panSession && panSession.end());

		$$self.$$.on_mount.push(function () {
			if (props === undefined && !('props' in $$props || $$self.$$.bound[$$self.$$.props['props']])) {
				console.warn("<UsePanGesture> was created without expected prop 'props'");
			}

			if (visualElement === undefined && !('visualElement' in $$props || $$self.$$.bound[$$self.$$.props['visualElement']])) {
				console.warn("<UsePanGesture> was created without expected prop 'visualElement'");
			}

			if (isCustom === undefined && !('isCustom' in $$props || $$self.$$.bound[$$self.$$.props['isCustom']])) {
				console.warn("<UsePanGesture> was created without expected prop 'isCustom'");
			}
		});

		const writable_props = ['props', 'visualElement', 'isCustom'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UsePanGesture> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('props' in $$props) $$invalidate(4, props = $$props.props);
			if ('visualElement' in $$props) $$invalidate(0, visualElement = $$props.visualElement);
			if ('isCustom' in $$props) $$invalidate(5, isCustom = $$props.isCustom);
			if ('$$scope' in $$props) $$invalidate(12, $$scope = $$props.$$scope);
		};

		$$self.$capture_state = () => ({
			MotionConfigContext,
			PanSession,
			afterUpdate,
			getContext,
			onDestroy,
			UsePointerEvent: UsePointerEvent$1,
			get: get_store_value,
			props,
			visualElement,
			isCustom,
			onPan,
			onPanStart,
			onPanEnd,
			onPanSessionStart,
			panSession,
			mcc,
			transformPagePoint,
			handlers,
			onPointerDown,
			hasPanEvents,
			$mcc
		});

		$$self.$inject_state = $$props => {
			if ('props' in $$props) $$invalidate(4, props = $$props.props);
			if ('visualElement' in $$props) $$invalidate(0, visualElement = $$props.visualElement);
			if ('isCustom' in $$props) $$invalidate(5, isCustom = $$props.isCustom);
			if ('onPan' in $$props) $$invalidate(6, onPan = $$props.onPan);
			if ('onPanStart' in $$props) $$invalidate(7, onPanStart = $$props.onPanStart);
			if ('onPanEnd' in $$props) $$invalidate(8, onPanEnd = $$props.onPanEnd);
			if ('onPanSessionStart' in $$props) $$invalidate(9, onPanSessionStart = $$props.onPanSessionStart);
			if ('panSession' in $$props) panSession = $$props.panSession;
			if ('transformPagePoint' in $$props) transformPagePoint = $$props.transformPagePoint;
			if ('handlers' in $$props) handlers = $$props.handlers;
			if ('hasPanEvents' in $$props) $$invalidate(1, hasPanEvents = $$props.hasPanEvents);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*props*/ 16) {
				$$invalidate(6, { onPan, onPanStart, onPanEnd, onPanSessionStart } = props, onPan, ($$invalidate(7, onPanStart), $$invalidate(4, props)), ($$invalidate(8, onPanEnd), $$invalidate(4, props)), ($$invalidate(9, onPanSessionStart), $$invalidate(4, props)));
			}

			if ($$self.$$.dirty & /*onPan, onPanStart, onPanEnd, onPanSessionStart*/ 960) {
				$$invalidate(1, hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart);
			}

			if ($$self.$$.dirty & /*$mcc*/ 1024) {
				({ transformPagePoint } = $mcc);
			}

			if ($$self.$$.dirty & /*onPanSessionStart, onPanStart, onPan, onPanEnd*/ 960) {
				handlers = {
					onSessionStart: onPanSessionStart,
					onStart: onPanStart,
					onMove: onPan,
					onEnd: (event, info) => {
						panSession = null;
						onPanEnd && onPanEnd(event, info);
					}
				};
			}
		};

		return [
			visualElement,
			hasPanEvents,
			mcc,
			onPointerDown,
			props,
			isCustom,
			onPan,
			onPanStart,
			onPanEnd,
			onPanSessionStart,
			$mcc,
			slots,
			$$scope
		];
	}

	class UsePanGesture extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$O, create_fragment$O, safe_not_equal, { props: 4, visualElement: 0, isCustom: 5 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "UsePanGesture",
				options,
				id: create_fragment$O.name
			});
		}

		get props() {
			throw new Error("<UsePanGesture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set props(value) {
			throw new Error("<UsePanGesture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get visualElement() {
			throw new Error("<UsePanGesture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set visualElement(value) {
			throw new Error("<UsePanGesture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get isCustom() {
			throw new Error("<UsePanGesture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set isCustom(value) {
			throw new Error("<UsePanGesture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var UsePanGesture$1 = UsePanGesture;

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	/**
	 * Recursively traverse up the tree to check whether the provided child node
	 * is the parent or a descendant of it.
	 *
	 * @param parent - Element to find
	 * @param child - Element to test against parent
	 */
	var isNodeOrChild = function (parent, child) {
	    if (!child) {
	        return false;
	    }
	    else if (parent === child) {
	        return true;
	    }
	    else {
	        return isNodeOrChild(parent, child.parentElement);
	    }
	};

	/** 
	based on framer-motion@4.1.17,
	Copyright (c) 2018 Framer B.V.
	*/

	function createLock(name) {
	    var lock = null;
	    return function () {
	        var openLock = function () {
	            lock = null;
	        };
	        
	        if (lock === null) {
	            lock = name;
	            return openLock;
	        }
	        return false;
	    };
	}
	var globalHorizontalLock = createLock("dragHorizontal");
	var globalVerticalLock = createLock("dragVertical");
	function getGlobalLock(drag) {
	    var lock = false;
	    if (drag === "y") {
	        
	        lock = globalVerticalLock();
	    }
	    else if (drag === "x") {
	        
	        lock = globalHorizontalLock();
	    }
	    else {
	        var openHorizontal_1 = globalHorizontalLock();
	        var openVertical_1 = globalVerticalLock();
	        if (openHorizontal_1 && openVertical_1) {
	            lock = function () {
	                openHorizontal_1();
	                openVertical_1();
	            };
	        }
	        else {
	            // Release the locks because we don't use them
	            if (openHorizontal_1)
	                openHorizontal_1();
	            if (openVertical_1)
	                openVertical_1();
	        }
	    }
	    return lock;
	}
	function isDragActive() {
	    // Check the gesture lock - if we get it, it means no drag gesture is active
	    // and we can safely fire the tap gesture.
	    var openGestureLock = getGlobalLock(true);
	    if (!openGestureLock)
	        return true;
	    openGestureLock();
	    return false;
	}

	/* node_modules/svelte-motion/src/gestures/UseTapGesture.svelte generated by Svelte v4.2.10 */

	// (73:0) <UsePointerEvent     ref={visualElement}     eventName="pointerdown"     handler={hasPressListeners ? onPointerDown : undefined}>
	function create_default_slot$g(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[8].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[9],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$g.name,
			type: "slot",
			source: "(73:0) <UsePointerEvent     ref={visualElement}     eventName=\\\"pointerdown\\\"     handler={hasPressListeners ? onPointerDown : undefined}>",
			ctx
		});

		return block;
	}

	function create_fragment$N(ctx) {
		let usepointerevent;
		let current;

		usepointerevent = new UsePointerEvent$1({
				props: {
					ref: /*visualElement*/ ctx[0],
					eventName: "pointerdown",
					handler: /*hasPressListeners*/ ctx[1]
					? /*onPointerDown*/ ctx[2]
					: undefined,
					$$slots: { default: [create_default_slot$g] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(usepointerevent.$$.fragment);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(usepointerevent, target, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const usepointerevent_changes = {};
				if (dirty & /*visualElement*/ 1) usepointerevent_changes.ref = /*visualElement*/ ctx[0];

				if (dirty & /*hasPressListeners*/ 2) usepointerevent_changes.handler = /*hasPressListeners*/ ctx[1]
				? /*onPointerDown*/ ctx[2]
				: undefined;

				if (dirty & /*$$scope*/ 512) {
					usepointerevent_changes.$$scope = { dirty, ctx };
				}

				usepointerevent.$set(usepointerevent_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(usepointerevent.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(usepointerevent.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(usepointerevent, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$N.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$N($$self, $$props, $$invalidate) {
		let onTap;
		let onTapStart;
		let onTapCancel;
		let whileTap;
		let hasPressListeners;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('UseTapGesture', slots, ['default']);
		let { props, visualElement } = $$props;
		let isPressing = false;
		let cancelPointerEndListeners = null;

		function removePointerEndListener() {
			cancelPointerEndListeners?.();
			cancelPointerEndListeners = null;
		}

		function checkPointerEnd() {
			removePointerEndListener();
			isPressing = false;
			visualElement.animationState?.setActive(AnimationType.Tap, false);
			return !isDragActive();
		}

		function onPointerUp(event, info) {
			if (!checkPointerEnd()) return;

			/**
	 * We only count this as a tap gesture if the event.target is the same
	 * as, or a child of, this component's element
	 */
			!isNodeOrChild(visualElement.getInstance(), event.target)
			? onTapCancel?.(event, info)
			: onTap?.(event, info);
		}

		function onPointerCancel(event, info) {
			if (!checkPointerEnd()) return;
			onTapCancel?.(event, info);
		}

		function onPointerDown(event, info) {
			if (isPressing) return;
			removePointerEndListener();
			isPressing = true;
			cancelPointerEndListeners = pipe(addPointerEvent(window, "pointerup", onPointerUp), addPointerEvent(window, "pointercancel", onPointerCancel));
			onTapStart?.(event, info);
			visualElement.animationState?.setActive(AnimationType.Tap, true);
		}

		onDestroy(removePointerEndListener);

		$$self.$$.on_mount.push(function () {
			if (props === undefined && !('props' in $$props || $$self.$$.bound[$$self.$$.props['props']])) {
				console.warn("<UseTapGesture> was created without expected prop 'props'");
			}

			if (visualElement === undefined && !('visualElement' in $$props || $$self.$$.bound[$$self.$$.props['visualElement']])) {
				console.warn("<UseTapGesture> was created without expected prop 'visualElement'");
			}
		});

		const writable_props = ['props', 'visualElement'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UseTapGesture> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('props' in $$props) $$invalidate(3, props = $$props.props);
			if ('visualElement' in $$props) $$invalidate(0, visualElement = $$props.visualElement);
			if ('$$scope' in $$props) $$invalidate(9, $$scope = $$props.$$scope);
		};

		$$self.$capture_state = () => ({
			fixed,
			isNodeOrChild,
			pipe,
			isDragActive,
			onDestroy,
			UsePointerEvent: UsePointerEvent$1,
			addPointerEvent,
			AnimationType,
			props,
			visualElement,
			isPressing,
			cancelPointerEndListeners,
			removePointerEndListener,
			checkPointerEnd,
			onPointerUp,
			onPointerCancel,
			onPointerDown,
			onTapStart,
			onTapCancel,
			onTap,
			whileTap,
			hasPressListeners
		});

		$$self.$inject_state = $$props => {
			if ('props' in $$props) $$invalidate(3, props = $$props.props);
			if ('visualElement' in $$props) $$invalidate(0, visualElement = $$props.visualElement);
			if ('isPressing' in $$props) isPressing = $$props.isPressing;
			if ('cancelPointerEndListeners' in $$props) cancelPointerEndListeners = $$props.cancelPointerEndListeners;
			if ('onTapStart' in $$props) $$invalidate(4, onTapStart = $$props.onTapStart);
			if ('onTapCancel' in $$props) $$invalidate(5, onTapCancel = $$props.onTapCancel);
			if ('onTap' in $$props) $$invalidate(6, onTap = $$props.onTap);
			if ('whileTap' in $$props) $$invalidate(7, whileTap = $$props.whileTap);
			if ('hasPressListeners' in $$props) $$invalidate(1, hasPressListeners = $$props.hasPressListeners);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*props*/ 8) {
				$$invalidate(6, { onTap, onTapStart, onTapCancel, whileTap } = props, onTap, ($$invalidate(4, onTapStart), $$invalidate(3, props)), ($$invalidate(5, onTapCancel), $$invalidate(3, props)), ($$invalidate(7, whileTap), $$invalidate(3, props)));
			}

			if ($$self.$$.dirty & /*onTap, onTapStart, onTapCancel, whileTap*/ 240) {
				$$invalidate(1, hasPressListeners = onTap || onTapStart || onTapCancel || whileTap);
			}
		};

		return [
			visualElement,
			hasPressListeners,
			onPointerDown,
			props,
			onTapStart,
			onTapCancel,
			onTap,
			whileTap,
			slots,
			$$scope
		];
	}

	class UseTapGesture extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$N, create_fragment$N, safe_not_equal, { props: 3, visualElement: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "UseTapGesture",
				options,
				id: create_fragment$N.name
			});
		}

		get props() {
			throw new Error("<UseTapGesture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set props(value) {
			throw new Error("<UseTapGesture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get visualElement() {
			throw new Error("<UseTapGesture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set visualElement(value) {
			throw new Error("<UseTapGesture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var UseTapGesture$1 = UseTapGesture;

	/* node_modules/svelte-motion/src/gestures/UseHoverGesture.svelte generated by Svelte v4.2.10 */

	function create_fragment$M(ctx) {
		let usepointerevent0;
		let t0;
		let usepointerevent1;
		let t1;
		let current;

		usepointerevent0 = new UsePointerEvent$1({
				props: {
					ref: /*visualElement*/ ctx[0],
					eventName: "pointerenter",
					handler: /*onHoverStart*/ ctx[1] || /*whileHover*/ ctx[3]
					? createHoverEvent(/*visualElement*/ ctx[0], true, /*onHoverStart*/ ctx[1])
					: undefined
				},
				$$inline: true
			});

		usepointerevent1 = new UsePointerEvent$1({
				props: {
					ref: /*visualElement*/ ctx[0],
					eventName: "pointerleave",
					handler: /*onHoverEnd*/ ctx[2] || /*whileHover*/ ctx[3]
					? createHoverEvent(/*visualElement*/ ctx[0], false, /*onHoverEnd*/ ctx[2])
					: undefined
				},
				$$inline: true
			});

		const default_slot_template = /*#slots*/ ctx[6].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

		const block = {
			c: function create() {
				create_component(usepointerevent0.$$.fragment);
				t0 = space();
				create_component(usepointerevent1.$$.fragment);
				t1 = space();
				if (default_slot) default_slot.c();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(usepointerevent0, target, anchor);
				insert_dev(target, t0, anchor);
				mount_component(usepointerevent1, target, anchor);
				insert_dev(target, t1, anchor);

				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, [dirty]) {
				const usepointerevent0_changes = {};
				if (dirty & /*visualElement*/ 1) usepointerevent0_changes.ref = /*visualElement*/ ctx[0];

				if (dirty & /*onHoverStart, whileHover, visualElement*/ 11) usepointerevent0_changes.handler = /*onHoverStart*/ ctx[1] || /*whileHover*/ ctx[3]
				? createHoverEvent(/*visualElement*/ ctx[0], true, /*onHoverStart*/ ctx[1])
				: undefined;

				usepointerevent0.$set(usepointerevent0_changes);
				const usepointerevent1_changes = {};
				if (dirty & /*visualElement*/ 1) usepointerevent1_changes.ref = /*visualElement*/ ctx[0];

				if (dirty & /*onHoverEnd, whileHover, visualElement*/ 13) usepointerevent1_changes.handler = /*onHoverEnd*/ ctx[2] || /*whileHover*/ ctx[3]
				? createHoverEvent(/*visualElement*/ ctx[0], false, /*onHoverEnd*/ ctx[2])
				: undefined;

				usepointerevent1.$set(usepointerevent1_changes);

				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[5],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(usepointerevent0.$$.fragment, local);
				transition_in(usepointerevent1.$$.fragment, local);
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(usepointerevent0.$$.fragment, local);
				transition_out(usepointerevent1.$$.fragment, local);
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t0);
					detach_dev(t1);
				}

				destroy_component(usepointerevent0, detaching);
				destroy_component(usepointerevent1, detaching);
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$M.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function createHoverEvent(visualElement, isActive, callback) {
		return (event, info) => {
			if (!isMouseEvent(event) || isDragActive()) return;
			callback?.(event, info);
			visualElement.animationState?.setActive(AnimationType.Hover, isActive);
		};
	}

	function instance$M($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('UseHoverGesture', slots, ['default']);
		let { props, visualElement } = $$props;
		let { onHoverStart, onHoverEnd, whileHover } = props;

		$$self.$$.on_mount.push(function () {
			if (props === undefined && !('props' in $$props || $$self.$$.bound[$$self.$$.props['props']])) {
				console.warn("<UseHoverGesture> was created without expected prop 'props'");
			}

			if (visualElement === undefined && !('visualElement' in $$props || $$self.$$.bound[$$self.$$.props['visualElement']])) {
				console.warn("<UseHoverGesture> was created without expected prop 'visualElement'");
			}
		});

		const writable_props = ['props', 'visualElement'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UseHoverGesture> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('props' in $$props) $$invalidate(4, props = $$props.props);
			if ('visualElement' in $$props) $$invalidate(0, visualElement = $$props.visualElement);
			if ('$$scope' in $$props) $$invalidate(5, $$scope = $$props.$$scope);
		};

		$$self.$capture_state = () => ({
			isDragActive,
			createHoverEvent,
			UsePointerEvent: UsePointerEvent$1,
			AnimationType,
			isMouseEvent,
			props,
			visualElement,
			onHoverStart,
			onHoverEnd,
			whileHover
		});

		$$self.$inject_state = $$props => {
			if ('props' in $$props) $$invalidate(4, props = $$props.props);
			if ('visualElement' in $$props) $$invalidate(0, visualElement = $$props.visualElement);
			if ('onHoverStart' in $$props) $$invalidate(1, onHoverStart = $$props.onHoverStart);
			if ('onHoverEnd' in $$props) $$invalidate(2, onHoverEnd = $$props.onHoverEnd);
			if ('whileHover' in $$props) $$invalidate(3, whileHover = $$props.whileHover);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*props*/ 16) {
				$$invalidate(1, { onHoverStart, onHoverEnd, whileHover } = props, onHoverStart, ($$invalidate(2, onHoverEnd), $$invalidate(4, props)), ($$invalidate(3, whileHover), $$invalidate(4, props)));
			}
		};

		return [visualElement, onHoverStart, onHoverEnd, whileHover, props, $$scope, slots];
	}

	class UseHoverGesture extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$M, create_fragment$M, safe_not_equal, { props: 4, visualElement: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "UseHoverGesture",
				options,
				id: create_fragment$M.name
			});
		}

		get props() {
			throw new Error("<UseHoverGesture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set props(value) {
			throw new Error("<UseHoverGesture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get visualElement() {
			throw new Error("<UseHoverGesture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set visualElement(value) {
			throw new Error("<UseHoverGesture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var UseHoverGesture$1 = UseHoverGesture;

	/* node_modules/svelte-motion/src/gestures/UseFocusGesture.svelte generated by Svelte v4.2.10 */

	// (22:4) <UseDomEvent ref={visualElement} eventName="blur" handler={whileFocus ? onBlur : undefined}>
	function create_default_slot_1$6(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[5].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[6],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_1$6.name,
			type: "slot",
			source: "(22:4) <UseDomEvent ref={visualElement} eventName=\\\"blur\\\" handler={whileFocus ? onBlur : undefined}>",
			ctx
		});

		return block;
	}

	// (21:0) <UseDomEvent ref={visualElement} eventName="focus" handler={whileFocus ? onFocus : undefined}>
	function create_default_slot$f(ctx) {
		let usedomevent;
		let current;

		usedomevent = new UseDomEvent$1({
				props: {
					ref: /*visualElement*/ ctx[0],
					eventName: "blur",
					handler: /*whileFocus*/ ctx[1] ? /*onBlur*/ ctx[3] : undefined,
					$$slots: { default: [create_default_slot_1$6] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(usedomevent.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(usedomevent, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const usedomevent_changes = {};
				if (dirty & /*visualElement*/ 1) usedomevent_changes.ref = /*visualElement*/ ctx[0];
				if (dirty & /*whileFocus*/ 2) usedomevent_changes.handler = /*whileFocus*/ ctx[1] ? /*onBlur*/ ctx[3] : undefined;

				if (dirty & /*$$scope*/ 64) {
					usedomevent_changes.$$scope = { dirty, ctx };
				}

				usedomevent.$set(usedomevent_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(usedomevent.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(usedomevent.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(usedomevent, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$f.name,
			type: "slot",
			source: "(21:0) <UseDomEvent ref={visualElement} eventName=\\\"focus\\\" handler={whileFocus ? onFocus : undefined}>",
			ctx
		});

		return block;
	}

	function create_fragment$L(ctx) {
		let usedomevent;
		let current;

		usedomevent = new UseDomEvent$1({
				props: {
					ref: /*visualElement*/ ctx[0],
					eventName: "focus",
					handler: /*whileFocus*/ ctx[1] ? /*onFocus*/ ctx[2] : undefined,
					$$slots: { default: [create_default_slot$f] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(usedomevent.$$.fragment);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(usedomevent, target, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const usedomevent_changes = {};
				if (dirty & /*visualElement*/ 1) usedomevent_changes.ref = /*visualElement*/ ctx[0];
				if (dirty & /*whileFocus*/ 2) usedomevent_changes.handler = /*whileFocus*/ ctx[1] ? /*onFocus*/ ctx[2] : undefined;

				if (dirty & /*$$scope, visualElement, whileFocus*/ 67) {
					usedomevent_changes.$$scope = { dirty, ctx };
				}

				usedomevent.$set(usedomevent_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(usedomevent.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(usedomevent.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(usedomevent, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$L.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$L($$self, $$props, $$invalidate) {
		let whileFocus;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('UseFocusGesture', slots, ['default']);
		let { props, visualElement } = $$props;

		const onFocus = () => {
			visualElement.animationState?.setActive(AnimationType.Focus, true);
		};

		const onBlur = () => {
			visualElement.animationState?.setActive(AnimationType.Focus, false);
		};

		$$self.$$.on_mount.push(function () {
			if (props === undefined && !('props' in $$props || $$self.$$.bound[$$self.$$.props['props']])) {
				console.warn("<UseFocusGesture> was created without expected prop 'props'");
			}

			if (visualElement === undefined && !('visualElement' in $$props || $$self.$$.bound[$$self.$$.props['visualElement']])) {
				console.warn("<UseFocusGesture> was created without expected prop 'visualElement'");
			}
		});

		const writable_props = ['props', 'visualElement'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UseFocusGesture> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('props' in $$props) $$invalidate(4, props = $$props.props);
			if ('visualElement' in $$props) $$invalidate(0, visualElement = $$props.visualElement);
			if ('$$scope' in $$props) $$invalidate(6, $$scope = $$props.$$scope);
		};

		$$self.$capture_state = () => ({
			UseDomEvent: UseDomEvent$1,
			AnimationType,
			props,
			visualElement,
			onFocus,
			onBlur,
			whileFocus
		});

		$$self.$inject_state = $$props => {
			if ('props' in $$props) $$invalidate(4, props = $$props.props);
			if ('visualElement' in $$props) $$invalidate(0, visualElement = $$props.visualElement);
			if ('whileFocus' in $$props) $$invalidate(1, whileFocus = $$props.whileFocus);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*props*/ 16) {
				$$invalidate(1, { whileFocus } = props, whileFocus);
			}
		};

		return [visualElement, whileFocus, onFocus, onBlur, props, slots, $$scope];
	}

	class UseFocusGesture extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$L, create_fragment$L, safe_not_equal, { props: 4, visualElement: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "UseFocusGesture",
				options,
				id: create_fragment$L.name
			});
		}

		get props() {
			throw new Error("<UseFocusGesture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set props(value) {
			throw new Error("<UseFocusGesture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get visualElement() {
			throw new Error("<UseFocusGesture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set visualElement(value) {
			throw new Error("<UseFocusGesture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var UseFocusGesture$1 = UseFocusGesture;

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/


	const createMotionClass = (features)=>{
	    features && loadFeatures(features);
	    return Motion$1;           
	};

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	/**
	 * @public
	 */
	const gestureAnimations = {
	    tap: UseTapGesture$1,
	    focus: UseFocusGesture$1,
	    hover: UseHoverGesture$1,
	};

	/** 
	based on framer-motion@4.1.17,
	Copyright (c) 2018 Framer B.V.
	*/

	/**
	 * Apply constraints to a point. These constraints are both physical along an
	 * axis, and an elastic factor that determines how much to constrain the point
	 * by if it does lie outside the defined parameters.
	 */
	function applyConstraints(point, _a, elastic) {
	    var min = _a.min, max = _a.max;
	    if (min !== undefined && point < min) {
	        // If we have a min point defined, and this is outside of that, constrain
	        point = elastic ? mix$1(min, point, elastic.min) : Math.max(point, min);
	    }
	    else if (max !== undefined && point > max) {
	        // If we have a max point defined, and this is outside of that, constrain
	        point = elastic ? mix$1(max, point, elastic.max) : Math.min(point, max);
	    }
	    return point;
	}
	/**
	 * Calculates a min projection point based on a pointer, pointer progress
	 * within the drag target, and constraints.
	 *
	 * For instance if an element was 100px width, we were dragging from 0.25
	 * along this axis, the pointer is at 200px, and there were no constraints,
	 * we would calculate a min projection point of 175px.
	 */
	function calcConstrainedMinPoint(point, length, progress, constraints, elastic) {
	    // Calculate a min point for this axis and apply it to the current pointer
	    var min = point - length * progress;
	    return constraints ? applyConstraints(min, constraints, elastic) : min;
	}
	/**
	 * Calculate constraints in terms of the viewport when defined relatively to the
	 * measured axis. This is measured from the nearest edge, so a max constraint of 200
	 * on an axis with a max value of 300 would return a constraint of 500 - axis length
	 */
	function calcRelativeAxisConstraints(axis, min, max) {
	    return {
	        min: min !== undefined ? axis.min + min : undefined,
	        max: max !== undefined
	            ? axis.max + max - (axis.max - axis.min)
	            : undefined,
	    };
	}
	/**
	 * Calculate constraints in terms of the viewport when
	 * defined relatively to the measured bounding box.
	 */
	function calcRelativeConstraints(layoutBox, _a) {
	    var top = _a.top, left = _a.left, bottom = _a.bottom, right = _a.right;
	    return {
	        x: calcRelativeAxisConstraints(layoutBox.x, left, right),
	        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),
	    };
	}
	/**
	 * Calculate viewport constraints when defined as another viewport-relative axis
	 */
	function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {
	    var _a;
	    var min = constraintsAxis.min - layoutAxis.min;
	    var max = constraintsAxis.max - layoutAxis.max;
	    // If the constraints axis is actually smaller than the layout axis then we can
	    // flip the constraints
	    if (constraintsAxis.max - constraintsAxis.min <
	        layoutAxis.max - layoutAxis.min) {
	        _a = __read([max, min], 2), min = _a[0], max = _a[1];
	    }
	    return {
	        min: layoutAxis.min + min,
	        max: layoutAxis.min + max,
	    };
	}
	/**
	 * Calculate viewport constraints when defined as another viewport-relative box
	 */
	function calcViewportConstraints(layoutBox, constraintsBox) {
	    return {
	        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),
	        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),
	    };
	}
	/**
	 * Calculate the an axis position based on two axes and a progress value.
	 */
	function calcPositionFromProgress(axis, constraints, progress) {
	    var axisLength = axis.max - axis.min;
	    var min = mix$1(constraints.min, constraints.max - axisLength, progress);
	    return { min: min, max: min + axisLength };
	}
	/**
	 * Rebase the calculated viewport constraints relative to the layout.min point.
	 */
	function rebaseAxisConstraints(layout, constraints) {
	    var relativeConstraints = {};
	    if (constraints.min !== undefined) {
	        relativeConstraints.min = constraints.min - layout.min;
	    }
	    if (constraints.max !== undefined) {
	        relativeConstraints.max = constraints.max - layout.min;
	    }
	    return relativeConstraints;
	}
	var defaultElastic = 0.35;
	/**
	 * Accepts a dragElastic prop and returns resolved elastic values for each axis.
	 */
	function resolveDragElastic(dragElastic) {
	    if (dragElastic === false) {
	        dragElastic = 0;
	    }
	    else if (dragElastic === true) {
	        dragElastic = defaultElastic;
	    }
	    return {
	        x: resolveAxisElastic(dragElastic, "left", "right"),
	        y: resolveAxisElastic(dragElastic, "top", "bottom"),
	    };
	}
	function resolveAxisElastic(dragElastic, minLabel, maxLabel) {
	    return {
	        min: resolvePointElastic(dragElastic, minLabel),
	        max: resolvePointElastic(dragElastic, maxLabel),
	    };
	}
	function resolvePointElastic(dragElastic, label) {
	    var _a;
	    return typeof dragElastic === "number"
	        ? dragElastic
	        : (_a = dragElastic[label]) !== null && _a !== void 0 ? _a : 0;
	}

	/** 
	based on framer-motion@4.1.11,
	Copyright (c) 2018 Framer B.V.
	*/


	/**
	 * Returns a boolean stating whether or not we converted the projection
	 * to relative projection.
	 */
	function convertToRelativeProjection(visualElement, isLayoutDrag) {
	    if (isLayoutDrag === void 0) { isLayoutDrag = true; }
	    var projectionParent = visualElement.getProjectionParent();
	    if (!projectionParent)
	        return false;
	    var offset;
	    if (isLayoutDrag) {
	        offset = calcRelativeOffset(projectionParent.projection.target, visualElement.projection.target);
	        removeBoxTransforms(offset, projectionParent.getLatestValues());
	    }
	    else {
	        offset = calcRelativeOffset(projectionParent.getLayoutState().layout, visualElement.getLayoutState().layout);
	    }
	    eachAxis(function (axis) {
	        return visualElement.setProjectionTargetAxis(axis, offset[axis].min, offset[axis].max, true);
	    });
	    return true;
	}

	/** 
	based on framer-motion@4.1.15,
	Copyright (c) 2018 Framer B.V.
	*/

	var elementDragControls = new WeakMap();
	/**
	 *
	 */
	var lastPointerEvent;
	var VisualElementDragControls = /** @class */ (function () {
	    function VisualElementDragControls(_a) {
	        var visualElement = _a.visualElement;
	        /**
	         * Track whether we're currently dragging.
	         *
	         * @internal
	         */
	        this.isDragging = false;
	        /**
	         * The current direction of drag, or `null` if both.
	         *
	         * @internal
	         */
	        this.currentDirection = null;
	        /**
	         * The permitted boundaries of travel, in pixels.
	         *
	         * @internal
	         */
	        this.constraints = false;
	        /**
	         * The per-axis resolved elastic values.
	         *
	         * @internal
	         */
	        this.elastic = axisBox();
	        /**
	         * A reference to the host component's latest props.
	         *
	         * @internal
	         */
	        this.props = {};
	        /**
	         * @internal
	         */
	        this.hasMutatedConstraints = false;
	        /**
	         * Track the initial position of the cursor relative to the dragging element
	         * when dragging starts as a value of 0-1 on each axis. We then use this to calculate
	         * an ideal bounding box for the VisualElement renderer to project into every frame.
	         *
	         * @internal
	         */
	        this.cursorProgress = {
	            x: 0.5,
	            y: 0.5,
	        };
	        // When updating _dragX, or _dragY instead of the VisualElement,
	        // persist their values between drag gestures.
	        this.originPoint = {};
	        // This is a reference to the global drag gesture lock, ensuring only one component
	        // can "capture" the drag of one or both axes.
	        // TODO: Look into moving this into pansession?
	        this.openGlobalLock = null;
	        /**
	         * @internal
	         */
	        this.panSession = null;
	        this.visualElement = visualElement;
	        this.visualElement.enableLayoutProjection();
	        elementDragControls.set(visualElement, this);
	    }
	    /**
	     * Instantiate a PanSession for the drag gesture
	     *
	     * @public
	     */
	    VisualElementDragControls.prototype.start = function (originEvent, _a) {
	        var _this = this;
	        var _b = _a === void 0 ? {} : _a, _c = _b.snapToCursor, snapToCursor = _c === void 0 ? false : _c, cursorProgress = _b.cursorProgress;
	        var onSessionStart = function (event) {
	            var _a;
	            // Stop any animations on both axis values immediately. This allows the user to throw and catch
	            // the component.
	            _this.stopMotion();
	            /**
	             * Save the initial point. We'll use this to calculate the pointer's position rather
	             * than the one we receive when the gesture actually starts. By then, the pointer will
	             * have already moved, and the perception will be of the pointer "slipping" across the element
	             */
	            var initialPoint = getViewportPointFromEvent(event).point;
	            (_a = _this.cancelLayout) === null || _a === void 0 ? void 0 : _a.call(_this);
	            _this.cancelLayout = batchLayout(function (read, write) {
	                var ancestors = collectProjectingAncestors(_this.visualElement);
	                var children = collectProjectingChildren(_this.visualElement);
	                var tree = __spreadArray(__spreadArray([], __read(ancestors)), __read(children));
	                var hasManuallySetCursorOrigin = false;
	                /**
	                 * Apply a simple lock to the projection target. This ensures no animations
	                 * can run on the projection box while this lock is active.
	                 */
	                _this.isLayoutDrag() && _this.visualElement.lockProjectionTarget();
	                write(function () {
	                    tree.forEach(function (element) { return element.resetTransform(); });
	                });
	                read(function () {
	                    updateLayoutMeasurement(_this.visualElement);
	                    children.forEach(updateLayoutMeasurement);
	                });
	                write(function () {
	                    tree.forEach(function (element) { return element.restoreTransform(); });
	                    if (snapToCursor) {
	                        hasManuallySetCursorOrigin = _this.snapToCursor(initialPoint);
	                    }
	                });
	                read(function () {
	                    var isRelativeDrag = Boolean(_this.getAxisMotionValue("x") && !_this.isExternalDrag());
	                    if (!isRelativeDrag) {
	                        _this.visualElement.rebaseProjectionTarget(true, _this.visualElement.measureViewportBox(false));
	                    }
	                    _this.visualElement.scheduleUpdateLayoutProjection();
	                    /**
	                     * When dragging starts, we want to find where the cursor is relative to the bounding box
	                     * of the element. Every frame, we calculate a new bounding box using this relative position
	                     * and let the visualElement renderer figure out how to reproject the element into this bounding
	                     * box.
	                     *
	                     * By doing it this way, rather than applying an x/y transform directly to the element,
	                     * we can ensure the component always visually sticks to the cursor as we'd expect, even
	                     * if the DOM element itself changes layout as a result of React updates the user might
	                     * make based on the drag position.
	                     */
	                    var projection = _this.visualElement.projection;
	                    eachAxis(function (axis) {
	                        if (!hasManuallySetCursorOrigin) {
	                            var _a = projection.target[axis], min = _a.min, max = _a.max;
	                            _this.cursorProgress[axis] = cursorProgress
	                                ? cursorProgress[axis]
	                                : progress(min, max, initialPoint[axis]);
	                        }
	                        /**
	                         * If we have external drag MotionValues, record their origin point. On pointermove
	                         * we'll apply the pan gesture offset directly to this value.
	                         */
	                        var axisValue = _this.getAxisMotionValue(axis);
	                        if (axisValue) {
	                            _this.originPoint[axis] = axisValue.get();
	                        }
	                    });
	                });
	                write(function () {
	                    flushSync.update();
	                    flushSync.preRender();
	                    flushSync.render();
	                    flushSync.postRender();
	                });
	                read(function () { return _this.resolveDragConstraints(); });
	            });
	        };
	        var onStart = function (event, info) {
	            var _a, _b, _c;
	            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession
	            var _d = _this.props, drag = _d.drag, dragPropagation = _d.dragPropagation;
	            if (drag && !dragPropagation) {
	                if (_this.openGlobalLock)
	                    _this.openGlobalLock();
	                _this.openGlobalLock = getGlobalLock(drag);
	                // If we don 't have the lock, don't start dragging
	                if (!_this.openGlobalLock)
	                    return;
	            }
	            flushLayout();
	            // Set current drag status
	            _this.isDragging = true;
	            _this.currentDirection = null;
	            // Fire onDragStart event
	            (_b = (_a = _this.props).onDragStart) === null || _b === void 0 ? void 0 : _b.call(_a, event, info);
	            (_c = _this.visualElement.animationState) === null || _c === void 0 ? void 0 : _c.setActive(AnimationType.Drag, true);
	        };
	        var onMove = function (event, info) {
	            var _a, _b, _c, _d;
	            var _e = _this.props, dragPropagation = _e.dragPropagation, dragDirectionLock = _e.dragDirectionLock;
	            // If we didn't successfully receive the gesture lock, early return.
	            if (!dragPropagation && !_this.openGlobalLock)
	                return;
	            var offset = info.offset;
	            // Attempt to detect drag direction if directionLock is true
	            if (dragDirectionLock && _this.currentDirection === null) {
	                _this.currentDirection = getCurrentDirection(offset);
	                // If we've successfully set a direction, notify listener
	                if (_this.currentDirection !== null) {
	                    (_b = (_a = _this.props).onDirectionLock) === null || _b === void 0 ? void 0 : _b.call(_a, _this.currentDirection);
	                }
	                return;
	            }
	            // Update each point with the latest position
	            _this.updateAxis("x", info.point, offset);
	            _this.updateAxis("y", info.point, offset);
	            // Fire onDrag event
	            (_d = (_c = _this.props).onDrag) === null || _d === void 0 ? void 0 : _d.call(_c, event, info);
	            // Update the last pointer event
	            lastPointerEvent = event;
	        };
	        var onSessionEnd = function (event, info) {
	            return _this.stop(event, info);
	        };
	        var transformPagePoint = this.props.transformPagePoint;
	        this.panSession = new PanSession(originEvent, {
	            onSessionStart: onSessionStart,
	            onStart: onStart,
	            onMove: onMove,
	            onSessionEnd: onSessionEnd,
	        }, { transformPagePoint: transformPagePoint });
	    };
	    VisualElementDragControls.prototype.resolveDragConstraints = function () {
	        var _this = this;
	        var _a = this.props, dragConstraints = _a.dragConstraints, dragElastic = _a.dragElastic;
	        var layout = this.visualElement.getLayoutState().layoutCorrected;
	        if (dragConstraints) {
	            this.constraints = isRefObject(dragConstraints)
	                ? this.resolveRefConstraints(layout, dragConstraints)
	                : calcRelativeConstraints(layout, dragConstraints);
	        }
	        else {
	            this.constraints = false;
	        }
	        this.elastic = resolveDragElastic(dragElastic);
	        /**
	         * If we're outputting to external MotionValues, we want to rebase the measured constraints
	         * from viewport-relative to component-relative.
	         */
	        if (this.constraints && !this.hasMutatedConstraints) {
	            eachAxis(function (axis) {
	                if (_this.getAxisMotionValue(axis)) {
	                    _this.constraints[axis] = rebaseAxisConstraints(layout[axis], _this.constraints[axis]);
	                }
	            });
	        }
	    };
	    VisualElementDragControls.prototype.resolveRefConstraints = function (layoutBox, constraints) {
	        var _a = this.props, onMeasureDragConstraints = _a.onMeasureDragConstraints, transformPagePoint = _a.transformPagePoint;
	        var constraintsElement = constraints.current;
	        this.constraintsBox = getBoundingBox(constraintsElement, transformPagePoint);
	        var measuredConstraints = calcViewportConstraints(layoutBox, this.constraintsBox);
	        /**
	         * If there's an onMeasureDragConstraints listener we call it and
	         * if different constraints are returned, set constraints to that
	         */
	        if (onMeasureDragConstraints) {
	            var userConstraints = onMeasureDragConstraints(convertAxisBoxToBoundingBox(measuredConstraints));
	            this.hasMutatedConstraints = !!userConstraints;
	            if (userConstraints) {
	                measuredConstraints = convertBoundingBoxToAxisBox(userConstraints);
	            }
	        }
	        return measuredConstraints;
	    };
	    VisualElementDragControls.prototype.cancelDrag = function () {
	        var _a, _b;
	        this.visualElement.unlockProjectionTarget();
	        (_a = this.cancelLayout) === null || _a === void 0 ? void 0 : _a.call(this);
	        this.isDragging = false;
	        this.panSession && this.panSession.end();
	        this.panSession = null;
	        if (!this.props.dragPropagation && this.openGlobalLock) {
	            this.openGlobalLock();
	            this.openGlobalLock = null;
	        }
	        (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);
	    };
	    VisualElementDragControls.prototype.stop = function (event, info) {
	        var _a, _b, _c;
	        (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();
	        this.panSession = null;
	        var isDragging = this.isDragging;
	        this.cancelDrag();
	        if (!isDragging)
	            return;
	        var velocity = info.velocity;
	        this.animateDragEnd(velocity);
	        (_c = (_b = this.props).onDragEnd) === null || _c === void 0 ? void 0 : _c.call(_b, event, info);
	    };
	    VisualElementDragControls.prototype.snapToCursor = function (point) {
	        var _this = this;
	        return eachAxis(function (axis) {
	            var drag = _this.props.drag;
	            // If we're not dragging this axis, do an early return.
	            if (!shouldDrag(axis, drag, _this.currentDirection))
	                return;
	            var axisValue = _this.getAxisMotionValue(axis);
	            if (axisValue) {
	                var box = _this.visualElement.getLayoutState().layout;
	                var length_1 = box[axis].max - box[axis].min;
	                var center = box[axis].min + length_1 / 2;
	                var offset = point[axis] - center;
	                _this.originPoint[axis] = point[axis];
	                axisValue.set(offset);
	            }
	            else {
	                _this.cursorProgress[axis] = 0.5;
	                return true;
	            }
	        }).includes(true);
	    };
	    /**
	     * Update the specified axis with the latest pointer information.
	     */
	    VisualElementDragControls.prototype.updateAxis = function (axis, point, offset) {
	        var drag = this.props.drag;
	        // If we're not dragging this axis, do an early return.
	        if (!shouldDrag(axis, drag, this.currentDirection))
	            return;
	        return this.getAxisMotionValue(axis)
	            ? this.updateAxisMotionValue(axis, offset)
	            : this.updateVisualElementAxis(axis, point);
	    };
	    VisualElementDragControls.prototype.updateAxisMotionValue = function (axis, offset) {
	        var axisValue = this.getAxisMotionValue(axis);
	        if (!offset || !axisValue)
	            return;
	        var nextValue = this.originPoint[axis] + offset[axis];
	        var update = this.constraints
	            ? applyConstraints(nextValue, this.constraints[axis], this.elastic[axis])
	            : nextValue;
	        axisValue.set(update);
	    };
	    VisualElementDragControls.prototype.updateVisualElementAxis = function (axis, point) {
	        var _a;
	        // Get the actual layout bounding box of the element
	        var axisLayout = this.visualElement.getLayoutState().layout[axis];
	        // Calculate its current length. In the future we might want to lerp this to animate
	        // between lengths if the layout changes as we change the DOM
	        var axisLength = axisLayout.max - axisLayout.min;
	        // Get the initial progress that the pointer sat on this axis on gesture start.
	        var axisProgress = this.cursorProgress[axis];
	        // Calculate a new min point based on the latest pointer position, constraints and elastic
	        var min = calcConstrainedMinPoint(point[axis], axisLength, axisProgress, (_a = this.constraints) === null || _a === void 0 ? void 0 : _a[axis], this.elastic[axis]);
	        // Update the axis viewport target with this new min and the length
	        this.visualElement.setProjectionTargetAxis(axis, min, min + axisLength);
	    };
	    VisualElementDragControls.prototype.setProps = function (_a) {
	        var _b = _a.drag, drag = _b === void 0 ? false : _b, _c = _a.dragDirectionLock, dragDirectionLock = _c === void 0 ? false : _c, _d = _a.dragPropagation, dragPropagation = _d === void 0 ? false : _d, _e = _a.dragConstraints, dragConstraints = _e === void 0 ? false : _e, _f = _a.dragElastic, dragElastic = _f === void 0 ? defaultElastic : _f, _g = _a.dragMomentum, dragMomentum = _g === void 0 ? true : _g, remainingProps = __rest(_a, ["drag", "dragDirectionLock", "dragPropagation", "dragConstraints", "dragElastic", "dragMomentum"]);
	        this.props = __assign({ drag: drag,
	            dragDirectionLock: dragDirectionLock,
	            dragPropagation: dragPropagation,
	            dragConstraints: dragConstraints,
	            dragElastic: dragElastic,
	            dragMomentum: dragMomentum }, remainingProps);
	    };
	    /**
	     * Drag works differently depending on which props are provided.
	     *
	     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.
	     * - If the component will perform layout animations, we output the gesture to the component's
	     *      visual bounding box
	     * - Otherwise, we apply the delta to the x/y motion values.
	     */
	    VisualElementDragControls.prototype.getAxisMotionValue = function (axis) {
	        var _a = this.props, layout = _a.layout, layoutId = _a.layoutId;
	        var dragKey = "_drag" + axis.toUpperCase();
	        if (this.props[dragKey]) {
	            return this.props[dragKey];
	        }
	        else if (!layout && layoutId === undefined) {
	            return this.visualElement.getValue(axis, 0);
	        }
	    };
	    VisualElementDragControls.prototype.isLayoutDrag = function () {
	        return !this.getAxisMotionValue("x");
	    };
	    VisualElementDragControls.prototype.isExternalDrag = function () {
	        var _a = this.props, _dragX = _a._dragX, _dragY = _a._dragY;
	        return _dragX || _dragY;
	    };
	    VisualElementDragControls.prototype.animateDragEnd = function (velocity) {
	        var _this = this;
	        var _a = this.props, drag = _a.drag, dragMomentum = _a.dragMomentum, dragElastic = _a.dragElastic, dragTransition = _a.dragTransition;
	        /**
	         * Everything beyond the drag gesture should be performed with
	         * relative projection so children stay in sync with their parent element.
	         */
	        var isRelative = convertToRelativeProjection(this.visualElement, this.isLayoutDrag() && !this.isExternalDrag());
	        /**
	         * If we had previously resolved constraints relative to the viewport,
	         * we need to also convert those to a relative coordinate space for the animation
	         */
	        var constraints = this.constraints || {};
	        if (isRelative &&
	            Object.keys(constraints).length &&
	            this.isLayoutDrag()) {
	            var projectionParent = this.visualElement.getProjectionParent();
	            if (projectionParent) {
	                var relativeConstraints_1 = calcRelativeOffset(projectionParent.projection.targetFinal, constraints);
	                eachAxis(function (axis) {
	                    var _a = relativeConstraints_1[axis], min = _a.min, max = _a.max;
	                    constraints[axis] = {
	                        min: isNaN(min) ? undefined : min,
	                        max: isNaN(max) ? undefined : max,
	                    };
	                });
	            }
	        }
	        var momentumAnimations = eachAxis(function (axis) {
	            var _a;
	            if (!shouldDrag(axis, drag, _this.currentDirection)) {
	                return;
	            }
	            var transition = (_a = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a !== void 0 ? _a : {};
	            /**
	             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame
	             * of spring animations so we should look into adding a disable spring option to `inertia`.
	             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`
	             * using the value of `dragElastic`.
	             */
	            var bounceStiffness = dragElastic ? 200 : 1000000;
	            var bounceDamping = dragElastic ? 40 : 10000000;
	            var inertia = __assign(__assign({ type: "inertia", velocity: dragMomentum ? velocity[axis] : 0, bounceStiffness: bounceStiffness,
	                bounceDamping: bounceDamping, timeConstant: 750, restDelta: 1, restSpeed: 10 }, dragTransition), transition);
	            // If we're not animating on an externally-provided `MotionValue` we can use the
	            // component's animation controls which will handle interactions with whileHover (etc),
	            // otherwise we just have to animate the `MotionValue` itself.
	            return _this.getAxisMotionValue(axis)
	                ? _this.startAxisValueAnimation(axis, inertia)
	                : _this.visualElement.startLayoutAnimation(axis, inertia, isRelative);
	        });
	        // Run all animations and then resolve the new drag constraints.
	        return Promise.all(momentumAnimations).then(function () {
	            var _a, _b;
	            (_b = (_a = _this.props).onDragTransitionEnd) === null || _b === void 0 ? void 0 : _b.call(_a);
	        });
	    };
	    VisualElementDragControls.prototype.stopMotion = function () {
	        var _this = this;
	        eachAxis(function (axis) {
	            var axisValue = _this.getAxisMotionValue(axis);
	            axisValue
	                ? axisValue.stop()
	                : _this.visualElement.stopLayoutAnimation();
	        });
	    };
	    VisualElementDragControls.prototype.startAxisValueAnimation = function (axis, transition) {
	        var axisValue = this.getAxisMotionValue(axis);
	        if (!axisValue)
	            return;
	        var currentValue = axisValue.get();
	        axisValue.set(currentValue);
	        axisValue.set(currentValue); // Set twice to hard-reset velocity
	        return startAnimation(axis, axisValue, 0, transition);
	    };
	    VisualElementDragControls.prototype.scalePoint = function () {
	        var _this = this;
	        var _a = this.props, drag = _a.drag, dragConstraints = _a.dragConstraints;
	        if (!isRefObject(dragConstraints) || !this.constraintsBox)
	            return;
	        // Stop any current animations as there can be some visual glitching if we resize mid animation
	        this.stopMotion();
	        // Record the relative progress of the targetBox relative to the constraintsBox
	        var boxProgress = { x: 0, y: 0 };
	        eachAxis(function (axis) {
	            boxProgress[axis] = calcOrigin$1(_this.visualElement.projection.target[axis], _this.constraintsBox[axis]);
	        });
	        /**
	         * For each axis, calculate the current progress of the layout axis within the constraints.
	         * Then, using the latest layout and constraints measurements, reposition the new layout axis
	         * proportionally within the constraints.
	         */
	        this.updateConstraints(function () {
	            eachAxis(function (axis) {
	                if (!shouldDrag(axis, drag, null))
	                    return;
	                // Calculate the position of the targetBox relative to the constraintsBox using the
	                // previously calculated progress
	                var _a = calcPositionFromProgress(_this.visualElement.projection.target[axis], _this.constraintsBox[axis], boxProgress[axis]), min = _a.min, max = _a.max;
	                _this.visualElement.setProjectionTargetAxis(axis, min, max);
	            });
	        });
	        /**
	         * If any other draggable components are queuing the same tasks synchronously
	         * this will wait until they've all been scheduled before flushing.
	         */
	        setTimeout(flushLayout, 1);
	    };
	    VisualElementDragControls.prototype.updateConstraints = function (onReady) {
	        var _this = this;
	        this.cancelLayout = batchLayout(function (read, write) {
	            var ancestors = collectProjectingAncestors(_this.visualElement);
	            write(function () {
	                return ancestors.forEach(function (element) { return element.resetTransform(); });
	            });
	            read(function () { return updateLayoutMeasurement(_this.visualElement); });
	            write(function () {
	                return ancestors.forEach(function (element) { return element.restoreTransform(); });
	            });
	            read(function () {
	                _this.resolveDragConstraints();
	            });
	            if (onReady)
	                write(onReady);
	        });
	    };
	    VisualElementDragControls.prototype.mount = function (visualElement) {
	        var _this = this;
	        var element = visualElement.getInstance();
	        /**
	         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.
	         */
	        var stopPointerListener = addPointerEvent(element, "pointerdown", function (event) {
	            var _a = _this.props, drag = _a.drag, _b = _a.dragListener, dragListener = _b === void 0 ? true : _b;
	            drag && dragListener && _this.start(event);
	        });
	        /**
	         * Attach a window resize listener to scale the draggable target within its defined
	         * constraints as the window resizes.
	         */
	        var stopResizeListener = addDomEvent(window, "resize", function () {
	            _this.scalePoint();
	        });
	        /**
	         * Ensure drag constraints are resolved correctly relative to the dragging element
	         * whenever its layout changes.
	         */
	        var stopLayoutUpdateListener = visualElement.onLayoutUpdate(function () {
	            if (_this.isDragging) {
	                _this.resolveDragConstraints();
	            }
	        });
	        /**
	         * If the previous component with this same layoutId was dragging at the time
	         * it was unmounted, we want to continue the same gesture on this component.
	         */
	        var prevDragCursor = visualElement.prevDragCursor;
	        if (prevDragCursor) {
	            this.start(lastPointerEvent, { cursorProgress: prevDragCursor });
	        }
	        /**
	         * Return a function that will teardown the drag gesture
	         */
	        return function () {
	            stopPointerListener === null || stopPointerListener === void 0 ? void 0 : stopPointerListener();
	            stopResizeListener === null || stopResizeListener === void 0 ? void 0 : stopResizeListener();
	            stopLayoutUpdateListener === null || stopLayoutUpdateListener === void 0 ? void 0 : stopLayoutUpdateListener();
	            _this.cancelDrag();
	        };
	    };
	    return VisualElementDragControls;
	}());
	function shouldDrag(direction, drag, currentDirection) {
	    return ((drag === true || drag === direction) &&
	        (currentDirection === null || currentDirection === direction));
	}
	/**
	 * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower
	 * than the provided threshold, return `null`.
	 *
	 * @param offset - The x/y offset from origin.
	 * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.
	 */
	function getCurrentDirection(offset, lockThreshold) {
	    if (lockThreshold === void 0) { lockThreshold = 10; }
	    var direction = null;
	    if (Math.abs(offset.y) > lockThreshold) {
	        direction = "y";
	    }
	    else if (Math.abs(offset.x) > lockThreshold) {
	        direction = "x";
	    }
	    return direction;
	}

	/* node_modules/svelte-motion/src/gestures/drag/UseDrag.svelte generated by Svelte v4.2.10 */

	function create_fragment$K(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[7].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[6],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$K.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$K($$self, $$props, $$invalidate) {
		let $mcc;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('UseDrag', slots, ['default']);
		let { visualElement, props, isCustom } = $$props;
		const mcc = getContext(MotionConfigContext) || MotionConfigContext(isCustom);
		validate_store(mcc, 'mcc');
		component_subscribe($$self, mcc, value => $$invalidate(5, $mcc = value));
		let dragControls = new VisualElementDragControls({ visualElement });

		// If we've been provided a DragControls for manual control over the drag gesture,
		// subscribe this component to it on mount.
		let cleanup;

		const dragEffect = () => {
			if (cleanup) {
				cleanup();
			}

			if (groupDragControls) {
				cleanup = groupDragControls.subscribe(dragControls);
			}
		};

		let { dragControls: groupDragControls } = props;
		let { transformPagePoint } = get_store_value(mcc);
		dragControls.setProps({ ...props, transformPagePoint });

		onDestroy(() => {
			if (cleanup) {
				cleanup();
			}
		});

		onMount(() => dragControls.mount(visualElement));

		$$self.$$.on_mount.push(function () {
			if (visualElement === undefined && !('visualElement' in $$props || $$self.$$.bound[$$self.$$.props['visualElement']])) {
				console.warn("<UseDrag> was created without expected prop 'visualElement'");
			}

			if (props === undefined && !('props' in $$props || $$self.$$.bound[$$self.$$.props['props']])) {
				console.warn("<UseDrag> was created without expected prop 'props'");
			}

			if (isCustom === undefined && !('isCustom' in $$props || $$self.$$.bound[$$self.$$.props['isCustom']])) {
				console.warn("<UseDrag> was created without expected prop 'isCustom'");
			}
		});

		const writable_props = ['visualElement', 'props', 'isCustom'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UseDrag> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('visualElement' in $$props) $$invalidate(1, visualElement = $$props.visualElement);
			if ('props' in $$props) $$invalidate(2, props = $$props.props);
			if ('isCustom' in $$props) $$invalidate(3, isCustom = $$props.isCustom);
			if ('$$scope' in $$props) $$invalidate(6, $$scope = $$props.$$scope);
		};

		$$self.$capture_state = () => ({
			MotionConfigContext,
			VisualElementDragControls,
			getContext,
			onDestroy,
			onMount,
			get: get_store_value,
			visualElement,
			props,
			isCustom,
			mcc,
			dragControls,
			cleanup,
			dragEffect,
			groupDragControls,
			transformPagePoint,
			$mcc
		});

		$$self.$inject_state = $$props => {
			if ('visualElement' in $$props) $$invalidate(1, visualElement = $$props.visualElement);
			if ('props' in $$props) $$invalidate(2, props = $$props.props);
			if ('isCustom' in $$props) $$invalidate(3, isCustom = $$props.isCustom);
			if ('dragControls' in $$props) $$invalidate(10, dragControls = $$props.dragControls);
			if ('cleanup' in $$props) cleanup = $$props.cleanup;
			if ('groupDragControls' in $$props) groupDragControls = $$props.groupDragControls;
			if ('transformPagePoint' in $$props) $$invalidate(4, transformPagePoint = $$props.transformPagePoint);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*props*/ 4) {
				({ dragControls: groupDragControls } = props);
			}

			if ($$self.$$.dirty & /*$mcc*/ 32) {
				//let {transformPagePoint} = get($mcc);
				$$invalidate(4, { transformPagePoint } = $mcc, transformPagePoint);
			}

			if ($$self.$$.dirty & /*props, transformPagePoint*/ 20) {
				//dragControls.setProps({ ...props, transformPagePoint })
				dragControls.setProps({ ...props, transformPagePoint });
			}
		};

		dragEffect();
		return [mcc, visualElement, props, isCustom, transformPagePoint, $mcc, $$scope, slots];
	}

	class UseDrag extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$K, create_fragment$K, safe_not_equal, { visualElement: 1, props: 2, isCustom: 3 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "UseDrag",
				options,
				id: create_fragment$K.name
			});
		}

		get visualElement() {
			throw new Error("<UseDrag>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set visualElement(value) {
			throw new Error("<UseDrag>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get props() {
			throw new Error("<UseDrag>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set props(value) {
			throw new Error("<UseDrag>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get isCustom() {
			throw new Error("<UseDrag>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set isCustom(value) {
			throw new Error("<UseDrag>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var UseDrag$1 = UseDrag;

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/


	/**
	 * @public
	 */
	const drag = {
	    pan: UsePanGesture$1,
	    drag: UseDrag$1
	};

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	function pixelsToPercent(pixels, axis) {
	    return (pixels / (axis.max - axis.min)) * 100;
	}
	/**
	 * We always correct borderRadius as a percentage rather than pixels to reduce paints.
	 * For example, if you are projecting a box that is 100px wide with a 10px borderRadius
	 * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%
	 * borderRadius in both states. If we animate between the two in pixels that will trigger
	 * a paint each time. If we animate between the two in percentage we'll avoid a paint.
	 */
	function correctBorderRadius(latest, _layoutState, _a) {
	    var target = _a.target;
	    /**
	     * If latest is a string, if it's a percentage we can return immediately as it's
	     * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.
	     */
	    if (typeof latest === "string") {
	        if (px.test(latest)) {
	            latest = parseFloat(latest);
	        }
	        else {
	            return latest;
	        }
	    }
	    /**
	     * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that
	     * pixel value as a percentage of each axis
	     */
	    var x = pixelsToPercent(latest, target.x);
	    var y = pixelsToPercent(latest, target.y);
	    return x + "% " + y + "%";
	}
	var varToken = "_$css";
	function correctBoxShadow(latest, _a) {
	    var delta = _a.delta, treeScale = _a.treeScale;
	    var original = latest;
	    /**
	     * We need to first strip and store CSS variables from the string.
	     */
	    var containsCSSVariables = latest.includes("var(");
	    var cssVariables = [];
	    if (containsCSSVariables) {
	        latest = latest.replace(cssVariableRegex, function (match) {
	            cssVariables.push(match);
	            return varToken;
	        });
	    }
	    var shadow = complex.parse(latest);
	    // TODO: Doesn't support multiple shadows
	    if (shadow.length > 5)
	        return original;
	    var template = complex.createTransformer(latest);
	    var offset = typeof shadow[0] !== "number" ? 1 : 0;
	    // Calculate the overall context scale
	    var xScale = delta.x.scale * treeScale.x;
	    var yScale = delta.y.scale * treeScale.y;
	    shadow[0 + offset] /= xScale;
	    shadow[1 + offset] /= yScale;
	    /**
	     * Ideally we'd correct x and y scales individually, but because blur and
	     * spread apply to both we have to take a scale average and apply that instead.
	     * We could potentially improve the outcome of this by incorporating the ratio between
	     * the two scales.
	     */
	    var averageScale = mix$1(xScale, yScale, 0.5);
	    // Blur
	    if (typeof shadow[2 + offset] === "number")
	        shadow[2 + offset] /= averageScale;
	    // Spread
	    if (typeof shadow[3 + offset] === "number")
	        shadow[3 + offset] /= averageScale;
	    var output = template(shadow);
	    if (containsCSSVariables) {
	        var i_1 = 0;
	        output = output.replace(varToken, function () {
	            var cssVariable = cssVariables[i_1];
	            i_1++;
	            return cssVariable;
	        });
	    }
	    return output;
	}
	var borderCorrectionDefinition = {
	    process: correctBorderRadius,
	};
	var defaultScaleCorrectors = {
	    borderRadius: __assign(__assign({}, borderCorrectionDefinition), { applyTo: [
	            "borderTopLeftRadius",
	            "borderTopRightRadius",
	            "borderBottomLeftRadius",
	            "borderBottomRightRadius",
	        ] }),
	    borderTopLeftRadius: borderCorrectionDefinition,
	    borderTopRightRadius: borderCorrectionDefinition,
	    borderBottomLeftRadius: borderCorrectionDefinition,
	    borderBottomRightRadius: borderCorrectionDefinition,
	    boxShadow: {
	        process: correctBoxShadow,
	    },
	};

	/* node_modules/svelte-motion/src/motion/features/layout/Animate.svelte generated by Svelte v4.2.10 */

	function create_fragment$J(ctx) {
		const block = {
			c: noop$3,
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: noop$3,
			p: noop$3,
			i: noop$3,
			o: noop$3,
			d: noop$3
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$J.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const progressTarget = 1000;

	function hasMoved(a, b) {
		return !isZeroBox(a) && !isZeroBox(b) && (!axisIsEqual(a.x, b.x) || !axisIsEqual(a.y, b.y));
	}

	const zeroAxis = { min: 0, max: 0 };

	function isZeroBox(a) {
		return axisIsEqual(a.x, zeroAxis) && axisIsEqual(a.y, zeroAxis);
	}

	function axisIsEqual(a, b) {
		return a.min === b.min && a.max === b.max;
	}

	const defaultLayoutTransition = { duration: 0.45, ease: [0.4, 0, 0.1, 1] };

	function instance$J($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Animate', slots, []);
		let { visualElement, layout = undefined, safeToRemove } = $$props;

		/**
	 * A mutable object that tracks the target viewport box
	 * for the current animation frame.
	 */
		let frameTarget = axisBox();

		/**
	 * The current animation target, we use this to check whether to start
	 * a new animation or continue the existing one.
	 */
		let currentAnimationTarget = axisBox();

		/**
	 * Track whether we're animating this axis.
	 */
		let isAnimating = { x: false, y: false };

		let stopAxisAnimation = { x: undefined, y: undefined };
		let unsubLayoutReady;
		let isAnimatingTree = false;

		onMount(() => {
			$$invalidate(0, visualElement.animateMotionValue = startAnimation, visualElement);
			visualElement.enableLayoutProjection();
			unsubLayoutReady = visualElement.onLayoutUpdate(animateF);

			$$invalidate(
				0,
				visualElement.layoutSafeToRemove = function () {
					safeToRemove();
				},
				visualElement
			);

			addScaleCorrection(defaultScaleCorrectors);
		});

		onDestroy(() => {
			unsubLayoutReady();
			eachAxis(axis => stopAxisAnimation[axis]?.());
		});

		const animateF = (target, origin, { originBox, targetBox, visibilityAction, shouldStackAnimate, onComplete, ...config } = {}) => {
			/**
	 * Early return if we've been instructed not to animate this render.
	 */
			if (shouldStackAnimate === false) {
				isAnimatingTree = false;
				return safeToRemove();
			}

			/**
	 * Prioritise tree animations
	 */
			if (isAnimatingTree && shouldStackAnimate !== true) {
				return;
			} else if (shouldStackAnimate) {
				isAnimatingTree = true;
			}

			/**
	 * Allow the measured origin (prev bounding box) and target (actual layout) to be
	 * overridden by the provided config.
	 */
			origin = originBox || origin;

			target = targetBox || target;
			const boxHasMoved = hasMoved(origin, target);

			const animations = eachAxis(axis => {
				/**
	 * If layout is set to "position", we can resize the origin box based on the target
	 * box and only animate its position.
	 */
				if (layout === "position") {
					const targetLength = target[axis].max - target[axis].min;
					origin[axis].max = origin[axis].min + targetLength;
				}

				if (visualElement.projection.isTargetLocked) {
					return;
				} else if (visibilityAction !== undefined) {
					visualElement.setVisibility(visibilityAction === VisibilityAction.Show);
				} else if (boxHasMoved) {
					// If the box has moved, animate between it's current visual state and its
					// final state
					return animateAxis(axis, target[axis], origin[axis], config);
				} else {
					// If the box has remained in the same place, immediately set the axis target
					// to the final desired state
					return visualElement.setProjectionTargetAxis(axis, target[axis].min, target[axis].max);
				}
			});

			// Force a render to ensure there's no flash of uncorrected bounding box.
			visualElement.syncRender();

			/**
	 * If this visualElement isn't present (ie it's been removed from the tree by the user but
	 * kept in by the tree by AnimatePresence) then call safeToRemove when all axis animations
	 * have successfully finished.
	 */
			return Promise.all(animations).then(() => {
				isAnimatingTree = false;
				onComplete && onComplete();
				visualElement.notifyLayoutAnimationComplete();
			});
		};

		/**
	 * TODO: This manually performs animations on the visualElement's layout progress
	 * values. It'd be preferable to amend the startLayoutAxisAnimation
	 * API to accept more custom animations like
	 */
		const animateAxis = (axis, target, origin, { transition: _transition } = {}) => {
			stopAxisAnimation[axis]?.();

			/**
	 * If we're not animating to a new target, don't run this animation
	 */
			if (isAnimating[axis] && axisIsEqual(target, currentAnimationTarget[axis])) {
				return;
			}

			stopAxisAnimation[axis]?.();
			isAnimating[axis] = true;
			const _frameTarget = frameTarget[axis];
			const layoutProgress = visualElement.getProjectionAnimationProgress()[axis];

			/**
	 * Set layout progress back to 0. We set it twice to hard-reset any velocity that might
	 * be re-incoporated into a subsequent spring animation.
	 */
			layoutProgress.clearListeners();

			layoutProgress.set(0);
			layoutProgress.set(0);

			/**
	 * Create an animation function to run once per frame. This will tween the visual bounding box from
	 * origin to target using the latest progress value.
	 */
			const frame = () => {
				// Convert the latest layoutProgress, which is a value from 0-1000, into a 0-1 progress
				const p = layoutProgress.get() / progressTarget;

				// Tween the axis and update the visualElement with the latest values
				tweenAxis(_frameTarget, origin, target, p);

				visualElement.setProjectionTargetAxis(axis, _frameTarget.min, _frameTarget.max);
			};

			// Synchronously run a frame to ensure there's no flash of the uncorrected bounding box.
			frame();

			// Ensure that the layout delta is updated for this frame.
			//visualElement.updateLayoutProjection();
			// Create a function to stop animation on this specific axis
			const unsubscribeProgress = layoutProgress.onChange(frame);

			stopAxisAnimation[axis] = () => {
				isAnimating[axis] = false;
				layoutProgress.stop();
				unsubscribeProgress();
			};

			currentAnimationTarget[axis] = target;
			const layoutTransition = _transition || visualElement.getDefaultTransition() || defaultLayoutTransition;

			// Start the animation on this axis
			const animation = startAnimation(axis === "x" ? "layoutX" : "layoutY", layoutProgress, progressTarget, layoutTransition && getValueTransition(layoutTransition, "layout")).then(stopAxisAnimation[axis]);

			return animation;
		};

		$$self.$$.on_mount.push(function () {
			if (visualElement === undefined && !('visualElement' in $$props || $$self.$$.bound[$$self.$$.props['visualElement']])) {
				console.warn("<Animate> was created without expected prop 'visualElement'");
			}

			if (safeToRemove === undefined && !('safeToRemove' in $$props || $$self.$$.bound[$$self.$$.props['safeToRemove']])) {
				console.warn("<Animate> was created without expected prop 'safeToRemove'");
			}
		});

		const writable_props = ['visualElement', 'layout', 'safeToRemove'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Animate> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('visualElement' in $$props) $$invalidate(0, visualElement = $$props.visualElement);
			if ('layout' in $$props) $$invalidate(1, layout = $$props.layout);
			if ('safeToRemove' in $$props) $$invalidate(2, safeToRemove = $$props.safeToRemove);
		};

		$$self.$capture_state = () => ({
			progressTarget,
			hasMoved,
			zeroAxis,
			isZeroBox,
			axisIsEqual,
			defaultLayoutTransition,
			onDestroy,
			onMount,
			axisBox,
			eachAxis,
			startAnimation,
			getValueTransition,
			tweenAxis,
			addScaleCorrection,
			defaultScaleCorrectors,
			visualElement,
			layout,
			safeToRemove,
			frameTarget,
			currentAnimationTarget,
			isAnimating,
			stopAxisAnimation,
			unsubLayoutReady,
			isAnimatingTree,
			animateF,
			animateAxis
		});

		$$self.$inject_state = $$props => {
			if ('visualElement' in $$props) $$invalidate(0, visualElement = $$props.visualElement);
			if ('layout' in $$props) $$invalidate(1, layout = $$props.layout);
			if ('safeToRemove' in $$props) $$invalidate(2, safeToRemove = $$props.safeToRemove);
			if ('frameTarget' in $$props) frameTarget = $$props.frameTarget;
			if ('currentAnimationTarget' in $$props) currentAnimationTarget = $$props.currentAnimationTarget;
			if ('isAnimating' in $$props) isAnimating = $$props.isAnimating;
			if ('stopAxisAnimation' in $$props) stopAxisAnimation = $$props.stopAxisAnimation;
			if ('unsubLayoutReady' in $$props) unsubLayoutReady = $$props.unsubLayoutReady;
			if ('isAnimatingTree' in $$props) isAnimatingTree = $$props.isAnimatingTree;
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [visualElement, layout, safeToRemove];
	}

	class Animate extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$J, create_fragment$J, safe_not_equal, {
				visualElement: 0,
				layout: 1,
				safeToRemove: 2
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Animate",
				options,
				id: create_fragment$J.name
			});
		}

		get visualElement() {
			throw new Error("<Animate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set visualElement(value) {
			throw new Error("<Animate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get layout() {
			throw new Error("<Animate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set layout(value) {
			throw new Error("<Animate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get safeToRemove() {
			throw new Error("<Animate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set safeToRemove(value) {
			throw new Error("<Animate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var Animate$1 = Animate;

	/* node_modules/svelte-motion/src/motion/features/layout/AnimateLayoutContextProvider.svelte generated by Svelte v4.2.10 */

	function create_fragment$I(ctx) {
		let animate;
		let current;

		animate = new Animate$1({
				props: {
					visualElement: /*visualElement*/ ctx[0],
					layout: /*layout*/ ctx[1],
					safeToRemove: /*$presence*/ ctx[2][1]
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(animate.$$.fragment);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(animate, target, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const animate_changes = {};
				if (dirty & /*visualElement*/ 1) animate_changes.visualElement = /*visualElement*/ ctx[0];
				if (dirty & /*layout*/ 2) animate_changes.layout = /*layout*/ ctx[1];
				if (dirty & /*$presence*/ 4) animate_changes.safeToRemove = /*$presence*/ ctx[2][1];
				animate.$set(animate_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(animate.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(animate.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(animate, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$I.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$I($$self, $$props, $$invalidate) {
		let $presence;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('AnimateLayoutContextProvider', slots, []);
		let { visualElement, props, isCustom } = $$props;
		let { layout } = props;
		const presence = usePresence(isCustom);
		validate_store(presence, 'presence');
		component_subscribe($$self, presence, value => $$invalidate(2, $presence = value));

		$$self.$$.on_mount.push(function () {
			if (visualElement === undefined && !('visualElement' in $$props || $$self.$$.bound[$$self.$$.props['visualElement']])) {
				console.warn("<AnimateLayoutContextProvider> was created without expected prop 'visualElement'");
			}

			if (props === undefined && !('props' in $$props || $$self.$$.bound[$$self.$$.props['props']])) {
				console.warn("<AnimateLayoutContextProvider> was created without expected prop 'props'");
			}

			if (isCustom === undefined && !('isCustom' in $$props || $$self.$$.bound[$$self.$$.props['isCustom']])) {
				console.warn("<AnimateLayoutContextProvider> was created without expected prop 'isCustom'");
			}
		});

		const writable_props = ['visualElement', 'props', 'isCustom'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AnimateLayoutContextProvider> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('visualElement' in $$props) $$invalidate(0, visualElement = $$props.visualElement);
			if ('props' in $$props) $$invalidate(4, props = $$props.props);
			if ('isCustom' in $$props) $$invalidate(5, isCustom = $$props.isCustom);
		};

		$$self.$capture_state = () => ({
			usePresence,
			Animate: Animate$1,
			visualElement,
			props,
			isCustom,
			layout,
			presence,
			$presence
		});

		$$self.$inject_state = $$props => {
			if ('visualElement' in $$props) $$invalidate(0, visualElement = $$props.visualElement);
			if ('props' in $$props) $$invalidate(4, props = $$props.props);
			if ('isCustom' in $$props) $$invalidate(5, isCustom = $$props.isCustom);
			if ('layout' in $$props) $$invalidate(1, layout = $$props.layout);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*props*/ 16) {
				$$invalidate(1, { layout } = props, layout);
			}
		};

		return [visualElement, layout, $presence, presence, props, isCustom];
	}

	class AnimateLayoutContextProvider extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$I, create_fragment$I, safe_not_equal, { visualElement: 0, props: 4, isCustom: 5 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "AnimateLayoutContextProvider",
				options,
				id: create_fragment$I.name
			});
		}

		get visualElement() {
			throw new Error("<AnimateLayoutContextProvider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set visualElement(value) {
			throw new Error("<AnimateLayoutContextProvider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get props() {
			throw new Error("<AnimateLayoutContextProvider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set props(value) {
			throw new Error("<AnimateLayoutContextProvider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get isCustom() {
			throw new Error("<AnimateLayoutContextProvider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set isCustom(value) {
			throw new Error("<AnimateLayoutContextProvider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var AnimateLayoutContextProvider$1 = AnimateLayoutContextProvider;

	/* node_modules/svelte-motion/src/motion/features/layout/Measure.svelte generated by Svelte v4.2.10 */

	function create_fragment$H(ctx) {
		const block = {
			c: noop$3,
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: noop$3,
			p: noop$3,
			i: noop$3,
			o: noop$3,
			d: noop$3
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$H.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$H($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Measure', slots, []);
		let { visualElement, syncLayout, framerSyncLayout, update } = $$props;
		const scaleCorrectionContext = getContext(ScaleCorrectionContext);
		const scaleCorrectionParentContext = getContext(ScaleCorrectionParentContext);

		onMount(() => {
			isSharedLayout(syncLayout) && syncLayout.register(visualElement);
			isSharedLayout(framerSyncLayout) && framerSyncLayout.register(visualElement);

			visualElement.onUnmount(() => {
				if (isSharedLayout(syncLayout)) {
					syncLayout.remove(visualElement);
				}

				if (isSharedLayout(framerSyncLayout)) {
					framerSyncLayout.remove(visualElement);
				}
			});
		});

		/**
	 * If this is a child of a SyncContext, notify it that it needs to re-render. It will then
	 * handle the snapshotting.
	 *
	 * If it is stand-alone component, add it to the batcher.
	 */
		let updated = false;

		const updater = (nc = false) => {
			if (updated) {
				return null;
			}

			updated = true;

			// in React the updater function is called on children first, in Svelte the child does not call it.
			get_store_value(scaleCorrectionContext).forEach(v => {
				v.updater?.(true);
			});

			if (isSharedLayout(syncLayout)) {
				syncLayout.syncUpdate();
			} else {
				snapshotViewportBox(visualElement, nc);
				syncLayout.add(visualElement);
			}

			return null;
		};

		if (update === undefined) {
			beforeUpdate(updater);
		}

		const afterU = (nc = false) => {
			updated = false;

			/* Second part of the updater calling in child layouts first.*/
			const scc = get_store_value(scaleCorrectionContext);

			scc.forEach((v, i) => {
				v.afterU?.(true);
			});

			if (!isSharedLayout(syncLayout)) {
				syncLayout.flush();
			}
		}; /**
	 * If this axis isn't animating as a result of this render we want to reset the targetBox
	 * to the measured box
	 */ //setCurrentViewportBox(visualElement);

		scaleCorrectionParentContext.update(v => v.concat([{ updater, afterU }]));
		afterUpdate(afterU);

		$$self.$$.on_mount.push(function () {
			if (visualElement === undefined && !('visualElement' in $$props || $$self.$$.bound[$$self.$$.props['visualElement']])) {
				console.warn("<Measure> was created without expected prop 'visualElement'");
			}

			if (syncLayout === undefined && !('syncLayout' in $$props || $$self.$$.bound[$$self.$$.props['syncLayout']])) {
				console.warn("<Measure> was created without expected prop 'syncLayout'");
			}

			if (framerSyncLayout === undefined && !('framerSyncLayout' in $$props || $$self.$$.bound[$$self.$$.props['framerSyncLayout']])) {
				console.warn("<Measure> was created without expected prop 'framerSyncLayout'");
			}

			if (update === undefined && !('update' in $$props || $$self.$$.bound[$$self.$$.props['update']])) {
				console.warn("<Measure> was created without expected prop 'update'");
			}
		});

		const writable_props = ['visualElement', 'syncLayout', 'framerSyncLayout', 'update'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Measure> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('visualElement' in $$props) $$invalidate(0, visualElement = $$props.visualElement);
			if ('syncLayout' in $$props) $$invalidate(1, syncLayout = $$props.syncLayout);
			if ('framerSyncLayout' in $$props) $$invalidate(2, framerSyncLayout = $$props.framerSyncLayout);
			if ('update' in $$props) $$invalidate(3, update = $$props.update);
		};

		$$self.$capture_state = () => ({
			afterUpdate,
			beforeUpdate,
			getContext,
			onMount,
			get: get_store_value,
			ScaleCorrectionContext,
			ScaleCorrectionParentContext,
			isSharedLayout,
			snapshotViewportBox,
			visualElement,
			syncLayout,
			framerSyncLayout,
			update,
			scaleCorrectionContext,
			scaleCorrectionParentContext,
			updated,
			updater,
			afterU
		});

		$$self.$inject_state = $$props => {
			if ('visualElement' in $$props) $$invalidate(0, visualElement = $$props.visualElement);
			if ('syncLayout' in $$props) $$invalidate(1, syncLayout = $$props.syncLayout);
			if ('framerSyncLayout' in $$props) $$invalidate(2, framerSyncLayout = $$props.framerSyncLayout);
			if ('update' in $$props) $$invalidate(3, update = $$props.update);
			if ('updated' in $$props) updated = $$props.updated;
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*update*/ 8) {
				update !== undefined && updater(update);
			}
		};

		return [visualElement, syncLayout, framerSyncLayout, update];
	}

	class Measure extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$H, create_fragment$H, safe_not_equal, {
				visualElement: 0,
				syncLayout: 1,
				framerSyncLayout: 2,
				update: 3
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Measure",
				options,
				id: create_fragment$H.name
			});
		}

		get visualElement() {
			throw new Error("<Measure>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set visualElement(value) {
			throw new Error("<Measure>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get syncLayout() {
			throw new Error("<Measure>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set syncLayout(value) {
			throw new Error("<Measure>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get framerSyncLayout() {
			throw new Error("<Measure>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set framerSyncLayout(value) {
			throw new Error("<Measure>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get update() {
			throw new Error("<Measure>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set update(value) {
			throw new Error("<Measure>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var Measure$1 = Measure;

	/* node_modules/svelte-motion/src/motion/features/layout/MeasureContextProvider.svelte generated by Svelte v4.2.10 */

	function create_fragment$G(ctx) {
		let measure;
		let current;

		measure = new Measure$1({
				props: {
					syncLayout: /*$syncLayout*/ ctx[2],
					framerSyncLayout: /*$framerSyncLayout*/ ctx[3],
					visualElement: /*visualElement*/ ctx[0],
					update: /*update*/ ctx[1]
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(measure.$$.fragment);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(measure, target, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const measure_changes = {};
				if (dirty & /*$syncLayout*/ 4) measure_changes.syncLayout = /*$syncLayout*/ ctx[2];
				if (dirty & /*$framerSyncLayout*/ 8) measure_changes.framerSyncLayout = /*$framerSyncLayout*/ ctx[3];
				if (dirty & /*visualElement*/ 1) measure_changes.visualElement = /*visualElement*/ ctx[0];
				if (dirty & /*update*/ 2) measure_changes.update = /*update*/ ctx[1];
				measure.$set(measure_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(measure.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(measure.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(measure, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$G.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$G($$self, $$props, $$invalidate) {
		let update;
		let $syncLayout;
		let $framerSyncLayout;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('MeasureContextProvider', slots, []);
		let { visualElement, props, isCustom } = $$props;
		const syncLayout = getContext(SharedLayoutContext) || SharedLayoutContext(isCustom);
		validate_store(syncLayout, 'syncLayout');
		component_subscribe($$self, syncLayout, value => $$invalidate(2, $syncLayout = value));
		const framerSyncLayout = getContext(FramerTreeLayoutContext) || FramerTreeLayoutContext();
		validate_store(framerSyncLayout, 'framerSyncLayout');
		component_subscribe($$self, framerSyncLayout, value => $$invalidate(3, $framerSyncLayout = value));

		$$self.$$.on_mount.push(function () {
			if (visualElement === undefined && !('visualElement' in $$props || $$self.$$.bound[$$self.$$.props['visualElement']])) {
				console.warn("<MeasureContextProvider> was created without expected prop 'visualElement'");
			}

			if (props === undefined && !('props' in $$props || $$self.$$.bound[$$self.$$.props['props']])) {
				console.warn("<MeasureContextProvider> was created without expected prop 'props'");
			}

			if (isCustom === undefined && !('isCustom' in $$props || $$self.$$.bound[$$self.$$.props['isCustom']])) {
				console.warn("<MeasureContextProvider> was created without expected prop 'isCustom'");
			}
		});

		const writable_props = ['visualElement', 'props', 'isCustom'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<MeasureContextProvider> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('visualElement' in $$props) $$invalidate(0, visualElement = $$props.visualElement);
			if ('props' in $$props) $$invalidate(6, props = $$props.props);
			if ('isCustom' in $$props) $$invalidate(7, isCustom = $$props.isCustom);
		};

		$$self.$capture_state = () => ({
			getContext,
			SharedLayoutContext,
			FramerTreeLayoutContext,
			Measure: Measure$1,
			visualElement,
			props,
			isCustom,
			syncLayout,
			framerSyncLayout,
			update,
			$syncLayout,
			$framerSyncLayout
		});

		$$self.$inject_state = $$props => {
			if ('visualElement' in $$props) $$invalidate(0, visualElement = $$props.visualElement);
			if ('props' in $$props) $$invalidate(6, props = $$props.props);
			if ('isCustom' in $$props) $$invalidate(7, isCustom = $$props.isCustom);
			if ('update' in $$props) $$invalidate(1, update = $$props.update);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*props*/ 64) {
				$$invalidate(1, { update } = props, update);
			}
		};

		return [
			visualElement,
			update,
			$syncLayout,
			$framerSyncLayout,
			syncLayout,
			framerSyncLayout,
			props,
			isCustom
		];
	}

	class MeasureContextProvider extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$G, create_fragment$G, safe_not_equal, { visualElement: 0, props: 6, isCustom: 7 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "MeasureContextProvider",
				options,
				id: create_fragment$G.name
			});
		}

		get visualElement() {
			throw new Error("<MeasureContextProvider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set visualElement(value) {
			throw new Error("<MeasureContextProvider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get props() {
			throw new Error("<MeasureContextProvider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set props(value) {
			throw new Error("<MeasureContextProvider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get isCustom() {
			throw new Error("<MeasureContextProvider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set isCustom(value) {
			throw new Error("<MeasureContextProvider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var MeasureContextProvider$1 = MeasureContextProvider;

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/


	var layoutAnimations = {
	    measureLayout: MeasureContextProvider$1,
	    layoutAnimation: AnimateLayoutContextProvider$1
	};

	/* node_modules/svelte-motion/src/motion/features/AnimationState.svelte generated by Svelte v4.2.10 */

	function create_fragment$F(ctx) {
		const block = {
			c: noop$3,
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: noop$3,
			p: noop$3,
			i: noop$3,
			o: noop$3,
			d: noop$3
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$F.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$F($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('AnimationState', slots, []);
		let { visualElement, props } = $$props;
		let { animate } = props;

		$$self.$$.on_mount.push(function () {
			if (visualElement === undefined && !('visualElement' in $$props || $$self.$$.bound[$$self.$$.props['visualElement']])) {
				console.warn("<AnimationState> was created without expected prop 'visualElement'");
			}

			if (props === undefined && !('props' in $$props || $$self.$$.bound[$$self.$$.props['props']])) {
				console.warn("<AnimationState> was created without expected prop 'props'");
			}
		});

		const writable_props = ['visualElement', 'props'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AnimationState> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('visualElement' in $$props) $$invalidate(0, visualElement = $$props.visualElement);
			if ('props' in $$props) $$invalidate(1, props = $$props.props);
		};

		$$self.$capture_state = () => ({
			tick,
			createAnimationState,
			isAnimationControls,
			visualElement,
			props,
			animate
		});

		$$self.$inject_state = $$props => {
			if ('visualElement' in $$props) $$invalidate(0, visualElement = $$props.visualElement);
			if ('props' in $$props) $$invalidate(1, props = $$props.props);
			if ('animate' in $$props) $$invalidate(2, animate = $$props.animate);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*props*/ 2) {
				$$invalidate(2, { animate } = props, animate);
			}

			if ($$self.$$.dirty & /*visualElement*/ 1) {
				/**
	 * We dynamically generate the AnimationState manager as it contains a reference
	 * to the underlying animation library. We only want to load that if we load this,
	 * so people can optionally code split it out using the `m` component.
	 */
				{
					$$invalidate(0, visualElement.animationState = visualElement.animationState || createAnimationState(visualElement), visualElement);
				}
			}

			if ($$self.$$.dirty & /*animate, visualElement*/ 5) {
				/**
	 * Subscribe any provided AnimationControls to the component's VisualElement
	 */
				if (isAnimationControls(animate)) {
					tick().then(() => animate.subscribe(visualElement)); /*, [animate]*/
				}
			}
		};

		return [visualElement, props, animate];
	}

	class AnimationState extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$F, create_fragment$F, safe_not_equal, { visualElement: 0, props: 1 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "AnimationState",
				options,
				id: create_fragment$F.name
			});
		}

		get visualElement() {
			throw new Error("<AnimationState>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set visualElement(value) {
			throw new Error("<AnimationState>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get props() {
			throw new Error("<AnimationState>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set props(value) {
			throw new Error("<AnimationState>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var AnimationState$1 = AnimationState;

	/* node_modules/svelte-motion/src/motion/features/Exit.svelte generated by Svelte v4.2.10 */

	function create_fragment$E(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[7].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[6],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$E.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$E($$self, $$props, $$invalidate) {
		let custom;
		let $presence;
		let $presenceContext;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Exit', slots, ['default']);
		let { props, visualElement, isCustom } = $$props;
		const presenceContext = getContext(PresenceContext) || PresenceContext(isCustom);
		validate_store(presenceContext, 'presenceContext');
		component_subscribe($$self, presenceContext, value => $$invalidate(9, $presenceContext = value));
		const presence = usePresence(isCustom);
		validate_store(presence, 'presence');
		component_subscribe($$self, presence, value => $$invalidate(5, $presence = value));

		const effect = pres => {
			const [isPresent, onExitComplete] = pres;

			const animation = visualElement.animationState?.setActive(AnimationType.Exit, !isPresent, {
				custom: $presenceContext?.custom ?? custom
			});

			!isPresent && animation?.then(onExitComplete);
			return "";
		};

		$$self.$$.on_mount.push(function () {
			if (props === undefined && !('props' in $$props || $$self.$$.bound[$$self.$$.props['props']])) {
				console.warn("<Exit> was created without expected prop 'props'");
			}

			if (visualElement === undefined && !('visualElement' in $$props || $$self.$$.bound[$$self.$$.props['visualElement']])) {
				console.warn("<Exit> was created without expected prop 'visualElement'");
			}

			if (isCustom === undefined && !('isCustom' in $$props || $$self.$$.bound[$$self.$$.props['isCustom']])) {
				console.warn("<Exit> was created without expected prop 'isCustom'");
			}
		});

		const writable_props = ['props', 'visualElement', 'isCustom'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Exit> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('props' in $$props) $$invalidate(2, props = $$props.props);
			if ('visualElement' in $$props) $$invalidate(3, visualElement = $$props.visualElement);
			if ('isCustom' in $$props) $$invalidate(4, isCustom = $$props.isCustom);
			if ('$$scope' in $$props) $$invalidate(6, $$scope = $$props.$$scope);
		};

		$$self.$capture_state = () => ({
			usePresence,
			getContext,
			PresenceContext,
			AnimationType,
			props,
			visualElement,
			isCustom,
			presenceContext,
			presence,
			effect,
			custom,
			$presence,
			$presenceContext
		});

		$$self.$inject_state = $$props => {
			if ('props' in $$props) $$invalidate(2, props = $$props.props);
			if ('visualElement' in $$props) $$invalidate(3, visualElement = $$props.visualElement);
			if ('isCustom' in $$props) $$invalidate(4, isCustom = $$props.isCustom);
			if ('custom' in $$props) custom = $$props.custom;
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*props*/ 4) {
				({ custom } = props);
			}

			if ($$self.$$.dirty & /*$presence*/ 32) {
				effect($presence);
			}
		};

		return [
			presenceContext,
			presence,
			props,
			visualElement,
			isCustom,
			$presence,
			$$scope,
			slots
		];
	}

	class Exit extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$E, create_fragment$E, safe_not_equal, { props: 2, visualElement: 3, isCustom: 4 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Exit",
				options,
				id: create_fragment$E.name
			});
		}

		get props() {
			throw new Error("<Exit>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set props(value) {
			throw new Error("<Exit>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get visualElement() {
			throw new Error("<Exit>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set visualElement(value) {
			throw new Error("<Exit>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get isCustom() {
			throw new Error("<Exit>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set isCustom(value) {
			throw new Error("<Exit>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var Exit$1 = Exit;

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	/**
	 * @public
	 */
	const animations = {
	    animation: AnimationState$1,
	    exit:Exit$1
	};

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	const featureBundle = {
	    ...animations,
	    ...gestureAnimations,
	    ...drag,
	    ...layoutAnimations,
	};

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/
	//import { createMotionProxy } from './motion-proxy.js';



	/**
	 * HTML & SVG components, optimised for use with gestures and animation. These can be used as
	 * drop-in replacements for any HTML & SVG component, all CSS & SVG properties are supported.
	 *
	 * @public
	 */
	var motion = /*@__PURE__*/ //createMotionProxy(allMotionFeatures);
	    createMotionClass(featureBundle);

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/

	const useCombineMotionValues = (values, combineValues) => {

	  let subscriptions = [];
	  let vals = values;

	  
	  const unsubscribe = ()=>{
	    subscriptions.forEach((unsubscribe) => unsubscribe());
	  };
	  const subscribe = () => {
	    subscriptions = vals.map((val) => val.onChange(handler));
	    updateValue();
	  };
	  const value = motionValue(combineValues(), () => {
	    unsubscribe();
	    subscribe();
	    return unsubscribe;
	  });

	  let updateValue = () => {
	    value.set(combineValues());
	  };

	  const handler = () => {
	    sync.update(updateValue, false, true);
	  };

	  value.reset = (_values, _combineValues) => {
	    vals=_values;
	    //cleanup and reset
	    unsubscribe();
	    updateValue = () => {
	      value.set(_combineValues());
	    };
	    subscribe();
	  };

	  return value;
	};
	//export { default as UseCombineMotionValues } from "./UseCombineValues.svelte";

	/**
	 * Combine multiple motion values into a new one using a string template literal.
	 *
	 * ```jsx
	 * import {
	 *   motion,
	 *   useSpring,
	 *   useMotionValue,
	 *   useMotionTemplate
	 * } from "framer-motion"
	 *
	 * function Component() {
	 *   const shadowX = useSpring(0)
	 *   const shadowY = useMotionValue(0)
	 *   const shadow = useMotionTemplate`drop-shadow(${shadowX}px ${shadowY}px 20px rgba(0,0,0,0.3))`
	 *
	 *   return <MotionDiv style={{ filter: shadow }} />
	 * }
	 * ```
	 *
	 * @public
	 */

	const useMotionTemplate = (fragments, ...values) => {
	    /**
	    * Create a function that will build a string from the latest motion values.
	    */
	    let numFragments = fragments.length;
	    const buildValue = () => {
	        let output = ``;

	        for (let i = 0; i < numFragments; i++) {
	            output += fragments[i];
	            const value = values[i];
	            if (value) output += values[i].get();
	        }

	        return output
	    };
	    const value = useCombineMotionValues(values, buildValue);
	    value.resetInner = value.reset;

	    value.reset = (f, ...vs) => {
	        numFragments = f.length;
	        value.resetInner(vs,buildValue);
	    };

	    return value;
	};

	/** 
	based on framer-motion@4.0.3,
	Copyright (c) 2018 Framer B.V.
	*/


	/**
	 * Creates `AnimationControls`, which can be used to manually start, stop
	 * and sequence animations on one or more components.
	 *
	 * The returned `AnimationControls` should be passed to the `animate` property
	 * of the components you want to animate.
	 *
	 * These components can then be animated with the `start` method.
	 *
	 * @library
	 *
	 * ```jsx
	 * import * as React from 'react'
	 * import { Frame, useAnimation } from 'framer'
	 *
	 * export function MyComponent(props) {
	 *    const controls = useAnimation()
	 *
	 *    controls.start({
	 *        x: 100,
	 *        transition: { duration: 0.5 },
	 *    })
	 *
	 *    return <Frame animate={controls} />
	 * }
	 * ```
	 *
	 * @motion
	 *
	 * ```jsx
	 * import * as React from 'react'
	 * import { motion, useAnimation } from 'framer-motion'
	 *
	 * export function MyComponent(props) {
	 *    const controls = useAnimation()
	 *
	 *    controls.start({
	 *        x: 100,
	 *        transition: { duration: 0.5 },
	 *    })
	 *
	 *    return <MotionDiv animate={controls} />
	 * }
	 * ```
	 *
	 * @returns Animation controller with `start` and `stop` methods
	 *
	 * @public
	 */
	const useAnimation = () =>{

	    const controls =  animationControls(()=>{

	        const cleanup = {};
	        tick().then(v => cleanup.clean = controls.mount());
	        return ()=>{
	            cleanup.clean?.();
	        }
	    });

	    return controls;
	};

	/* src/lib/components/toolbar/ToolbarAnimation.svelte generated by Svelte v4.2.10 */

	const file$t = "src/lib/components/toolbar/ToolbarAnimation.svelte";

	// (18:0) <Motion   animate={controls}   drag   dragConstraints={{ left: 0, right: 0, top: 0, bottom: 0 }}   style={{ x, y, rotate, filter: shadow }}   whileHover={{ scale: 1.05 }}   whileTap={{ scale: 1 }}   let:motion >
	function create_default_slot$e(ctx) {
		let div;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[5].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

		const block = {
			c: function create() {
				div = element("div");
				if (default_slot) default_slot.c();
				attr_dev(div, "class", "relative bottom-3");
				add_location(div, file$t, 34, 2, 783);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				current = true;

				if (!mounted) {
					dispose = action_destroyer(/*motion*/ ctx[7].call(null, div));
					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[6],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (default_slot) default_slot.d(detaching);
				mounted = false;
				dispose();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$e.name,
			type: "slot",
			source: "(18:0) <Motion   animate={controls}   drag   dragConstraints={{ left: 0, right: 0, top: 0, bottom: 0 }}   style={{ x, y, rotate, filter: shadow }}   whileHover={{ scale: 1.05 }}   whileTap={{ scale: 1 }}   let:motion >",
			ctx
		});

		return block;
	}

	function create_fragment$D(ctx) {
		let motion_1;
		let current;

		motion_1 = new motion({
				props: {
					animate: /*controls*/ ctx[4],
					drag: true,
					dragConstraints: { left: 0, right: 0, top: 0, bottom: 0 },
					style: {
						x: /*x*/ ctx[0],
						y: /*y*/ ctx[1],
						rotate: /*rotate*/ ctx[2],
						filter: /*shadow*/ ctx[3]
					},
					whileHover: { scale: 1.05 },
					whileTap: { scale: 1 },
					$$slots: {
						default: [
							create_default_slot$e,
							({ motion }) => ({ 7: motion }),
							({ motion }) => motion ? 128 : 0
						]
					},
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(motion_1.$$.fragment);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(motion_1, target, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const motion_1_changes = {};

				if (dirty & /*$$scope*/ 64) {
					motion_1_changes.$$scope = { dirty, ctx };
				}

				motion_1.$set(motion_1_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(motion_1.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(motion_1.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(motion_1, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$D.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$D($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('ToolbarAnimation', slots, ['default']);
		const x = motionValue(0);
		const y = motionValue(100);
		const rotate = motionValue(0);
		const shadow = useMotionTemplate`drop-shadow(${x}px ${y}px 20px rgba(0,0,0,0.05))`;
		const controls = useAnimation();

		onMount(() => {
			controls.start({
				x: 0,
				y: 0,
				rotate: 0,
				transition: { duration: 1, type: "spring" }, // Customize the duration, type of the animation, etc.
				
			});
		});

		const writable_props = [];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ToolbarAnimation> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('$$scope' in $$props) $$invalidate(6, $$scope = $$props.$$scope);
		};

		$$self.$capture_state = () => ({
			onMount,
			Motion: motion,
			useAnimation,
			useMotionTemplate,
			useMotionValue: motionValue,
			x,
			y,
			rotate,
			shadow,
			controls
		});

		return [x, y, rotate, shadow, controls, slots, $$scope];
	}

	class ToolbarAnimation extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$D, create_fragment$D, safe_not_equal, {});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "ToolbarAnimation",
				options,
				id: create_fragment$D.name
			});
		}
	}

	let editorPanelVisible = writable(false);
	let layersPanelVisible = writable(false);

	const ONLOOK_TOOLBAR = "onlook-toolbar";
	const DATA_ONLOOK_IGNORE = "data-onlook-ignore";
	const DATA_ONLOOK_SELECTOR = "data-onlook-selector";
	const ONLOOK_RECT_ID = "onlook-rect";

	class RectImpl {
	    constructor() {
	        this.element = document.createElement('div');
	        this.svgNamespace = 'http://www.w3.org/2000/svg';
	        this.svgElement = document.createElementNS(this.svgNamespace, 'svg');
	        this.rectElement = document.createElementNS(this.svgNamespace, 'rect');
	        this.rectElement.setAttribute('fill', 'none');
	        this.rectElement.setAttribute('stroke', '#FF0E48');
	        this.rectElement.setAttribute('stroke-width', '2');
	        this.rectElement.setAttribute('stroke-linecap', 'round');
	        this.rectElement.setAttribute('stroke-linejoin', 'round');
	        this.svgElement.appendChild(this.rectElement);
	        this.element.style.position = 'absolute';
	        this.element.style.pointerEvents = 'none'; // Ensure it doesn't interfere with other interactions
	        this.element.style.zIndex = '999';
	        this.element.setAttribute(DATA_ONLOOK_IGNORE, 'true');
	        this.element.setAttribute('id', ONLOOK_RECT_ID);
	        this.element.appendChild(this.svgElement);
	    }
	    render({ width, height, top, left }) {
	        this.svgElement.setAttribute('width', width);
	        this.svgElement.setAttribute('height', height);
	        this.svgElement.setAttribute('viewBox', `0 0 ${width} ${height}`);
	        this.rectElement.setAttribute('width', width);
	        this.rectElement.setAttribute('height', height);
	        this.element.style.top = `${top + window.scrollY}px`;
	        this.element.style.left = `${left + window.scrollX}px`;
	    }
	}
	class HoverRect extends RectImpl {
	    constructor() {
	        super();
	        this.rectElement.setAttribute('stroke-width', '2');
	    }
	    render({ width, height, top, left }) {
	        super.render({ width, height, top, left });
	    }
	}
	class ClickRect extends RectImpl {
	    constructor() {
	        super();
	        this.rectElement.setAttribute('stroke-width', '4');
	    }
	    render({ width, height, top, left }) {
	        super.render({ width, height, top, left });
	    }
	}
	class ParentRect extends RectImpl {
	    constructor() {
	        super();
	        this.rectElement.setAttribute('stroke-width', '2');
	        this.rectElement.setAttribute('stroke-dasharray', '5');
	    }
	    render({ width, height, top, left }) {
	        super.render({ width, height, top, left });
	    }
	}
	class OverlayManager {
	    constructor() {
	        this.clear = () => {
	            this.removeParentRect();
	            this.removeHoverRect();
	            this.removeClickedRects();
	        };
	        this.addClickRect = (el) => {
	            const clickRect = new ClickRect();
	            this.clickedRects.push(clickRect);
	            const rect = el.getBoundingClientRect();
	            clickRect.render(rect);
	            document.body.appendChild(clickRect.element);
	        };
	        this.updateParentRect = (el) => {
	            const rect = el.getBoundingClientRect();
	            this.parentRect.render(rect);
	        };
	        this.updateHoverRect = (el) => {
	            if (el && this.hoverRect) {
	                const rect = el.getBoundingClientRect();
	                this.hoverRect.render(rect);
	            }
	        };
	        this.removeParentRect = () => {
	            this.parentRect.render({ width: 0, height: 0, top: 0, left: 0 });
	        };
	        this.removeHoverRect = () => {
	            this.hoverRect.render({ width: 0, height: 0, top: 0, left: 0 });
	        };
	        this.removeClickedRects = () => {
	            this.clickedRects.forEach(clickRect => {
	                clickRect.element.remove();
	            });
	            this.clickedRects = [];
	        };
	        this.hoverRect = new HoverRect();
	        this.clickedRects = [];
	        this.parentRect = new ParentRect();
	        document.body.appendChild(this.hoverRect.element);
	        document.body.appendChild(this.parentRect.element);
	    }
	}

	// License: MIT
	// Author: Anton Medvedev <anton@medv.io>
	// Source: https://github.com/antonmedv/finder
	let config$2;
	let rootDocument;
	function finder(input, options) {
	    if (input.nodeType !== Node.ELEMENT_NODE) {
	        throw new Error(`Can't generate CSS selector for non-element node type.`);
	    }
	    if ('html' === input.tagName.toLowerCase()) {
	        return 'html';
	    }
	    const defaults = {
	        root: document.body,
	        idName: (name) => true,
	        className: (name) => true,
	        tagName: (name) => true,
	        attr: (name, value) => false,
	        seedMinLength: 1,
	        optimizedMinLength: 2,
	        threshold: 1000,
	        maxNumberOfTries: 10000,
	    };
	    config$2 = Object.assign(Object.assign({}, defaults), options);
	    rootDocument = findRootDocument(config$2.root, defaults);
	    let path = bottomUpSearch(input, 'all', () => bottomUpSearch(input, 'two', () => bottomUpSearch(input, 'one', () => bottomUpSearch(input, 'none'))));
	    if (path) {
	        const optimized = sort(optimize(path, input));
	        if (optimized.length > 0) {
	            path = optimized[0];
	        }
	        return selector$3(path);
	    }
	    else {
	        throw new Error(`Selector was not found.`);
	    }
	}
	function findRootDocument(rootNode, defaults) {
	    if (rootNode.nodeType === Node.DOCUMENT_NODE) {
	        return rootNode;
	    }
	    if (rootNode === defaults.root) {
	        return rootNode.ownerDocument;
	    }
	    return rootNode;
	}
	function bottomUpSearch(input, limit, fallback) {
	    let path = null;
	    let stack = [];
	    let current = input;
	    let i = 0;
	    while (current) {
	        let level = maybe(id(current)) ||
	            maybe(...attr(current)) ||
	            maybe(...classNames(current)) ||
	            maybe(tagName(current)) || [any()];
	        const nth = index(current);
	        if (limit == 'all') {
	            if (nth) {
	                level = level.concat(level.filter(dispensableNth).map((node) => nthChild(node, nth)));
	            }
	        }
	        else if (limit == 'two') {
	            level = level.slice(0, 1);
	            if (nth) {
	                level = level.concat(level.filter(dispensableNth).map((node) => nthChild(node, nth)));
	            }
	        }
	        else if (limit == 'one') {
	            const [node] = (level = level.slice(0, 1));
	            if (nth && dispensableNth(node)) {
	                level = [nthChild(node, nth)];
	            }
	        }
	        else if (limit == 'none') {
	            level = [any()];
	            if (nth) {
	                level = [nthChild(level[0], nth)];
	            }
	        }
	        for (let node of level) {
	            node.level = i;
	        }
	        stack.push(level);
	        if (stack.length >= config$2.seedMinLength) {
	            path = findUniquePath(stack, fallback);
	            if (path) {
	                break;
	            }
	        }
	        current = current.parentElement;
	        i++;
	    }
	    if (!path) {
	        path = findUniquePath(stack, fallback);
	    }
	    if (!path && fallback) {
	        return fallback();
	    }
	    return path;
	}
	function findUniquePath(stack, fallback) {
	    const paths = sort(combinations(stack));
	    if (paths.length > config$2.threshold) {
	        return fallback ? fallback() : null;
	    }
	    for (let candidate of paths) {
	        if (unique(candidate)) {
	            return candidate;
	        }
	    }
	    return null;
	}
	function selector$3(path) {
	    let node = path[0];
	    let query = node.name;
	    for (let i = 1; i < path.length; i++) {
	        const level = path[i].level || 0;
	        if (node.level === level - 1) {
	            query = `${path[i].name} > ${query}`;
	        }
	        else {
	            query = `${path[i].name} ${query}`;
	        }
	        node = path[i];
	    }
	    return query;
	}
	function penalty(path) {
	    return path.map((node) => node.penalty).reduce((acc, i) => acc + i, 0);
	}
	function unique(path) {
	    const css = selector$3(path);
	    switch (rootDocument.querySelectorAll(css).length) {
	        case 0:
	            throw new Error(`Can't select any node with this selector: ${css}`);
	        case 1:
	            return true;
	        default:
	            return false;
	    }
	}
	function id(input) {
	    const elementId = input.getAttribute('id');
	    if (elementId && config$2.idName(elementId)) {
	        return {
	            name: '#' + CSS.escape(elementId),
	            penalty: 0,
	        };
	    }
	    return null;
	}
	function attr(input) {
	    const attrs = Array.from(input.attributes).filter((attr) => config$2.attr(attr.name, attr.value));
	    return attrs.map((attr) => ({
	        name: `[${CSS.escape(attr.name)}="${CSS.escape(attr.value)}"]`,
	        penalty: 0.5,
	    }));
	}
	function classNames(input) {
	    const names = Array.from(input.classList).filter(config$2.className);
	    return names.map((name) => ({
	        name: '.' + CSS.escape(name),
	        penalty: 1,
	    }));
	}
	function tagName(input) {
	    const name = input.tagName.toLowerCase();
	    if (config$2.tagName(name)) {
	        return {
	            name,
	            penalty: 2,
	        };
	    }
	    return null;
	}
	function any() {
	    return {
	        name: '*',
	        penalty: 3,
	    };
	}
	function index(input) {
	    const parent = input.parentNode;
	    if (!parent) {
	        return null;
	    }
	    let child = parent.firstChild;
	    if (!child) {
	        return null;
	    }
	    let i = 0;
	    while (child) {
	        if (child.nodeType === Node.ELEMENT_NODE) {
	            i++;
	        }
	        if (child === input) {
	            break;
	        }
	        child = child.nextSibling;
	    }
	    return i;
	}
	function nthChild(node, i) {
	    return {
	        name: node.name + `:nth-child(${i})`,
	        penalty: node.penalty + 1,
	    };
	}
	function dispensableNth(node) {
	    return node.name !== 'html' && !node.name.startsWith('#');
	}
	function maybe(...level) {
	    const list = level.filter(notEmpty);
	    if (list.length > 0) {
	        return list;
	    }
	    return null;
	}
	function notEmpty(value) {
	    return value !== null && value !== undefined;
	}
	function* combinations(stack, path = []) {
	    if (stack.length > 0) {
	        for (let node of stack[0]) {
	            yield* combinations(stack.slice(1, stack.length), path.concat(node));
	        }
	    }
	    else {
	        yield path;
	    }
	}
	function sort(paths) {
	    return [...paths].sort((a, b) => penalty(a) - penalty(b));
	}
	function* optimize(path, input, scope = {
	    counter: 0,
	    visited: new Map(),
	}) {
	    if (path.length > 2 && path.length > config$2.optimizedMinLength) {
	        for (let i = 1; i < path.length - 1; i++) {
	            if (scope.counter > config$2.maxNumberOfTries) {
	                return; // Okay At least I tried!
	            }
	            scope.counter += 1;
	            const newPath = [...path];
	            newPath.splice(i, 1);
	            const newPathKey = selector$3(newPath);
	            if (scope.visited.has(newPathKey)) {
	                return;
	            }
	            if (unique(newPath) && same(newPath, input)) {
	                yield newPath;
	                scope.visited.set(newPathKey, true);
	                yield* optimize(newPath, input, scope);
	            }
	        }
	    }
	}
	function same(path, input) {
	    return rootDocument.querySelector(selector$3(path)) === input;
	}

	const deepElementFromPoint = (x, y) => {
	    const el = document.elementFromPoint(x, y);
	    const crawlShadows = node => {
	        if (node === null || node === void 0 ? void 0 : node.shadowRoot) {
	            const potential = node.shadowRoot.elementFromPoint(x, y);
	            if (potential == node)
	                return node;
	            else if (potential.shadowRoot)
	                return crawlShadows(potential);
	            else
	                return potential;
	        }
	        else
	            return node;
	    };
	    const nested_shadow = crawlShadows(el);
	    return nested_shadow || el;
	};
	const isOffBounds = node => (node === null || node === void 0 ? void 0 : node.closest) && (node.closest('onlook-toolbar') || node.closest('#onlook-toolbar'));
	const findCommonParent = (...nodes) => {
	    // Early exit if there's only one node or no nodes
	    if (nodes.length === 0)
	        return document.body;
	    if (nodes.length === 1)
	        return nodes[0].parentNode || document.body;
	    // Function to calculate the depth of a node in the DOM tree
	    function getNodeDepth(node) {
	        let depth = 0;
	        while (node.parentNode) {
	            node = node.parentNode;
	            depth++;
	        }
	        return depth;
	    }
	    // Get depths of all nodes
	    const depths = nodes.map(node => getNodeDepth(node));
	    // Align all nodes at the same depth
	    nodes.forEach((node, i) => {
	        while (depths[i] > Math.min(...depths)) {
	            node = node.parentNode;
	            depths[i]--;
	        }
	        nodes[i] = node; // Update the node in the array to its ancestor at the aligned depth
	    });
	    // Walk up the tree simultaneously until a common parent is found
	    let commonParent = nodes[0];
	    while (!nodes.every(node => node === commonParent)) {
	        commonParent = commonParent.parentNode;
	        for (let i = 0; i < nodes.length; i++) {
	            if (nodes[i] !== commonParent) {
	                nodes[i] = nodes[i].parentNode;
	            }
	        }
	    }
	    return commonParent;
	};
	const getUniqueSelector = (el) => {
	    let selector = el.tagName.toLowerCase();
	    try {
	        if (el.nodeType !== Node.ELEMENT_NODE) {
	            return selector;
	        }
	        selector = finder(el, { className: () => false });
	    }
	    catch (e) {
	        console.error("Error creating selector ", e);
	    }
	    return selector;
	};

	class SelectorEngine {
	    constructor() {
	        this.page = document.body;
	        this.selectedStore = writable([]);
	        this.hoveredStore = writable(undefined);
	        this.handleMouseOver = (e) => {
	            const target = deepElementFromPoint(e.clientX, e.clientY);
	            if (isOffBounds(target))
	                return;
	            this.hoveredStore.set(target);
	        };
	        this.handleMouseOut = (e) => {
	            this.hoveredStore.set(undefined);
	        };
	        this.handleClick = (e) => {
	            const target = deepElementFromPoint(e.clientX, e.clientY);
	            if (isOffBounds(target))
	                return;
	            e.preventDefault();
	            e.stopPropagation();
	            if (!e.shiftKey) {
	                this.selectedStore.set([target]);
	            }
	            else {
	                if (get_store_value(this.selectedStore).includes(target)) {
	                    this.unselect(target);
	                }
	                else {
	                    this.select(target);
	                }
	            }
	        };
	    }
	    get selected() {
	        return get_store_value(this.selectedStore);
	    }
	    get hovered() {
	        return get_store_value(this.hoveredStore);
	    }
	    select(item) {
	        this.selectedStore.update((s) => [...s, item]);
	    }
	    unselect(item) {
	        this.selectedStore.update((s) => s.filter((i) => i !== item));
	    }
	    clear() {
	        this.selectedStore.set([]);
	    }
	}

	class EditTool {
	    constructor() {
	        this.simulateHover = (el) => {
	            if (el) {
	                this.selectorEngine.hoveredStore.set(el);
	                this.overlayManager.updateHoverRect(el);
	            }
	        };
	        this.simulateOut = () => {
	            const el = this.selectorEngine.hovered;
	            if (el) {
	                this.selectorEngine.hoveredStore.set(undefined);
	                this.overlayManager.removeHoverRect();
	            }
	        };
	        this.selectorEngine = new SelectorEngine();
	        this.overlayManager = new OverlayManager();
	        // Initialize ResizeObserver with a callback
	        this.elResizeObserver = new ResizeObserver(entries => {
	            const observedElements = entries.map(entry => entry.target);
	            this.onElementResize(observedElements);
	        });
	    }
	    onInit() {
	    }
	    onDestroy() {
	        editorPanelVisible.set(false);
	        this.overlayManager.clear();
	        this.selectorEngine.clear();
	        this.elResizeObserver.disconnect();
	    }
	    onMouseOver(e) {
	        this.selectorEngine.handleMouseOver(e);
	        this.overlayManager.updateHoverRect((this.selectorEngine.hovered));
	    }
	    onMouseOut(e) {
	        this.selectorEngine.handleMouseOut(e);
	        this.overlayManager.removeHoverRect();
	    }
	    onClick(e) {
	        editorPanelVisible.set(true);
	        this.selectorEngine.handleClick(e);
	        this.overlayManager.removeHoverRect();
	        this.overlayManager.removeClickedRects();
	        this.elResizeObserver.disconnect();
	        this.selectorEngine.selected.forEach((el) => {
	            this.overlayManager.addClickRect(el);
	            this.elResizeObserver.observe(el);
	        });
	    }
	    onScreenResize(e) {
	        this.updateClickedRects(this.selectorEngine.selected);
	    }
	    onElementResize(els) {
	        this.updateClickedRects(els);
	    }
	    updateClickedRects(els) {
	        this.overlayManager.removeClickedRects();
	        els.forEach((el) => {
	            this.overlayManager.addClickRect(el);
	        });
	        this.updateParentRect();
	    }
	    updateParentRect() {
	        if (this.selectorEngine.selected.length > 0) {
	            const parent = findCommonParent(...this.selectorEngine.selected);
	            this.overlayManager.updateParentRect(parent);
	        }
	        else {
	            this.overlayManager.removeParentRect();
	        }
	    }
	    simulateClick(el) {
	        if (el) {
	            this.selectorEngine.selectedStore.set([el]);
	            this.overlayManager.removeClickedRects();
	            this.overlayManager.addClickRect(el);
	            this.scrollElementIntoView(el);
	        }
	    }
	    scrollElementIntoView(el) {
	        const rect = el.getBoundingClientRect();
	        const isVisible = (rect.top >= 0 &&
	            rect.left >= 0 &&
	            rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
	            rect.right <= (window.innerWidth || document.documentElement.clientWidth));
	        if (!isVisible) {
	            // Calculate the position to scroll to with 1/3vh padding
	            const viewportPadding = window.innerHeight / 3;
	            const topPositionToScroll = rect.top + window.scrollY - viewportPadding;
	            window.scrollTo({
	                top: topPositionToScroll,
	                behavior: "smooth"
	            });
	        }
	    }
	}

	/**! 
=======
!function(){"use strict";function e(){}const t=e=>e;function n(e,t){for(const n in t)e[n]=t[n];return e}function r(e){return e()}function o(){return Object.create(null)}function i(e){e.forEach(r)}function a(e){return"function"==typeof e}function s(e,t){return e!=e?t==t:e!==t||e&&"object"==typeof e||"function"==typeof e}function l(t,...n){if(null==t){for(const e of n)e(void 0);return e}const r=t.subscribe(...n);return r.unsubscribe?()=>r.unsubscribe():r}function c(e){let t;return l(e,(e=>t=e))(),t}function u(e,t,n){e.$$.on_destroy.push(l(t,n))}function d(e,t,n,r){if(e){const o=p(e,t,n,r);return e[0](o)}}function p(e,t,r,o){return e[1]&&o?n(r.ctx.slice(),e[1](o(t))):r.ctx}function f(e,t,n,r){if(e[2]&&r){const o=e[2](r(n));if(void 0===t.dirty)return o;if("object"==typeof o){const e=[],n=Math.max(t.dirty.length,o.length);for(let r=0;r<n;r+=1)e[r]=t.dirty[r]|o[r];return e}return t.dirty|o}return t.dirty}function m(e,t,n,r,o,i){if(o){const a=p(t,n,r,i);e.p(a,o)}}function h(e){if(e.ctx.length>32){const t=[],n=e.ctx.length/32;for(let e=0;e<n;e++)t[e]=-1;return t}return-1}function g(e){const t={};for(const n in e)"$"!==n[0]&&(t[n]=e[n]);return t}function v(e,t){const n={};t=new Set(t);for(const r in e)t.has(r)||"$"===r[0]||(n[r]=e[r]);return n}function y(t){return t&&a(t.destroy)?t.destroy:e}const b="undefined"!=typeof window;let $=b?()=>window.performance.now():()=>Date.now(),x=b?e=>requestAnimationFrame(e):e;const w=new Set;function S(e){w.forEach((t=>{t.c(e)||(w.delete(t),t.f())})),0!==w.size&&x(S)}function C(e){let t;return 0===w.size&&x(S),{promise:new Promise((n=>{w.add(t={c:e,f:n})})),abort(){w.delete(t)}}}function E(e,t){e.appendChild(t)}function k(e){if(!e)return document;const t=e.getRootNode?e.getRootNode():e.ownerDocument;return t&&t.host?t:e.ownerDocument}function M(e){const t=P("style");return t.textContent="/* empty */",function(e,t){E(e.head||e,t),t.sheet}(k(e),t),t.sheet}function A(e,t,n){e.insertBefore(t,n||null)}function T(e){e.parentNode&&e.parentNode.removeChild(e)}function R(e,t){for(let n=0;n<e.length;n+=1)e[n]&&e[n].d(t)}function P(e){return document.createElement(e)}function L(e){return document.createElementNS("http://www.w3.org/2000/svg",e)}function O(e){return document.createTextNode(e)}function z(){return O(" ")}function N(){return O("")}function j(e,t,n,r){return e.addEventListener(t,n,r),()=>e.removeEventListener(t,n,r)}function V(e){return function(t){return t.preventDefault(),e.call(this,t)}}function D(e){return function(t){t.target===this&&e.call(this,t)}}function _(e,t,n){null==n?e.removeAttribute(t):e.getAttribute(t)!==n&&e.setAttribute(t,n)}const H=["width","height"];function F(e,t){const n=Object.getOwnPropertyDescriptors(e.__proto__);for(const r in t)null==t[r]?e.removeAttribute(r):"style"===r?e.style.cssText=t[r]:"__value"===r?e.value=e[r]=t[r]:n[r]&&n[r].set&&-1===H.indexOf(r)?e[r]=t[r]:_(e,r,t[r])}function B(e,t){for(const n in t)_(e,n,t[n])}function I(e,t){Object.keys(t).forEach((n=>{!function(e,t,n){const r=t.toLowerCase();r in e?e[r]="boolean"==typeof e[r]&&""===n||n:t in e?e[t]="boolean"==typeof e[t]&&""===n||n:_(e,t,n)}(e,n,t[n])}))}function W(e){return/-/.test(e)?I:F}function U(e,t){t=""+t,e.data!==t&&(e.data=t)}function G(e,t){e.value=null==t?"":t}function Z(e,t,n){for(let n=0;n<e.options.length;n+=1){const r=e.options[n];if(r.__value===t)return void(r.selected=!0)}n&&void 0===t||(e.selectedIndex=-1)}function Y(e,t,{bubbles:n=!1,cancelable:r=!1}={}){return new CustomEvent(e,{detail:t,bubbles:n,cancelable:r})}function q(e,t){return new e(t)}const X=new Map;let K,J=0;function Q(e,t,n,r,o,i,a,s=0){const l=16.666/r;let c="{\n";for(let e=0;e<=1;e+=l){const r=t+(n-t)*i(e);c+=100*e+`%{${a(r,1-r)}}\n`}const u=c+`100% {${a(n,1-n)}}\n}`,d=`__svelte_${function(e){let t=5381,n=e.length;for(;n--;)t=(t<<5)-t^e.charCodeAt(n);return t>>>0}(u)}_${s}`,p=k(e),{stylesheet:f,rules:m}=X.get(p)||function(e,t){const n={stylesheet:M(t),rules:{}};return X.set(e,n),n}(p,e);m[d]||(m[d]=!0,f.insertRule(`@keyframes ${d} ${u}`,f.cssRules.length));const h=e.style.animation||"";return e.style.animation=`${h?`${h}, `:""}${d} ${r}ms linear ${o}ms 1 both`,J+=1,d}function ee(e,t){const n=(e.style.animation||"").split(", "),r=n.filter(t?e=>e.indexOf(t)<0:e=>-1===e.indexOf("__svelte")),o=n.length-r.length;o&&(e.style.animation=r.join(", "),J-=o,J||x((()=>{J||(X.forEach((e=>{const{ownerNode:t}=e.stylesheet;t&&T(t)})),X.clear())})))}function te(e){K=e}function ne(){if(!K)throw new Error("Function called outside component initialization");return K}function re(e){ne().$$.on_mount.push(e)}function oe(e){ne().$$.after_update.push(e)}function ie(e){ne().$$.on_destroy.push(e)}function ae(e,t){return ne().$$.context.set(e,t),t}function se(e){return ne().$$.context.get(e)}function le(e,t){const n=e.$$.callbacks[t.type];n&&n.slice().forEach((e=>e.call(this,t)))}const ce=[],ue=[];let de=[];const pe=[],fe=Promise.resolve();let me=!1;function he(){me||(me=!0,fe.then(we))}function ge(){return he(),fe}function ve(e){de.push(e)}function ye(e){pe.push(e)}const be=new Set;let $e,xe=0;function we(){if(0!==xe)return;const e=K;do{try{for(;xe<ce.length;){const e=ce[xe];xe++,te(e),Se(e.$$)}}catch(e){throw ce.length=0,xe=0,e}for(te(null),ce.length=0,xe=0;ue.length;)ue.pop()();for(let e=0;e<de.length;e+=1){const t=de[e];be.has(t)||(be.add(t),t())}de.length=0}while(ce.length);for(;pe.length;)pe.pop()();me=!1,be.clear(),te(e)}function Se(e){if(null!==e.fragment){e.update(),i(e.before_update);const t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(ve)}}function Ce(){return $e||($e=Promise.resolve(),$e.then((()=>{$e=null}))),$e}function Ee(e,t,n){e.dispatchEvent(Y(`${t?"intro":"outro"}${n}`))}const ke=new Set;let Me;function Ae(){Me={r:0,c:[],p:Me}}function Te(){Me.r||i(Me.c),Me=Me.p}function Re(e,t){e&&e.i&&(ke.delete(e),e.i(t))}function Pe(e,t,n,r){if(e&&e.o){if(ke.has(e))return;ke.add(e),Me.c.push((()=>{ke.delete(e),r&&(n&&e.d(1),r())})),e.o(t)}else r&&r()}const Le={duration:0};function Oe(n,r,o){const i={direction:"in"};let s,l,c=r(n,o,i),u=!1,d=0;function p(){s&&ee(n,s)}function f(){const{delay:r=0,duration:o=300,easing:i=t,tick:a=e,css:f}=c||Le;f&&(s=Q(n,0,1,o,r,i,f,d++)),a(0,1);const m=$()+r,h=m+o;l&&l.abort(),u=!0,ve((()=>Ee(n,!0,"start"))),l=C((e=>{if(u){if(e>=h)return a(1,0),Ee(n,!0,"end"),p(),u=!1;if(e>=m){const t=i((e-m)/o);a(t,1-t)}}return u}))}let m=!1;return{start(){m||(m=!0,ee(n),a(c)?(c=c(i),Ce().then(f)):f())},invalidate(){m=!1},end(){u&&(p(),u=!1)}}}function ze(n,r,o){const s={direction:"out"};let l,c=r(n,o,s),u=!0;const d=Me;let p;function f(){const{delay:r=0,duration:o=300,easing:a=t,tick:s=e,css:f}=c||Le;f&&(l=Q(n,1,0,o,r,a,f));const m=$()+r,h=m+o;ve((()=>Ee(n,!1,"start"))),"inert"in n&&(p=n.inert,n.inert=!0),C((e=>{if(u){if(e>=h)return s(0,1),Ee(n,!1,"end"),--d.r||i(d.c),!1;if(e>=m){const t=a((e-m)/o);s(1-t,t)}}return u}))}return d.r+=1,a(c)?Ce().then((()=>{c=c(s),f()})):f(),{end(e){e&&"inert"in n&&(n.inert=p),e&&c.tick&&c.tick(1,0),u&&(l&&ee(n,l),u=!1)}}}function Ne(n,r,o,s){let l,c=r(n,o,{direction:"both"}),u=s?0:1,d=null,p=null,f=null;function m(){f&&ee(n,f)}function h(e,t){const n=e.b-u;return t*=Math.abs(n),{a:u,b:e.b,d:n,duration:t,start:e.start,end:e.start+t,group:e.group}}function g(r){const{delay:o=0,duration:a=300,easing:s=t,tick:g=e,css:v}=c||Le,y={start:$()+o,b:r};r||(y.group=Me,Me.r+=1),"inert"in n&&(r?void 0!==l&&(n.inert=l):(l=n.inert,n.inert=!0)),d||p?p=y:(v&&(m(),f=Q(n,u,r,a,o,s,v)),r&&g(0,1),d=h(y,a),ve((()=>Ee(n,r,"start"))),C((e=>{if(p&&e>p.start&&(d=h(p,a),p=null,Ee(n,d.b,"start"),v&&(m(),f=Q(n,u,d.b,d.duration,0,s,c.css))),d)if(e>=d.end)g(u=d.b,1-u),Ee(n,d.b,"end"),p||(d.b?m():--d.group.r||i(d.group.c)),d=null;else if(e>=d.start){const t=e-d.start;u=d.a+d.d*s(t/d.duration),g(u,1-u)}return!(!d&&!p)})))}return{run(e){a(c)?Ce().then((()=>{c=c({direction:e?"in":"out"}),g(e)})):g(e)},end(){m(),d=p=null}}}function je(e){return void 0!==e?.length?e:Array.from(e)}function Ve(e,t){Pe(e,1,1,(()=>{t.delete(e.key)}))}function De(e,t){const n={},r={},o={$$scope:1};let i=e.length;for(;i--;){const a=e[i],s=t[i];if(s){for(const e in a)e in s||(r[e]=1);for(const e in s)o[e]||(n[e]=s[e],o[e]=1);e[i]=s}else for(const e in a)o[e]=1}for(const e in r)e in n||(n[e]=void 0);return n}function _e(e){return"object"==typeof e&&null!==e?e:{}}function He(e,t,n){const r=e.$$.props[t];void 0!==r&&(e.$$.bound[r]=n,n(e.$$.ctx[r]))}function Fe(e){e&&e.c()}function Be(e,t,n){const{fragment:o,after_update:s}=e.$$;o&&o.m(t,n),ve((()=>{const t=e.$$.on_mount.map(r).filter(a);e.$$.on_destroy?e.$$.on_destroy.push(...t):i(t),e.$$.on_mount=[]})),s.forEach(ve)}function Ie(e,t){const n=e.$$;null!==n.fragment&&(!function(e){const t=[],n=[];de.forEach((r=>-1===e.indexOf(r)?t.push(r):n.push(r))),n.forEach((e=>e())),de=t}(n.after_update),i(n.on_destroy),n.fragment&&n.fragment.d(t),n.on_destroy=n.fragment=null,n.ctx=[])}function We(t,n,r,a,s,l,c=null,u=[-1]){const d=K;te(t);const p=t.$$={fragment:null,ctx:[],props:l,update:e,not_equal:s,bound:o(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(n.context||(d?d.$$.context:[])),callbacks:o(),dirty:u,skip_bound:!1,root:n.target||d.$$.root};c&&c(p.root);let f=!1;if(p.ctx=r?r(t,n.props||{},((e,n,...r)=>{const o=r.length?r[0]:n;return p.ctx&&s(p.ctx[e],p.ctx[e]=o)&&(!p.skip_bound&&p.bound[e]&&p.bound[e](o),f&&function(e,t){-1===e.$$.dirty[0]&&(ce.push(e),he(),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}(t,e)),n})):[],p.update(),f=!0,i(p.before_update),p.fragment=!!a&&a(p.ctx),n.target){if(n.hydrate){const e=function(e){return Array.from(e.childNodes)}(n.target);p.fragment&&p.fragment.l(e),e.forEach(T)}else p.fragment&&p.fragment.c();n.intro&&Re(t.$$.fragment),Be(t,n.target,n.anchor),we()}te(d)}class Ue{$$=void 0;$$set=void 0;$destroy(){Ie(this,1),this.$destroy=e}$on(t,n){if(!a(n))return e;const r=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return r.push(n),()=>{const e=r.indexOf(n);-1!==e&&r.splice(e,1)}}$set(e){var t;this.$$set&&(t=e,0!==Object.keys(t).length)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}"undefined"!=typeof window&&(window.__svelte||(window.__svelte={v:new Set})).v.add("4");function Ge(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(n=Ge(e[t]))&&(r&&(r+=" "),r+=n)}else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}!function(e,t){void 0===t&&(t={});var n=t.insertAt;if(e&&"undefined"!=typeof document){var r=document.head||document.getElementsByTagName("head")[0],o=document.createElement("style");o.type="text/css","top"===n&&r.firstChild?r.insertBefore(o,r.firstChild):r.appendChild(o),o.styleSheet?o.styleSheet.cssText=e:o.appendChild(document.createTextNode(e))}}('onlook-toolbar {\n  --red: 344 100% 53%;\n\n  --background: 20 14.3% 4.1%;\n  --foreground: 60 9.1% 97.8%;\n\n  --muted: 12 6.5% 15.1%;\n  --muted-foreground: 24 5.4% 63.9%;\n\n  --popover: 20 14.3% 4.1%;\n  --popover-foreground: 60 9.1% 97.8%;\n\n  --card: 20 14.3% 4.1%;\n  --card-foreground: 60 9.1% 97.8%;\n\n  --border: 12 6.5% 15.1%;\n  --input: 12 6.5% 15.1%;\n\n  --primary: 60 9.1% 97.8%;\n  --primary-foreground: 24 9.8% 10%;\n\n  --secondary: 12 6.5% 15.1%;\n  --secondary-foreground: 60 9.1% 97.8%;\n\n  --accent: 12 6.5% 15.1%;\n  --accent-foreground: 60 9.1% 97.8%;\n\n  --destructive: 0 62.8% 30.6%;\n  --destructive-foreground: 60 9.1% 97.8%;\n\n  --ring: 24 5.7% 82.9%;\n\n  --radius: 0.5rem;\n\n  --tw-border-opacity: 1;\n\n  border-color: hsl(var(--border) / var(--tw-border-opacity));\n\n  --tw-bg-opacity: 1;\n\n  background-color: hsl(var(--background) / var(--tw-bg-opacity));\n\n  --tw-text-opacity: 1;\n\n  color: hsl(var(--foreground) / var(--tw-text-opacity));\n  /* Apply inter font */\n  font-family: "Inter", "InterVariable", sans-serif;\n}\n');const Ze="-";function Ye(e){const t=function(e){const{theme:t,prefix:n}=e,r={nextPart:new Map,validators:[]},o=function(e,t){if(!t)return e;return e.map((([e,n])=>[e,n.map((e=>"string"==typeof e?t+e:"object"==typeof e?Object.fromEntries(Object.entries(e).map((([e,n])=>[t+e,n]))):e))]))}(Object.entries(e.classGroups),n);return o.forEach((([e,n])=>{Ke(n,r,e,t)})),r}(e),{conflictingClassGroups:n,conflictingClassGroupModifiers:r}=e;return{getClassGroupId:function(e){const n=e.split(Ze);return""===n[0]&&1!==n.length&&n.shift(),qe(n,t)||function(e){if(Xe.test(e)){const t=Xe.exec(e)[1],n=t?.substring(0,t.indexOf(":"));if(n)return"arbitrary.."+n}}(e)},getConflictingClassGroupIds:function(e,t){const o=n[e]||[];return t&&r[e]?[...o,...r[e]]:o}}}function qe(e,t){if(0===e.length)return t.classGroupId;const n=e[0],r=t.nextPart.get(n),o=r?qe(e.slice(1),r):void 0;if(o)return o;if(0===t.validators.length)return;const i=e.join(Ze);return t.validators.find((({validator:e})=>e(i)))?.classGroupId}const Xe=/^\[(.+)\]$/;function Ke(e,t,n,r){e.forEach((e=>{if("string"!=typeof e){if("function"==typeof e)return e.isThemeGetter?void Ke(e(r),t,n,r):void t.validators.push({validator:e,classGroupId:n});Object.entries(e).forEach((([e,o])=>{Ke(o,Je(t,e),n,r)}))}else{(""===e?t:Je(t,e)).classGroupId=n}}))}function Je(e,t){let n=e;return t.split(Ze).forEach((e=>{n.nextPart.has(e)||n.nextPart.set(e,{nextPart:new Map,validators:[]}),n=n.nextPart.get(e)})),n}function Qe(e){if(e<1)return{get:()=>{},set:()=>{}};let t=0,n=new Map,r=new Map;function o(o,i){n.set(o,i),t++,t>e&&(t=0,r=n,n=new Map)}return{get(e){let t=n.get(e);return void 0!==t?t:void 0!==(t=r.get(e))?(o(e,t),t):void 0},set(e,t){n.has(e)?n.set(e,t):o(e,t)}}}const et="!";function tt(e){const t=e.separator,n=1===t.length,r=t[0],o=t.length;return function(e){const i=[];let a,s=0,l=0;for(let c=0;c<e.length;c++){let u=e[c];if(0===s){if(u===r&&(n||e.slice(c,c+o)===t)){i.push(e.slice(l,c)),l=c+o;continue}if("/"===u){a=c;continue}}"["===u?s++:"]"===u&&s--}const c=0===i.length?e:e.substring(l),u=c.startsWith(et);return{modifiers:i,hasImportantModifier:u,baseClassName:u?c.substring(1):c,maybePostfixModifierPosition:a&&a>l?a-l:void 0}}}const nt=/\s+/;function rt(){let e,t,n=0,r="";for(;n<arguments.length;)(e=arguments[n++])&&(t=ot(e))&&(r&&(r+=" "),r+=t);return r}function ot(e){if("string"==typeof e)return e;let t,n="";for(let r=0;r<e.length;r++)e[r]&&(t=ot(e[r]))&&(n&&(n+=" "),n+=t);return n}function it(e,...t){let n,r,o,i=function(s){const l=t.reduce(((e,t)=>t(e)),e());return n=function(e){return{cache:Qe(e.cacheSize),splitModifiers:tt(e),...Ye(e)}}(l),r=n.cache.get,o=n.cache.set,i=a,a(s)};function a(e){const t=r(e);if(t)return t;const i=function(e,t){const{splitModifiers:n,getClassGroupId:r,getConflictingClassGroupIds:o}=t,i=new Set;return e.trim().split(nt).map((e=>{const{modifiers:t,hasImportantModifier:o,baseClassName:i,maybePostfixModifierPosition:a}=n(e);let s=r(a?i.substring(0,a):i),l=Boolean(a);if(!s){if(!a)return{isTailwindClass:!1,originalClassName:e};if(s=r(i),!s)return{isTailwindClass:!1,originalClassName:e};l=!1}const c=function(e){if(e.length<=1)return e;const t=[];let n=[];return e.forEach((e=>{"["===e[0]?(t.push(...n.sort(),e),n=[]):n.push(e)})),t.push(...n.sort()),t}(t).join(":");return{isTailwindClass:!0,modifierId:o?c+et:c,classGroupId:s,originalClassName:e,hasPostfixModifier:l}})).reverse().filter((e=>{if(!e.isTailwindClass)return!0;const{modifierId:t,classGroupId:n,hasPostfixModifier:r}=e,a=t+n;return!i.has(a)&&(i.add(a),o(n,r).forEach((e=>i.add(t+e))),!0)})).reverse().map((e=>e.originalClassName)).join(" ")}(e,n);return o(e,i),i}return function(){return i(rt.apply(null,arguments))}}function at(e){const t=t=>t[e]||[];return t.isThemeGetter=!0,t}const st=/^\[(?:([a-z-]+):)?(.+)\]$/i,lt=/^\d+\/\d+$/,ct=new Set(["px","full","screen"]),ut=/^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/,dt=/\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/,pt=/^(rgba?|hsla?|hwb|(ok)?(lab|lch))\(.+\)$/,ft=/^-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/,mt=/^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/;function ht(e){return vt(e)||ct.has(e)||lt.test(e)}function gt(e){return Rt(e,"length",Pt)}function vt(e){return Boolean(e)&&!Number.isNaN(Number(e))}function yt(e){return Rt(e,"number",vt)}function bt(e){return Boolean(e)&&Number.isInteger(Number(e))}function $t(e){return e.endsWith("%")&&vt(e.slice(0,-1))}function xt(e){return st.test(e)}function wt(e){return ut.test(e)}const St=new Set(["length","size","percentage"]);function Ct(e){return Rt(e,St,Lt)}function Et(e){return Rt(e,"position",Lt)}const kt=new Set(["image","url"]);function Mt(e){return Rt(e,kt,zt)}function At(e){return Rt(e,"",Ot)}function Tt(){return!0}function Rt(e,t,n){const r=st.exec(e);return!!r&&(r[1]?"string"==typeof t?r[1]===t:t.has(r[1]):n(r[2]))}function Pt(e){return dt.test(e)&&!pt.test(e)}function Lt(){return!1}function Ot(e){return ft.test(e)}function zt(e){return mt.test(e)}function Nt(){const e=at("colors"),t=at("spacing"),n=at("blur"),r=at("brightness"),o=at("borderColor"),i=at("borderRadius"),a=at("borderSpacing"),s=at("borderWidth"),l=at("contrast"),c=at("grayscale"),u=at("hueRotate"),d=at("invert"),p=at("gap"),f=at("gradientColorStops"),m=at("gradientColorStopPositions"),h=at("inset"),g=at("margin"),v=at("opacity"),y=at("padding"),b=at("saturate"),$=at("scale"),x=at("sepia"),w=at("skew"),S=at("space"),C=at("translate"),E=()=>["auto",xt,t],k=()=>[xt,t],M=()=>["",ht,gt],A=()=>["auto",vt,xt],T=()=>["","0",xt],R=()=>[vt,yt],P=()=>[vt,xt];return{cacheSize:500,separator:":",theme:{colors:[Tt],spacing:[ht,gt],blur:["none","",wt,xt],brightness:R(),borderColor:[e],borderRadius:["none","","full",wt,xt],borderSpacing:k(),borderWidth:M(),contrast:R(),grayscale:T(),hueRotate:P(),invert:T(),gap:k(),gradientColorStops:[e],gradientColorStopPositions:[$t,gt],inset:E(),margin:E(),opacity:R(),padding:k(),saturate:R(),scale:R(),sepia:T(),skew:P(),space:k(),translate:k()},classGroups:{aspect:[{aspect:["auto","square","video",xt]}],container:["container"],columns:[{columns:[wt]}],"break-after":[{"break-after":["auto","avoid","all","avoid-page","page","left","right","column"]}],"break-before":[{"break-before":["auto","avoid","all","avoid-page","page","left","right","column"]}],"break-inside":[{"break-inside":["auto","avoid","avoid-page","avoid-column"]}],"box-decoration":[{"box-decoration":["slice","clone"]}],box:[{box:["border","content"]}],display:["block","inline-block","inline","flex","inline-flex","table","inline-table","table-caption","table-cell","table-column","table-column-group","table-footer-group","table-header-group","table-row-group","table-row","flow-root","grid","inline-grid","contents","list-item","hidden"],float:[{float:["right","left","none","start","end"]}],clear:[{clear:["left","right","both","none","start","end"]}],isolation:["isolate","isolation-auto"],"object-fit":[{object:["contain","cover","fill","none","scale-down"]}],"object-position":[{object:["bottom","center","left","left-bottom","left-top","right","right-bottom","right-top","top",xt]}],overflow:[{overflow:["auto","hidden","clip","visible","scroll"]}],"overflow-x":[{"overflow-x":["auto","hidden","clip","visible","scroll"]}],"overflow-y":[{"overflow-y":["auto","hidden","clip","visible","scroll"]}],overscroll:[{overscroll:["auto","contain","none"]}],"overscroll-x":[{"overscroll-x":["auto","contain","none"]}],"overscroll-y":[{"overscroll-y":["auto","contain","none"]}],position:["static","fixed","absolute","relative","sticky"],inset:[{inset:[h]}],"inset-x":[{"inset-x":[h]}],"inset-y":[{"inset-y":[h]}],start:[{start:[h]}],end:[{end:[h]}],top:[{top:[h]}],right:[{right:[h]}],bottom:[{bottom:[h]}],left:[{left:[h]}],visibility:["visible","invisible","collapse"],z:[{z:["auto",bt,xt]}],basis:[{basis:E()}],"flex-direction":[{flex:["row","row-reverse","col","col-reverse"]}],"flex-wrap":[{flex:["wrap","wrap-reverse","nowrap"]}],flex:[{flex:["1","auto","initial","none",xt]}],grow:[{grow:T()}],shrink:[{shrink:T()}],order:[{order:["first","last","none",bt,xt]}],"grid-cols":[{"grid-cols":[Tt]}],"col-start-end":[{col:["auto",{span:["full",bt,xt]},xt]}],"col-start":[{"col-start":A()}],"col-end":[{"col-end":A()}],"grid-rows":[{"grid-rows":[Tt]}],"row-start-end":[{row:["auto",{span:[bt,xt]},xt]}],"row-start":[{"row-start":A()}],"row-end":[{"row-end":A()}],"grid-flow":[{"grid-flow":["row","col","dense","row-dense","col-dense"]}],"auto-cols":[{"auto-cols":["auto","min","max","fr",xt]}],"auto-rows":[{"auto-rows":["auto","min","max","fr",xt]}],gap:[{gap:[p]}],"gap-x":[{"gap-x":[p]}],"gap-y":[{"gap-y":[p]}],"justify-content":[{justify:["normal","start","end","center","between","around","evenly","stretch"]}],"justify-items":[{"justify-items":["start","end","center","stretch"]}],"justify-self":[{"justify-self":["auto","start","end","center","stretch"]}],"align-content":[{content:["normal","start","end","center","between","around","evenly","stretch","baseline"]}],"align-items":[{items:["start","end","center","baseline","stretch"]}],"align-self":[{self:["auto","start","end","center","stretch","baseline"]}],"place-content":[{"place-content":["start","end","center","between","around","evenly","stretch","baseline"]}],"place-items":[{"place-items":["start","end","center","baseline","stretch"]}],"place-self":[{"place-self":["auto","start","end","center","stretch"]}],p:[{p:[y]}],px:[{px:[y]}],py:[{py:[y]}],ps:[{ps:[y]}],pe:[{pe:[y]}],pt:[{pt:[y]}],pr:[{pr:[y]}],pb:[{pb:[y]}],pl:[{pl:[y]}],m:[{m:[g]}],mx:[{mx:[g]}],my:[{my:[g]}],ms:[{ms:[g]}],me:[{me:[g]}],mt:[{mt:[g]}],mr:[{mr:[g]}],mb:[{mb:[g]}],ml:[{ml:[g]}],"space-x":[{"space-x":[S]}],"space-x-reverse":["space-x-reverse"],"space-y":[{"space-y":[S]}],"space-y-reverse":["space-y-reverse"],w:[{w:["auto","min","max","fit","svw","lvw","dvw",xt,t]}],"min-w":[{"min-w":[xt,t,"min","max","fit"]}],"max-w":[{"max-w":[xt,t,"none","full","min","max","fit","prose",{screen:[wt]},wt]}],h:[{h:[xt,t,"auto","min","max","fit","svh","lvh","dvh"]}],"min-h":[{"min-h":[xt,t,"min","max","fit","svh","lvh","dvh"]}],"max-h":[{"max-h":[xt,t,"min","max","fit","svh","lvh","dvh"]}],size:[{size:[xt,t,"auto","min","max","fit"]}],"font-size":[{text:["base",wt,gt]}],"font-smoothing":["antialiased","subpixel-antialiased"],"font-style":["italic","not-italic"],"font-weight":[{font:["thin","extralight","light","normal","medium","semibold","bold","extrabold","black",yt]}],"font-family":[{font:[Tt]}],"fvn-normal":["normal-nums"],"fvn-ordinal":["ordinal"],"fvn-slashed-zero":["slashed-zero"],"fvn-figure":["lining-nums","oldstyle-nums"],"fvn-spacing":["proportional-nums","tabular-nums"],"fvn-fraction":["diagonal-fractions","stacked-fractons"],tracking:[{tracking:["tighter","tight","normal","wide","wider","widest",xt]}],"line-clamp":[{"line-clamp":["none",vt,yt]}],leading:[{leading:["none","tight","snug","normal","relaxed","loose",ht,xt]}],"list-image":[{"list-image":["none",xt]}],"list-style-type":[{list:["none","disc","decimal",xt]}],"list-style-position":[{list:["inside","outside"]}],"placeholder-color":[{placeholder:[e]}],"placeholder-opacity":[{"placeholder-opacity":[v]}],"text-alignment":[{text:["left","center","right","justify","start","end"]}],"text-color":[{text:[e]}],"text-opacity":[{"text-opacity":[v]}],"text-decoration":["underline","overline","line-through","no-underline"],"text-decoration-style":[{decoration:["solid","dashed","dotted","double","none","wavy"]}],"text-decoration-thickness":[{decoration:["auto","from-font",ht,gt]}],"underline-offset":[{"underline-offset":["auto",ht,xt]}],"text-decoration-color":[{decoration:[e]}],"text-transform":["uppercase","lowercase","capitalize","normal-case"],"text-overflow":["truncate","text-ellipsis","text-clip"],"text-wrap":[{text:["wrap","nowrap","balance","pretty"]}],indent:[{indent:k()}],"vertical-align":[{align:["baseline","top","middle","bottom","text-top","text-bottom","sub","super",xt]}],whitespace:[{whitespace:["normal","nowrap","pre","pre-line","pre-wrap","break-spaces"]}],break:[{break:["normal","words","all","keep"]}],hyphens:[{hyphens:["none","manual","auto"]}],content:[{content:["none",xt]}],"bg-attachment":[{bg:["fixed","local","scroll"]}],"bg-clip":[{"bg-clip":["border","padding","content","text"]}],"bg-opacity":[{"bg-opacity":[v]}],"bg-origin":[{"bg-origin":["border","padding","content"]}],"bg-position":[{bg:["bottom","center","left","left-bottom","left-top","right","right-bottom","right-top","top",Et]}],"bg-repeat":[{bg:["no-repeat",{repeat:["","x","y","round","space"]}]}],"bg-size":[{bg:["auto","cover","contain",Ct]}],"bg-image":[{bg:["none",{"gradient-to":["t","tr","r","br","b","bl","l","tl"]},Mt]}],"bg-color":[{bg:[e]}],"gradient-from-pos":[{from:[m]}],"gradient-via-pos":[{via:[m]}],"gradient-to-pos":[{to:[m]}],"gradient-from":[{from:[f]}],"gradient-via":[{via:[f]}],"gradient-to":[{to:[f]}],rounded:[{rounded:[i]}],"rounded-s":[{"rounded-s":[i]}],"rounded-e":[{"rounded-e":[i]}],"rounded-t":[{"rounded-t":[i]}],"rounded-r":[{"rounded-r":[i]}],"rounded-b":[{"rounded-b":[i]}],"rounded-l":[{"rounded-l":[i]}],"rounded-ss":[{"rounded-ss":[i]}],"rounded-se":[{"rounded-se":[i]}],"rounded-ee":[{"rounded-ee":[i]}],"rounded-es":[{"rounded-es":[i]}],"rounded-tl":[{"rounded-tl":[i]}],"rounded-tr":[{"rounded-tr":[i]}],"rounded-br":[{"rounded-br":[i]}],"rounded-bl":[{"rounded-bl":[i]}],"border-w":[{border:[s]}],"border-w-x":[{"border-x":[s]}],"border-w-y":[{"border-y":[s]}],"border-w-s":[{"border-s":[s]}],"border-w-e":[{"border-e":[s]}],"border-w-t":[{"border-t":[s]}],"border-w-r":[{"border-r":[s]}],"border-w-b":[{"border-b":[s]}],"border-w-l":[{"border-l":[s]}],"border-opacity":[{"border-opacity":[v]}],"border-style":[{border:["solid","dashed","dotted","double","none","hidden"]}],"divide-x":[{"divide-x":[s]}],"divide-x-reverse":["divide-x-reverse"],"divide-y":[{"divide-y":[s]}],"divide-y-reverse":["divide-y-reverse"],"divide-opacity":[{"divide-opacity":[v]}],"divide-style":[{divide:["solid","dashed","dotted","double","none"]}],"border-color":[{border:[o]}],"border-color-x":[{"border-x":[o]}],"border-color-y":[{"border-y":[o]}],"border-color-t":[{"border-t":[o]}],"border-color-r":[{"border-r":[o]}],"border-color-b":[{"border-b":[o]}],"border-color-l":[{"border-l":[o]}],"divide-color":[{divide:[o]}],"outline-style":[{outline:["","solid","dashed","dotted","double","none"]}],"outline-offset":[{"outline-offset":[ht,xt]}],"outline-w":[{outline:[ht,gt]}],"outline-color":[{outline:[e]}],"ring-w":[{ring:M()}],"ring-w-inset":["ring-inset"],"ring-color":[{ring:[e]}],"ring-opacity":[{"ring-opacity":[v]}],"ring-offset-w":[{"ring-offset":[ht,gt]}],"ring-offset-color":[{"ring-offset":[e]}],shadow:[{shadow:["","inner","none",wt,At]}],"shadow-color":[{shadow:[Tt]}],opacity:[{opacity:[v]}],"mix-blend":[{"mix-blend":["normal","multiply","screen","overlay","darken","lighten","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","hue","saturation","color","luminosity","plus-lighter"]}],"bg-blend":[{"bg-blend":["normal","multiply","screen","overlay","darken","lighten","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","hue","saturation","color","luminosity","plus-lighter"]}],filter:[{filter:["","none"]}],blur:[{blur:[n]}],brightness:[{brightness:[r]}],contrast:[{contrast:[l]}],"drop-shadow":[{"drop-shadow":["","none",wt,xt]}],grayscale:[{grayscale:[c]}],"hue-rotate":[{"hue-rotate":[u]}],invert:[{invert:[d]}],saturate:[{saturate:[b]}],sepia:[{sepia:[x]}],"backdrop-filter":[{"backdrop-filter":["","none"]}],"backdrop-blur":[{"backdrop-blur":[n]}],"backdrop-brightness":[{"backdrop-brightness":[r]}],"backdrop-contrast":[{"backdrop-contrast":[l]}],"backdrop-grayscale":[{"backdrop-grayscale":[c]}],"backdrop-hue-rotate":[{"backdrop-hue-rotate":[u]}],"backdrop-invert":[{"backdrop-invert":[d]}],"backdrop-opacity":[{"backdrop-opacity":[v]}],"backdrop-saturate":[{"backdrop-saturate":[b]}],"backdrop-sepia":[{"backdrop-sepia":[x]}],"border-collapse":[{border:["collapse","separate"]}],"border-spacing":[{"border-spacing":[a]}],"border-spacing-x":[{"border-spacing-x":[a]}],"border-spacing-y":[{"border-spacing-y":[a]}],"table-layout":[{table:["auto","fixed"]}],caption:[{caption:["top","bottom"]}],transition:[{transition:["none","all","","colors","opacity","shadow","transform",xt]}],duration:[{duration:P()}],ease:[{ease:["linear","in","out","in-out",xt]}],delay:[{delay:P()}],animate:[{animate:["none","spin","ping","pulse","bounce",xt]}],transform:[{transform:["","gpu","none"]}],scale:[{scale:[$]}],"scale-x":[{"scale-x":[$]}],"scale-y":[{"scale-y":[$]}],rotate:[{rotate:[bt,xt]}],"translate-x":[{"translate-x":[C]}],"translate-y":[{"translate-y":[C]}],"skew-x":[{"skew-x":[w]}],"skew-y":[{"skew-y":[w]}],"transform-origin":[{origin:["center","top","top-right","right","bottom-right","bottom","bottom-left","left","top-left",xt]}],accent:[{accent:["auto",e]}],appearance:[{appearance:["none","auto"]}],cursor:[{cursor:["auto","default","pointer","wait","text","move","help","not-allowed","none","context-menu","progress","cell","crosshair","vertical-text","alias","copy","no-drop","grab","grabbing","all-scroll","col-resize","row-resize","n-resize","e-resize","s-resize","w-resize","ne-resize","nw-resize","se-resize","sw-resize","ew-resize","ns-resize","nesw-resize","nwse-resize","zoom-in","zoom-out",xt]}],"caret-color":[{caret:[e]}],"pointer-events":[{"pointer-events":["none","auto"]}],resize:[{resize:["none","y","x",""]}],"scroll-behavior":[{scroll:["auto","smooth"]}],"scroll-m":[{"scroll-m":k()}],"scroll-mx":[{"scroll-mx":k()}],"scroll-my":[{"scroll-my":k()}],"scroll-ms":[{"scroll-ms":k()}],"scroll-me":[{"scroll-me":k()}],"scroll-mt":[{"scroll-mt":k()}],"scroll-mr":[{"scroll-mr":k()}],"scroll-mb":[{"scroll-mb":k()}],"scroll-ml":[{"scroll-ml":k()}],"scroll-p":[{"scroll-p":k()}],"scroll-px":[{"scroll-px":k()}],"scroll-py":[{"scroll-py":k()}],"scroll-ps":[{"scroll-ps":k()}],"scroll-pe":[{"scroll-pe":k()}],"scroll-pt":[{"scroll-pt":k()}],"scroll-pr":[{"scroll-pr":k()}],"scroll-pb":[{"scroll-pb":k()}],"scroll-pl":[{"scroll-pl":k()}],"snap-align":[{snap:["start","end","center","align-none"]}],"snap-stop":[{snap:["normal","always"]}],"snap-type":[{snap:["none","x","y","both"]}],"snap-strictness":[{snap:["mandatory","proximity"]}],touch:[{touch:["auto","none","manipulation"]}],"touch-x":[{"touch-pan":["x","left","right"]}],"touch-y":[{"touch-pan":["y","up","down"]}],"touch-pz":["touch-pinch-zoom"],select:[{select:["none","text","all","auto"]}],"will-change":[{"will-change":["auto","scroll","contents","transform",xt]}],fill:[{fill:[e,"none"]}],"stroke-w":[{stroke:[ht,gt,yt]}],stroke:[{stroke:[e,"none"]}],sr:["sr-only","not-sr-only"],"forced-color-adjust":[{"forced-color-adjust":["auto","none"]}]},conflictingClassGroups:{overflow:["overflow-x","overflow-y"],overscroll:["overscroll-x","overscroll-y"],inset:["inset-x","inset-y","start","end","top","right","bottom","left"],"inset-x":["right","left"],"inset-y":["top","bottom"],flex:["basis","grow","shrink"],gap:["gap-x","gap-y"],p:["px","py","ps","pe","pt","pr","pb","pl"],px:["pr","pl"],py:["pt","pb"],m:["mx","my","ms","me","mt","mr","mb","ml"],mx:["mr","ml"],my:["mt","mb"],size:["w","h"],"font-size":["leading"],"fvn-normal":["fvn-ordinal","fvn-slashed-zero","fvn-figure","fvn-spacing","fvn-fraction"],"fvn-ordinal":["fvn-normal"],"fvn-slashed-zero":["fvn-normal"],"fvn-figure":["fvn-normal"],"fvn-spacing":["fvn-normal"],"fvn-fraction":["fvn-normal"],"line-clamp":["display","overflow"],rounded:["rounded-s","rounded-e","rounded-t","rounded-r","rounded-b","rounded-l","rounded-ss","rounded-se","rounded-ee","rounded-es","rounded-tl","rounded-tr","rounded-br","rounded-bl"],"rounded-s":["rounded-ss","rounded-es"],"rounded-e":["rounded-se","rounded-ee"],"rounded-t":["rounded-tl","rounded-tr"],"rounded-r":["rounded-tr","rounded-br"],"rounded-b":["rounded-br","rounded-bl"],"rounded-l":["rounded-tl","rounded-bl"],"border-spacing":["border-spacing-x","border-spacing-y"],"border-w":["border-w-s","border-w-e","border-w-t","border-w-r","border-w-b","border-w-l"],"border-w-x":["border-w-r","border-w-l"],"border-w-y":["border-w-t","border-w-b"],"border-color":["border-color-t","border-color-r","border-color-b","border-color-l"],"border-color-x":["border-color-r","border-color-l"],"border-color-y":["border-color-t","border-color-b"],"scroll-m":["scroll-mx","scroll-my","scroll-ms","scroll-me","scroll-mt","scroll-mr","scroll-mb","scroll-ml"],"scroll-mx":["scroll-mr","scroll-ml"],"scroll-my":["scroll-mt","scroll-mb"],"scroll-p":["scroll-px","scroll-py","scroll-ps","scroll-pe","scroll-pt","scroll-pr","scroll-pb","scroll-pl"],"scroll-px":["scroll-pr","scroll-pl"],"scroll-py":["scroll-pt","scroll-pb"],touch:["touch-x","touch-y","touch-pz"],"touch-x":["touch"],"touch-y":["touch"],"touch-pz":["touch"]},conflictingClassGroupModifiers:{"font-size":["leading"]}}}const jt=it(Nt);function Vt(e){const t=e-1;return t*t*t+1}function Dt(...e){return jt(function(){for(var e,t,n=0,r="",o=arguments.length;n<o;n++)(e=arguments[n])&&(t=Ge(e))&&(r&&(r+=" "),r+=t);return r}(e))}function _t(e){let t,r,o,a,s;const l=e[3].default,c=d(l,e,e[2],null);let u=[{class:r=Dt("rounded-xl border bg-card text-card-foreground shadow",e[0])},e[1]],p={};for(let e=0;e<u.length;e+=1)p=n(p,u[e]);return{c(){t=P("div"),c&&c.c(),F(t,p)},m(n,r){A(n,t,r),c&&c.m(t,null),o=!0,a||(s=[j(t,"click",e[4]),j(t,"focusin",e[5]),j(t,"focusout",e[6]),j(t,"mouseenter",e[7]),j(t,"mouseleave",e[8])],a=!0)},p(e,[n]){c&&c.p&&(!o||4&n)&&m(c,l,e,e[2],o?f(l,e[2],n,null):h(e[2]),null),F(t,p=De(u,[(!o||1&n&&r!==(r=Dt("rounded-xl border bg-card text-card-foreground shadow",e[0])))&&{class:r},2&n&&e[1]]))},i(e){o||(Re(c,e),o=!0)},o(e){Pe(c,e),o=!1},d(e){e&&T(t),c&&c.d(e),a=!1,i(s)}}}function Ht(e,t,r){const o=["class"];let i=v(t,o),{$$slots:a={},$$scope:s}=t,{class:l}=t;return e.$$set=e=>{t=n(n({},t),g(e)),r(1,i=v(t,o)),"class"in e&&r(0,l=e.class),"$$scope"in e&&r(2,s=e.$$scope)},[l,i,s,a,function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(t){le.call(this,e,t)}]}class Ft extends Ue{constructor(e){super(),We(this,e,Ht,_t,s,{class:0})}}function Bt(e){let t,r,o;const i=e[3].default,a=d(i,e,e[2],null);let s=[{class:r=Dt("p-4 pt-0",e[0])},e[1]],l={};for(let e=0;e<s.length;e+=1)l=n(l,s[e]);return{c(){t=P("div"),a&&a.c(),F(t,l)},m(e,n){A(e,t,n),a&&a.m(t,null),o=!0},p(e,[n]){a&&a.p&&(!o||4&n)&&m(a,i,e,e[2],o?f(i,e[2],n,null):h(e[2]),null),F(t,l=De(s,[(!o||1&n&&r!==(r=Dt("p-4 pt-0",e[0])))&&{class:r},2&n&&e[1]]))},i(e){o||(Re(a,e),o=!0)},o(e){Pe(a,e),o=!1},d(e){e&&T(t),a&&a.d(e)}}}function It(e,t,r){const o=["class"];let i=v(t,o),{$$slots:a={},$$scope:s}=t,{class:l}=t;return e.$$set=e=>{t=n(n({},t),g(e)),r(1,i=v(t,o)),"class"in e&&r(0,l=e.class),"$$scope"in e&&r(2,s=e.$$scope)},[l,i,s,a]}class Wt extends Ue{constructor(e){super(),We(this,e,It,Bt,s,{class:0})}}function Ut(e){let t,r,o;const i=e[3].default,a=d(i,e,e[2],null);let s=[{class:r=Dt("flex items-center p-6 pt-0",e[0])},e[1]],l={};for(let e=0;e<s.length;e+=1)l=n(l,s[e]);return{c(){t=P("div"),a&&a.c(),F(t,l)},m(e,n){A(e,t,n),a&&a.m(t,null),o=!0},p(e,[n]){a&&a.p&&(!o||4&n)&&m(a,i,e,e[2],o?f(i,e[2],n,null):h(e[2]),null),F(t,l=De(s,[(!o||1&n&&r!==(r=Dt("flex items-center p-6 pt-0",e[0])))&&{class:r},2&n&&e[1]]))},i(e){o||(Re(a,e),o=!0)},o(e){Pe(a,e),o=!1},d(e){e&&T(t),a&&a.d(e)}}}function Gt(e,t,r){const o=["class"];let i=v(t,o),{$$slots:a={},$$scope:s}=t,{class:l}=t;return e.$$set=e=>{t=n(n({},t),g(e)),r(1,i=v(t,o)),"class"in e&&r(0,l=e.class),"$$scope"in e&&r(2,s=e.$$scope)},[l,i,s,a]}class Zt extends Ue{constructor(e){super(),We(this,e,Gt,Ut,s,{class:0})}}function Yt(t){let r,o,i=[{width:t[1]},{height:t[1]},{viewBox:"0 0 15 15"},{fill:"none"},{xmlns:"http://www.w3.org/2000/svg"},t[2]],a={};for(let e=0;e<i.length;e+=1)a=n(a,i[e]);return{c(){r=L("svg"),o=L("path"),_(o,"fill-rule","evenodd"),_(o,"clip-rule","evenodd"),_(o,"d","M1.99998 0.999976C1.44769 0.999976 0.999976 1.44769 0.999976 1.99998V13C0.999976 13.5523 1.44769 14 1.99998 14H13C13.5523 14 14 13.5523 14 13V1.99998C14 1.44769 13.5523 0.999976 13 0.999976H1.99998ZM1.99998 1.99998L13 1.99998V13H1.99998V1.99998ZM4.49996 3.99996C4.22382 3.99996 3.99996 4.22382 3.99996 4.49996V10.5C3.99996 10.7761 4.22382 11 4.49996 11H10.5C10.7761 11 11 10.7761 11 10.5V4.49996C11 4.22382 10.7761 3.99996 10.5 3.99996H4.49996ZM4.99996 9.99996V4.99996H9.99996V9.99996H4.99996Z"),_(o,"fill",t[0]),B(r,a)},m(e,t){A(e,r,t),E(r,o)},p(e,[t]){1&t&&_(o,"fill",e[0]),B(r,a=De(i,[2&t&&{width:e[1]},2&t&&{height:e[1]},{viewBox:"0 0 15 15"},{fill:"none"},{xmlns:"http://www.w3.org/2000/svg"},4&t&&e[2]]))},i:e,o:e,d(e){e&&T(r)}}}function qt(e,t,r){const o=["color","size"];let i=v(t,o),{color:a="currentColor"}=t,{size:s=15}=t;return e.$$set=e=>{t=n(n({},t),g(e)),r(2,i=v(t,o)),"color"in e&&r(0,a=e.color),"size"in e&&r(1,s=e.size)},[a,s,i]}var Xt=class extends Ue{constructor(e){super(),We(this,e,qt,Yt,s,{color:0,size:1})}};function Kt(t){let r,o,i=[{width:t[1]},{height:t[1]},{viewBox:"0 0 15 15"},{fill:"none"},{xmlns:"http://www.w3.org/2000/svg"},t[2]],a={};for(let e=0;e<i.length;e+=1)a=n(a,i[e]);return{c(){r=L("svg"),o=L("path"),_(o,"fill-rule","evenodd"),_(o,"clip-rule","evenodd"),_(o,"d","M3.13523 6.15803C3.3241 5.95657 3.64052 5.94637 3.84197 6.13523L7.5 9.56464L11.158 6.13523C11.3595 5.94637 11.6759 5.95657 11.8648 6.15803C12.0536 6.35949 12.0434 6.67591 11.842 6.86477L7.84197 10.6148C7.64964 10.7951 7.35036 10.7951 7.15803 10.6148L3.15803 6.86477C2.95657 6.67591 2.94637 6.35949 3.13523 6.15803Z"),_(o,"fill",t[0]),B(r,a)},m(e,t){A(e,r,t),E(r,o)},p(e,[t]){1&t&&_(o,"fill",e[0]),B(r,a=De(i,[2&t&&{width:e[1]},2&t&&{height:e[1]},{viewBox:"0 0 15 15"},{fill:"none"},{xmlns:"http://www.w3.org/2000/svg"},4&t&&e[2]]))},i:e,o:e,d(e){e&&T(r)}}}function Jt(e,t,r){const o=["color","size"];let i=v(t,o),{color:a="currentColor"}=t,{size:s=15}=t;return e.$$set=e=>{t=n(n({},t),g(e)),r(2,i=v(t,o)),"color"in e&&r(0,a=e.color),"size"in e&&r(1,s=e.size)},[a,s,i]}var Qt=class extends Ue{constructor(e){super(),We(this,e,Jt,Kt,s,{color:0,size:1})}};function en(t){let r,o,i=[{width:t[1]},{height:t[1]},{viewBox:"0 0 15 15"},{fill:"none"},{xmlns:"http://www.w3.org/2000/svg"},t[2]],a={};for(let e=0;e<i.length;e+=1)a=n(a,i[e]);return{c(){r=L("svg"),o=L("path"),_(o,"fill-rule","evenodd"),_(o,"clip-rule","evenodd"),_(o,"d","M4.67129 3.14634C4.47603 3.34161 4.47603 3.65819 4.67129 3.85345L7.14616 6.32833C7.34142 6.52359 7.65801 6.52359 7.85327 6.32833L10.3281 3.85345C10.5234 3.65819 10.5234 3.34161 10.3281 3.14634L7.85327 0.671471C7.65801 0.476209 7.34142 0.476209 7.14616 0.671471L4.67129 3.14634ZM7.49971 5.26766L5.73195 3.4999L7.49971 1.73213L9.26748 3.4999L7.49971 5.26766ZM8.67129 7.14634C8.47603 7.34161 8.47603 7.65819 8.67129 7.85345L11.1462 10.3283C11.3414 10.5236 11.658 10.5236 11.8533 10.3283L14.3281 7.85345C14.5234 7.65819 14.5234 7.34161 14.3281 7.14634L11.8533 4.67147C11.658 4.47621 11.3414 4.47621 11.1462 4.67147L8.67129 7.14634ZM11.4997 9.26766L9.73195 7.4999L11.4997 5.73213L13.2675 7.4999L11.4997 9.26766ZM4.67129 11.8535C4.47603 11.6582 4.47603 11.3416 4.67129 11.1463L7.14616 8.67147C7.34142 8.47621 7.65801 8.47621 7.85327 8.67147L10.3281 11.1463C10.5234 11.3416 10.5234 11.6582 10.3281 11.8535L7.85327 14.3283C7.65801 14.5236 7.34142 14.5236 7.14616 14.3283L4.67129 11.8535ZM5.73195 11.4999L7.49971 13.2677L9.26748 11.4999L7.49971 9.73213L5.73195 11.4999ZM0.671288 7.14649C0.476026 7.34175 0.476026 7.65834 0.671288 7.8536L3.14616 10.3285C3.34142 10.5237 3.65801 10.5237 3.85327 10.3285L6.32814 7.8536C6.5234 7.65834 6.5234 7.34175 6.32814 7.14649L3.85327 4.67162C3.65801 4.47636 3.34142 4.47636 3.14616 4.67162L0.671288 7.14649ZM3.49972 9.26781L1.73195 7.50005L3.49972 5.73228L5.26748 7.50005L3.49972 9.26781Z"),_(o,"fill",t[0]),B(r,a)},m(e,t){A(e,r,t),E(r,o)},p(e,[t]){1&t&&_(o,"fill",e[0]),B(r,a=De(i,[2&t&&{width:e[1]},2&t&&{height:e[1]},{viewBox:"0 0 15 15"},{fill:"none"},{xmlns:"http://www.w3.org/2000/svg"},4&t&&e[2]]))},i:e,o:e,d(e){e&&T(r)}}}function tn(e,t,r){const o=["color","size"];let i=v(t,o),{color:a="currentColor"}=t,{size:s=15}=t;return e.$$set=e=>{t=n(n({},t),g(e)),r(2,i=v(t,o)),"color"in e&&r(0,a=e.color),"size"in e&&r(1,s=e.size)},[a,s,i]}var nn=class extends Ue{constructor(e){super(),We(this,e,tn,en,s,{color:0,size:1})}};function rn(t){let r,o,i=[{width:t[1]},{height:t[1]},{viewBox:"0 0 15 15"},{fill:"none"},{xmlns:"http://www.w3.org/2000/svg"},t[2]],a={};for(let e=0;e<i.length;e+=1)a=n(a,i[e]);return{c(){r=L("svg"),o=L("path"),_(o,"fill-rule","evenodd"),_(o,"clip-rule","evenodd"),_(o,"d","M3 2C2.44772 2 2 2.44772 2 3V12C2 12.5523 2.44772 13 3 13H12C12.5523 13 13 12.5523 13 12V8.5C13 8.22386 12.7761 8 12.5 8C12.2239 8 12 8.22386 12 8.5V12H3V3L6.5 3C6.77614 3 7 2.77614 7 2.5C7 2.22386 6.77614 2 6.5 2H3ZM12.8536 2.14645C12.9015 2.19439 12.9377 2.24964 12.9621 2.30861C12.9861 2.36669 12.9996 2.4303 13 2.497L13 2.5V2.50049V5.5C13 5.77614 12.7761 6 12.5 6C12.2239 6 12 5.77614 12 5.5V3.70711L6.85355 8.85355C6.65829 9.04882 6.34171 9.04882 6.14645 8.85355C5.95118 8.65829 5.95118 8.34171 6.14645 8.14645L11.2929 3H9.5C9.22386 3 9 2.77614 9 2.5C9 2.22386 9.22386 2 9.5 2H12.4999H12.5C12.5678 2 12.6324 2.01349 12.6914 2.03794C12.7504 2.06234 12.8056 2.09851 12.8536 2.14645Z"),_(o,"fill",t[0]),B(r,a)},m(e,t){A(e,r,t),E(r,o)},p(e,[t]){1&t&&_(o,"fill",e[0]),B(r,a=De(i,[2&t&&{width:e[1]},2&t&&{height:e[1]},{viewBox:"0 0 15 15"},{fill:"none"},{xmlns:"http://www.w3.org/2000/svg"},4&t&&e[2]]))},i:e,o:e,d(e){e&&T(r)}}}function on(e,t,r){const o=["color","size"];let i=v(t,o),{color:a="currentColor"}=t,{size:s=15}=t;return e.$$set=e=>{t=n(n({},t),g(e)),r(2,i=v(t,o)),"color"in e&&r(0,a=e.color),"size"in e&&r(1,s=e.size)},[a,s,i]}var an=class extends Ue{constructor(e){super(),We(this,e,on,rn,s,{color:0,size:1})}};function sn(t){let r,o,i=[{width:t[1]},{height:t[1]},{viewBox:"0 0 15 15"},{fill:"none"},{xmlns:"http://www.w3.org/2000/svg"},t[2]],a={};for(let e=0;e<i.length;e+=1)a=n(a,i[e]);return{c(){r=L("svg"),o=L("path"),_(o,"fill-rule","evenodd"),_(o,"clip-rule","evenodd"),_(o,"d","M11.8536 1.14645C11.6583 0.951184 11.3417 0.951184 11.1465 1.14645L3.71455 8.57836C3.62459 8.66832 3.55263 8.77461 3.50251 8.89155L2.04044 12.303C1.9599 12.491 2.00189 12.709 2.14646 12.8536C2.29103 12.9981 2.50905 13.0401 2.69697 12.9596L6.10847 11.4975C6.2254 11.4474 6.3317 11.3754 6.42166 11.2855L13.8536 3.85355C14.0488 3.65829 14.0488 3.34171 13.8536 3.14645L11.8536 1.14645ZM4.42166 9.28547L11.5 2.20711L12.7929 3.5L5.71455 10.5784L4.21924 11.2192L3.78081 10.7808L4.42166 9.28547Z"),_(o,"fill",t[0]),B(r,a)},m(e,t){A(e,r,t),E(r,o)},p(e,[t]){1&t&&_(o,"fill",e[0]),B(r,a=De(i,[2&t&&{width:e[1]},2&t&&{height:e[1]},{viewBox:"0 0 15 15"},{fill:"none"},{xmlns:"http://www.w3.org/2000/svg"},4&t&&e[2]]))},i:e,o:e,d(e){e&&T(r)}}}function ln(e,t,r){const o=["color","size"];let i=v(t,o),{color:a="currentColor"}=t,{size:s=15}=t;return e.$$set=e=>{t=n(n({},t),g(e)),r(2,i=v(t,o)),"color"in e&&r(0,a=e.color),"size"in e&&r(1,s=e.size)},[a,s,i]}var cn=class extends Ue{constructor(e){super(),We(this,e,ln,sn,s,{color:0,size:1})}};function un(t){let r,o,i=[{width:t[1]},{height:t[1]},{viewBox:"0 0 15 15"},{fill:"none"},{xmlns:"http://www.w3.org/2000/svg"},t[2]],a={};for(let e=0;e<i.length;e+=1)a=n(a,i[e]);return{c(){r=L("svg"),o=L("path"),_(o,"fill-rule","evenodd"),_(o,"clip-rule","evenodd"),_(o,"d","M3.94993 2.95002L3.94993 4.49998C3.94993 4.74851 3.74845 4.94998 3.49993 4.94998C3.2514 4.94998 3.04993 4.74851 3.04993 4.49998V2.50004C3.04993 2.45246 3.05731 2.40661 3.07099 2.36357C3.12878 2.18175 3.29897 2.05002 3.49993 2.05002H11.4999C11.6553 2.05002 11.7922 2.12872 11.8731 2.24842C11.9216 2.32024 11.9499 2.40682 11.9499 2.50002L11.9499 2.50004V4.49998C11.9499 4.74851 11.7485 4.94998 11.4999 4.94998C11.2514 4.94998 11.0499 4.74851 11.0499 4.49998V2.95002H8.04993V12.05H9.25428C9.50281 12.05 9.70428 12.2515 9.70428 12.5C9.70428 12.7486 9.50281 12.95 9.25428 12.95H5.75428C5.50575 12.95 5.30428 12.7486 5.30428 12.5C5.30428 12.2515 5.50575 12.05 5.75428 12.05H6.94993V2.95002H3.94993Z"),_(o,"fill",t[0]),B(r,a)},m(e,t){A(e,r,t),E(r,o)},p(e,[t]){1&t&&_(o,"fill",e[0]),B(r,a=De(i,[2&t&&{width:e[1]},2&t&&{height:e[1]},{viewBox:"0 0 15 15"},{fill:"none"},{xmlns:"http://www.w3.org/2000/svg"},4&t&&e[2]]))},i:e,o:e,d(e){e&&T(r)}}}function dn(e,t,r){const o=["color","size"];let i=v(t,o),{color:a="currentColor"}=t,{size:s=15}=t;return e.$$set=e=>{t=n(n({},t),g(e)),r(2,i=v(t,o)),"color"in e&&r(0,a=e.color),"size"in e&&r(1,s=e.size)},[a,s,i]}var pn,fn,mn=class extends Ue{constructor(e){super(),We(this,e,dn,un,s,{color:0,size:1})}};!function(e){e[e.Entering=0]="Entering",e[e.Present=1]="Present",e[e.Exiting=2]="Exiting"}(pn||(pn={})),function(e){e[e.Hide=0]="Hide",e[e.Show=1]="Show"}(fn||(fn={}));const hn=1/60*1e3,gn="undefined"!=typeof performance?()=>performance.now():()=>Date.now(),vn="undefined"!=typeof window?e=>window.requestAnimationFrame(e):e=>setTimeout((()=>e(gn())),hn);let yn=!0,bn=!1,$n=!1;const xn={delta:0,timestamp:0},wn=["read","update","preRender","render","postRender"],Sn=wn.reduce(((e,t)=>(e[t]=function(e){let t=[],n=[],r=0,o=!1,i=!1;const a=new WeakSet,s={schedule:(e,i=!1,s=!1)=>{const l=s&&o,c=l?t:n;return i&&a.add(e),-1===c.indexOf(e)&&(c.push(e),l&&o&&(r=t.length)),e},cancel:e=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1),a.delete(e)},process:l=>{if(o)i=!0;else{if(o=!0,[t,n]=[n,t],n.length=0,r=t.length,r)for(let n=0;n<r;n++){const r=t[n];r(l),a.has(r)&&(s.schedule(r),e())}o=!1,i&&(i=!1,s.process(l))}}};return s}((()=>bn=!0)),e)),{}),Cn=wn.reduce(((e,t)=>{const n=Sn[t];return e[t]=(e,t=!1,r=!1)=>(bn||Tn(),n.schedule(e,t,r)),e}),{}),En=wn.reduce(((e,t)=>(e[t]=Sn[t].cancel,e)),{}),kn=wn.reduce(((e,t)=>(e[t]=()=>Sn[t].process(xn),e)),{}),Mn=e=>Sn[e].process(xn),An=e=>{bn=!1,xn.delta=yn?hn:Math.max(Math.min(e-xn.timestamp,40),1),xn.timestamp=e,$n=!0,wn.forEach(Mn),$n=!1,bn&&(yn=!1,vn(An))},Tn=()=>{bn=!0,yn=!0,$n||vn(An)},Rn=()=>xn;var Pn=function(){return Pn=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Pn.apply(this,arguments)};function Ln(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}function On(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function zn(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}"function"==typeof SuppressedError&&SuppressedError;var Nn=function(){},jn=function(){};const Vn=(e,t,n)=>Math.min(Math.max(n,e),t),Dn=.001,_n=.01,Hn=10,Fn=.05,Bn=1;function In({duration:e=800,bounce:t=.25,velocity:n=0,mass:r=1}){let o,i;Nn(e<=1e3*Hn);let a=1-t;a=Vn(Fn,Bn,a),e=Vn(_n,Hn,e/1e3),a<1?(o=t=>{const r=t*a,o=r*e,i=r-n,s=Un(t,a),l=Math.exp(-o);return Dn-i/s*l},i=t=>{const r=t*a*e,i=r*n+n,s=Math.pow(a,2)*Math.pow(t,2)*e,l=Math.exp(-r),c=Un(Math.pow(t,2),a);return(-o(t)+Dn>0?-1:1)*((i-s)*l)/c}):(o=t=>Math.exp(-t*e)*((t-n)*e+1)-Dn,i=t=>Math.exp(-t*e)*(e*e*(n-t)));const s=function(e,t,n){let r=n;for(let n=1;n<Wn;n++)r-=e(r)/t(r);return r}(o,i,5/e);if(e*=1e3,isNaN(s))return{stiffness:100,damping:10,duration:e};{const t=Math.pow(s,2)*r;return{stiffness:t,damping:2*a*Math.sqrt(r*t),duration:e}}}const Wn=12;function Un(e,t){return e*Math.sqrt(1-t*t)}const Gn=["duration","bounce"],Zn=["stiffness","damping","mass"];function Yn(e,t){return t.some((t=>void 0!==e[t]))}function qn(e){var{from:t=0,to:n=1,restSpeed:r=2,restDelta:o}=e,i=Ln(e,["from","to","restSpeed","restDelta"]);const a={done:!1,value:t};let{stiffness:s,damping:l,mass:c,velocity:u,duration:d,isResolvedFromDuration:p}=function(e){let t=Object.assign({velocity:0,stiffness:100,damping:10,mass:1,isResolvedFromDuration:!1},e);if(!Yn(e,Zn)&&Yn(e,Gn)){const n=In(e);t=Object.assign(Object.assign(Object.assign({},t),n),{velocity:0,mass:1}),t.isResolvedFromDuration=!0}return t}(i),f=Xn,m=Xn;function h(){const e=u?-u/1e3:0,r=n-t,i=l/(2*Math.sqrt(s*c)),a=Math.sqrt(s/c)/1e3;if(void 0===o&&(o=Math.min(Math.abs(n-t)/100,.4)),i<1){const t=Un(a,i);f=o=>{const s=Math.exp(-i*a*o);return n-s*((e+i*a*r)/t*Math.sin(t*o)+r*Math.cos(t*o))},m=n=>{const o=Math.exp(-i*a*n);return i*a*o*(Math.sin(t*n)*(e+i*a*r)/t+r*Math.cos(t*n))-o*(Math.cos(t*n)*(e+i*a*r)-t*r*Math.sin(t*n))}}else if(1===i)f=t=>n-Math.exp(-a*t)*(r+(e+a*r)*t);else{const t=a*Math.sqrt(i*i-1);f=o=>{const s=Math.exp(-i*a*o),l=Math.min(t*o,300);return n-s*((e+i*a*r)*Math.sinh(l)+t*r*Math.cosh(l))/t}}}return h(),{next:e=>{const t=f(e);if(p)a.done=e>=d;else{const i=1e3*m(e),s=Math.abs(i)<=r,l=Math.abs(n-t)<=o;a.done=s&&l}return a.value=a.done?n:t,a},flipTarget:()=>{u=-u,[t,n]=[n,t],h()}}}qn.needsInterpolation=(e,t)=>"string"==typeof e||"string"==typeof t;const Xn=e=>0,Kn=(e,t,n)=>{const r=t-e;return 0===r?1:(n-e)/r},Jn=(e,t,n)=>-n*e+n*t+e,Qn=(e,t)=>n=>Math.max(Math.min(n,t),e),er=e=>e%1?Number(e.toFixed(5)):e,tr=/(-)?([\d]*\.?[\d])+/g,nr=/(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi,rr=/^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;function or(e){return"string"==typeof e}const ir={test:e=>"number"==typeof e,parse:parseFloat,transform:e=>e},ar=Object.assign(Object.assign({},ir),{transform:Qn(0,1)}),sr=Object.assign(Object.assign({},ir),{default:1}),lr=e=>({test:t=>or(t)&&t.endsWith(e)&&1===t.split(" ").length,parse:parseFloat,transform:t=>`${t}${e}`}),cr=lr("deg"),ur=lr("%"),dr=lr("px"),pr=lr("vh"),fr=lr("vw"),mr=Object.assign(Object.assign({},ur),{parse:e=>ur.parse(e)/100,transform:e=>ur.transform(100*e)}),hr=(e,t)=>n=>Boolean(or(n)&&rr.test(n)&&n.startsWith(e)||t&&Object.prototype.hasOwnProperty.call(n,t)),gr=(e,t,n)=>r=>{if(!or(r))return r;const[o,i,a,s]=r.match(tr);return{[e]:parseFloat(o),[t]:parseFloat(i),[n]:parseFloat(a),alpha:void 0!==s?parseFloat(s):1}},vr={test:hr("hsl","hue"),parse:gr("hue","saturation","lightness"),transform:({hue:e,saturation:t,lightness:n,alpha:r=1})=>"hsla("+Math.round(e)+", "+ur.transform(er(t))+", "+ur.transform(er(n))+", "+er(ar.transform(r))+")"},yr=Qn(0,255),br=Object.assign(Object.assign({},ir),{transform:e=>Math.round(yr(e))}),$r={test:hr("rgb","red"),parse:gr("red","green","blue"),transform:({red:e,green:t,blue:n,alpha:r=1})=>"rgba("+br.transform(e)+", "+br.transform(t)+", "+br.transform(n)+", "+er(ar.transform(r))+")"};const xr={test:hr("#"),parse:function(e){let t="",n="",r="",o="";return e.length>5?(t=e.substr(1,2),n=e.substr(3,2),r=e.substr(5,2),o=e.substr(7,2)):(t=e.substr(1,1),n=e.substr(2,1),r=e.substr(3,1),o=e.substr(4,1),t+=t,n+=n,r+=r,o+=o),{red:parseInt(t,16),green:parseInt(n,16),blue:parseInt(r,16),alpha:o?parseInt(o,16)/255:1}},transform:$r.transform},wr={test:e=>$r.test(e)||xr.test(e)||vr.test(e),parse:e=>$r.test(e)?$r.parse(e):vr.test(e)?vr.parse(e):xr.parse(e),transform:e=>or(e)?e:e.hasOwnProperty("red")?$r.transform(e):vr.transform(e)},Sr="${c}",Cr="${n}";function Er(e){"number"==typeof e&&(e=`${e}`);const t=[];let n=0;const r=e.match(nr);r&&(n=r.length,e=e.replace(nr,Sr),t.push(...r.map(wr.parse)));const o=e.match(tr);return o&&(e=e.replace(tr,Cr),t.push(...o.map(ir.parse))),{values:t,numColors:n,tokenised:e}}function kr(e){return Er(e).values}function Mr(e){const{values:t,numColors:n,tokenised:r}=Er(e),o=t.length;return e=>{let t=r;for(let r=0;r<o;r++)t=t.replace(r<n?Sr:Cr,r<n?wr.transform(e[r]):er(e[r]));return t}}const Ar=e=>"number"==typeof e?0:e;const Tr={test:function(e){var t,n,r,o;return isNaN(e)&&or(e)&&(null!==(n=null===(t=e.match(tr))||void 0===t?void 0:t.length)&&void 0!==n?n:0)+(null!==(o=null===(r=e.match(nr))||void 0===r?void 0:r.length)&&void 0!==o?o:0)>0},parse:kr,createTransformer:Mr,getAnimatableNone:function(e){const t=kr(e);return Mr(e)(t.map(Ar))}},Rr=new Set(["brightness","contrast","saturate","opacity"]);function Pr(e){let[t,n]=e.slice(0,-1).split("(");if("drop-shadow"===t)return e;const[r]=n.match(tr)||[];if(!r)return e;const o=n.replace(r,"");let i=Rr.has(t)?1:0;return r!==n&&(i*=100),t+"("+i+o+")"}const Lr=/([a-z-]*)\(.*?\)/g,Or=Object.assign(Object.assign({},Tr),{getAnimatableNone:e=>{const t=e.match(Lr);return t?t.map(Pr).join(" "):e}});function zr(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}function Nr({hue:e,saturation:t,lightness:n,alpha:r}){e/=360,n/=100;let o=0,i=0,a=0;if(t/=100){const r=n<.5?n*(1+t):n+t-n*t,s=2*n-r;o=zr(s,r,e+1/3),i=zr(s,r,e),a=zr(s,r,e-1/3)}else o=i=a=n;return{red:Math.round(255*o),green:Math.round(255*i),blue:Math.round(255*a),alpha:r}}const jr=(e,t,n)=>{const r=e*e,o=t*t;return Math.sqrt(Math.max(0,n*(o-r)+r))},Vr=[xr,$r,vr],Dr=e=>Vr.find((t=>t.test(e))),_r=(e,t)=>{let n=Dr(e),r=Dr(t),o=n.parse(e),i=r.parse(t);n===vr&&(o=Nr(o),n=$r),r===vr&&(i=Nr(i),r=$r);const a=Object.assign({},o);return e=>{for(const t in a)"alpha"!==t&&(a[t]=jr(o[t],i[t],e));return a.alpha=Jn(o.alpha,i.alpha,e),n.transform(a)}},Hr=e=>"number"==typeof e,Fr=(e,t)=>n=>t(e(n)),Br=(...e)=>e.reduce(Fr);function Ir(e,t){return Hr(e)?n=>Jn(e,t,n):wr.test(e)?_r(e,t):Zr(e,t)}const Wr=(e,t)=>{const n=[...e],r=n.length,o=e.map(((e,n)=>Ir(e,t[n])));return e=>{for(let t=0;t<r;t++)n[t]=o[t](e);return n}},Ur=(e,t)=>{const n=Object.assign(Object.assign({},e),t),r={};for(const o in n)void 0!==e[o]&&void 0!==t[o]&&(r[o]=Ir(e[o],t[o]));return e=>{for(const t in r)n[t]=r[t](e);return n}};function Gr(e){const t=Tr.parse(e),n=t.length;let r=0,o=0,i=0;for(let e=0;e<n;e++)r||"number"==typeof t[e]?r++:void 0!==t[e].hue?i++:o++;return{parsed:t,numNumbers:r,numRGB:o,numHSL:i}}const Zr=(e,t)=>{const n=Tr.createTransformer(t),r=Gr(e),o=Gr(t);return r.numHSL===o.numHSL&&r.numRGB===o.numRGB&&r.numNumbers>=o.numNumbers?Br(Wr(r.parsed,o.parsed),n):n=>`${n>0?t:e}`},Yr=(e,t)=>n=>Jn(e,t,n);function qr(e,t,n){const r=[],o=n||("number"==typeof(i=e[0])?Yr:"string"==typeof i?wr.test(i)?_r:Zr:Array.isArray(i)?Wr:"object"==typeof i?Ur:void 0);var i;const a=e.length-1;for(let n=0;n<a;n++){let i=o(e[n],e[n+1]);if(t){const e=Array.isArray(t)?t[n]:t;i=Br(e,i)}r.push(i)}return r}function Xr(e,t,{clamp:n=!0,ease:r,mixer:o}={}){const i=e.length;jn(i===t.length),jn(!r||!Array.isArray(r)||r.length===i-1),e[0]>e[i-1]&&(e=[].concat(e),t=[].concat(t),e.reverse(),t.reverse());const a=qr(t,r,o),s=2===i?function([e,t],[n]){return r=>n(Kn(e,t,r))}(e,a):function(e,t){const n=e.length,r=n-1;return o=>{let i=0,a=!1;if(o<=e[0]?a=!0:o>=e[r]&&(i=r-1,a=!0),!a){let t=1;for(;t<n&&!(e[t]>o||t===r);t++);i=t-1}const s=Kn(e[i],e[i+1],o);return t[i](s)}}(e,a);return n?t=>s(Vn(e[0],e[i-1],t)):s}const Kr=e=>t=>1-e(1-t),Jr=e=>t=>t<=.5?e(2*t)/2:(2-e(2*(1-t)))/2,Qr=e=>t=>t*t*((e+1)*t-e),eo=e=>e,to=(no=2,e=>Math.pow(e,no));var no;const ro=Kr(to),oo=Jr(to),io=e=>1-Math.sin(Math.acos(e)),ao=Kr(io),so=Jr(ao),lo=Qr(1.525),co=Kr(lo),uo=Jr(lo),po=(e=>{const t=Qr(e);return e=>(e*=2)<1?.5*t(e):.5*(2-Math.pow(2,-10*(e-1)))})(1.525),fo=e=>{if(1===e||0===e)return e;const t=e*e;return e<.36363636363636365?7.5625*t:e<.7272727272727273?9.075*t-9.9*e+3.4:e<.9?12.066481994459833*t-19.63545706371191*e+8.898060941828255:10.8*e*e-20.52*e+10.72},mo=Kr(fo);function ho(e,t){return e.map((()=>t||oo)).splice(0,e.length-1)}function go({from:e=0,to:t=1,ease:n,offset:r,duration:o=300}){const i={done:!1,value:e},a=Array.isArray(t)?t:[e,t],s=function(e,t){return e.map((e=>e*t))}(r&&r.length===a.length?r:function(e){const t=e.length;return e.map(((e,n)=>0!==n?n/(t-1):0))}(a),o);function l(){return Xr(s,a,{ease:Array.isArray(n)?n:ho(a,n)})}let c=l();return{next:e=>(i.value=c(e),i.done=e>=o,i),flipTarget:()=>{a.reverse(),c=l()}}}const vo={keyframes:go,spring:qn,decay:function({velocity:e=0,from:t=0,power:n=.8,timeConstant:r=350,restDelta:o=.5,modifyTarget:i}){const a={done:!1,value:t};let s=n*e;const l=t+s,c=void 0===i?l:i(l);return c!==l&&(s=c-t),{next:e=>{const t=-s*Math.exp(-e/r);return a.done=!(t>o||t<-o),a.value=a.done?c:c+t,a},flipTarget:()=>{}}}};function yo(e,t,n=0){return e-t-n}const bo=e=>{const t=({delta:t})=>e(t);return{start:()=>Cn.update(t,!0),stop:()=>En.update(t)}};function $o(e){var t,n,{from:r,autoplay:o=!0,driver:i=bo,elapsed:a=0,repeat:s=0,repeatType:l="loop",repeatDelay:c=0,onPlay:u,onStop:d,onComplete:p,onRepeat:f,onUpdate:m}=e,h=Ln(e,["from","autoplay","driver","elapsed","repeat","repeatType","repeatDelay","onPlay","onStop","onComplete","onRepeat","onUpdate"]);let g,v,y,{to:b}=h,$=0,x=h.duration,w=!1,S=!0;const C=function(e){if(Array.isArray(e.to))return go;if(vo[e.type])return vo[e.type];const t=new Set(Object.keys(e));return t.has("ease")||t.has("duration")&&!t.has("dampingRatio")?go:t.has("dampingRatio")||t.has("stiffness")||t.has("mass")||t.has("damping")||t.has("restSpeed")||t.has("restDelta")?qn:go}(h);(null===(n=(t=C).needsInterpolation)||void 0===n?void 0:n.call(t,r,b))&&(y=Xr([0,100],[r,b],{clamp:!1}),r=0,b=100);const E=C(Object.assign(Object.assign({},h),{from:r,to:b}));function k(){$++,"reverse"===l?(S=$%2==0,a=function(e,t,n=0,r=!0){return r?yo(t+-e,t,n):t-(e-t)+n}(a,x,c,S)):(a=yo(a,x,c),"mirror"===l&&E.flipTarget()),w=!1,f&&f()}function M(e){if(S||(e=-e),a+=e,!w){const e=E.next(Math.max(0,a));v=e.value,y&&(v=y(v)),w=S?e.done:a<=0}null==m||m(v),w&&(0===$&&(null!=x||(x=a)),$<s?function(e,t,n,r){return r?e>=t+n:e<=-n}(a,x,c,S)&&k():(g.stop(),p&&p()))}return o&&(null==u||u(),g=i(M),g.start()),{stop:()=>{null==d||d(),g.stop()}}}function xo(e,t){return t?e*(1e3/t):0}const wo=e=>e.hasOwnProperty("x")&&e.hasOwnProperty("y"),So=e=>wo(e)&&e.hasOwnProperty("z"),Co=(e,t)=>Math.abs(e-t);function Eo(e,t){if(Hr(e)&&Hr(t))return Co(e,t);if(wo(e)&&wo(t)){const n=Co(e.x,t.x),r=Co(e.y,t.y),o=So(e)&&So(t)?Co(e.z,t.z):0;return Math.sqrt(Math.pow(n,2)+Math.pow(r,2)+Math.pow(o,2))}}const ko=(e,t)=>1-3*t+3*e,Mo=(e,t)=>3*t-6*e,Ao=e=>3*e,To=(e,t,n)=>((ko(t,n)*e+Mo(t,n))*e+Ao(t))*e,Ro=(e,t,n)=>3*ko(t,n)*e*e+2*Mo(t,n)*e+Ao(t),Po=1e-7,Lo=10;const Oo=8;const zo=.1;function No(e,t,n,r){if(e===t&&n===r)return eo;const o=new Float32Array(11);for(let t=0;t<11;++t)o[t]=To(t*zo,e,n);function i(t){let r=0,i=1;for(;10!==i&&o[i]<=t;++i)r+=zo;--i;const a=r+(t-o[i])/(o[i+1]-o[i])*zo,s=Ro(a,e,n);return s>=.001?function(e,t,n,r){for(let o=0;o<Oo;++o){const o=Ro(t,n,r);if(0===o)return t;t-=(To(t,n,r)-e)/o}return t}(t,a,e,n):0===s?a:function(e,t,n,r,o){let i,a,s=0;do{a=t+(n-t)/2,i=To(a,r,o)-e,i>0?n=a:t=a}while(Math.abs(i)>Po&&++s<Lo);return a}(t,r,r+zo,e,n)}return e=>0===e||1===e?e:To(i(e),t,r)}function jo(e,t){-1===e.indexOf(t)&&e.push(t)}function Vo(e,t){var n=e.indexOf(t);n>-1&&e.splice(n,1)}var Do=function(){function e(){this.subscriptions=[]}return e.prototype.add=function(e){var t=this;return jo(this.subscriptions,e),function(){return Vo(t.subscriptions,e)}},e.prototype.notify=function(e,t,n){var r=this.subscriptions.length;if(r)if(1===r)this.subscriptions[0](e,t,n);else for(var o=0;o<r;o++){var i=this.subscriptions[o];i&&i(e,t,n)}},e.prototype.getSize=function(){return this.subscriptions.length},e.prototype.clear=function(){this.subscriptions.length=0},e}(),_o=function(){function e(e,t){var n,r=this;this.timeDelta=0,this.lastUpdated=0,this.updateSubscribers=new Do,this.velocityUpdateSubscribers=new Do,this.renderSubscribers=new Do,this.canTrackVelocity=!1,this.updateAndNotify=function(e,t){void 0===t&&(t=!0),r.prev=r.current,r.current=e;var n=Rn(),o=n.delta,i=n.timestamp;r.lastUpdated!==i&&(r.timeDelta=o,r.lastUpdated=i,Cn.postRender(r.scheduleVelocityCheck)),r.prev!==r.current&&r.updateSubscribers.notify(r.current),r.velocityUpdateSubscribers.getSize()&&r.velocityUpdateSubscribers.notify(r.getVelocity()),t&&r.renderSubscribers.notify(r.current)},this.scheduleVelocityCheck=function(){return Cn.postRender(r.velocityCheck)},this.velocityCheck=function(e){e.timestamp!==r.lastUpdated&&(r.prev=r.current,r.velocityUpdateSubscribers.notify(r.getVelocity()))},this.hasAnimated=!1,this.prev=this.current=e,this.canTrackVelocity=(n=this.current,!isNaN(parseFloat(n))),this.onSubscription=()=>{},this.onUnsubscription=()=>{},t&&(this.onSubscription=()=>{if(this.updateSubscribers.getSize()+this.velocityUpdateSubscribers.getSize()+this.renderSubscribers.getSize()===0){const e=t();this.onUnsubscription=()=>{},e&&(this.onUnsubscription=()=>{this.updateSubscribers.getSize()+this.velocityUpdateSubscribers.getSize()+this.renderSubscribers.getSize()===0&&e()})}})}return e.prototype.onChange=function(e){this.onSubscription();const t=this.updateSubscribers.add(e);return()=>{t(),this.onUnsubscription()}},e.prototype.subscribe=function(e){return this.onChange(e)},e.prototype.clearListeners=function(){this.updateSubscribers.clear(),this.onUnsubscription()},e.prototype.onRenderRequest=function(e){this.onSubscription(),e(this.get());const t=this.renderSubscribers.add(e);return()=>{t(),this.onUnsubscription()}},e.prototype.attach=function(e){this.passiveEffect=e},e.prototype.set=function(e,t){void 0===t&&(t=!0),t&&this.passiveEffect?this.passiveEffect(e,this.updateAndNotify):this.updateAndNotify(e,t)},e.prototype.update=function(e){this.set(e(this.get()))},e.prototype.get=function(){this.onSubscription();const e=this.current;return this.onUnsubscription(),e},e.prototype.getPrevious=function(){return this.prev},e.prototype.getVelocity=function(){this.onSubscription();const e=this.canTrackVelocity?xo(parseFloat(this.current)-parseFloat(this.prev),this.timeDelta):0;return this.onUnsubscription(),e},e.prototype.start=function(e){var t=this;return this.stop(),new Promise((function(n){t.hasAnimated=!0,t.stopAnimation=e(n)})).then((function(){return t.clearAnimation()}))},e.prototype.stop=function(){this.stopAnimation&&this.stopAnimation(),this.clearAnimation()},e.prototype.isAnimating=function(){return!!this.stopAnimation},e.prototype.clearAnimation=function(){this.stopAnimation=null},e.prototype.destroy=function(){this.updateSubscribers.clear(),this.renderSubscribers.clear(),this.stop(),this.onUnsubscription()},e}();function Ho(e,t){return new _o(e,t)}const Fo=[];function Bo(e,t){return{subscribe:Io(e,t).subscribe}}function Io(t,n=e){let r;const o=new Set;function i(e){if(s(t,e)&&(t=e,r)){const e=!Fo.length;for(const e of o)e[1](),Fo.push(e,t);if(e){for(let e=0;e<Fo.length;e+=2)Fo[e][0](Fo[e+1]);Fo.length=0}}}function a(e){i(e(t))}return{set:i,update:a,subscribe:function(s,l=e){const c=[s,l];return o.add(c),1===o.size&&(r=n(i,a)||e),s(t),()=>{o.delete(c),0===o.size&&r&&(r(),r=null)}}}}function Wo(t,n,r){const o=!Array.isArray(t),s=o?[t]:t;if(!s.every(Boolean))throw new Error("derived() expects stores as input, got a falsy value");const c=n.length<2;return Bo(r,((t,r)=>{let u=!1;const d=[];let p=0,f=e;const m=()=>{if(p)return;f();const i=n(o?d[0]:d,t,r);c?t(i):f=a(i)?i:e},h=s.map(((e,t)=>l(e,(e=>{d[t]=e,p&=~(1<<t),u&&m()}),(()=>{p|=1<<t}))));return u=!0,m(),function(){i(h),f(),u=!1}}))}const Uo=(e,t)=>{if(!t||!window)return;let n=t;for(;n=n.parentNode;)if(n.motionDomContext&&n.motionDomContext.has(e))return n.motionDomContext.get(e)},Go=(e,t,n)=>{t&&window&&(t.motionDomContext||(t.motionDomContext=new Map),t.motionDomContext.set(e,n))};var Zo=e=>Uo("MotionConfig",e)||Io({transformPagePoint:function(e){return e},isStatic:!1});function Yo(e){let t;const n=e[2].default,r=d(n,e,e[1],null);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,[o]){r&&r.p&&(!t||2&o)&&m(r,n,e,e[1],t?f(n,e[1],o,null):h(e[1]),null)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}const qo=e=>Uo("ScaleCorrection",e)||Io([]),Xo=()=>Io([]);function Ko(e,t,n){let{$$slots:r={},$$scope:o}=t,{isCustom:i}=t;return(e=>{const t=se(qo)||qo(e),n=qo();ae(qo,n),Go("ScaleCorrection",e,n),ae(Xo,t)})(i),e.$$set=e=>{"isCustom"in e&&n(0,i=e.isCustom),"$$scope"in e&&n(1,o=e.$$scope)},[i,o,r]}var Jo=class extends Ue{constructor(e){super(),We(this,e,Ko,Yo,s,{isCustom:0})}},Qo=function(e){return 1e3*e},ei={linear:eo,easeIn:to,easeInOut:oo,easeOut:ro,circIn:io,circInOut:so,circOut:ao,backIn:lo,backInOut:uo,backOut:co,anticipate:po,bounceIn:mo,bounceInOut:e=>e<.5?.5*(1-fo(1-2*e)):.5*fo(2*e-1)+.5,bounceOut:fo},ti=function(e){if(Array.isArray(e)){var t=On(e,4);return No(t[0],t[1],t[2],t[3])}return"string"==typeof e?ei[e]:e},ni=function(e){return Array.isArray(e)&&"number"!=typeof e[0]},ri=function(e,t){return"zIndex"!==e&&(!("number"!=typeof t&&!Array.isArray(t))||!("string"!=typeof t||!Tr.test(t)||t.startsWith("url(")))},oi=function(e){return Array.isArray(e)},ii=function(){return{type:"spring",stiffness:500,damping:25,restDelta:.5,restSpeed:10}},ai=function(e){return{type:"spring",stiffness:550,damping:0===e?2*Math.sqrt(550):30,restDelta:.01,restSpeed:10}},si=function(){return{type:"keyframes",ease:"linear",duration:.3}},li=function(e){return{type:"keyframes",duration:.8,values:e}},ci={x:ii,y:ii,z:ii,rotate:ii,rotateX:ii,rotateY:ii,rotateZ:ii,scaleX:ai,scaleY:ai,scale:ai,opacity:si,backgroundColor:si,color:si,default:ai},ui=function(e,t){var n;return n=oi(t)?li:ci[e]||ci.default,Pn({to:t},n(t))},di=Pn(Pn({},ir),{transform:Math.round}),pi={borderWidth:dr,borderTopWidth:dr,borderRightWidth:dr,borderBottomWidth:dr,borderLeftWidth:dr,borderRadius:dr,radius:dr,borderTopLeftRadius:dr,borderTopRightRadius:dr,borderBottomRightRadius:dr,borderBottomLeftRadius:dr,width:dr,maxWidth:dr,height:dr,maxHeight:dr,size:dr,top:dr,right:dr,bottom:dr,left:dr,padding:dr,paddingTop:dr,paddingRight:dr,paddingBottom:dr,paddingLeft:dr,margin:dr,marginTop:dr,marginRight:dr,marginBottom:dr,marginLeft:dr,rotate:cr,rotateX:cr,rotateY:cr,rotateZ:cr,scale:sr,scaleX:sr,scaleY:sr,scaleZ:sr,skew:cr,skewX:cr,skewY:cr,distance:dr,translateX:dr,translateY:dr,translateZ:dr,x:dr,y:dr,z:dr,perspective:dr,transformPerspective:dr,opacity:ar,originX:mr,originY:mr,originZ:dr,zIndex:di,fillOpacity:ar,strokeOpacity:ar,numOctaves:di},fi=Pn(Pn({},pi),{color:wr,backgroundColor:wr,outlineColor:wr,fill:wr,stroke:wr,borderColor:wr,borderTopColor:wr,borderRightColor:wr,borderBottomColor:wr,borderLeftColor:wr,filter:Or,WebkitFilter:Or}),mi=function(e){return fi[e]};function hi(e,t){var n,r=mi(e);return r!==Or&&(r=Tr),null===(n=r.getAnimatableNone)||void 0===n?void 0:n.call(r,t)}function gi(e,t,n){var r;return Array.isArray(t.to)&&(null!==(r=e.duration)&&void 0!==r||(e.duration=.8)),function(e){Array.isArray(e.to)&&null===e.to[0]&&(e.to=zn([],On(e.to)),e.to[0]=e.from)}(t),function(e){e.when,e.delay,e.delayChildren,e.staggerChildren,e.staggerDirection,e.repeat,e.repeatType,e.repeatDelay,e.from;var t=Ln(e,["when","delay","delayChildren","staggerChildren","staggerDirection","repeat","repeatType","repeatDelay","from"]);return!!Object.keys(t).length}(e)||(e=Pn(Pn({},e),ui(n,t.to))),Pn(Pn({},t),function(e){var t=e.ease,n=e.times,r=e.yoyo,o=e.flip,i=e.loop,a=Ln(e,["ease","times","yoyo","flip","loop"]),s=Pn({},a);return n&&(s.offset=n),a.duration&&(s.duration=Qo(a.duration)),a.repeatDelay&&(s.repeatDelay=Qo(a.repeatDelay)),t&&(s.ease=ni(t)?t.map(ti):ti(t)),"tween"===a.type&&(s.type="keyframes"),(r||i||o)&&(r?s.repeatType="reverse":i?s.repeatType="loop":o&&(s.repeatType="mirror"),s.repeat=i||r||o||a.repeat),"spring"!==a.type&&(s.type="keyframes"),s}(e))}function vi(e,t,n,r,o){var i,a=$i(r,e),s=null!==(i=a.from)&&void 0!==i?i:t.get(),l=ri(e,n);return"none"===s&&l&&"string"==typeof n?s=hi(e,n):yi(s)&&"string"==typeof n?s=bi(n):!Array.isArray(n)&&yi(n)&&"string"==typeof s&&(n=bi(s)),ri(e,s)&&l&&!1!==a.type?function(){var r={from:s,to:n,velocity:t.getVelocity(),onComplete:o,onUpdate:function(e){return t.set(e)}};return"inertia"===a.type||"decay"===a.type?function({from:e=0,velocity:t=0,min:n,max:r,power:o=.8,timeConstant:i=750,bounceStiffness:a=500,bounceDamping:s=10,restDelta:l=1,modifyTarget:c,driver:u,onUpdate:d,onComplete:p,onStop:f}){let m;function h(e){return void 0!==n&&e<n||void 0!==r&&e>r}function g(e){return void 0===n?r:void 0===r||Math.abs(n-e)<Math.abs(r-e)?n:r}function v(e){null==m||m.stop(),m=$o(Object.assign(Object.assign({},e),{driver:u,onUpdate:t=>{var n;null==d||d(t),null===(n=e.onUpdate)||void 0===n||n.call(e,t)},onComplete:p,onStop:f}))}function y(e){v(Object.assign({type:"spring",stiffness:a,damping:s,restDelta:l},e))}if(h(e))y({from:e,velocity:t,to:g(e)});else{let r=o*t+e;void 0!==c&&(r=c(r));const a=g(r),s=a===n?-1:1;let u,d;const p=e=>{u=d,d=e,t=xo(e-u,Rn().delta),(1===s&&e>a||-1===s&&e<a)&&y({from:e,to:a,velocity:t})};v({type:"decay",from:e,velocity:t,timeConstant:i,power:o,restDelta:l,modifyTarget:c,onUpdate:h(r)?p:void 0})}return{stop:()=>null==m?void 0:m.stop()}}(Pn(Pn({},r),a)):$o(Pn(Pn({},gi(a,r,e)),{onUpdate:function(e){var t;r.onUpdate(e),null===(t=a.onUpdate)||void 0===t||t.call(a,e)},onComplete:function(){var e;r.onComplete(),null===(e=a.onComplete)||void 0===e||e.call(a)}}))}:function(){var e;return t.set(n),o(),null===(e=null==a?void 0:a.onComplete)||void 0===e||e.call(a),{stop:function(){}}}}function yi(e){return 0===e||"string"==typeof e&&0===parseFloat(e)&&-1===e.indexOf(" ")}function bi(e){return"number"==typeof e?0:hi("",e)}function $i(e,t){return e[t]||e.default||e}function xi(e,t,n,r){return void 0===r&&(r={}),t.start((function(o){var i,a,s=vi(e,t,n,r,o),l=function(e,t){var n;return null!==(n=($i(e,t)||{}).delay)&&void 0!==n?n:0}(r,e),c=function(){return a=s()};return l?i=setTimeout(c,Qo(l)):c(),function(){clearTimeout(i),null==a||a.stop()}}))}var wi=function(e){return Boolean(e&&"object"==typeof e&&e.mix&&e.toValue)},Si=function(e){return oi(e)?e[e.length-1]||0:e},Ci=function(e){return function(t){return t.test(e)}},Ei=[ir,dr,ur,cr,fr,pr,{test:function(e){return"auto"===e},parse:function(e){return e}}],ki=function(e){return Ei.find(Ci(e))},Mi=zn(zn([],On(Ei)),[wr,Tr]),Ai=function(e){return Mi.find(Ci(e))};function Ti(e){return Array.isArray(e)}function Ri(e){return"string"==typeof e||Ti(e)}function Pi(e,t,n,r,o){var i;return void 0===r&&(r={}),void 0===o&&(o={}),"string"==typeof t&&(t=null===(i=e.variants)||void 0===i?void 0:i[t]),"function"==typeof t?t(null!=n?n:e.custom,r,o):t}function Li(e,t,n){var r=e.getProps();return Pi(r,t,null!=n?n:r.custom,function(e){var t={};return e.forEachValue((function(e,n){return t[n]=e.get()})),t}(e),function(e){var t={};return e.forEachValue((function(e,n){return t[n]=e.getVelocity()})),t}(e))}function Oi(e){var t;return"function"==typeof(null===(t=e.animate)||void 0===t?void 0:t.start)||Ri(e.initial)||Ri(e.animate)||Ri(e.whileHover)||Ri(e.whileDrag)||Ri(e.whileTap)||Ri(e.whileFocus)||Ri(e.exit)}function zi(e){return Boolean(Oi(e)||e.variants)}function Ni(e,t,n){e.hasValue(t)?e.getValue(t).set(n):e.addValue(t,Ho(n))}function ji(e,t){var n=Li(e,t),r=n?e.makeTargetAnimatable(n,!1):{},o=r.transitionEnd,i=void 0===o?{}:o;r.transition;var a=Ln(r,["transitionEnd","transition"]);for(var s in a=Pn(Pn({},a),i)){Ni(e,s,Si(a[s]))}}function Vi(e,t){zn([],On(t)).reverse().forEach((function(n){var r,o=e.getVariant(n);o&&ji(e,o),null===(r=e.variantChildren)||void 0===r||r.forEach((function(e){Vi(e,t)}))}))}function Di(e,t){if(t)return(t[e]||t.default||t).from}function _i(e,t,n){var r;if(void 0===n&&(n={}),e.notifyAnimationStart(),Array.isArray(t)){var o=t.map((function(t){return Hi(e,t,n)}));r=Promise.all(o)}else if("string"==typeof t)r=Hi(e,t,n);else{var i="function"==typeof t?Li(e,t,n.custom):t;r=Fi(e,i,n)}return r.then((function(){return e.notifyAnimationComplete(t)}))}function Hi(e,t,n){var r;void 0===n&&(n={});var o=Li(e,t,n.custom),i=(o||{}).transition,a=void 0===i?e.getDefaultTransition()||{}:i;n.transitionOverride&&(a=n.transitionOverride);var s=o?function(){return Fi(e,o,n)}:function(){return Promise.resolve()},l=(null===(r=e.variantChildren)||void 0===r?void 0:r.size)?function(r){void 0===r&&(r=0);var o=a.delayChildren,i=void 0===o?0:o,s=a.staggerChildren,l=a.staggerDirection;return function(e,t,n,r,o,i){void 0===n&&(n=0);void 0===r&&(r=0);void 0===o&&(o=1);var a=[],s=(e.variantChildren.size-1)*r,l=1===o?function(e){return void 0===e&&(e=0),e*r}:function(e){return void 0===e&&(e=0),s-e*r};return Array.from(e.variantChildren).sort(Bi).forEach((function(e,r){a.push(Hi(e,t,Pn(Pn({},i),{delay:n+l(r)})).then((function(){return e.notifyAnimationComplete(t)})))})),Promise.all(a)}(e,t,i+r,s,l,n)}:function(){return Promise.resolve()},c=a.when;if(c){var u=On("beforeChildren"===c?[s,l]:[l,s],2),d=u[0],p=u[1];return d().then(p)}return Promise.all([s(),l(n.delay)])}function Fi(e,t,n){var r,o=void 0===n?{}:n,i=o.delay,a=void 0===i?0:i,s=o.transitionOverride,l=o.type,c=e.makeTargetAnimatable(t),u=c.transition,d=void 0===u?e.getDefaultTransition():u,p=c.transitionEnd,f=Ln(c,["transition","transitionEnd"]);s&&(d=s);var m=[],h=l&&(null===(r=e.animationState)||void 0===r?void 0:r.getState()[l]);for(var g in f){var v=e.getValue(g),y=f[g];if(!(!v||void 0===y||h&&Ii(h,g))){var b=xi(g,v,y,Pn({delay:a},d));m.push(b)}}return Promise.all(m).then((function(){p&&ji(e,p)}))}function Bi(e,t){return e.sortNodePosition(t)}function Ii(e,t){var n=e.protectedKeys,r=e.needsAnimating,o=n.hasOwnProperty(t)&&!0!==r[t];return r[t]=!1,o}function Wi(e){var t,n=!1,r=[],o=new Set,i={subscribe:function(n){return 0===o.size&&(t=e?.()),o.add(n),function(){o.delete(n),0===o.size&&t?.()}},start:function(e,t){if(n){var i=[];return o.forEach((function(n){i.push(_i(n,e,{transitionOverride:t}))})),Promise.all(i)}return new Promise((function(n){r.push({animation:[e,t],resolve:n})}))},set:function(e){return o.forEach((function(t){!function(e,t){Array.isArray(t)?Vi(e,t):"string"==typeof t?Vi(e,[t]):ji(e,t)}(t,e)}))},stop:function(){o.forEach((function(e){!function(e){e.forEachValue((function(e){return e.stop()}))}(e)}))},mount:function(){return n=!0,r.forEach((function(e){var t=e.animation,n=e.resolve;i.start.apply(i,zn([],On(t))).then(n)})),function(){n=!1,i.stop()}}};return i}var Ui={};function Gi(e){return[e("x"),e("y")]}function Zi(e){return e}function Yi(e){var t=e.top;return{x:{min:e.left,max:e.right},y:{min:t,max:e.bottom}}}var qi={translate:0,scale:1,origin:0,originPoint:0};function Xi(){return{x:Pn({},qi),y:Pn({},qi)}}function Ki(e){var t=e.getProps(),n=t.drag,r=t._dragX;return n&&!r}function Ji(e,t){e.min=t.min,e.max=t.max}function Qi(e,t,n){return n+t*(e-n)}function ea(e,t,n,r,o){return void 0!==o&&(e=Qi(e,o,r)),Qi(e,n,r)+t}function ta(e,t,n,r,o){void 0===t&&(t=0),void 0===n&&(n=1),e.min=ea(e.min,t,n,r,o),e.max=ea(e.max,t,n,r,o)}function na(e,t){var n=t.x,r=t.y;ta(e.x,n.translate,n.scale,n.originPoint),ta(e.y,r.translate,r.scale,r.originPoint)}function ra(e,t,n,r){var o=On(r,3),i=o[0],a=o[1],s=o[2];e.min=t.min,e.max=t.max;var l=void 0!==n[s]?n[s]:.5,c=Jn(t.min,t.max,l);ta(e,n[i],n[a],c,n.scale)}var oa=["x","scaleX","originX"],ia=["y","scaleY","originY"];function aa(e,t,n){ra(e.x,t.x,n,oa),ra(e.y,t.y,n,ia)}function sa(e,t,n,r,o){return e=Qi(e-=t,1/n,r),void 0!==o&&(e=Qi(e,1/o,r)),e}function la(e,t,n){var r=On(n,3),o=r[0],i=r[1],a=r[2];!function(e,t,n,r,o){void 0===t&&(t=0),void 0===n&&(n=1),void 0===r&&(r=.5);var i=Jn(e.min,e.max,r)-t;e.min=sa(e.min,t,n,i,o),e.max=sa(e.max,t,n,i,o)}(e,t[o],t[i],t[a],t.scale)}function ca(e,t){la(e.x,t,oa),la(e.y,t,ia)}function ua(e,t,n){return void 0===t&&(t=0),void 0===n&&(n=.01),Eo(e,t)<n}function da(e){return e.max-e.min}function pa(e,t){var n=.5,r=da(e),o=da(t);return o>r?n=Kn(t.min,t.max-r,e.min):r>o&&(n=Kn(e.min,e.max-o,t.min)),Vn(0,1,n)}function fa(e,t,n,r){void 0===r&&(r=.5),e.origin=r,e.originPoint=Jn(t.min,t.max,e.origin),e.scale=da(n)/da(t),ua(e.scale,1,1e-4)&&(e.scale=1),e.translate=Jn(n.min,n.max,e.origin)-e.originPoint,ua(e.translate)&&(e.translate=0)}function ma(e,t,n,r){fa(e.x,t.x,n.x,ha(r.originX)),fa(e.y,t.y,n.y,ha(r.originY))}function ha(e){return"number"==typeof e?e:.5}function ga(e,t,n){e.min=n.min+t.min,e.max=e.min+da(t)}var va=function(e){return null!==e&&"object"==typeof e&&e.getVelocity};function ya(){return{isHydrated:!1,layout:{x:{min:0,max:1},y:{min:0,max:1}},layoutCorrected:{x:{min:0,max:1},y:{min:0,max:1}},treeScale:{x:1,y:1},delta:Xi(),deltaFinal:Xi(),deltaTransform:""}}var ba=ya();function $a(e,t,n){var r=e.x,o=e.y,i="translate3d("+r.translate/t.x+"px, "+o.translate/t.y+"px, 0) ";if(n){var a=n.rotate,s=n.rotateX,l=n.rotateY;a&&(i+="rotate("+a+") "),s&&(i+="rotateX("+s+") "),l&&(i+="rotateY("+l+") ")}return i+="scale("+r.scale+", "+o.scale+")",n||i!==Sa?i:""}function xa(e){var t=e.deltaFinal;return 100*t.x.origin+"% "+100*t.y.origin+"% 0"}var wa,Sa=$a(ba.delta,ba.treeScale,{x:1,y:1}),Ca=function(e){return"object"==typeof e&&"function"==typeof e.start};function Ea(e,t){if(!Array.isArray(t))return!1;var n=t.length;if(n!==e.length)return!1;for(var r=0;r<n;r++)if(t[r]!==e[r])return!1;return!0}!function(e){e.Animate="animate",e.Hover="whileHover",e.Tap="whileTap",e.Drag="whileDrag",e.Focus="whileFocus",e.Exit="exit"}(wa||(wa={}));var ka=[wa.Animate,wa.Hover,wa.Tap,wa.Drag,wa.Focus,wa.Exit],Ma=zn([],On(ka)).reverse(),Aa=ka.length;function Ta(e){var t,n=function(e){return function(t){return Promise.all(t.map((function(t){var n=t.animation,r=t.options;return _i(e,n,r)})))}}(e),r=((t={})[wa.Animate]=Ra(!0),t[wa.Hover]=Ra(),t[wa.Tap]=Ra(),t[wa.Drag]=Ra(),t[wa.Focus]=Ra(),t[wa.Exit]=Ra(),t),o={},i=!0,a=function(t,n){var r=Li(e,n);if(r){r.transition;var o=r.transitionEnd,i=Ln(r,["transition","transitionEnd"]);t=Pn(Pn(Pn({},t),i),o)}return t};function s(t,s){for(var l,c=e.getProps(),u=e.getVariantContext(!0)||{},d=[],p=new Set,f={},m=1/0,h=function(n){var o=Ma[n],h=r[o],g=null!==(l=c[o])&&void 0!==l?l:u[o],v=Ri(g),y=o===s?h.isActive:null;!1===y&&(m=n);var b=g===u[o]&&g!==c[o]&&v;if(b&&i&&e.manuallyAnimateOnMount&&(b=!1),h.protectedKeys=Pn({},f),!h.isActive&&null===y||!g&&!h.prevProp||Ca(g)||"boolean"==typeof g)return"continue";var $=function(e,t){if("string"==typeof t)return t!==e;if(Ti(t))return!Ea(t,e);return!1}(h.prevProp,g)||o===s&&h.isActive&&!b&&v||n>m&&v,x=Array.isArray(g)?g:[g],w=x.reduce(a,{});!1===y&&(w={});var S=h.prevResolvedValues,C=void 0===S?{}:S,E=Pn(Pn({},C),w),k=function(e){$=!0,p.delete(e),h.needsAnimating[e]=!0};for(var M in E){var A=w[M],T=C[M];f.hasOwnProperty(M)||(A!==T?oi(A)&&oi(T)?Ea(A,T)?h.protectedKeys[M]=!0:k(M):void 0!==A?k(M):p.add(M):void 0!==A&&p.has(M)?k(M):h.protectedKeys[M]=!0)}h.prevProp=g,h.prevResolvedValues=w,h.isActive&&(f=Pn(Pn({},f),w)),i&&e.blockInitialAnimation&&($=!1),$&&!b&&d.push.apply(d,zn([],On(x.map((function(e){return{animation:e,options:Pn({type:o},t)}})))))},g=0;g<Aa;g++)h(g);if(o=Pn({},f),p.size){var v={};p.forEach((function(t){var n=e.getBaseTarget(t);void 0!==n&&(v[t]=n)})),d.push({animation:v})}var y=Boolean(d.length);return i&&!1===c.initial&&!e.manuallyAnimateOnMount&&(y=!1),i=!1,y?n(d):Promise.resolve()}return{isAnimated:function(e){return void 0!==o[e]},animateChanges:s,setActive:function(t,n,o){var i;return r[t].isActive===n?Promise.resolve():(null===(i=e.variantChildren)||void 0===i||i.forEach((function(e){var r;return null===(r=e.animationState)||void 0===r?void 0:r.setActive(t,n)})),r[t].isActive=n,s(o,t))},setAnimateFunction:function(t){n=t(e)},getState:function(){return r}}}function Ra(e){return void 0===e&&(e=!1),{isActive:e,protectedKeys:{},needsAnimating:{},prevResolvedValues:{}}}var Pa=["LayoutMeasure","BeforeLayoutMeasure","LayoutUpdate","ViewportBoxUpdate","Update","Render","AnimationComplete","LayoutAnimationComplete","AnimationStart","SetAxisTarget","Unmount"];function La(e,t,n,r){var o,i,a=e.delta,s=e.layout,l=e.layoutCorrected,c=e.treeScale,u=t.target;i=s,Ji((o=l).x,i.x),Ji(o.y,i.y),function(e,t,n){var r=n.length;if(r){var o,i;t.x=t.y=1;for(var a=0;a<r;a++)i=(o=n[a]).getLayoutState().delta,t.x*=i.x.scale,t.y*=i.y.scale,na(e,i),Ki(o)&&aa(e,e,o.getLatestValues())}}(l,c,n),ma(a,l,u,r)}var Oa=function(e,t){return e.depth-t.depth},za=function(){function e(){this.children=[],this.isDirty=!1}return e.prototype.add=function(e){jo(this.children,e),this.isDirty=!0},e.prototype.remove=function(e){Vo(this.children,e),this.isDirty=!0},e.prototype.forEach=function(e){this.isDirty&&this.children.sort(Oa);for(var t=this.children.length,n=0;n<t;n++)e(this.children[n])},e}();function Na(e,t){return{min:t.min-e.min,max:t.max-e.min}}function ja(e,t){return{x:Na(e.x,t.x),y:Na(e.y,t.y)}}var Va=function(e){var t=e.treeType,n=void 0===t?"":t,r=e.build,o=e.getBaseTarget,i=e.makeTargetAnimatable,a=e.measureViewportBox,s=e.render,l=e.readValueFromInstance,c=e.resetTransform,u=e.restoreTransform,d=e.removeValueFromRenderState,p=e.sortNodePosition,f=e.scrapeMotionValuesFromProps;return function(e,t){var m=e.parent,h=e.props,g=e.presenceId,v=e.blockInitialAnimation,y=e.visualState;void 0===t&&(t={});var b,$,x,w,S,C,E=y.latestValues,k=y.renderState,M=function(){var e=Pa.map((function(){return new Do})),t={},n={clearAllListeners:function(){return e.forEach((function(e){return e.clear()}))},updatePropListeners:function(e){return Pa.forEach((function(r){var o;null===(o=t[r])||void 0===o||o.call(t);var i="on"+r,a=e[i];a&&(t[r]=n[i](a))}))}};return e.forEach((function(e,t){n["on"+Pa[t]]=function(t){return e.add(t)},n["notify"+Pa[t]]=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.notify.apply(e,zn([],On(t)))}})),n}(),A={isEnabled:!1,isTargetLocked:!1,target:{x:{min:0,max:1},y:{min:0,max:1}},targetFinal:{x:{min:0,max:1},y:{min:0,max:1}}},T=A,R=E,P=ya(),L=!1,O=new Map,z=new Map,N={},j=Pn({},E);function V(){b&&(G.isProjectionReady()&&(aa(T.targetFinal,T.target,R),ma(P.deltaFinal,P.layoutCorrected,T.targetFinal,E)),D(),s(b,k))}function D(){var e=E;if(w&&w.isActive()){var n=w.getCrossfadeState(G);n&&(e=n)}r(G,k,e,T,P,t,h)}function _(){M.notifyUpdate(E)}function H(){G.layoutTree.forEach(_a)}var F=f(h);for(var B in F){var I=F[B];void 0!==E[B]&&va(I)&&I.set(E[B],!1)}var W=Oi(h),U=zi(h),G=Pn(Pn({treeType:n,current:null,depth:m?m.depth+1:0,parent:m,children:new Set,path:m?zn(zn([],On(m.path)),[m]):[],layoutTree:m?m.layoutTree:new za,presenceId:g,projection:A,variantChildren:U?new Set:void 0,isVisible:void 0,manuallyAnimateOnMount:Boolean(null==m?void 0:m.isMounted()),blockInitialAnimation:v,isMounted:function(){return Boolean(b)},mount:function(e){b=G.current=e,G.pointTo(G),U&&m&&!W&&(C=null==m?void 0:m.addVariantChild(G)),null==m||m.children.add(G)},unmount:function(){En.update(_),En.render(V),En.preRender(G.updateLayoutProjection),z.forEach((function(e){return e()})),G.stopLayoutAnimation(),G.layoutTree.remove(G),null==C||C(),null==m||m.children.delete(G),null==x||x(),M.clearAllListeners()},addVariantChild:function(e){var t,n=G.getClosestVariantNode();if(n)return null===(t=n.variantChildren)||void 0===t||t.add(e),function(){return n.variantChildren.delete(e)}},sortNodePosition:function(e){return p&&n===e.treeType?p(G.getInstance(),e.getInstance()):0},getClosestVariantNode:function(){return U?G:null==m?void 0:m.getClosestVariantNode()},scheduleUpdateLayoutProjection:m?m.scheduleUpdateLayoutProjection:function(){return Cn.preRender(G.updateTreeLayoutProjection,!1,!0)},getLayoutId:function(){return h.layoutId},getInstance:function(){return b},getStaticValue:function(e){return E[e]},setStaticValue:function(e,t){return E[e]=t},getLatestValues:function(){return E},setVisibility:function(e){G.isVisible!==e&&(G.isVisible=e,G.scheduleRender())},makeTargetAnimatable:function(e,t){return void 0===t&&(t=!0),i(G,e,h,t)},addValue:function(e,t){G.hasValue(e)&&G.removeValue(e),O.set(e,t),E[e]=t.get(),function(e,t){var n=t.onChange((function(t){E[e]=t,h.onUpdate&&Cn.update(_,!1,!0)})),r=t.onRenderRequest(G.scheduleRender);z.set(e,(function(){n(),r()}))}(e,t)},removeValue:function(e){var t;O.delete(e),null===(t=z.get(e))||void 0===t||t(),z.delete(e),delete E[e],d(e,k)},hasValue:function(e){return O.has(e)},getValue:function(e,t){var n=O.get(e);return void 0===n&&void 0!==t&&(n=Ho(t),G.addValue(e,n)),n},forEachValue:function(e){return O.forEach(e)},readValue:function(e){var n;return null!==(n=E[e])&&void 0!==n?n:l(b,e,t)},setBaseTarget:function(e,t){j[e]=t},getBaseTarget:function(e){if(o){var t=o(h,e);if(void 0!==t&&!va(t))return t}return j[e]}},M),{build:function(){return D(),k},scheduleRender:function(){Cn.render(V,!1,!0)},syncRender:V,setProps:function(e){h=e,M.updatePropListeners(e),N=function(e,t,n){var r;for(var o in t){var i=t[o],a=n[o];if(va(i))e.addValue(o,i);else if(va(a))e.addValue(o,Ho(i));else if(a!==i)if(e.hasValue(o)){var s=e.getValue(o);!s.hasAnimated&&s.set(i)}else e.addValue(o,Ho(null!==(r=e.getStaticValue(o))&&void 0!==r?r:i))}for(var o in n)void 0===t[o]&&e.removeValue(o);return t}(G,f(h),N)},getProps:function(){return h},getVariant:function(e){var t;return null===(t=h.variants)||void 0===t?void 0:t[e]},getDefaultTransition:function(){return h.transition},getVariantContext:function(e){if(void 0===e&&(e=!1),e)return null==m?void 0:m.getVariantContext();if(!W){var t=(null==m?void 0:m.getVariantContext())||{};return void 0!==h.initial&&(t.initial=h.initial),t}for(var n={},r=0;r<Fa;r++){var o=Ha[r],i=h[o];(Ri(i)||!1===i)&&(n[o]=i)}return n},enableLayoutProjection:function(){A.isEnabled=!0,G.layoutTree.add(G)},lockProjectionTarget:function(){A.isTargetLocked=!0},unlockProjectionTarget:function(){G.stopLayoutAnimation(),A.isTargetLocked=!1},getLayoutState:function(){return P},setCrossfader:function(e){w=e},isProjectionReady:function(){return A.isEnabled&&A.isHydrated&&P.isHydrated},startLayoutAnimation:function(e,t,n){void 0===n&&(n=!1);var r=G.getProjectionAnimationProgress()[e],o=n?A.relativeTarget[e]:A.target[e],i=o.min,a=o.max-i;return r.clearListeners(),r.set(i),r.set(i),r.onChange((function(t){G.setProjectionTargetAxis(e,t,t+a,n)})),G.animateMotionValue(e,r,0,t)},stopLayoutAnimation:function(){Gi((function(e){return G.getProjectionAnimationProgress()[e].stop()}))},measureViewportBox:function(e){void 0===e&&(e=!0);var n=a(b,t);return e||ca(n,E),n},getProjectionAnimationProgress:function(){return S||(S={x:Ho(0),y:Ho(0)}),S},setProjectionTargetAxis:function(e,t,n,r){var o;void 0===r&&(r=!1),r?(A.relativeTarget||(A.relativeTarget={x:{min:0,max:1},y:{min:0,max:1}}),o=A.relativeTarget[e]):(A.relativeTarget=void 0,o=A.target[e]),A.isHydrated=!0,o.min=t,o.max=n,L=!0,M.notifySetAxisTarget()},rebaseProjectionTarget:function(e,t){void 0===t&&(t=P.layout);var n=G.getProjectionAnimationProgress(),r=n.x,o=n.y,i=!(A.relativeTarget||A.isTargetLocked||r.isAnimating()||o.isAnimating());(e||i)&&Gi((function(e){var n=t[e],r=n.min,o=n.max;G.setProjectionTargetAxis(e,r,o)}))},notifyLayoutReady:function(e){!function(e){var t=e.getProjectionParent();if(t){var n=ja(t.getLayoutState().layout,e.getLayoutState().layout);Gi((function(t){e.setProjectionTargetAxis(t,n[t].min,n[t].max,!0)}))}else e.rebaseProjectionTarget()}(G),G.notifyLayoutUpdate(P.layout,G.prevViewportBox||P.layout,e)},resetTransform:function(){return c(G,b,h)},restoreTransform:function(){return u(b,k)},updateLayoutProjection:function(){if(G.isProjectionReady()){var e=P.delta,t=P.treeScale,n=t.x,r=t.y,o=P.deltaTransform;La(P,T,G.path,E),L&&G.notifyViewportBoxUpdate(T.target,e),L=!1;var i=$a(e,t);i===o&&n===t.x&&r===t.y||G.scheduleRender(),P.deltaTransform=i}},updateTreeLayoutProjection:function(){G.layoutTree.forEach(Da),Cn.preRender(H,!1,!0)},getProjectionParent:function(){if(void 0===$){for(var e=!1,t=G.path.length-1;t>=0;t--){var n=G.path[t];if(n.projection.isEnabled){e=n;break}}$=e}return $},resolveRelativeTargetBox:function(){var e=G.getProjectionParent();if(A.relativeTarget&&e&&(function(e,t){ga(e.target.x,e.relativeTarget.x,t.target.x),ga(e.target.y,e.relativeTarget.y,t.target.y)}(A,e.projection),Ki(e))){var t=A.target;aa(t,t,e.getLatestValues())}},shouldResetTransform:function(){return Boolean(h._layoutResetTransform)},pointTo:function(e){T=e.projection,R=e.getLatestValues(),null==x||x(),x=Br(e.onSetAxisTarget(G.scheduleUpdateLayoutProjection),e.onLayoutAnimationComplete((function(){var e;G.isPresent?G.presence=pn.Present:null===(e=G.layoutSafeToRemove)||void 0===e||e.call(G)})))},isPresent:!0,presence:pn.Entering});return G}};function Da(e){e.resolveRelativeTargetBox()}function _a(e){e.updateLayoutProjection()}var Ha=zn(["initial"],On(ka)),Fa=Ha.length,Ba=new Set(["initial","animate","exit","style","variants","transition","transformTemplate","transformValues","custom","inherit","layout","layoutId","onLayoutAnimationComplete","onViewportBoxUpdate","onLayoutMeasure","onBeforeLayoutMeasure","onAnimationStart","onAnimationComplete","onUpdate","onDragStart","onDrag","onDragEnd","onMeasureDragConstraints","onDirectionLock","onDragTransitionEnd","drag","dragControls","dragListener","dragConstraints","dragDirectionLock","_dragX","_dragY","dragElastic","dragMomentum","dragPropagation","dragTransition","whileDrag","onPan","onPanStart","onPanEnd","onPanSessionStart","onTap","onTapStart","onTapCancel","onHoverStart","onHoverEnd","whileFocus","whileTap","whileHover"]);function Ia(e){return Ba.has(e)}const Wa=e=>Uo("Presence",e)||Io(null);let Ua=0;const Ga=(e=!1)=>{const t=se(Wa)||Wa(e),n=null===c(t)?void 0:Ua++;return re((()=>{null!==c(t)&&c(t).register(n)})),null===c(t)?Bo([!0,null]):Wo(t,(e=>!e.isPresent&&e.onExitComplete?[!1,()=>e.onExitComplete?.(n)]:[!0]))},Za=e=>Uo("LayoutGroup",e)||Io(null);function Ya(e){return e.projection.isEnabled||e.shouldResetTransform()}function qa(e,t){void 0===t&&(t=[]);var n=e.parent;return n&&qa(n,t),Ya(e)&&t.push(e),t}function Xa(e){if(!e.shouldResetTransform()){var t,n=e.getLayoutState();e.notifyBeforeLayoutMeasure(n.layout),n.isHydrated=!0,n.layout=e.measureViewportBox(),n.layoutCorrected=(t=n.layout,{x:Pn({},t.x),y:Pn({},t.y)}),e.notifyLayoutMeasure(n.layout,e.prevViewportBox||n.layout),Cn.update((function(){return e.rebaseProjectionTarget()}))}}var Ka=new Set;function Ja(e,t,n){e[n]||(e[n]=[]),e[n].push(t)}function Qa(e){return Ka.add(e),function(){return Ka.delete(e)}}function es(){if(Ka.size){var e=0,t=[[]],n=[],r=function(n){return Ja(t,n,e)},o=function(t){Ja(n,t,e),e++};Ka.forEach((function(t){t(r,o),e=0})),Ka.clear(),Cn.postRender((function(){setTimeout((function(){return!1}),10)}));for(var i=n.length,a=0;a<=i;a++)t[a]&&t[a].forEach(ts),n[a]&&n[a].forEach(ts)}}var ts=function(e){return e()},ns={layoutReady:function(e){return e.notifyLayoutReady()}};function rs(){var e=new Set;return{add:function(t){return e.add(t)},flush:function(t){var n=void 0===t?ns:t,r=n.layoutReady,o=n.parent;Qa((function(t,n){var i=Array.from(e).sort(Oa),a=o?qa(o):[];n((function(){zn(zn([],On(a)),On(i)).forEach((function(e){return e.resetTransform()}))})),t((function(){i.forEach(Xa)})),n((function(){a.forEach((function(e){return e.restoreTransform()})),i.forEach(r)})),t((function(){i.forEach((function(e){e.isPresent&&(e.presence=pn.Present)}))})),n((function(){kn.preRender(),kn.render()})),t((function(){Cn.postRender((function(){return i.forEach(os)})),e.clear()}))})),es()}}}function os(e){e.prevViewportBox=e.projection.target}var is=e=>Uo("SharedLayout",e)||Io(rs()),as=()=>Io(rs());function ss(e){return!!e.forceUpdate}const ls=e=>Uo("Lazy",e)||Io({strict:!1}),cs=e=>Uo("Motion",e)||Io({}),us=e=>({visualElement:1&e}),ds=e=>({visualElement:e[0]});function ps(e){let t;const n=e[19].default,r=d(n,e,e[18],ds);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,[o]){r&&r.p&&(!t||262145&o)&&m(r,n,e,e[18],t?f(n,e[18],o,us):h(e[18]),ds)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function fs(e,t,n){let r,o,i,a,s,{$$slots:l={},$$scope:d}=t,{createVisualElement:p,props:f,Component:m,visualState:h,isCustom:g}=t;const v=se(Zo)||Zo(g);u(e,v,(e=>n(15,o=e)));const y=se(Wa)||Wa(g);u(e,y,(e=>n(14,r=e)));const b=se(ls)||ls(g);u(e,b,(e=>n(20,i=e)));const $=se(cs)||cs(g);u(e,$,(e=>n(17,s=e)));let x=c($).visualElement;const w=se(Za)||Za(g);u(e,w,(e=>n(16,a=e)));let S,C=a&&void 0!==f.layoutId?a+"-"+f.layoutId:f.layoutId;p||(p=i.renderer);let E=S;return oe((()=>{ge().then((()=>{E.animationState?.animateChanges()}))})),ie((()=>{E?.notifyUnmount()})),e.$$set=e=>{"createVisualElement"in e&&n(6,p=e.createVisualElement),"props"in e&&n(7,f=e.props),"Component"in e&&n(8,m=e.Component),"visualState"in e&&n(9,h=e.visualState),"isCustom"in e&&n(10,g=e.isCustom),"$$scope"in e&&n(18,d=e.$$scope)},e.$$.update=()=>{var t;131072&e.$$.dirty&&n(11,x=s.visualElement),65664&e.$$.dirty&&n(12,C=a&&void 0!==f.layoutId?a+"-"+f.layoutId:f.layoutId),31680&e.$$.dirty&&!S&&p&&n(13,S=p(m,{visualState:h,parent:x,props:{...f,layoutId:C},presenceId:r?.id,blockInitialAnimation:!1===r?.initial})),8192&e.$$.dirty&&n(0,E=S),55425&e.$$.dirty&&E&&(E.setProps({...o,...f,layoutId:C}),n(0,E.isPresent=null===(t=r)||t.isPresent,E),n(0,E.isPresenceRoot=!x||x.presenceId!==r?.id,E),E.syncRender())},[E,v,y,b,$,w,p,f,m,h,g,x,C,S,r,o,a,s,d,l]}var ms=class extends Ue{constructor(e){super(),We(this,e,fs,ps,s,{createVisualElement:6,props:7,Component:8,visualState:9,isCustom:10})}},hs=function(e){return{isEnabled:function(t){return e.some((function(e){return!!t[e]}))}}},gs={measureLayout:hs(["layout","layoutId","drag"]),animation:hs(["animate","exit","variants","whileHover","whileTap","whileFocus","whileDrag"]),exit:hs(["exit"]),drag:hs(["drag","dragControls"]),focus:hs(["whileFocus"]),hover:hs(["whileHover","onHoverStart","onHoverEnd"]),tap:hs(["whileTap","onTap","onTapStart","onTapCancel"]),pan:hs(["onPan","onPanStart","onPanSessionStart","onPanEnd"]),layoutAnimation:hs(["layout","layoutId"])};const vs=e=>({features:2&e}),ys=e=>({features:e[1]});function bs(e){let t;const n=e[4].default,r=d(n,e,e[3],ys);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||10&o)&&m(r,n,e,e[3],t?f(n,e[3],o,vs):h(e[3]),ys)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function $s(e){let t,n,r=e[0]&&bs(e);return{c(){r&&r.c(),t=N()},m(e,o){r&&r.m(e,o),A(e,t,o),n=!0},p(e,[n]){e[0]?r?(r.p(e,n),1&n&&Re(r,1)):(r=bs(e),r.c(),Re(r,1),r.m(t.parentNode,t)):r&&(Ae(),Pe(r,1,1,(()=>{r=null})),Te())},i(e){n||(Re(r),n=!0)},o(e){Pe(r),n=!1},d(e){e&&T(t),r&&r.d(e)}}}function xs(e,t,n){let{$$slots:r={},$$scope:o}=t;const i=Object.keys(gs),a=i.length;let{visualElement:s,props:l}=t,c=[];return e.$$set=e=>{"visualElement"in e&&n(0,s=e.visualElement),"props"in e&&n(2,l=e.props),"$$scope"in e&&n(3,o=e.$$scope)},e.$$.update=()=>{if(7&e.$$.dirty){n(1,c=[]);for(let e=0;e<a;e++){const t=i[e],{isEnabled:n,Component:r}=gs[t];n(l)&&r&&c.push({Component:r,key:t,props:l,visualElement:s})}}},[s,c,l,o,r]}var ws=class extends Ue{constructor(e){super(),We(this,e,xs,$s,s,{visualElement:0,props:2})}};function Ss(e){let t;const n=e[3].default,r=d(n,e,e[2],null);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,[o]){r&&r.p&&(!t||4&o)&&m(r,n,e,e[2],t?f(n,e[2],o,null):h(e[2]),null)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function Cs(e,t,n){let{$$slots:r={},$$scope:o}=t,{value:i,isCustom:a}=t,s=Io(i);return ae(cs,s),Go("Motion",a,s),ie((()=>{i?.visualElement?.unmount()})),e.$$set=e=>{"value"in e&&n(0,i=e.value),"isCustom"in e&&n(1,a=e.isCustom),"$$scope"in e&&n(2,o=e.$$scope)},e.$$.update=()=>{1&e.$$.dirty&&s.set(i)},[i,a,o,r]}var Es=class extends Ue{constructor(e){super(),We(this,e,Cs,Ss,s,{value:0,isCustom:1})}},ks=function(){return{style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}}},Ms=function(){return Pn(Pn({},{style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}}),{attrs:{}})},As=["","X","Y","Z"],Ts=["transformPerspective","x","y","z"];function Rs(e,t){return Ts.indexOf(e)-Ts.indexOf(t)}["translate","scale","rotate","skew"].forEach((function(e){return As.forEach((function(t){return Ts.push(e+t)}))}));var Ps=new Set(Ts);function Ls(e){return Ps.has(e)}var Os=new Set(["originX","originY","originZ"]);function zs(e){return Os.has(e)}function Ns(e,t){var n=t.layout,r=t.layoutId;return Ls(e)||zs(e)||(n||void 0!==r)&&!!Ui[e]}var js={x:"translateX",y:"translateY",z:"translateZ",transformPerspective:"perspective"};function Vs(e){return e.startsWith("--")}var Ds=function(e,t){return t&&"number"==typeof e?t.transform(e):e};function _s(e,t,n,r,o,i,a,s){var l,c=e.style,u=e.vars,d=e.transform,p=e.transformKeys,f=e.transformOrigin;p.length=0;var m=!1,h=!1,g=!0;for(var v in t){var y=t[v];if(Vs(v))u[v]=y;else{var b=pi[v],$=Ds(y,b);if(Ls(v)){if(m=!0,d[v]=$,p.push(v),!g)continue;y!==(null!==(l=b.default)&&void 0!==l?l:0)&&(g=!1)}else if(zs(v))f[v]=$,h=!0;else if(r&&n&&r.isHydrated&&Ui[v]){var x=Ui[v].process(y,r,n),w=Ui[v].applyTo;if(w)for(var S=w.length,C=0;C<S;C++)c[w[C]]=x;else c[v]=x}else c[v]=$}}r&&n&&a&&s?(c.transform=a(r.deltaFinal,r.treeScale,m?d:void 0),i&&(c.transform=i(d,c.transform)),c.transformOrigin=s(r)):(m&&(c.transform=function(e,t,n,r){var o=e.transform,i=e.transformKeys,a=t.enableHardwareAcceleration,s=void 0===a||a,l=t.allowTransformNone,c=void 0===l||l,u="";i.sort(Rs);for(var d=!1,p=i.length,f=0;f<p;f++){var m=i[f];u+=(js[m]||m)+"("+o[m]+") ","z"===m&&(d=!0)}return!d&&s?u+="translateZ(0)":u=u.trim(),r?u=r(o,n?"":u):c&&n&&(u="none"),u}(e,o,g,i)),h&&(c.transformOrigin=function(e){var t=e.originX,n=void 0===t?"50%":t,r=e.originY,o=void 0===r?"50%":r,i=e.originZ;return n+" "+o+" "+(void 0===i?0:i)}(f)))}const Hs=e=>({styles:1&e}),Fs=e=>({styles:e[0]});function Bs(e){let t;const n=e[5].default,r=d(n,e,e[4],Fs);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,[o]){r&&r.p&&(!t||17&o)&&m(r,n,e,e[4],t?f(n,e[4],o,Hs):h(e[4]),Fs)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function Is(e,t,n){let r,{$$slots:o={},$$scope:i}=t,{visualState:a,isStatic:s,props:l}=t;return e.$$set=e=>{"visualState"in e&&n(1,a=e.visualState),"isStatic"in e&&n(2,s=e.isStatic),"props"in e&&n(3,l=e.props),"$$scope"in e&&n(4,i=e.$$scope)},e.$$.update=()=>{2&e.$$.dirty&&n(0,r=(()=>{let e={style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}};_s(e,a,void 0,void 0,{enableHardwareAcceleration:!s},l.transformTemplate);const{vars:t,style:n}=e;return{...t,...n}})())},[r,a,s,l,i,o]}var Ws=class extends Ue{constructor(e){super(),We(this,e,Is,Bs,s,{visualState:1,isStatic:2,props:3})}};const Us=e=>({styles:522&e}),Gs=e=>({styles:e[4](e[9],e[1],e[3])});function Zs(e){let t;const n=e[6].default,r=d(n,e,e[7],Gs);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||650&o)&&m(r,n,e,e[7],t?f(n,e[7],o,Us):h(e[7]),Gs)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function Ys(e){let t,n;return t=new Ws({props:{props:e[1],visualState:e[0],isStatic:e[2],$$slots:{default:[Zs,({styles:e})=>({9:e}),({styles:e})=>e?512:0]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,[n]){const r={};2&n&&(r.props=e[1]),1&n&&(r.visualState=e[0]),4&n&&(r.isStatic=e[2]),650&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function qs(e,t,n){for(const r in t)va(t[r])||Ns(r,n)||(e[r]=t[r])}function Xs(e,t,n){let r,{$$slots:o={},$$scope:i}=t,{visualState:a,props:s,isStatic:l}=t,c={};const u=qs;return e.$$set=e=>{"visualState"in e&&n(0,a=e.visualState),"props"in e&&n(1,s=e.props),"isStatic"in e&&n(2,l=e.isStatic),"$$scope"in e&&n(7,i=e.$$scope)},e.$$.update=()=>{2&e.$$.dirty&&n(5,r=s.style||{}),42&e.$$.dirty&&u(c,r,s)},[a,s,l,c,e=>(Object.assign(c,e),s.transformValues&&n(3,c=s.transformValues(c)),c),r,o,i]}var Ks=class extends Ue{constructor(e){super(),We(this,e,Xs,Ys,s,{visualState:0,props:1,isStatic:2})}};const Js=e=>({visualProps:65&e}),Qs=e=>({visualProps:e[3](e[6],e[0])});function el(e){let t;const n=e[4].default,r=d(n,e,e[5],Qs);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||97&o)&&m(r,n,e,e[5],t?f(n,e[5],o,Js):h(e[5]),Qs)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function tl(e){let t,n;return t=new Ks({props:{visualState:e[1],props:e[0],isStatic:e[2],$$slots:{default:[el,({styles:e})=>({6:e}),({styles:e})=>e?64:0]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,[n]){const r={};2&n&&(r.visualState=e[1]),1&n&&(r.props=e[0]),4&n&&(r.isStatic=e[2]),97&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function nl(e,t,n){let{$$slots:r={},$$scope:o}=t,{props:i,visualState:a,isStatic:s}=t;return e.$$set=e=>{"props"in e&&n(0,i=e.props),"visualState"in e&&n(1,a=e.visualState),"isStatic"in e&&n(2,s=e.isStatic),"$$scope"in e&&n(5,o=e.$$scope)},[i,a,s,(e,t)=>{let n={};return Boolean(t.drag)&&(n.draggable=!1,e.userSelect=e.WebkitUserSelect=e.WebkitTouchCallout="none",e.touchAction=!0===t.drag?"none":"pan-"+("x"===t.drag?"y":"x")),n.style=e,n},r,o]}var rl=class extends Ue{constructor(e){super(),We(this,e,nl,tl,s,{props:0,visualState:1,isStatic:2})}};function ol(e,t,n){return"string"==typeof e?e:dr.transform(t+n*e)}var il=function(e,t){return dr.transform(e*t)},al={offset:"stroke-dashoffset",array:"stroke-dasharray"},sl={offset:"strokeDashoffset",array:"strokeDasharray"};function ll(e,t,n,r,o,i,a,s){var l=t.attrX,c=t.attrY,u=t.originX,d=t.originY,p=t.pathLength,f=t.pathSpacing,m=void 0===f?1:f,h=t.pathOffset,g=void 0===h?0:h;_s(e,Ln(t,["attrX","attrY","originX","originY","pathLength","pathSpacing","pathOffset"]),n,r,o,i,a,s),e.attrs=e.style,e.style={};var v=e.attrs,y=e.style,b=e.dimensions,$=e.totalPathLength;v.transform&&(b&&(y.transform=v.transform),delete v.transform),b&&(void 0!==u||void 0!==d||y.transform)&&(y.transformOrigin=function(e,t,n){return ol(t,e.x,e.width)+" "+ol(n,e.y,e.height)}(b,void 0!==u?u:.5,void 0!==d?d:.5)),void 0!==l&&(v.x=l),void 0!==c&&(v.y=c),void 0!==$&&void 0!==p&&function(e,t,n,r,o,i){void 0===r&&(r=1),void 0===o&&(o=0),void 0===i&&(i=!0);var a=i?al:sl;e[a.offset]=il(-o,t);var s=il(n,t),l=il(r,t);e[a.array]=s+" "+l}(v,$,p,m,g,!1)}const cl=e=>({visualProps:1&e}),ul=e=>({visualProps:e[0]});function dl(e){let t;const n=e[4].default,r=d(n,e,e[3],ul);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,[o]){r&&r.p&&(!t||9&o)&&m(r,n,e,e[3],t?f(n,e[3],o,cl):h(e[3]),ul)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function pl(e,t,n){let r,{$$slots:o={},$$scope:i}=t,{visualState:a,props:s}=t;return e.$$set=e=>{"visualState"in e&&n(1,a=e.visualState),"props"in e&&n(2,s=e.props),"$$scope"in e&&n(3,i=e.$$scope)},e.$$.update=()=>{if(2&e.$$.dirty&&n(0,r=(()=>{const e=Ms();return ll(e,a,void 0,void 0,{enableHardwareAcceleration:!1},s.transformTemplate),{...e.attrs,style:{...e.style}}})()),5&e.$$.dirty&&s.style){const e={};qs(e,s.style,s),n(0,r.style={...e,...r.style},r)}},[r,a,s,i,o]}var fl=class extends Ue{constructor(e){super(),We(this,e,pl,dl,s,{visualState:1,props:2})}},ml=function(e){return!Ia(e)};try{var hl=require("@emotion/is-prop-valid").default;ml=function(e){return e.startsWith("on")?!Ia(e):hl(e)}}catch(e){}const gl=e=>({props:2064&e}),vl=e=>({motion:e[5],props:{...e[4],...e[11]}});function yl(e){let t;const n=e[9].default,r=d(n,e,e[10],vl);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||3088&o)&&m(r,n,e,e[10],t?f(n,e[10],o,gl):h(e[10]),vl)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function bl(e){let t,n,r;var o="SVG"===e[2]?fl:rl;function i(e,t){return{props:{visualState:e[1],isStatic:e[3],props:e[0],$$slots:{default:[yl,({visualProps:e})=>({11:e}),({visualProps:e})=>e?2048:0]},$$scope:{ctx:e}}}}return o&&(t=q(o,i(e))),{c(){t&&Fe(t.$$.fragment),n=N()},m(e,o){t&&Be(t,e,o),A(e,n,o),r=!0},p(e,[r]){if(4&r&&o!==(o="SVG"===e[2]?fl:rl)){if(t){Ae();const e=t;Pe(e.$$.fragment,1,0,(()=>{Ie(e,1)})),Te()}o?(t=q(o,i(e)),Fe(t.$$.fragment),Re(t.$$.fragment,1),Be(t,n.parentNode,n)):t=null}else if(o){const n={};2&r&&(n.visualState=e[1]),8&r&&(n.isStatic=e[3]),1&r&&(n.props=e[0]),3088&r&&(n.$$scope={dirty:r,ctx:e}),t.$set(n)}},i(e){r||(t&&Re(t.$$.fragment,e),r=!0)},o(e){t&&Pe(t.$$.fragment,e),r=!1},d(e){e&&T(n),t&&Ie(t,e)}}}function $l(e,t,n){let r,{$$slots:o={},$$scope:i}=t,{props:a,visualState:s,Component:l,forwardMotionProps:c=!1,isStatic:u,ref:d,targetEl:p}=t;const f=e=>{d(e)};return e.$$set=e=>{"props"in e&&n(0,a=e.props),"visualState"in e&&n(1,s=e.visualState),"Component"in e&&n(2,l=e.Component),"forwardMotionProps"in e&&n(6,c=e.forwardMotionProps),"isStatic"in e&&n(3,u=e.isStatic),"ref"in e&&n(7,d=e.ref),"targetEl"in e&&n(8,p=e.targetEl),"$$scope"in e&&n(10,i=e.$$scope)},e.$$.update=()=>{69&e.$$.dirty&&n(4,r=function(e,t,n){var r={};for(var o in e)(ml(o)||!0===n&&Ia(o)||!t&&!Ia(o))&&(r[o]=e[o]);return r}(a,"string"==typeof l,c)),256&e.$$.dirty&&p&&f(p)},[a,s,l,u,r,f,c,d,p,o,i]}var xl=class extends Ue{constructor(e){super(),We(this,e,$l,bl,s,{props:0,visualState:1,Component:2,forwardMotionProps:6,isStatic:3,ref:7,targetEl:8})}};function wl(e,t){return Yi(function(e,t){var n=e.top,r=e.left,o=e.bottom,i=e.right;void 0===t&&(t=Zi);var a=t({x:r,y:n}),s=t({x:i,y:o});return{top:a.y,left:a.x,bottom:s.y,right:s.x}}(e.getBoundingClientRect(),t))}function Sl(e){return"string"==typeof e&&e.startsWith("var(--")}var Cl=/var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;function El(e,t,n){var r=On(function(e){var t=Cl.exec(e);if(!t)return[,];var n=On(t,3);return[n[1],n[2]]}(e),2),o=r[0],i=r[1];if(o){var a=window.getComputedStyle(t).getPropertyValue(o);return a?a.trim():Sl(i)?El(i,t):i}}var kl,Ml=new Set(["width","height","top","left","right","bottom","x","y"]),Al=function(e){return Ml.has(e)},Tl=function(e,t){e.set(t,!1),e.set(t)},Rl=function(e){return e===ir||e===dr};!function(e){e.width="width",e.height="height",e.left="left",e.right="right",e.top="top",e.bottom="bottom"}(kl||(kl={}));var Pl=function(e,t){return parseFloat(e.split(", ")[t])},Ll=function(e,t){return function(n,r){var o=r.transform;if("none"===o||!o)return 0;var i=o.match(/^matrix3d\((.+)\)$/);if(i)return Pl(i[1],t);var a=o.match(/^matrix\((.+)\)$/);return a?Pl(a[1],e):0}},Ol=new Set(["x","y","z"]),zl=Ts.filter((function(e){return!Ol.has(e)}));var Nl={width:function(e){var t=e.x;return t.max-t.min},height:function(e){var t=e.y;return t.max-t.min},top:function(e,t){var n=t.top;return parseFloat(n)},left:function(e,t){var n=t.left;return parseFloat(n)},bottom:function(e,t){var n=e.y,r=t.top;return parseFloat(r)+(n.max-n.min)},right:function(e,t){var n=e.x,r=t.left;return parseFloat(r)+(n.max-n.min)},x:Ll(4,13),y:Ll(5,14)},jl=function(e,t,n,r){void 0===n&&(n={}),void 0===r&&(r={}),t=Pn({},t),r=Pn({},r);var o=Object.keys(t).filter(Al),i=[],a=!1,s=[];if(o.forEach((function(o){var l=e.getValue(o);if(e.hasValue(o)){var c,u=n[o],d=t[o],p=ki(u);if(oi(d))for(var f=d.length,m=null===d[0]?1:0;m<f;m++)c||(c=ki(d[m]));else c=ki(d);if(p!==c)if(Rl(p)&&Rl(c)){var h=l.get();"string"==typeof h&&l.set(parseFloat(h)),"string"==typeof d?t[o]=parseFloat(d):Array.isArray(d)&&c===dr&&(t[o]=d.map(parseFloat))}else(null==p?void 0:p.transform)&&(null==c?void 0:c.transform)&&(0===u||0===d)?0===u?l.set(c.transform(u)):t[o]=p.transform(d):(a||(i=function(e){var t=[];return zl.forEach((function(n){var r=e.getValue(n);void 0!==r&&(t.push([n,r.get()]),r.set(n.startsWith("scale")?1:0))})),t.length&&e.syncRender(),t}(e),a=!0),s.push(o),r[o]=void 0!==r[o]?r[o]:t[o],Tl(l,d))}})),s.length){var l=function(e,t,n){var r=t.measureViewportBox(),o=t.getInstance(),i=getComputedStyle(o),a=i.display,s={top:i.top,left:i.left,bottom:i.bottom,right:i.right,transform:i.transform};"none"===a&&t.setStaticValue("display",e.display||"block"),t.syncRender();var l=t.measureViewportBox();return n.forEach((function(n){var o=t.getValue(n);Tl(o,Nl[n](r,s)),e[n]=Nl[n](l,i)})),e}(t,e,s);return i.length&&i.forEach((function(t){var n=On(t,2),r=n[0],o=n[1];e.getValue(r).set(o)})),e.syncRender(),{target:l,transitionEnd:r}}return{target:t,transitionEnd:r}};function Vl(e,t,n,r){return function(e){return Object.keys(e).some(Al)}(t)?jl(e,t,n,r):{target:t,transitionEnd:r}}var Dl=function(e,t,n,r){var o=function(e,t,n){var r,o=Ln(t,[]),i=e.getInstance();if(!(i instanceof HTMLElement))return{target:o,transitionEnd:n};for(var a in n&&(n=Pn({},n)),e.forEachValue((function(e){var t=e.get();if(Sl(t)){var n=El(t,i);n&&e.set(n)}})),o){var s=o[a];if(Sl(s)){var l=El(s,i);l&&(o[a]=l,n&&(null!==(r=n[a])&&void 0!==r||(n[a]=s)))}}return{target:o,transitionEnd:n}}(e,t,r);return Vl(e,t=o.target,n,r=o.transitionEnd)};function _l(e){var t=e.style,n={};for(var r in t)(va(t[r])||Ns(r,e))&&(n[r]=t[r]);return n}function Hl(e,t){var n=t.style,r=t.vars;for(var o in Object.assign(e.style,n),r)e.style.setProperty(o,r[o])}var Fl={treeType:"dom",readValueFromInstance:function(e,t){if(Ls(t)){var n=mi(t);return n&&n.default||0}var r=function(e){return window.getComputedStyle(e)}(e);return(Vs(t)?r.getPropertyValue(t):r[t])||0},sortNodePosition:function(e,t){return 2&e.compareDocumentPosition(t)?1:-1},getBaseTarget:function(e,t){var n;return null===(n=e.style)||void 0===n?void 0:n[t]},measureViewportBox:function(e,t){return wl(e,t.transformPagePoint)},resetTransform:function(e,t,n){var r=n.transformTemplate;t.style.transform=r?r({},""):"none",e.scheduleRender()},restoreTransform:function(e,t){e.style.transform=t.style.transform},removeValueFromRenderState:function(e,t){var n=t.vars,r=t.style;delete n[e],delete r[e]},makeTargetAnimatable:function(e,t,n,r){var o=n.transformValues;void 0===r&&(r=!0);var i=t.transition,a=t.transitionEnd,s=Ln(t,["transition","transitionEnd"]),l=function(e,t,n){var r,o,i={};for(var a in e)i[a]=null!==(r=Di(a,t))&&void 0!==r?r:null===(o=n.getValue(a))||void 0===o?void 0:o.get();return i}(s,i||{},e);if(o&&(a&&(a=o(a)),s&&(s=o(s)),l&&(l=o(l))),r){!function(e,t,n){var r,o,i,a,s=Object.keys(t).filter((function(t){return!e.hasValue(t)})),l=s.length;if(l)for(var c=0;c<l;c++){var u=s[c],d=t[u],p=null;Array.isArray(d)&&(p=d[0]),null===p&&(p=null!==(o=null!==(r=n[u])&&void 0!==r?r:e.readValue(u))&&void 0!==o?o:t[u]),null!=p&&("string"==typeof p&&/^\-?\d*\.?\d+$/.test(p)?p=parseFloat(p):!Ai(p)&&Tr.test(d)&&(p=hi(u,d)),e.addValue(u,Ho(p)),null!==(i=(a=n)[u])&&void 0!==i||(a[u]=p),e.setBaseTarget(u,p))}}(e,s,l);var c=Dl(e,s,l,a);a=c.transitionEnd,s=c.target}return Pn({transition:i,transitionEnd:a},s)},scrapeMotionValuesFromProps:_l,build:function(e,t,n,r,o,i,a){void 0!==e.isVisible&&(t.style.visibility=e.isVisible?"visible":"hidden");var s=r.isEnabled&&o.isHydrated;_s(t,n,r,o,i,a.transformTemplate,s?$a:void 0,s?xa:void 0)},render:Hl},Bl=Va(Fl);function Il(e){var t=_l(e);for(var n in e){if(va(e[n]))t["x"===n||"y"===n?"attr"+n.toUpperCase():n]=e[n]}return t}var Wl=/([a-z])([A-Z])/g,Ul=function(e){return e.replace(Wl,"$1-$2").toLowerCase()},Gl=new Set(["baseFrequency","diffuseConstant","kernelMatrix","kernelUnitLength","keySplines","keyTimes","limitingConeAngle","markerHeight","markerWidth","numOctaves","targetX","targetY","surfaceScale","specularConstant","specularExponent","stdDeviation","tableValues","viewBox"]);function Zl(e,t){for(var n in Hl(e,t),t.attrs)e.setAttribute(Gl.has(n)?n:Ul(n),t.attrs[n])}var Yl=Va(Pn(Pn({},Fl),{getBaseTarget:function(e,t){return e[t]},readValueFromInstance:function(e,t){var n;return Ls(t)?(null===(n=mi(t))||void 0===n?void 0:n.default)||0:(t=Gl.has(t)?t:Ul(t),e.getAttribute(t))},scrapeMotionValuesFromProps:Il,build:function(e,t,n,r,o,i,a){var s=r.isEnabled&&o.isHydrated;ll(t,n,r,o,i,a.transformTemplate,s?$a:void 0,s?xa:void 0)},render:Zl})),ql=function(e,t){return"SVG"===e?Yl(t,{enableHardwareAcceleration:!1}):Bl(t,{enableHardwareAcceleration:!0})},Xl={scrapeMotionValuesFromProps:Il,createRenderState:Ms,onMount:function(e,t,n){var r=n.renderState,o=n.latestValues;try{r.dimensions="function"==typeof t.getBBox?t.getBBox():t.getBoundingClientRect()}catch(e){r.dimensions={x:0,y:0,width:0,height:0}}(function(e){return"path"===e.tagName})(t)&&(r.totalPathLength=t.getTotalLength()),ll(r,o,void 0,void 0,{enableHardwareAcceleration:!1},e.transformTemplate),Zl(t,r)}};var Kl={scrapeMotionValuesFromProps:_l,createRenderState:ks};function Jl(e,t){if(Oi(e)){var n=e.initial,r=e.animate;return{initial:!1===n||Ri(n)?n:void 0,animate:Ri(r)?r:void 0}}return!1!==e.inherit&&t||{}}const Ql=e=>({value:1&e}),ec=e=>({value:e[0]});function tc(e){let t;const n=e[9].default,r=d(n,e,e[8],ec);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,[o]){r&&r.p&&(!t||257&o)&&m(r,n,e,e[8],t?f(n,e[8],o,Ql):h(e[8]),ec)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function nc(e,t,n){let r,{$$slots:o={},$$scope:i}=t,{props:a,isStatic:s,isCustom:l}=t,d=se(cs)||cs(l);u(e,d,(e=>n(7,r=e)));let{initial:p,animate:f}=Jl(a,c(d));const m=e=>Array.isArray(e)?e.join(" "):e,h=()=>({initial:p,animate:f});let g=h();return e.$$set=e=>{"props"in e&&n(2,a=e.props),"isStatic"in e&&n(3,s=e.isStatic),"isCustom"in e&&n(4,l=e.isCustom),"$$scope"in e&&n(8,i=e.$$scope)},e.$$.update=()=>{132&e.$$.dirty&&n(5,({initial:p,animate:f}=Jl(a,r)),p,(n(6,f),n(2,a),n(7,r))),104&e.$$.dirty&&s&&n(0,g=h(m(p),m(f)))},[g,d,a,s,l,p,f,r,i,o]}var rc=class extends Ue{constructor(e){super(),We(this,e,nc,tc,s,{props:2,isStatic:3,isCustom:4})}};const oc=e=>({state:1&e}),ic=e=>({state:e[0]});function ac(e){let t;const n=e[10].default,r=d(n,e,e[9],ic);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,[o]){r&&r.p&&(!t||513&o)&&m(r,n,e,e[9],t?f(n,e[9],o,oc):h(e[9]),ic)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}const sc=({scrapeMotionValuesFromProps:e,createRenderState:t,onMount:n},r,o,i)=>{const a={latestValues:lc(r,o,i,e),renderState:t()};return n&&(a.mount=e=>n(r,e,a)),a};function lc(e,t,n,r){const o={},i=!1===n?.initial,a=r(e);for(const e in a)o[e]=(s=a[e],l=void 0,l=va(s)?s.get():s,wi(l)?l.toValue():l);var s,l;let{initial:c,animate:u}=e;const d=Oi(e),p=zi(e);t&&p&&!d&&!1!==e.inherit&&(null!=c||(c=t.initial),null!=u||(u=t.animate));const f=i||!1===c?u:c;if(f&&"boolean"!=typeof f&&!Ca(f)){(Array.isArray(f)?f:[f]).forEach((t=>{const n=Pi(e,t);if(!n)return;const{transitionEnd:r,transition:i,...a}=n;for(const e in a)o[e]=a[e];for(const e in r)o[e]=r[e]}))}return o}function cc(e,t,n){let r,o,{$$slots:i={},$$scope:a}=t,{config:s,props:l,isStatic:d,isCustom:p}=t;const f=se(cs)||cs(p);u(e,f,(e=>n(8,o=e)));const m=se(Wa)||Wa(p);u(e,m,(e=>n(7,r=e)));let h=sc(s,l,c(f),c(m));const g=sc;return e.$$set=e=>{"config"in e&&n(3,s=e.config),"props"in e&&n(4,l=e.props),"isStatic"in e&&n(5,d=e.isStatic),"isCustom"in e&&n(6,p=e.isCustom),"$$scope"in e&&n(9,a=e.$$scope)},e.$$.update=()=>{440&e.$$.dirty&&d&&n(0,h=g(s,l,o,r))},[h,f,m,s,l,d,p,r,o,a,i]}var uc=class extends Ue{constructor(e){super(),We(this,e,cc,ac,s,{config:3,props:4,isStatic:5,isCustom:6})}};function dc(e){return"object"==typeof e&&Object.prototype.hasOwnProperty.call(e,"current")}function pc(e,t,n){return function(r){var o;r&&(null===(o=e.mount)||void 0===o||o.call(e,r)),t&&(r?t.mount(r):t.unmount()),n&&("function"==typeof n?n(r):dc(n)&&(n.current=r))}}function fc(e,t,n){const r=e.slice();return r[21]=t[n],r}const mc=e=>({motion:16777216&e,props:33554432&e}),hc=e=>({motion:e[24],props:e[25]});function gc(e){let t;const n=e[14].default,r=d(n,e,e[15],hc);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||50364416&o)&&m(r,n,e,e[15],t?f(n,e[15],o,mc):h(e[15]),hc)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function vc(e){let t,n;return t=new xl({props:{Component:e[6],props:e[4],ref:pc(e[18],e[17].visualElement,e[1]),visualState:e[18],isStatic:e[3],forwardMotionProps:e[0],$$slots:{default:[gc,({motion:e,props:t})=>({24:e,25:t}),({motion:e,props:t})=>(e?16777216:0)|(t?33554432:0)]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,n){const r={};16&n&&(r.props=e[4]),393218&n&&(r.ref=pc(e[18],e[17].visualElement,e[1])),262144&n&&(r.visualState=e[18]),8&n&&(r.isStatic=e[3]),1&n&&(r.forwardMotionProps=e[0]),50364416&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function yc(e){let t,n,r=[],o=new Map,a=je(e[20]);const s=e=>e[21].key;for(let t=0;t<a.length;t+=1){let n=fc(e,a,t),i=s(n);o.set(i,r[t]=bc(i,n))}return{c(){for(let e=0;e<r.length;e+=1)r[e].c();t=N()},m(e,o){for(let t=0;t<r.length;t+=1)r[t]&&r[t].m(e,o);A(e,t,o),n=!0},p(e,n){1048608&n&&(a=je(e[20]),Ae(),r=function(e,t,n,r,o,a,s,l,c,u,d,p){let f=e.length,m=a.length,h=f;const g={};for(;h--;)g[e[h].key]=h;const v=[],y=new Map,b=new Map,$=[];for(h=m;h--;){const e=p(o,a,h),i=n(e);let l=s.get(i);l?r&&$.push((()=>l.p(e,t))):(l=u(i,e),l.c()),y.set(i,v[h]=l),i in g&&b.set(i,Math.abs(h-g[i]))}const x=new Set,w=new Set;function S(e){Re(e,1),e.m(l,d),s.set(e.key,e),d=e.first,m--}for(;f&&m;){const t=v[m-1],n=e[f-1],r=t.key,o=n.key;t===n?(d=t.first,f--,m--):y.has(o)?!s.has(r)||x.has(r)?S(t):w.has(o)?f--:b.get(r)>b.get(o)?(w.add(r),S(t)):(x.add(o),f--):(c(n,s),f--)}for(;f--;){const t=e[f];y.has(t.key)||c(t,s)}for(;m;)S(v[m-1]);return i($),v}(r,n,s,1,e,a,o,t.parentNode,Ve,bc,t,fc),Te())},i(e){if(!n){for(let e=0;e<a.length;e+=1)Re(r[e]);n=!0}},o(e){for(let e=0;e<r.length;e+=1)Pe(r[e]);n=!1},d(e){e&&T(t);for(let t=0;t<r.length;t+=1)r[t].d(e)}}}function bc(e,t){let n,r,o,i;var a=t[21].Component;function s(e,t){return{props:{props:e[21].props,visualElement:e[21].visualElement,isCustom:e[5]}}}return a&&(r=q(a,s(t))),{key:e,first:null,c(){n=N(),r&&Fe(r.$$.fragment),o=N(),this.first=n},m(e,t){A(e,n,t),r&&Be(r,e,t),A(e,o,t),i=!0},p(e,n){if(t=e,1048576&n&&a!==(a=t[21].Component)){if(r){Ae();const e=r;Pe(e.$$.fragment,1,0,(()=>{Ie(e,1)})),Te()}a?(r=q(a,s(t)),Fe(r.$$.fragment),Re(r.$$.fragment,1),Be(r,o.parentNode,o)):r=null}else if(a){const e={};1048576&n&&(e.props=t[21].props),1048576&n&&(e.visualElement=t[21].visualElement),r.$set(e)}},i(e){i||(r&&Re(r.$$.fragment,e),i=!0)},o(e){r&&Pe(r.$$.fragment,e),i=!1},d(e){e&&(T(n),T(o)),r&&Ie(r,e)}}}function $c(e){let t,n,r,o;t=new Es({props:{value:e[17],isCustom:e[5],$$slots:{default:[vc]},$$scope:{ctx:e}}});let i=e[2]&&yc(e);return{c(){Fe(t.$$.fragment),n=z(),i&&i.c(),r=N()},m(e,a){Be(t,e,a),A(e,n,a),i&&i.m(e,a),A(e,r,a),o=!0},p(e,n){const o={};131072&n&&(o.value=e[17]),426011&n&&(o.$$scope={dirty:n,ctx:e}),t.$set(o),e[2]?i?(i.p(e,n),4&n&&Re(i,1)):(i=yc(e),i.c(),Re(i,1),i.m(r.parentNode,r)):i&&(Ae(),Pe(i,1,1,(()=>{i=null})),Te())},i(e){o||(Re(t.$$.fragment,e),Re(i),o=!0)},o(e){Pe(t.$$.fragment,e),Pe(i),o=!1},d(e){e&&(T(n),T(r)),Ie(t,e),i&&i.d(e)}}}function xc(e){let t,n;return t=new ws({props:{visualElement:e[10](e[17],e[19]),props:e[4],$$slots:{default:[$c,({features:e})=>({20:e}),({features:e})=>e?1048576:0]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,n){const r={};655360&n&&(r.visualElement=e[10](e[17],e[19])),16&n&&(r.props=e[4]),1474591&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function wc(e){let t,n;return t=new ms({props:{Component:e[6],visualState:e[18],createVisualElement:e[7],props:e[4],isCustom:e[5],$$slots:{default:[xc,({visualElement:e})=>({19:e}),({visualElement:e})=>e?524288:0]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,n){const r={};262144&n&&(r.visualState=e[18]),16&n&&(r.props=e[4]),950303&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function Sc(e){let t,n;return t=new uc({props:{config:e[8],props:e[4],isStatic:e[3],isCustom:e[5],$$slots:{default:[wc,({state:e})=>({18:e}),({state:e})=>e?262144:0]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,n){const r={};16&n&&(r.props=e[4]),8&n&&(r.isStatic=e[3]),426015&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function Cc(e){let t,n;return t=new rc({props:{props:e[4],isStatic:e[3],isCustom:e[5],$$slots:{default:[Sc,({value:e})=>({17:e}),({value:e})=>e?131072:0]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,n){const r={};16&n&&(r.props=e[4]),8&n&&(r.isStatic=e[3]),163871&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function Ec(e){let t,n;return t=new Jo({props:{isCustom:e[5],$$slots:{default:[Cc]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,[n]){const r={};32799&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function kc(e,t,r){let o,i;const a=["isSVG","forwardMotionProps","externalRef","targetEl"];let s,l=v(t,a),{$$slots:c={},$$scope:d}=t,{isSVG:p=!1,forwardMotionProps:f=!1,externalRef:m,targetEl:h}=t;const y=h;let b=p?"SVG":"DOM",$=ql,x=p?Xl:Kl;const w=se(Zo)||Zo(y);u(e,w,(e=>r(13,s=e)));let S=!1;return re((()=>r(2,S=!0))),e.$$set=e=>{t=n(n({},t),g(e)),r(16,l=v(t,a)),"isSVG"in e&&r(11,p=e.isSVG),"forwardMotionProps"in e&&r(0,f=e.forwardMotionProps),"externalRef"in e&&r(1,m=e.externalRef),"targetEl"in e&&r(12,h=e.targetEl),"$$scope"in e&&r(15,d=e.$$scope)},e.$$.update=()=>{r(4,o=l),8192&e.$$.dirty&&r(3,({isStatic:i}=s||{}),i)},[f,m,S,i,o,y,b,$,x,w,(e,t)=>(e.visualElement=t,t),p,h,s,c,d]}var Mc=class extends Ue{constructor(e){super(),We(this,e,kc,Ec,s,{isSVG:11,forwardMotionProps:0,externalRef:1,targetEl:12})}};function Ac(e){let t;const n=e[5].default,r=d(n,e,e[4],null);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,[o]){r&&r.p&&(!t||16&o)&&m(r,n,e,e[4],t?f(n,e[4],o,null):h(e[4]),null)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function Tc(e,t,n,r){return e.addEventListener(t,n,r),function(){return e.removeEventListener(t,n,r)}}function Rc(e,t,n){let{$$slots:r={},$$scope:o}=t,{ref:i,eventName:a,handler:s,options:l}=t,c=()=>{};return ie(c),e.$$set=e=>{"ref"in e&&n(0,i=e.ref),"eventName"in e&&n(1,a=e.eventName),"handler"in e&&n(2,s=e.handler),"options"in e&&n(3,l=e.options),"$$scope"in e&&n(4,o=e.$$scope)},e.$$.update=()=>{15&e.$$.dirty&&(c=(()=>{if(c(),!i)return()=>{};const e=i.current;return s&&e?Tc(e,a,s,l):()=>{}})())},[i,a,s,l,o,r]}var Pc=class extends Ue{constructor(e){super(),We(this,e,Rc,Ac,s,{ref:0,eventName:1,handler:2,options:3})}};function Lc(e){return"undefined"!=typeof PointerEvent&&e instanceof PointerEvent?!("mouse"!==e.pointerType):e instanceof MouseEvent}function Oc(e){return!!e.touches}var zc={pageX:0,pageY:0};function Nc(e,t){void 0===t&&(t="page");var n=e.touches[0]||e.changedTouches[0]||zc;return{x:n[t+"X"],y:n[t+"Y"]}}function jc(e,t){return void 0===t&&(t="page"),{x:e[t+"X"],y:e[t+"Y"]}}function Vc(e,t){return void 0===t&&(t="page"),{point:Oc(e)?Nc(e,t):jc(e,t)}}var Dc=function(e,t){void 0===t&&(t=!1);var n=function(t){return e(t,Vc(t))};return t?function(e){return function(t){var n=t instanceof MouseEvent;(!n||n&&0===t.button)&&e(t)}}(n):n},_c="undefined"!=typeof window,Hc=function(){return _c&&null===window.onpointerdown},Fc=function(){return _c&&null===window.ontouchstart},Bc=function(){return _c&&null===window.onmousedown};function Ic(e){let t;const n=e[4].default,r=d(n,e,e[5],null);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||32&o)&&m(r,n,e,e[5],t?f(n,e[5],o,null):h(e[5]),null)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function Wc(e){let t,n;return t=new Pc({props:{ref:e[0],eventName:Zc(e[1]),handler:e[2]&&Dc(e[2],"pointerdown"===e[1]),options:e[3],$$slots:{default:[Ic]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,[n]){const r={};1&n&&(r.ref=e[0]),2&n&&(r.eventName=Zc(e[1])),6&n&&(r.handler=e[2]&&Dc(e[2],"pointerdown"===e[1])),8&n&&(r.options=e[3]),32&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}const Uc={pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointercancel:"mousecancel",pointerover:"mouseover",pointerout:"mouseout",pointerenter:"mouseenter",pointerleave:"mouseleave"},Gc={pointerdown:"touchstart",pointermove:"touchmove",pointerup:"touchend",pointercancel:"touchcancel"};function Zc(e){return Hc()?e:Fc()?Gc[e]:Bc()?Uc[e]:e}function Yc(e,t,n,r){return Tc(e,Zc(t),Dc(n,"pointerdown"===t),r)}function qc(e,t,n){let{$$slots:r={},$$scope:o}=t,{ref:i,eventName:a,handler:s,options:l}=t;return e.$$set=e=>{"ref"in e&&n(0,i=e.ref),"eventName"in e&&n(1,a=e.eventName),"handler"in e&&n(2,s=e.handler),"options"in e&&n(3,l=e.options),"$$scope"in e&&n(5,o=e.$$scope)},[i,a,s,l,r,o]}var Xc=class extends Ue{constructor(e){super(),We(this,e,qc,Wc,s,{ref:0,eventName:1,handler:2,options:3})}},Kc=function(){function e(e,t,n){var r=this,o=(void 0===n?{}:n).transformPagePoint;if(this.startEvent=null,this.lastMoveEvent=null,this.lastMoveEventInfo=null,this.handlers={},this.updatePoint=function(){if(r.lastMoveEvent&&r.lastMoveEventInfo){var e=eu(r.lastMoveEventInfo,r.history),t=null!==r.startEvent,n=Eo(e.offset,{x:0,y:0})>=3;if(t||n){var o=e.point,i=Rn().timestamp;r.history.push(Pn(Pn({},o),{timestamp:i}));var a=r.handlers,s=a.onStart,l=a.onMove;t||(s&&s(r.lastMoveEvent,e),r.startEvent=r.lastMoveEvent),l&&l(r.lastMoveEvent,e)}}},this.handlePointerMove=function(e,t){r.lastMoveEvent=e,r.lastMoveEventInfo=Jc(t,r.transformPagePoint),Lc(e)&&0===e.buttons?r.handlePointerUp(e,t):Cn.update(r.updatePoint,!0)},this.handlePointerUp=function(e,t){r.end();var n=r.handlers,o=n.onEnd,i=n.onSessionEnd,a=eu(Jc(t,r.transformPagePoint),r.history);r.startEvent&&o&&o(e,a),i&&i(e,a)},!(Oc(e)&&e.touches.length>1)){this.handlers=t,this.transformPagePoint=o;var i=Jc(Vc(e),this.transformPagePoint),a=i.point,s=Rn().timestamp;this.history=[Pn(Pn({},a),{timestamp:s})];var l=t.onSessionStart;l&&l(e,eu(i,this.history)),this.removeListeners=Br(Yc(window,"pointermove",this.handlePointerMove),Yc(window,"pointerup",this.handlePointerUp),Yc(window,"pointercancel",this.handlePointerUp))}}return e.prototype.updateHandlers=function(e){this.handlers=e},e.prototype.end=function(){this.removeListeners&&this.removeListeners(),En.update(this.updatePoint)},e}();function Jc(e,t){return t?{point:t(e.point)}:e}function Qc(e,t){return{x:e.x-t.x,y:e.y-t.y}}function eu(e,t){var n=e.point;return{point:n,delta:Qc(n,nu(t)),offset:Qc(n,tu(t)),velocity:ru(t,.1)}}function tu(e){return e[0]}function nu(e){return e[e.length-1]}function ru(e,t){if(e.length<2)return{x:0,y:0};for(var n=e.length-1,r=null,o=nu(e);n>=0&&(r=e[n],!(o.timestamp-r.timestamp>Qo(t)));)n--;if(!r)return{x:0,y:0};var i=(o.timestamp-r.timestamp)/1e3;if(0===i)return{x:0,y:0};var a={x:(o.x-r.x)/i,y:(o.y-r.y)/i};return a.x===1/0&&(a.x=0),a.y===1/0&&(a.y=0),a}function ou(e){let t;const n=e[11].default,r=d(n,e,e[12],null);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||4096&o)&&m(r,n,e,e[12],t?f(n,e[12],o,null):h(e[12]),null)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function iu(e){let t,n;return t=new Xc({props:{ref:e[0],eventName:"pointerdown",handler:e[1]&&e[3],$$slots:{default:[ou]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,[n]){const r={};1&n&&(r.ref=e[0]),2&n&&(r.handler=e[1]&&e[3]),4096&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function au(e,t,n){let r,o,{$$slots:i={},$$scope:a}=t,{props:s,visualElement:l,isCustom:d}=t,{onPan:p,onPanStart:f,onPanEnd:m,onPanSessionStart:h}=s,g=null;const v=se(Zo)||Zo(d);u(e,v,(e=>n(10,o=e)));let{transformPagePoint:y}=c(v),b={onSessionStart:h,onStart:f,onMove:p,onEnd:(e,t)=>{g=null,m&&m(e,t)}};return oe((()=>{null!==g&&g.updateHandlers(b)})),ie((()=>g&&g.end())),e.$$set=e=>{"props"in e&&n(4,s=e.props),"visualElement"in e&&n(0,l=e.visualElement),"isCustom"in e&&n(5,d=e.isCustom),"$$scope"in e&&n(12,a=e.$$scope)},e.$$.update=()=>{16&e.$$.dirty&&n(6,({onPan:p,onPanStart:f,onPanEnd:m,onPanSessionStart:h}=s),p,(n(7,f),n(4,s)),(n(8,m),n(4,s)),(n(9,h),n(4,s))),960&e.$$.dirty&&n(1,r=p||f||m||h),1024&e.$$.dirty&&({transformPagePoint:y}=o),960&e.$$.dirty&&(b={onSessionStart:h,onStart:f,onMove:p,onEnd:(e,t)=>{g=null,m&&m(e,t)}})},[l,r,v,function(e){g=new Kc(e,b,{transformPagePoint:y})},s,d,p,f,m,h,o,i,a]}var su=class extends Ue{constructor(e){super(),We(this,e,au,iu,s,{props:4,visualElement:0,isCustom:5})}},lu=function(e,t){return!!t&&(e===t||lu(e,t.parentElement))};function cu(e){var t=null;return function(){return null===t&&(t=e,function(){t=null})}}var uu=cu("dragHorizontal"),du=cu("dragVertical");function pu(e){var t=!1;if("y"===e)t=du();else if("x"===e)t=uu();else{var n=uu(),r=du();n&&r?t=function(){n(),r()}:(n&&n(),r&&r())}return t}function fu(){var e=pu(!0);return!e||(e(),!1)}function mu(e){let t;const n=e[8].default,r=d(n,e,e[9],null);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||512&o)&&m(r,n,e,e[9],t?f(n,e[9],o,null):h(e[9]),null)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function hu(e){let t,n;return t=new Xc({props:{ref:e[0],eventName:"pointerdown",handler:e[1]?e[2]:void 0,$$slots:{default:[mu]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,[n]){const r={};1&n&&(r.ref=e[0]),2&n&&(r.handler=e[1]?e[2]:void 0),512&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function gu(e,t,n){let r,o,i,a,s,{$$slots:l={},$$scope:c}=t,{props:u,visualElement:d}=t,p=!1,f=null;function m(){f?.(),f=null}function h(){return m(),p=!1,d.animationState?.setActive(wa.Tap,!1),!fu()}function g(e,t){h()&&(lu(d.getInstance(),e.target)?r?.(e,t):i?.(e,t))}function v(e,t){h()&&i?.(e,t)}return ie(m),e.$$set=e=>{"props"in e&&n(3,u=e.props),"visualElement"in e&&n(0,d=e.visualElement),"$$scope"in e&&n(9,c=e.$$scope)},e.$$.update=()=>{8&e.$$.dirty&&n(6,({onTap:r,onTapStart:o,onTapCancel:i,whileTap:a}=u),r,(n(4,o),n(3,u)),(n(5,i),n(3,u)),(n(7,a),n(3,u))),240&e.$$.dirty&&n(1,s=r||o||i||a)},[d,s,function(e,t){p||(m(),p=!0,f=Br(Yc(window,"pointerup",g),Yc(window,"pointercancel",v)),o?.(e,t),d.animationState?.setActive(wa.Tap,!0))},u,o,i,r,a,l,c]}var vu=class extends Ue{constructor(e){super(),We(this,e,gu,hu,s,{props:3,visualElement:0})}};function yu(e){let t,n,r,o,i;t=new Xc({props:{ref:e[0],eventName:"pointerenter",handler:e[1]||e[3]?bu(e[0],!0,e[1]):void 0}}),r=new Xc({props:{ref:e[0],eventName:"pointerleave",handler:e[2]||e[3]?bu(e[0],!1,e[2]):void 0}});const a=e[6].default,s=d(a,e,e[5],null);return{c(){Fe(t.$$.fragment),n=z(),Fe(r.$$.fragment),o=z(),s&&s.c()},m(e,a){Be(t,e,a),A(e,n,a),Be(r,e,a),A(e,o,a),s&&s.m(e,a),i=!0},p(e,[n]){const o={};1&n&&(o.ref=e[0]),11&n&&(o.handler=e[1]||e[3]?bu(e[0],!0,e[1]):void 0),t.$set(o);const l={};1&n&&(l.ref=e[0]),13&n&&(l.handler=e[2]||e[3]?bu(e[0],!1,e[2]):void 0),r.$set(l),s&&s.p&&(!i||32&n)&&m(s,a,e,e[5],i?f(a,e[5],n,null):h(e[5]),null)},i(e){i||(Re(t.$$.fragment,e),Re(r.$$.fragment,e),Re(s,e),i=!0)},o(e){Pe(t.$$.fragment,e),Pe(r.$$.fragment,e),Pe(s,e),i=!1},d(e){e&&(T(n),T(o)),Ie(t,e),Ie(r,e),s&&s.d(e)}}}function bu(e,t,n){return(r,o)=>{Lc(r)&&!fu()&&(n?.(r,o),e.animationState?.setActive(wa.Hover,t))}}function $u(e,t,n){let{$$slots:r={},$$scope:o}=t,{props:i,visualElement:a}=t,{onHoverStart:s,onHoverEnd:l,whileHover:c}=i;return e.$$set=e=>{"props"in e&&n(4,i=e.props),"visualElement"in e&&n(0,a=e.visualElement),"$$scope"in e&&n(5,o=e.$$scope)},e.$$.update=()=>{16&e.$$.dirty&&n(1,({onHoverStart:s,onHoverEnd:l,whileHover:c}=i),s,(n(2,l),n(4,i)),(n(3,c),n(4,i)))},[a,s,l,c,i,o,r]}var xu=class extends Ue{constructor(e){super(),We(this,e,$u,yu,s,{props:4,visualElement:0})}};function wu(e){let t;const n=e[5].default,r=d(n,e,e[6],null);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||64&o)&&m(r,n,e,e[6],t?f(n,e[6],o,null):h(e[6]),null)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function Su(e){let t,n;return t=new Pc({props:{ref:e[0],eventName:"blur",handler:e[1]?e[3]:void 0,$$slots:{default:[wu]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,n){const r={};1&n&&(r.ref=e[0]),2&n&&(r.handler=e[1]?e[3]:void 0),64&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function Cu(e){let t,n;return t=new Pc({props:{ref:e[0],eventName:"focus",handler:e[1]?e[2]:void 0,$$slots:{default:[Su]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,[n]){const r={};1&n&&(r.ref=e[0]),2&n&&(r.handler=e[1]?e[2]:void 0),67&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function Eu(e,t,n){let r,{$$slots:o={},$$scope:i}=t,{props:a,visualElement:s}=t;return e.$$set=e=>{"props"in e&&n(4,a=e.props),"visualElement"in e&&n(0,s=e.visualElement),"$$scope"in e&&n(6,i=e.$$scope)},e.$$.update=()=>{16&e.$$.dirty&&n(1,({whileFocus:r}=a),r)},[s,r,()=>{s.animationState?.setActive(wa.Focus,!0)},()=>{s.animationState?.setActive(wa.Focus,!1)},a,o,i]}const ku=e=>(e&&function(e){for(var t in e){var n=e[t];null!==n&&(gs[t].Component=n)}}(e),Mc),Mu={tap:vu,focus:class extends Ue{constructor(e){super(),We(this,e,Eu,Cu,s,{props:4,visualElement:0})}},hover:xu};function Au(e,t,n){var r=t.min,o=t.max;return void 0!==r&&e<r?e=n?Jn(r,e,n.min):Math.max(e,r):void 0!==o&&e>o&&(e=n?Jn(o,e,n.max):Math.min(e,o)),e}function Tu(e,t,n){return{min:void 0!==t?e.min+t:void 0,max:void 0!==n?e.max+n-(e.max-e.min):void 0}}function Ru(e,t){var n,r=t.min-e.min,o=t.max-e.max;return t.max-t.min<e.max-e.min&&(r=(n=On([o,r],2))[0],o=n[1]),{min:e.min+r,max:e.min+o}}function Pu(e,t,n){return{min:Lu(e,t),max:Lu(e,n)}}function Lu(e,t){var n;return"number"==typeof e?e:null!==(n=e[t])&&void 0!==n?n:0}var Ou,zu=new WeakMap,Nu=function(){function e(e){var t=e.visualElement;this.isDragging=!1,this.currentDirection=null,this.constraints=!1,this.elastic={x:{min:0,max:1},y:{min:0,max:1}},this.props={},this.hasMutatedConstraints=!1,this.cursorProgress={x:.5,y:.5},this.originPoint={},this.openGlobalLock=null,this.panSession=null,this.visualElement=t,this.visualElement.enableLayoutProjection(),zu.set(t,this)}return e.prototype.start=function(e,t){var n=this,r=void 0===t?{}:t,o=r.snapToCursor,i=void 0!==o&&o,a=r.cursorProgress,s=this.props.transformPagePoint;this.panSession=new Kc(e,{onSessionStart:function(e){var t;n.stopMotion();var r=function(e){return Vc(e,"client")}(e).point;null===(t=n.cancelLayout)||void 0===t||t.call(n),n.cancelLayout=Qa((function(e,t){var o=qa(n.visualElement),s=function(e){var t=[],n=function(e){Ya(e)&&t.push(e),e.children.forEach(n)};return e.children.forEach(n),t.sort(Oa)}(n.visualElement),l=zn(zn([],On(o)),On(s)),c=!1;n.isLayoutDrag()&&n.visualElement.lockProjectionTarget(),t((function(){l.forEach((function(e){return e.resetTransform()}))})),e((function(){Xa(n.visualElement),s.forEach(Xa)})),t((function(){l.forEach((function(e){return e.restoreTransform()})),i&&(c=n.snapToCursor(r))})),e((function(){Boolean(n.getAxisMotionValue("x")&&!n.isExternalDrag())||n.visualElement.rebaseProjectionTarget(!0,n.visualElement.measureViewportBox(!1)),n.visualElement.scheduleUpdateLayoutProjection();var e=n.visualElement.projection;Gi((function(t){if(!c){var o=e.target[t],i=o.min,s=o.max;n.cursorProgress[t]=a?a[t]:Kn(i,s,r[t])}var l=n.getAxisMotionValue(t);l&&(n.originPoint[t]=l.get())}))})),t((function(){kn.update(),kn.preRender(),kn.render(),kn.postRender()})),e((function(){return n.resolveDragConstraints()}))}))},onStart:function(e,t){var r,o,i,a=n.props,s=a.drag,l=a.dragPropagation;(!s||l||(n.openGlobalLock&&n.openGlobalLock(),n.openGlobalLock=pu(s),n.openGlobalLock))&&(es(),n.isDragging=!0,n.currentDirection=null,null===(o=(r=n.props).onDragStart)||void 0===o||o.call(r,e,t),null===(i=n.visualElement.animationState)||void 0===i||i.setActive(wa.Drag,!0))},onMove:function(e,t){var r,o,i,a,s=n.props,l=s.dragPropagation,c=s.dragDirectionLock;if(l||n.openGlobalLock){var u=t.offset;if(c&&null===n.currentDirection)return n.currentDirection=function(e,t){void 0===t&&(t=10);var n=null;Math.abs(e.y)>t?n="y":Math.abs(e.x)>t&&(n="x");return n}(u),void(null!==n.currentDirection&&(null===(o=(r=n.props).onDirectionLock)||void 0===o||o.call(r,n.currentDirection)));n.updateAxis("x",t.point,u),n.updateAxis("y",t.point,u),null===(a=(i=n.props).onDrag)||void 0===a||a.call(i,e,t),Ou=e}},onSessionEnd:function(e,t){return n.stop(e,t)}},{transformPagePoint:s})},e.prototype.resolveDragConstraints=function(){var e=this,t=this.props,n=t.dragConstraints,r=t.dragElastic,o=this.visualElement.getLayoutState().layoutCorrected;this.constraints=!!n&&(dc(n)?this.resolveRefConstraints(o,n):function(e,t){var n=t.top,r=t.left,o=t.bottom,i=t.right;return{x:Tu(e.x,r,i),y:Tu(e.y,n,o)}}(o,n)),this.elastic=function(e){return!1===e?e=0:!0===e&&(e=.35),{x:Pu(e,"left","right"),y:Pu(e,"top","bottom")}}(r),this.constraints&&!this.hasMutatedConstraints&&Gi((function(t){e.getAxisMotionValue(t)&&(e.constraints[t]=function(e,t){var n={};return void 0!==t.min&&(n.min=t.min-e.min),void 0!==t.max&&(n.max=t.max-e.min),n}(o[t],e.constraints[t]))}))},e.prototype.resolveRefConstraints=function(e,t){var n=this.props,r=n.onMeasureDragConstraints,o=n.transformPagePoint,i=t.current;this.constraintsBox=wl(i,o);var a=function(e,t){return{x:Ru(e.x,t.x),y:Ru(e.y,t.y)}}(e,this.constraintsBox);if(r){var s=r(function(e){var t=e.x,n=e.y;return{top:n.min,bottom:n.max,left:t.min,right:t.max}}(a));this.hasMutatedConstraints=!!s,s&&(a=Yi(s))}return a},e.prototype.cancelDrag=function(){var e,t;this.visualElement.unlockProjectionTarget(),null===(e=this.cancelLayout)||void 0===e||e.call(this),this.isDragging=!1,this.panSession&&this.panSession.end(),this.panSession=null,!this.props.dragPropagation&&this.openGlobalLock&&(this.openGlobalLock(),this.openGlobalLock=null),null===(t=this.visualElement.animationState)||void 0===t||t.setActive(wa.Drag,!1)},e.prototype.stop=function(e,t){var n,r,o;null===(n=this.panSession)||void 0===n||n.end(),this.panSession=null;var i=this.isDragging;if(this.cancelDrag(),i){var a=t.velocity;this.animateDragEnd(a),null===(o=(r=this.props).onDragEnd)||void 0===o||o.call(r,e,t)}},e.prototype.snapToCursor=function(e){var t=this;return Gi((function(n){if(ju(n,t.props.drag,t.currentDirection)){var r=t.getAxisMotionValue(n);if(!r)return t.cursorProgress[n]=.5,!0;var o=t.visualElement.getLayoutState().layout,i=o[n].max-o[n].min,a=o[n].min+i/2,s=e[n]-a;t.originPoint[n]=e[n],r.set(s)}})).includes(!0)},e.prototype.updateAxis=function(e,t,n){if(ju(e,this.props.drag,this.currentDirection))return this.getAxisMotionValue(e)?this.updateAxisMotionValue(e,n):this.updateVisualElementAxis(e,t)},e.prototype.updateAxisMotionValue=function(e,t){var n=this.getAxisMotionValue(e);if(t&&n){var r=this.originPoint[e]+t[e],o=this.constraints?Au(r,this.constraints[e],this.elastic[e]):r;n.set(o)}},e.prototype.updateVisualElementAxis=function(e,t){var n,r=this.visualElement.getLayoutState().layout[e],o=r.max-r.min,i=this.cursorProgress[e],a=function(e,t,n,r,o){var i=e-t*n;return r?Au(i,r,o):i}(t[e],o,i,null===(n=this.constraints)||void 0===n?void 0:n[e],this.elastic[e]);this.visualElement.setProjectionTargetAxis(e,a,a+o)},e.prototype.setProps=function(e){var t=e.drag,n=void 0!==t&&t,r=e.dragDirectionLock,o=void 0!==r&&r,i=e.dragPropagation,a=void 0!==i&&i,s=e.dragConstraints,l=void 0!==s&&s,c=e.dragElastic,u=void 0===c?.35:c,d=e.dragMomentum,p=void 0===d||d,f=Ln(e,["drag","dragDirectionLock","dragPropagation","dragConstraints","dragElastic","dragMomentum"]);this.props=Pn({drag:n,dragDirectionLock:o,dragPropagation:a,dragConstraints:l,dragElastic:u,dragMomentum:p},f)},e.prototype.getAxisMotionValue=function(e){var t=this.props,n=t.layout,r=t.layoutId,o="_drag"+e.toUpperCase();return this.props[o]?this.props[o]:n||void 0!==r?void 0:this.visualElement.getValue(e,0)},e.prototype.isLayoutDrag=function(){return!this.getAxisMotionValue("x")},e.prototype.isExternalDrag=function(){var e=this.props,t=e._dragX,n=e._dragY;return t||n},e.prototype.animateDragEnd=function(e){var t=this,n=this.props,r=n.drag,o=n.dragMomentum,i=n.dragElastic,a=n.dragTransition,s=function(e,t){void 0===t&&(t=!0);var n,r=e.getProjectionParent();return!!r&&(t?ca(n=ja(r.projection.target,e.projection.target),r.getLatestValues()):n=ja(r.getLayoutState().layout,e.getLayoutState().layout),Gi((function(t){return e.setProjectionTargetAxis(t,n[t].min,n[t].max,!0)})),!0)}(this.visualElement,this.isLayoutDrag()&&!this.isExternalDrag()),l=this.constraints||{};if(s&&Object.keys(l).length&&this.isLayoutDrag()){var c=this.visualElement.getProjectionParent();if(c){var u=ja(c.projection.targetFinal,l);Gi((function(e){var t=u[e],n=t.min,r=t.max;l[e]={min:isNaN(n)?void 0:n,max:isNaN(r)?void 0:r}}))}}var d=Gi((function(n){var c;if(ju(n,r,t.currentDirection)){var u=null!==(c=null==l?void 0:l[n])&&void 0!==c?c:{},d=i?200:1e6,p=i?40:1e7,f=Pn(Pn({type:"inertia",velocity:o?e[n]:0,bounceStiffness:d,bounceDamping:p,timeConstant:750,restDelta:1,restSpeed:10},a),u);return t.getAxisMotionValue(n)?t.startAxisValueAnimation(n,f):t.visualElement.startLayoutAnimation(n,f,s)}}));return Promise.all(d).then((function(){var e,n;null===(n=(e=t.props).onDragTransitionEnd)||void 0===n||n.call(e)}))},e.prototype.stopMotion=function(){var e=this;Gi((function(t){var n=e.getAxisMotionValue(t);n?n.stop():e.visualElement.stopLayoutAnimation()}))},e.prototype.startAxisValueAnimation=function(e,t){var n=this.getAxisMotionValue(e);if(n){var r=n.get();return n.set(r),n.set(r),xi(e,n,0,t)}},e.prototype.scalePoint=function(){var e=this,t=this.props,n=t.drag;if(dc(t.dragConstraints)&&this.constraintsBox){this.stopMotion();var r={x:0,y:0};Gi((function(t){r[t]=pa(e.visualElement.projection.target[t],e.constraintsBox[t])})),this.updateConstraints((function(){Gi((function(t){if(ju(t,n,null)){var o=function(e,t,n){var r=e.max-e.min,o=Jn(t.min,t.max-r,n);return{min:o,max:o+r}}(e.visualElement.projection.target[t],e.constraintsBox[t],r[t]),i=o.min,a=o.max;e.visualElement.setProjectionTargetAxis(t,i,a)}}))})),setTimeout(es,1)}},e.prototype.updateConstraints=function(e){var t=this;this.cancelLayout=Qa((function(n,r){var o=qa(t.visualElement);r((function(){return o.forEach((function(e){return e.resetTransform()}))})),n((function(){return Xa(t.visualElement)})),r((function(){return o.forEach((function(e){return e.restoreTransform()}))})),n((function(){t.resolveDragConstraints()})),e&&r(e)}))},e.prototype.mount=function(e){var t=this,n=Yc(e.getInstance(),"pointerdown",(function(e){var n=t.props,r=n.drag,o=n.dragListener;r&&(void 0===o||o)&&t.start(e)})),r=Tc(window,"resize",(function(){t.scalePoint()})),o=e.onLayoutUpdate((function(){t.isDragging&&t.resolveDragConstraints()})),i=e.prevDragCursor;return i&&this.start(Ou,{cursorProgress:i}),function(){null==n||n(),null==r||r(),null==o||o(),t.cancelDrag()}},e}();function ju(e,t,n){return!(!0!==t&&t!==e||null!==n&&n!==e)}function Vu(e){let t;const n=e[7].default,r=d(n,e,e[6],null);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,[o]){r&&r.p&&(!t||64&o)&&m(r,n,e,e[6],t?f(n,e[6],o,null):h(e[6]),null)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function Du(e,t,n){let r,{$$slots:o={},$$scope:i}=t,{visualElement:a,props:s,isCustom:l}=t;const d=se(Zo)||Zo(l);u(e,d,(e=>n(5,r=e)));let p,f=new Nu({visualElement:a});let{dragControls:m}=s,{transformPagePoint:h}=c(d);return f.setProps({...s,transformPagePoint:h}),ie((()=>{p&&p()})),re((()=>f.mount(a))),e.$$set=e=>{"visualElement"in e&&n(1,a=e.visualElement),"props"in e&&n(2,s=e.props),"isCustom"in e&&n(3,l=e.isCustom),"$$scope"in e&&n(6,i=e.$$scope)},e.$$.update=()=>{4&e.$$.dirty&&({dragControls:m}=s),32&e.$$.dirty&&n(4,({transformPagePoint:h}=r),h),20&e.$$.dirty&&f.setProps({...s,transformPagePoint:h})},p&&p(),m&&(p=m.subscribe(f)),[d,a,s,l,h,r,i,o]}const _u={pan:su,drag:class extends Ue{constructor(e){super(),We(this,e,Du,Vu,s,{visualElement:1,props:2,isCustom:3})}}};function Hu(e,t){return e/(t.max-t.min)*100}var Fu="_$css";var Bu={process:function(e,t,n){var r=n.target;if("string"==typeof e){if(!dr.test(e))return e;e=parseFloat(e)}return Hu(e,r.x)+"% "+Hu(e,r.y)+"%"}},Iu={borderRadius:Pn(Pn({},Bu),{applyTo:["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"]}),borderTopLeftRadius:Bu,borderTopRightRadius:Bu,borderBottomLeftRadius:Bu,borderBottomRightRadius:Bu,boxShadow:{process:function(e,t){var n=t.delta,r=t.treeScale,o=e,i=e.includes("var("),a=[];i&&(e=e.replace(Cl,(function(e){return a.push(e),Fu})));var s=Tr.parse(e);if(s.length>5)return o;var l=Tr.createTransformer(e),c="number"!=typeof s[0]?1:0,u=n.x.scale*r.x,d=n.y.scale*r.y;s[0+c]/=u,s[1+c]/=d;var p=Jn(u,d,.5);"number"==typeof s[2+c]&&(s[2+c]/=p),"number"==typeof s[3+c]&&(s[3+c]/=p);var f=l(s);if(i){var m=0;f=f.replace(Fu,(function(){var e=a[m];return m++,e}))}return f}}};const Wu={min:0,max:0};function Uu(e){return Gu(e.x,Wu)&&Gu(e.y,Wu)}function Gu(e,t){return e.min===t.min&&e.max===t.max}const Zu={duration:.45,ease:[.4,0,.1,1]};function Yu(e,t,n){let r,{visualElement:o,layout:i,safeToRemove:a}=t,s={x:{min:0,max:1},y:{min:0,max:1}},l={x:{min:0,max:1},y:{min:0,max:1}},c={x:!1,y:!1},u={x:void 0,y:void 0},d=!1;re((()=>{n(0,o.animateMotionValue=xi,o),o.enableLayoutProjection(),r=o.onLayoutUpdate(p),n(0,o.layoutSafeToRemove=function(){a()},o),function(e){for(var t in e)Ui[t]=e[t]}(Iu)})),ie((()=>{r(),Gi((e=>u[e]?.()))}));const p=(e,t,{originBox:n,targetBox:r,visibilityAction:s,shouldStackAnimate:l,onComplete:c,...u}={})=>{if(!1===l)return d=!1,a();if(d&&!0!==l)return;l&&(d=!0);const p=function(e,t){return!(Uu(e)||Uu(t)||Gu(e.x,t.x)&&Gu(e.y,t.y))}(t=n||t,e=r||e),m=Gi((n=>{if("position"===i){const r=e[n].max-e[n].min;t[n].max=t[n].min+r}if(!o.projection.isTargetLocked)return void 0===s?p?f(n,e[n],t[n],u):o.setProjectionTargetAxis(n,e[n].min,e[n].max):void o.setVisibility(s===VisibilityAction.Show)}));return o.syncRender(),Promise.all(m).then((()=>{d=!1,c&&c(),o.notifyLayoutAnimationComplete()}))},f=(e,t,n,{transition:r}={})=>{if(u[e]?.(),c[e]&&Gu(t,l[e]))return;u[e]?.(),c[e]=!0;const i=s[e],a=o.getProjectionAnimationProgress()[e];a.clearListeners(),a.set(0),a.set(0);const d=()=>{const r=a.get()/1e3;!function(e,t,n,r){e.min=Jn(t.min,n.min,r),e.max=Jn(t.max,n.max,r)}(i,n,t,r),o.setProjectionTargetAxis(e,i.min,i.max)};d();const p=a.onChange(d);u[e]=()=>{c[e]=!1,a.stop(),p()},l[e]=t;const f=r||o.getDefaultTransition()||Zu;return xi("x"===e?"layoutX":"layoutY",a,1e3,f&&$i(f,"layout")).then(u[e])};return e.$$set=e=>{"visualElement"in e&&n(0,o=e.visualElement),"layout"in e&&n(1,i=e.layout),"safeToRemove"in e&&n(2,a=e.safeToRemove)},[o,i,a]}var qu=class extends Ue{constructor(e){super(),We(this,e,Yu,null,s,{visualElement:0,layout:1,safeToRemove:2})}};function Xu(e){let t,n;return t=new qu({props:{visualElement:e[0],layout:e[1],safeToRemove:e[2][1]}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,[n]){const r={};1&n&&(r.visualElement=e[0]),2&n&&(r.layout=e[1]),4&n&&(r.safeToRemove=e[2][1]),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function Ku(e,t,n){let r,{visualElement:o,props:i,isCustom:a}=t,{layout:s}=i;const l=Ga(a);return u(e,l,(e=>n(2,r=e))),e.$$set=e=>{"visualElement"in e&&n(0,o=e.visualElement),"props"in e&&n(4,i=e.props),"isCustom"in e&&n(5,a=e.isCustom)},e.$$.update=()=>{16&e.$$.dirty&&n(1,({layout:s}=i),s)},[o,s,r,l,i,a]}var Ju=class extends Ue{constructor(e){super(),We(this,e,Ku,Xu,s,{visualElement:0,props:4,isCustom:5})}};function Qu(e,t,n){let{visualElement:r,syncLayout:o,framerSyncLayout:i,update:a}=t;const s=se(qo),l=se(Xo);re((()=>{ss(o)&&o.register(r),ss(i)&&i.register(r),r.onUnmount((()=>{ss(o)&&o.remove(r),ss(i)&&i.remove(r)}))}));let u=!1;const d=(e=!1)=>(u||(u=!0,c(s).forEach((e=>{e.updater?.(!0)})),ss(o)?o.syncUpdate():(!function(e,t){e.shouldResetTransform()||(t||(e.prevViewportBox=e.measureViewportBox(!1)),e.rebaseProjectionTarget(!1,e.prevViewportBox))}(r,e),o.add(r))),null);var p;void 0===a&&(p=d,ne().$$.before_update.push(p));const f=(e=!1)=>{u=!1;c(s).forEach(((e,t)=>{e.afterU?.(!0)})),ss(o)||o.flush()};return l.update((e=>e.concat([{updater:d,afterU:f}]))),oe(f),e.$$set=e=>{"visualElement"in e&&n(0,r=e.visualElement),"syncLayout"in e&&n(1,o=e.syncLayout),"framerSyncLayout"in e&&n(2,i=e.framerSyncLayout),"update"in e&&n(3,a=e.update)},e.$$.update=()=>{8&e.$$.dirty&&void 0!==a&&d(a)},[r,o,i,a]}var ed=class extends Ue{constructor(e){super(),We(this,e,Qu,null,s,{visualElement:0,syncLayout:1,framerSyncLayout:2,update:3})}};function td(e){let t,n;return t=new ed({props:{syncLayout:e[2],framerSyncLayout:e[3],visualElement:e[0],update:e[1]}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,[n]){const r={};4&n&&(r.syncLayout=e[2]),8&n&&(r.framerSyncLayout=e[3]),1&n&&(r.visualElement=e[0]),2&n&&(r.update=e[1]),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function nd(e,t,n){let r,o,i,{visualElement:a,props:s,isCustom:l}=t;const c=se(is)||is(l);u(e,c,(e=>n(2,o=e)));const d=se(as)||as();return u(e,d,(e=>n(3,i=e))),e.$$set=e=>{"visualElement"in e&&n(0,a=e.visualElement),"props"in e&&n(6,s=e.props),"isCustom"in e&&n(7,l=e.isCustom)},e.$$.update=()=>{64&e.$$.dirty&&n(1,({update:r}=s),r)},[a,r,o,i,c,d,s,l]}var rd={measureLayout:class extends Ue{constructor(e){super(),We(this,e,nd,td,s,{visualElement:0,props:6,isCustom:7})}},layoutAnimation:Ju};function od(e,t,n){let{visualElement:r,props:o}=t,{animate:i}=o;return e.$$set=e=>{"visualElement"in e&&n(0,r=e.visualElement),"props"in e&&n(1,o=e.props)},e.$$.update=()=>{2&e.$$.dirty&&n(2,({animate:i}=o),i),1&e.$$.dirty&&n(0,r.animationState=r.animationState||Ta(r),r),5&e.$$.dirty&&Ca(i)&&ge().then((()=>i.subscribe(r)))},[r,o,i]}var id=class extends Ue{constructor(e){super(),We(this,e,od,null,s,{visualElement:0,props:1})}};function ad(e){let t;const n=e[7].default,r=d(n,e,e[6],null);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,[o]){r&&r.p&&(!t||64&o)&&m(r,n,e,e[6],t?f(n,e[6],o,null):h(e[6]),null)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function sd(e,t,n){let r,o,i,{$$slots:a={},$$scope:s}=t,{props:l,visualElement:c,isCustom:d}=t;const p=se(Wa)||Wa(d);u(e,p,(e=>n(9,i=e)));const f=Ga(d);u(e,f,(e=>n(5,o=e)));return e.$$set=e=>{"props"in e&&n(2,l=e.props),"visualElement"in e&&n(3,c=e.visualElement),"isCustom"in e&&n(4,d=e.isCustom),"$$scope"in e&&n(6,s=e.$$scope)},e.$$.update=()=>{4&e.$$.dirty&&({custom:r}=l),32&e.$$.dirty&&(e=>{const[t,n]=e,o=c.animationState?.setActive(wa.Exit,!t,{custom:i?.custom??r});!t&&o?.then(n)})(o)},[p,f,l,c,d,o,s,a]}var ld=ku({...{animation:id,exit:class extends Ue{constructor(e){super(),We(this,e,sd,ad,s,{props:2,visualElement:3,isCustom:4})}}},...Mu,..._u,...rd});const cd=(e,...t)=>{let n=e.length;const r=()=>{let r="";for(let o=0;o<n;o++){r+=e[o];t[o]&&(r+=t[o].get())}return r},o=((e,t)=>{let n=[],r=e;const o=()=>{n.forEach((e=>e()))},i=()=>{n=r.map((e=>e.onChange(l))),s()},a=Ho(t(),(()=>(o(),i(),o)));let s=()=>{a.set(t())};const l=()=>{Cn.update(s,!1,!0)};return a.reset=(e,t)=>{r=e,o(),s=()=>{a.set(t())},i()},a})(t,r);return o.resetInner=o.reset,o.reset=(e,...t)=>{n=e.length,o.resetInner(t,r)},o};function ud(e){let t,n,r,o;const i=e[5].default,a=d(i,e,e[6],null);return{c(){t=P("div"),a&&a.c(),_(t,"class","relative bottom-3")},m(i,s){A(i,t,s),a&&a.m(t,null),n=!0,r||(o=y(e[7].call(null,t)),r=!0)},p(e,t){a&&a.p&&(!n||64&t)&&m(a,i,e,e[6],n?f(i,e[6],t,null):h(e[6]),null)},i(e){n||(Re(a,e),n=!0)},o(e){Pe(a,e),n=!1},d(e){e&&T(t),a&&a.d(e),r=!1,o()}}}function dd(e){let t,n;return t=new ld({props:{animate:e[4],drag:!0,dragConstraints:{left:0,right:0,top:0,bottom:0},style:{x:e[0],y:e[1],rotate:e[2],filter:e[3]},whileHover:{scale:1.05},whileTap:{scale:1},$$slots:{default:[ud,({motion:e})=>({7:e}),({motion:e})=>e?128:0]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,[n]){const r={};64&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function pd(e,t,n){let{$$slots:r={},$$scope:o}=t;const i=Ho(0),a=Ho(100),s=Ho(0),l=cd`drop-shadow(${i}px ${a}px 20px rgba(0,0,0,0.05))`,c=(()=>{const e=Wi((()=>{const t={};return ge().then((n=>t.clean=e.mount())),()=>{t.clean?.()}}));return e})();return re((()=>{c.start({x:0,y:0,rotate:0,transition:{duration:1,type:"spring"}})})),e.$$set=e=>{"$$scope"in e&&n(6,o=e.$$scope)},[i,a,s,l,c,r,o]}class fd extends Ue{constructor(e){super(),We(this,e,pd,dd,s,{})}}const md="onlook-toolbar",hd="data-onlook-ignore",gd="onlook-editable";let vd,yd,bd=Io(!1);class $d{constructor(){this.element=document.createElement("div"),this.svgNamespace="http://www.w3.org/2000/svg",this.svgElement=document.createElementNS(this.svgNamespace,"svg"),this.rectElement=document.createElementNS(this.svgNamespace,"rect"),this.rectElement.setAttribute("fill","none"),this.rectElement.setAttribute("stroke","#FF0E48"),this.rectElement.setAttribute("stroke-width","2"),this.rectElement.setAttribute("stroke-linecap","round"),this.rectElement.setAttribute("stroke-linejoin","round"),this.svgElement.appendChild(this.rectElement),this.element.style.position="absolute",this.element.style.pointerEvents="none",this.element.style.zIndex="999",this.element.setAttribute(hd,"true"),this.element.setAttribute("id","onlook-rect"),this.element.appendChild(this.svgElement)}render({width:e,height:t,top:n,left:r}){this.svgElement.setAttribute("width",e),this.svgElement.setAttribute("height",t),this.svgElement.setAttribute("viewBox",`0 0 ${e} ${t}`),this.rectElement.setAttribute("width",e),this.rectElement.setAttribute("height",t),this.element.style.top=`${n+window.scrollY}px`,this.element.style.left=`${r+window.scrollX}px`}}class xd extends $d{constructor(){super(),this.rectElement.setAttribute("stroke-width","2")}render({width:e,height:t,top:n,left:r}){super.render({width:e,height:t,top:n,left:r})}}class wd extends $d{constructor(){super(),this.rectElement.setAttribute("stroke-width","4")}render({width:e,height:t,top:n,left:r}){super.render({width:e,height:t,top:n,left:r})}}class Sd extends $d{constructor(){super(),this.rectElement.setAttribute("stroke-width","2"),this.rectElement.setAttribute("stroke-dasharray","5")}render({width:e,height:t,top:n,left:r}){super.render({width:e,height:t,top:n,left:r})}}class Cd{constructor(){this.clear=()=>{this.removeParentRect(),this.removeHoverRect(),this.removeClickedRects()},this.addClickRect=e=>{const t=new wd;this.clickedRects.push(t);const n=e.getBoundingClientRect();t.render(n),document.body.appendChild(t.element)},this.updateParentRect=e=>{const t=e.getBoundingClientRect();this.parentRect.render(t)},this.updateHoverRect=e=>{if(e&&this.hoverRect){const t=e.getBoundingClientRect();this.hoverRect.render(t)}},this.removeHoverRect=()=>{this.hoverRect.render({width:0,height:0,top:0,left:0})},this.removeClickedRects=()=>{this.clickedRects.forEach((e=>{e.element.remove()})),this.clickedRects=[]},this.removeParentRect=()=>{this.parentRect.render({width:0,height:0,top:0,left:0})},this.hoverRect=new xd,this.clickedRects=[],this.parentRect=new Sd,document.body.appendChild(this.hoverRect.element),document.body.appendChild(this.parentRect.element)}}function Ed(e,t){if(e.nodeType!==Node.ELEMENT_NODE)throw new Error("Can't generate CSS selector for non-element node type.");if("html"===e.tagName.toLowerCase())return"html";const n={root:document.body,idName:e=>!0,className:e=>!0,tagName:e=>!0,attr:(e,t)=>!1,seedMinLength:1,optimizedMinLength:2,threshold:1e3,maxNumberOfTries:1e4};vd=Object.assign(Object.assign({},n),t),yd=function(e,t){if(e.nodeType===Node.DOCUMENT_NODE)return e;if(e===t.root)return e.ownerDocument;return e}(vd.root,n);let r=kd(e,"all",(()=>kd(e,"two",(()=>kd(e,"one",(()=>kd(e,"none")))))));if(r){const t=Fd(Bd(r,e));return t.length>0&&(r=t[0]),Ad(r)}throw new Error("Selector was not found.")}function kd(e,t,n){let r=null,o=[],i=e,a=0;for(;i;){let e=Dd(Pd(i))||Dd(...Ld(i))||Dd(...Od(i))||Dd(zd(i))||[{name:"*",penalty:3}];const s=Nd(i);if("all"==t)s&&(e=e.concat(e.filter(Vd).map((e=>jd(e,s)))));else if("two"==t)e=e.slice(0,1),s&&(e=e.concat(e.filter(Vd).map((e=>jd(e,s)))));else if("one"==t){const[t]=e=e.slice(0,1);s&&Vd(t)&&(e=[jd(t,s)])}else"none"==t&&(e=[{name:"*",penalty:3}],s&&(e=[jd(e[0],s)]));for(let t of e)t.level=a;if(o.push(e),o.length>=vd.seedMinLength&&(r=Md(o,n),r))break;i=i.parentElement,a++}return r||(r=Md(o,n)),!r&&n?n():r}function Md(e,t){const n=Fd(Hd(e));if(n.length>vd.threshold)return t?t():null;for(let e of n)if(Rd(e))return e;return null}function Ad(e){let t=e[0],n=t.name;for(let r=1;r<e.length;r++){const o=e[r].level||0;n=t.level===o-1?`${e[r].name} > ${n}`:`${e[r].name} ${n}`,t=e[r]}return n}function Td(e){return e.map((e=>e.penalty)).reduce(((e,t)=>e+t),0)}function Rd(e){const t=Ad(e);switch(yd.querySelectorAll(t).length){case 0:throw new Error(`Can't select any node with this selector: ${t}`);case 1:return!0;default:return!1}}function Pd(e){const t=e.getAttribute("id");return t&&vd.idName(t)?{name:"#"+CSS.escape(t),penalty:0}:null}function Ld(e){const t=Array.from(e.attributes).filter((e=>vd.attr(e.name,e.value)));return t.map((e=>({name:`[${CSS.escape(e.name)}="${CSS.escape(e.value)}"]`,penalty:.5})))}function Od(e){return Array.from(e.classList).filter(vd.className).map((e=>({name:"."+CSS.escape(e),penalty:1})))}function zd(e){const t=e.tagName.toLowerCase();return vd.tagName(t)?{name:t,penalty:2}:null}function Nd(e){const t=e.parentNode;if(!t)return null;let n=t.firstChild;if(!n)return null;let r=0;for(;n&&(n.nodeType===Node.ELEMENT_NODE&&r++,n!==e);)n=n.nextSibling;return r}function jd(e,t){return{name:e.name+`:nth-child(${t})`,penalty:e.penalty+1}}function Vd(e){return"html"!==e.name&&!e.name.startsWith("#")}function Dd(...e){const t=e.filter(_d);return t.length>0?t:null}function _d(e){return null!=e}function*Hd(e,t=[]){if(e.length>0)for(let n of e[0])yield*Hd(e.slice(1,e.length),t.concat(n));else yield t}function Fd(e){return[...e].sort(((e,t)=>Td(e)-Td(t)))}function*Bd(e,t,n={counter:0,visited:new Map}){if(e.length>2&&e.length>vd.optimizedMinLength)for(let r=1;r<e.length-1;r++){if(n.counter>vd.maxNumberOfTries)return;n.counter+=1;const o=[...e];o.splice(r,1);const i=Ad(o);if(n.visited.has(i))return;Rd(o)&&Id(o,t)&&(yield o,n.visited.set(i,!0),yield*Bd(o,t,n))}}function Id(e,t){return yd.querySelector(Ad(e))===t}const Wd=(e,t)=>{const n=document.elementFromPoint(e,t),r=n=>{if(null==n?void 0:n.shadowRoot){const o=n.shadowRoot.elementFromPoint(e,t);return o==n?n:o.shadowRoot?r(o):o}return n};return r(n)||n},Ud=e=>(null==e?void 0:e.closest)&&(e.closest("onlook-toolbar")||e.closest("#onlook-toolbar")),Gd=e=>{let t=e.tagName.toLowerCase();try{if(e.nodeType!==Node.ELEMENT_NODE)return t;t=Ed(e,{className:()=>!1})}catch(e){console.error("Error creating selector ",e)}return t};class Zd{constructor(){this.page=document.body,this.selectedStore=Io([]),this.hoveredStore=Io(void 0),this.editingStore=Io(void 0),this.handleMouseOver=e=>{const t=Wd(e.clientX,e.clientY);Ud(t)||this.editing||(e.preventDefault(),e.stopPropagation(),this.hoveredStore.set(t))},this.handleMouseOut=e=>{this.hoveredStore.set(void 0)},this.handleClick=e=>{const t=Wd(e.clientX,e.clientY);Ud(t)||(e.preventDefault(),e.stopPropagation(),this.editing||(e.shiftKey?c(this.selectedStore).includes(t)?this.unselect(t):this.select(t):this.selectedStore.set([t])))},this.handleDoubleClick=e=>{const t=Wd(e.clientX,e.clientY);Ud(t)||(e.preventDefault(),e.stopPropagation(),this.selectedStore.set([]),this.hoveredStore.set(void 0),this.editingStore.set(t))}}get selected(){return c(this.selectedStore)}get hovered(){return c(this.hoveredStore)}get editing(){return c(this.editingStore)}select(e){this.selectedStore.update((t=>[...t,e]))}unselect(e){this.selectedStore.update((t=>t.filter((t=>t!==e))))}clear(){this.selectedStore.set([])}}let Yd=[],qd=[];function Xd(e){let t=Yd[Yd.length-1];t&&t.detail.styleType===e.detail.styleType&&t.detail.selector===e.detail.selector?t.detail.newVal=e.detail.newVal:Yd.push(e)}const Kd="OPEN_PROJECT",Jd=new WeakMap;let Qd=function(e,t){const n={};return function(...r){const o=this,i=r[0];Jd.has(i)||Jd.set(i,Gd(i));const a=Jd.get(i);n[a]?clearTimeout(n[a]):e.apply(o,r);clearTimeout(n[a]),n[a]=setTimeout((()=>{delete n[a],e.apply(o,r)}),t)}}((function(e,t,n,r){const o={type:"STYLE_CHANGE",detail:{selector:Jd.get(e)||Gd(e),styleType:t,newVal:n,oldVal:r,path:e.dataset.onlookId}};Xd(o),window.postMessage(o,window.location.origin)}),1e3);function ep(e,t,n,r){Qd(e,t,n,r)}function tp(){window.postMessage({type:Kd},window.location.origin)}class np{constructor(){this.simulateHover=e=>{e&&(this.selectorEngine.hoveredStore.set(e),this.overlayManager.updateHoverRect(e))},this.simulateOut=()=>{this.selectorEngine.hovered&&(this.selectorEngine.hoveredStore.set(void 0),this.overlayManager.removeHoverRect())},this.addEditability=e=>{this.oldText=e.textContent,e.setAttribute("contenteditable","true"),e.setAttribute("spellcheck","true"),e.classList.add(gd),e.focus(),e.addEventListener("keydown",this.stopBubbling),e.addEventListener("blur",this.removeEditability),e.addEventListener("input",this.handleInput)},this.handleInput=({target:e})=>{ep(e,"text",{text:e.textContent},{text:this.oldText})},this.stopBubbling=e=>"Escape"!=e.key&&e.stopPropagation(),this.removeEditability=({target:e})=>{e.classList.remove(gd),e.removeAttribute("contenteditable"),e.removeAttribute("spellcheck"),e.removeEventListener("blur",this.removeEditability),e.removeEventListener("keydown",this.stopBubbling),e.removeEventListener("input",this.handleInput),this.oldText=void 0,this.selectorEngine.editingStore.set(void 0)},this.selectorEngine=new Zd,this.overlayManager=new Cd,this.elResizeObserver=new ResizeObserver((e=>{const t=e.map((e=>e.target));this.onElementResize(t)}))}onInit(){}onDestroy(){bd.set(!1),this.overlayManager.clear(),this.selectorEngine.clear(),this.elResizeObserver.disconnect()}onMouseOver(e){this.selectorEngine.handleMouseOver(e),this.overlayManager.updateHoverRect(this.selectorEngine.hovered)}onMouseOut(e){this.selectorEngine.handleMouseOut(e),this.overlayManager.removeHoverRect()}onClick(e){bd.set(!0),this.selectorEngine.handleClick(e),this.overlayManager.clear(),this.elResizeObserver.disconnect(),this.selectorEngine.selected.forEach((e=>{this.overlayManager.addClickRect(e),this.elResizeObserver.observe(e)}))}onDoubleClick(e){this.selectorEngine.editing&&this.removeEditability({target:this.selectorEngine.editing}),bd.set(!0),this.overlayManager.clear(),this.elResizeObserver.disconnect(),this.selectorEngine.handleDoubleClick(e),this.addEditability(this.selectorEngine.editing)}onScreenResize(e){this.updateClickedRects(this.selectorEngine.selected)}onElementResize(e){this.updateClickedRects(e)}updateClickedRects(e){this.overlayManager.removeClickedRects(),e.forEach((e=>{this.overlayManager.addClickRect(e)})),this.updateParentRect()}updateParentRect(){if(this.selectorEngine.selected.length>0){const e=((...e)=>{if(0===e.length)return document.body;if(1===e.length)return e[0].parentNode||document.body;const t=e.map((e=>function(e){let t=0;for(;e.parentNode;)e=e.parentNode,t++;return t}(e)));e.forEach(((n,r)=>{for(;t[r]>Math.min(...t);)n=n.parentNode,t[r]--;e[r]=n}));let n=e[0];for(;!e.every((e=>e===n));){n=n.parentNode;for(let t=0;t<e.length;t++)e[t]!==n&&(e[t]=e[t].parentNode)}return n})(...this.selectorEngine.selected);this.overlayManager.updateParentRect(e)}else this.overlayManager.removeParentRect()}simulateClick(e){e&&(this.selectorEngine.selectedStore.set([e]),this.overlayManager.removeClickedRects(),this.overlayManager.addClickRect(e),this.scrollElementIntoView(e))}scrollElementIntoView(e){const t=e.getBoundingClientRect();if(!(t.top>=0&&t.left>=0&&t.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&t.right<=(window.innerWidth||document.documentElement.clientWidth))){const e=window.innerHeight/3,n=t.top+window.scrollY-e;window.scrollTo({top:n,behavior:"smooth"})}}}
/**! 
>>>>>>> b9b4be48fb8227b6bc38d840e289444a57cfe314
	 * hotkeys-js v3.13.7 
	 * A simple micro-library for defining and dispatching keyboard shortcuts. It has no dependencies. 
	 * 
	 * Copyright (c) 2024 kenny wong <wowohoo@qq.com> 
	 * https://github.com/jaywcjlove/hotkeys-js.git 
	 * 
	 * @website: https://jaywcjlove.github.io/hotkeys-js
	 
	 * Licensed under the MIT license 
<<<<<<< HEAD
	 */

	const isff = typeof navigator !== 'undefined' ? navigator.userAgent.toLowerCase().indexOf('firefox') > 0 : false;

	// 绑定事件
	function addEvent(object, event, method, useCapture) {
	  if (object.addEventListener) {
	    object.addEventListener(event, method, useCapture);
	  } else if (object.attachEvent) {
	    object.attachEvent("on".concat(event), method);
	  }
	}
	function removeEvent(object, event, method, useCapture) {
	  if (object.removeEventListener) {
	    object.removeEventListener(event, method, useCapture);
	  } else if (object.detachEvent) {
	    object.detachEvent("on".concat(event), method);
	  }
	}

	// 修饰键转换成对应的键码
	function getMods(modifier, key) {
	  const mods = key.slice(0, key.length - 1);
	  for (let i = 0; i < mods.length; i++) mods[i] = modifier[mods[i].toLowerCase()];
	  return mods;
	}

	// 处理传的key字符串转换成数组
	function getKeys(key) {
	  if (typeof key !== 'string') key = '';
	  key = key.replace(/\s/g, ''); // 匹配任何空白字符,包括空格、制表符、换页符等等
	  const keys = key.split(','); // 同时设置多个快捷键，以','分割
	  let index = keys.lastIndexOf('');

	  // 快捷键可能包含','，需特殊处理
	  for (; index >= 0;) {
	    keys[index - 1] += ',';
	    keys.splice(index, 1);
	    index = keys.lastIndexOf('');
	  }
	  return keys;
	}

	// 比较修饰键的数组
	function compareArray(a1, a2) {
	  const arr1 = a1.length >= a2.length ? a1 : a2;
	  const arr2 = a1.length >= a2.length ? a2 : a1;
	  let isIndex = true;
	  for (let i = 0; i < arr1.length; i++) {
	    if (arr2.indexOf(arr1[i]) === -1) isIndex = false;
	  }
	  return isIndex;
	}

	// Special Keys
	const _keyMap = {
	  backspace: 8,
	  '⌫': 8,
	  tab: 9,
	  clear: 12,
	  enter: 13,
	  '↩': 13,
	  return: 13,
	  esc: 27,
	  escape: 27,
	  space: 32,
	  left: 37,
	  up: 38,
	  right: 39,
	  down: 40,
	  del: 46,
	  delete: 46,
	  ins: 45,
	  insert: 45,
	  home: 36,
	  end: 35,
	  pageup: 33,
	  pagedown: 34,
	  capslock: 20,
	  num_0: 96,
	  num_1: 97,
	  num_2: 98,
	  num_3: 99,
	  num_4: 100,
	  num_5: 101,
	  num_6: 102,
	  num_7: 103,
	  num_8: 104,
	  num_9: 105,
	  num_multiply: 106,
	  num_add: 107,
	  num_enter: 108,
	  num_subtract: 109,
	  num_decimal: 110,
	  num_divide: 111,
	  '⇪': 20,
	  ',': 188,
	  '.': 190,
	  '/': 191,
	  '`': 192,
	  '-': isff ? 173 : 189,
	  '=': isff ? 61 : 187,
	  ';': isff ? 59 : 186,
	  '\'': 222,
	  '[': 219,
	  ']': 221,
	  '\\': 220
	};

	// Modifier Keys
	const _modifier = {
	  // shiftKey
	  '⇧': 16,
	  shift: 16,
	  // altKey
	  '⌥': 18,
	  alt: 18,
	  option: 18,
	  // ctrlKey
	  '⌃': 17,
	  ctrl: 17,
	  control: 17,
	  // metaKey
	  '⌘': 91,
	  cmd: 91,
	  command: 91
	};
	const modifierMap = {
	  16: 'shiftKey',
	  18: 'altKey',
	  17: 'ctrlKey',
	  91: 'metaKey',
	  shiftKey: 16,
	  ctrlKey: 17,
	  altKey: 18,
	  metaKey: 91
	};
	const _mods = {
	  16: false,
	  18: false,
	  17: false,
	  91: false
	};
	const _handlers = {};

	// F1~F12 special key
	for (let k = 1; k < 20; k++) {
	  _keyMap["f".concat(k)] = 111 + k;
	}

	let _downKeys = []; // 记录摁下的绑定键
	let winListendFocus = null; // window是否已经监听了focus事件
	let _scope = 'all'; // 默认热键范围
	const elementEventMap = new Map(); // 已绑定事件的节点记录

	// 返回键码
	const code = x => _keyMap[x.toLowerCase()] || _modifier[x.toLowerCase()] || x.toUpperCase().charCodeAt(0);
	const getKey = x => Object.keys(_keyMap).find(k => _keyMap[k] === x);
	const getModifier = x => Object.keys(_modifier).find(k => _modifier[k] === x);

	// 设置获取当前范围（默认为'所有'）
	function setScope(scope) {
	  _scope = scope || 'all';
	}
	// 获取当前范围
	function getScope() {
	  return _scope || 'all';
	}
	// 获取摁下绑定键的键值
	function getPressedKeyCodes() {
	  return _downKeys.slice(0);
	}
	function getPressedKeyString() {
	  return _downKeys.map(c => getKey(c) || getModifier(c) || String.fromCharCode(c));
	}
	function getAllKeyCodes() {
	  const result = [];
	  Object.keys(_handlers).forEach(k => {
	    _handlers[k].forEach(_ref => {
	      let {
	        key,
	        scope,
	        mods,
	        shortcut
	      } = _ref;
	      result.push({
	        scope,
	        shortcut,
	        mods,
	        keys: key.split('+').map(v => code(v))
	      });
	    });
	  });
	  return result;
	}

	// 表单控件控件判断 返回 Boolean
	// hotkey is effective only when filter return true
	function filter$1(event) {
	  const target = event.target || event.srcElement;
	  const {
	    tagName
	  } = target;
	  let flag = true;
	  const isInput = tagName === 'INPUT' && !['checkbox', 'radio', 'range', 'button', 'file', 'reset', 'submit', 'color'].includes(target.type);
	  // ignore: isContentEditable === 'true', <input> and <textarea> when readOnly state is false, <select>
	  if (target.isContentEditable || (isInput || tagName === 'TEXTAREA' || tagName === 'SELECT') && !target.readOnly) {
	    flag = false;
	  }
	  return flag;
	}

	// 判断摁下的键是否为某个键，返回true或者false
	function isPressed(keyCode) {
	  if (typeof keyCode === 'string') {
	    keyCode = code(keyCode); // 转换成键码
	  }
	  return _downKeys.indexOf(keyCode) !== -1;
	}

	// 循环删除handlers中的所有 scope(范围)
	function deleteScope(scope, newScope) {
	  let handlers;
	  let i;

	  // 没有指定scope，获取scope
	  if (!scope) scope = getScope();
	  for (const key in _handlers) {
	    if (Object.prototype.hasOwnProperty.call(_handlers, key)) {
	      handlers = _handlers[key];
	      for (i = 0; i < handlers.length;) {
	        if (handlers[i].scope === scope) {
	          const deleteItems = handlers.splice(i, 1);
	          deleteItems.forEach(_ref2 => {
	            let {
	              element
	            } = _ref2;
	            return removeKeyEvent(element);
	          });
	        } else {
	          i++;
	        }
	      }
	    }
	  }

	  // 如果scope被删除，将scope重置为all
	  if (getScope() === scope) setScope(newScope || 'all');
	}

	// 清除修饰键
	function clearModifier(event) {
	  let key = event.keyCode || event.which || event.charCode;
	  const i = _downKeys.indexOf(key);

	  // 从列表中清除按压过的键
	  if (i >= 0) {
	    _downKeys.splice(i, 1);
	  }
	  // 特殊处理 cmmand 键，在 cmmand 组合快捷键 keyup 只执行一次的问题
	  if (event.key && event.key.toLowerCase() === 'meta') {
	    _downKeys.splice(0, _downKeys.length);
	  }

	  // 修饰键 shiftKey altKey ctrlKey (command||metaKey) 清除
	  if (key === 93 || key === 224) key = 91;
	  if (key in _mods) {
	    _mods[key] = false;

	    // 将修饰键重置为false
	    for (const k in _modifier) if (_modifier[k] === key) hotkeys[k] = false;
	  }
	}
	function unbind(keysInfo) {
	  // unbind(), unbind all keys
	  if (typeof keysInfo === 'undefined') {
	    Object.keys(_handlers).forEach(key => {
	      Array.isArray(_handlers[key]) && _handlers[key].forEach(info => eachUnbind(info));
	      delete _handlers[key];
	    });
	    removeKeyEvent(null);
	  } else if (Array.isArray(keysInfo)) {
	    // support like : unbind([{key: 'ctrl+a', scope: 's1'}, {key: 'ctrl-a', scope: 's2', splitKey: '-'}])
	    keysInfo.forEach(info => {
	      if (info.key) eachUnbind(info);
	    });
	  } else if (typeof keysInfo === 'object') {
	    // support like unbind({key: 'ctrl+a, ctrl+b', scope:'abc'})
	    if (keysInfo.key) eachUnbind(keysInfo);
	  } else if (typeof keysInfo === 'string') {
	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }
	    // support old method
	    // eslint-disable-line
	    let [scope, method] = args;
	    if (typeof scope === 'function') {
	      method = scope;
	      scope = '';
	    }
	    eachUnbind({
	      key: keysInfo,
	      scope,
	      method,
	      splitKey: '+'
	    });
	  }
	}

	// 解除绑定某个范围的快捷键
	const eachUnbind = _ref3 => {
	  let {
	    key,
	    scope,
	    method,
	    splitKey = '+'
	  } = _ref3;
	  const multipleKeys = getKeys(key);
	  multipleKeys.forEach(originKey => {
	    const unbindKeys = originKey.split(splitKey);
	    const len = unbindKeys.length;
	    const lastKey = unbindKeys[len - 1];
	    const keyCode = lastKey === '*' ? '*' : code(lastKey);
	    if (!_handlers[keyCode]) return;
	    // 判断是否传入范围，没有就获取范围
	    if (!scope) scope = getScope();
	    const mods = len > 1 ? getMods(_modifier, unbindKeys) : [];
	    const unbindElements = [];
	    _handlers[keyCode] = _handlers[keyCode].filter(record => {
	      // 通过函数判断，是否解除绑定，函数相等直接返回
	      const isMatchingMethod = method ? record.method === method : true;
	      const isUnbind = isMatchingMethod && record.scope === scope && compareArray(record.mods, mods);
	      if (isUnbind) unbindElements.push(record.element);
	      return !isUnbind;
	    });
	    unbindElements.forEach(element => removeKeyEvent(element));
	  });
	};

	// 对监听对应快捷键的回调函数进行处理
	function eventHandler(event, handler, scope, element) {
	  if (handler.element !== element) {
	    return;
	  }
	  let modifiersMatch;

	  // 看它是否在当前范围
	  if (handler.scope === scope || handler.scope === 'all') {
	    // 检查是否匹配修饰符（如果有返回true）
	    modifiersMatch = handler.mods.length > 0;
	    for (const y in _mods) {
	      if (Object.prototype.hasOwnProperty.call(_mods, y)) {
	        if (!_mods[y] && handler.mods.indexOf(+y) > -1 || _mods[y] && handler.mods.indexOf(+y) === -1) {
	          modifiersMatch = false;
	        }
	      }
	    }

	    // 调用处理程序，如果是修饰键不做处理
	    if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === '*') {
	      handler.keys = [];
	      handler.keys = handler.keys.concat(_downKeys);
	      if (handler.method(event, handler) === false) {
	        if (event.preventDefault) event.preventDefault();else event.returnValue = false;
	        if (event.stopPropagation) event.stopPropagation();
	        if (event.cancelBubble) event.cancelBubble = true;
	      }
	    }
	  }
	}

	// 处理keydown事件
	function dispatch(event, element) {
	  const asterisk = _handlers['*'];
	  let key = event.keyCode || event.which || event.charCode;

	  // 表单控件过滤 默认表单控件不触发快捷键
	  if (!hotkeys.filter.call(this, event)) return;

	  // Gecko(Firefox)的command键值224，在Webkit(Chrome)中保持一致
	  // Webkit左右 command 键值不一样
	  if (key === 93 || key === 224) key = 91;

	  /**
	   * Collect bound keys
	   * If an Input Method Editor is processing key input and the event is keydown, return 229.
	   * https://stackoverflow.com/questions/25043934/is-it-ok-to-ignore-keydown-events-with-keycode-229
	   * http://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html
	   */
	  if (_downKeys.indexOf(key) === -1 && key !== 229) _downKeys.push(key);
	  /**
	   * Jest test cases are required.
	   * ===============================
	   */
	  ['ctrlKey', 'altKey', 'shiftKey', 'metaKey'].forEach(keyName => {
	    const keyNum = modifierMap[keyName];
	    if (event[keyName] && _downKeys.indexOf(keyNum) === -1) {
	      _downKeys.push(keyNum);
	    } else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) {
	      _downKeys.splice(_downKeys.indexOf(keyNum), 1);
	    } else if (keyName === 'metaKey' && event[keyName] && _downKeys.length === 3) {
	      /**
	       * Fix if Command is pressed:
	       * ===============================
	       */
	      if (!(event.ctrlKey || event.shiftKey || event.altKey)) {
	        _downKeys = _downKeys.slice(_downKeys.indexOf(keyNum));
	      }
	    }
	  });
	  /**
	   * -------------------------------
	   */

	  if (key in _mods) {
	    _mods[key] = true;

	    // 将特殊字符的key注册到 hotkeys 上
	    for (const k in _modifier) {
	      if (_modifier[k] === key) hotkeys[k] = true;
	    }
	    if (!asterisk) return;
	  }

	  // 将 modifierMap 里面的修饰键绑定到 event 中
	  for (const e in _mods) {
	    if (Object.prototype.hasOwnProperty.call(_mods, e)) {
	      _mods[e] = event[modifierMap[e]];
	    }
	  }
	  /**
	   * https://github.com/jaywcjlove/hotkeys/pull/129
	   * This solves the issue in Firefox on Windows where hotkeys corresponding to special characters would not trigger.
	   * An example of this is ctrl+alt+m on a Swedish keyboard which is used to type μ.
	   * Browser support: https://caniuse.com/#feat=keyboardevent-getmodifierstate
	   */
	  if (event.getModifierState && !(event.altKey && !event.ctrlKey) && event.getModifierState('AltGraph')) {
	    if (_downKeys.indexOf(17) === -1) {
	      _downKeys.push(17);
	    }
	    if (_downKeys.indexOf(18) === -1) {
	      _downKeys.push(18);
	    }
	    _mods[17] = true;
	    _mods[18] = true;
	  }

	  // 获取范围 默认为 `all`
	  const scope = getScope();
	  // 对任何快捷键都需要做的处理
	  if (asterisk) {
	    for (let i = 0; i < asterisk.length; i++) {
	      if (asterisk[i].scope === scope && (event.type === 'keydown' && asterisk[i].keydown || event.type === 'keyup' && asterisk[i].keyup)) {
	        eventHandler(event, asterisk[i], scope, element);
	      }
	    }
	  }
	  // key 不在 _handlers 中返回
	  if (!(key in _handlers)) return;
	  const handlerKey = _handlers[key];
	  const keyLen = handlerKey.length;
	  for (let i = 0; i < keyLen; i++) {
	    if (event.type === 'keydown' && handlerKey[i].keydown || event.type === 'keyup' && handlerKey[i].keyup) {
	      if (handlerKey[i].key) {
	        const record = handlerKey[i];
	        const {
	          splitKey
	        } = record;
	        const keyShortcut = record.key.split(splitKey);
	        const _downKeysCurrent = []; // 记录当前按键键值
	        for (let a = 0; a < keyShortcut.length; a++) {
	          _downKeysCurrent.push(code(keyShortcut[a]));
	        }
	        if (_downKeysCurrent.sort().join('') === _downKeys.sort().join('')) {
	          // 找到处理内容
	          eventHandler(event, record, scope, element);
	        }
	      }
	    }
	  }
	}
	function hotkeys(key, option, method) {
	  _downKeys = [];
	  const keys = getKeys(key); // 需要处理的快捷键列表
	  let mods = [];
	  let scope = 'all'; // scope默认为all，所有范围都有效
	  let element = document; // 快捷键事件绑定节点
	  let i = 0;
	  let keyup = false;
	  let keydown = true;
	  let splitKey = '+';
	  let capture = false;
	  let single = false; // 单个callback

	  // 对为设定范围的判断
	  if (method === undefined && typeof option === 'function') {
	    method = option;
	  }
	  if (Object.prototype.toString.call(option) === '[object Object]') {
	    if (option.scope) scope = option.scope; // eslint-disable-line
	    if (option.element) element = option.element; // eslint-disable-line
	    if (option.keyup) keyup = option.keyup; // eslint-disable-line
	    if (option.keydown !== undefined) keydown = option.keydown; // eslint-disable-line
	    if (option.capture !== undefined) capture = option.capture; // eslint-disable-line
	    if (typeof option.splitKey === 'string') splitKey = option.splitKey; // eslint-disable-line
	    if (option.single === true) single = true; // eslint-disable-line
	  }
	  if (typeof option === 'string') scope = option;

	  // 如果只允许单个callback，先unbind
	  if (single) unbind(key, scope);

	  // 对于每个快捷键进行处理
	  for (; i < keys.length; i++) {
	    key = keys[i].split(splitKey); // 按键列表
	    mods = [];

	    // 如果是组合快捷键取得组合快捷键
	    if (key.length > 1) mods = getMods(_modifier, key);

	    // 将非修饰键转化为键码
	    key = key[key.length - 1];
	    key = key === '*' ? '*' : code(key); // *表示匹配所有快捷键

	    // 判断key是否在_handlers中，不在就赋一个空数组
	    if (!(key in _handlers)) _handlers[key] = [];
	    _handlers[key].push({
	      keyup,
	      keydown,
	      scope,
	      mods,
	      shortcut: keys[i],
	      method,
	      key: keys[i],
	      splitKey,
	      element
	    });
	  }
	  // 在全局document上设置快捷键
	  if (typeof element !== 'undefined' && window) {
	    if (!elementEventMap.has(element)) {
	      const keydownListener = function () {
	        let event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.event;
	        return dispatch(event, element);
	      };
	      const keyupListenr = function () {
	        let event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.event;
	        dispatch(event, element);
	        clearModifier(event);
	      };
	      elementEventMap.set(element, {
	        keydownListener,
	        keyupListenr,
	        capture
	      });
	      addEvent(element, 'keydown', keydownListener, capture);
	      addEvent(element, 'keyup', keyupListenr, capture);
	    }
	    if (!winListendFocus) {
	      const listener = () => {
	        _downKeys = [];
	      };
	      winListendFocus = {
	        listener,
	        capture
	      };
	      addEvent(window, 'focus', listener, capture);
	    }
	  }
	}
	function trigger(shortcut) {
	  let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'all';
	  Object.keys(_handlers).forEach(key => {
	    const dataList = _handlers[key].filter(item => item.scope === scope && item.shortcut === shortcut);
	    dataList.forEach(data => {
	      if (data && data.method) {
	        data.method();
	      }
	    });
	  });
	}

	// 销毁事件,unbind之后判断element上是否还有键盘快捷键，如果没有移除监听
	function removeKeyEvent(element) {
	  const values = Object.values(_handlers).flat();
	  const findindex = values.findIndex(_ref4 => {
	    let {
	      element: el
	    } = _ref4;
	    return el === element;
	  });
	  if (findindex < 0) {
	    const {
	      keydownListener,
	      keyupListenr,
	      capture
	    } = elementEventMap.get(element) || {};
	    if (keydownListener && keyupListenr) {
	      removeEvent(element, 'keyup', keyupListenr, capture);
	      removeEvent(element, 'keydown', keydownListener, capture);
	      elementEventMap.delete(element);
	    }
	  }
	  if (values.length <= 0 || elementEventMap.size <= 0) {
	    // 移除所有的元素上的监听
	    const eventKeys = Object.keys(elementEventMap);
	    eventKeys.forEach(el => {
	      const {
	        keydownListener,
	        keyupListenr,
	        capture
	      } = elementEventMap.get(el) || {};
	      if (keydownListener && keyupListenr) {
	        removeEvent(el, 'keyup', keyupListenr, capture);
	        removeEvent(el, 'keydown', keydownListener, capture);
	        elementEventMap.delete(el);
	      }
	    });
	    // 清空 elementEventMap
	    elementEventMap.clear();
	    // 清空 _handlers
	    Object.keys(_handlers).forEach(key => delete _handlers[key]);
	    // 移除window上的focus监听
	    if (winListendFocus) {
	      const {
	        listener,
	        capture
	      } = winListendFocus;
	      removeEvent(window, 'focus', listener, capture);
	      winListendFocus = null;
	    }
	  }
	}
	const _api = {
	  getPressedKeyString,
	  setScope,
	  getScope,
	  deleteScope,
	  getPressedKeyCodes,
	  getAllKeyCodes,
	  isPressed,
	  filter: filter$1,
	  trigger,
	  unbind,
	  keyMap: _keyMap,
	  modifier: _modifier,
	  modifierMap
	};
	for (const a in _api) {
	  if (Object.prototype.hasOwnProperty.call(_api, a)) {
	    hotkeys[a] = _api[a];
	  }
	}
	if (typeof window !== 'undefined') {
	  const _hotkeys = window.hotkeys;
	  hotkeys.noConflict = deep => {
	    if (deep && window.hotkeys === hotkeys) {
	      window.hotkeys = _hotkeys;
	    }
	    return hotkeys;
	  };
	  window.hotkeys = hotkeys;
	}

	const historyStore = writable([]);
	const redoStore = writable([]);
	let historyStack = [];
	const UNDO_STYLE_CHANGE = "UNDO_STYLE_CHANGE";
	const REDO_STYLE_CHANGE = "REDO_STYLE_CHANGE";
	function addToHistory(event) {
	    // Merge to last item if styleType, selector and keys are the same
	    // Keeping oldest old val and newest new val
	    let lastEvent = peek();
	    if (lastEvent &&
	        lastEvent.detail.styleType === event.detail.styleType &&
	        lastEvent.detail.selector === event.detail.selector) {
	        lastEvent.detail.newVal = event.detail.newVal;
	    }
	    else {
	        historyStack.push(event);
	        historyStore.update((store) => {
	            store.push(event);
	            return store;
	        });
	    }
	}
	function undoLastEvent() {
	    historyStore.update(history => {
	        const event = history.pop();
	        if (event) {
	            const reverseEvent = {
	                type: UNDO_STYLE_CHANGE,
	                detail: {
	                    selector: event.detail.selector,
	                    styleType: event.detail.styleType,
	                    newVal: event.detail.oldVal,
	                    oldVal: event.detail.newVal,
	                    path: event.detail.path,
	                },
	            };
	            window.postMessage(reverseEvent, window.location.origin);
	            redoStore.update(redo => [...redo, event]);
	        }
	        return history;
	    });
	}
	function redoLastEvent() {
	    redoStore.update(redo => {
	        const event = redo.pop();
	        if (event) {
	            event.type = REDO_STYLE_CHANGE;
	            window.postMessage(event, window.location.origin);
	            historyStore.update(history => [...history, event]);
	        }
	        return redo;
	    });
	}
	function peek() {
	    return historyStack[historyStack.length - 1];
	}

	class HotKeys {
	    constructor() {
	        this.bindKeys = (toolName) => {
	            this.unbindAllKeys();
	            if (!toolName)
	                return;
	            const toolKeyMap = this.toolKeyMaps[toolName];
	            Object.keys(toolKeyMap).forEach(key => {
	                hotkeys(key, toolKeyMap[key]);
	            });
	        };
	        this.unbindAllKeys = () => {
	            const allKeys = Object.values(this.toolKeyMaps).reduce((acc, toolKeyMap) => {
	                return acc.concat(Object.keys(toolKeyMap));
	            }, []);
	            hotkeys.unbind(allKeys.join(','));
	        };
	        this.metaKey = window.navigator.platform.includes('Mac')
	            ? 'cmd'
	            : 'ctrl';
	        this.altKey = window.navigator.platform.includes('Mac')
	            ? 'opt'
	            : 'alt';
	        if (this.metaKey === 'ctrl')
	            [...document.querySelectorAll('kbd')]
	                .forEach(node => {
	                node.textContent = node.textContent.replace('cmd', 'ctrl');
	                node.textContent = node.textContent.replace('opt', 'alt');
	            });
	        this.toolKeyMaps = {
	            [ToolName.EDIT]: {
	                [`${this.metaKey}+z`]: () => undoLastEvent(),
	                [`${this.metaKey}+shift+z`]: () => redoLastEvent()
	            }
	        };
	    }
	}

	var ToolName;
	(function (ToolName) {
	    ToolName["EDIT"] = "edit";
	})(ToolName || (ToolName = {}));
	class ToolManager {
	    constructor(toolName) {
	        this.eventsMap = {
	            'mouseover': (e) => this.handleMouseOver(e),
	            'mouseout': (e) => this.handleMouseOut(e),
	            'click': (e) => this.handleClick(e),
	            'resize': (e) => this.handleScreenResize(e)
	        };
	        this.selectTool = (toolName) => {
	            if (this.selectedTool)
	                this.selectedTool.onDestroy();
	            this.hotKeys.bindKeys(toolName);
	            if (!toolName) {
	                this.selectedTool = undefined;
	                return;
	            }
	            this.selectedTool = this.toolMap[toolName];
	            this.selectedTool.onInit();
	        };
	        this.handleMouseOver = (e) => {
	            if (!this.selectedTool)
	                return;
	            this.selectedTool.onMouseOver(e);
	        };
	        this.handleMouseOut = (e) => {
	            if (!this.selectedTool)
	                return;
	            this.selectedTool.onMouseOut(e);
	        };
	        this.handleClick = (e) => {
	            if (!this.selectedTool)
	                return;
	            this.selectedTool.onClick(e);
	        };
	        this.handleScreenResize = (e) => {
	            if (!this.selectedTool)
	                return;
	            this.selectedTool.onScreenResize(e);
	        };
	        this.setListeners = () => {
	            Object.keys(this.eventsMap).forEach(event => {
	                window.addEventListener(event, this.eventsMap[event], true);
	            });
	        };
	        this.removeListeners = () => {
	            Object.keys(this.eventsMap).forEach(event => {
	                window.removeEventListener(event, this.eventsMap[event], true);
	            });
	        };
	        this.hotKeys = new HotKeys();
	        this.editTool = new EditTool();
	        this.toolMap = {
	            [ToolName.EDIT]: this.editTool,
	        };
	        // Set up tools
	        this.setListeners();
	        this.selectTool(toolName);
	    }
	}

	var t={dragStart:!0},e=(t,e,n)=>Math.min(Math.max(t,e),n),n$2=t=>"string"==typeof t,r=([t,e],n,r)=>{const o=(t,e)=>0===e?0:Math.ceil(t/e)*e;return [o(n,t),o(r,e)]};var o=(t,e)=>t.some((t=>e.some((e=>t.contains(e)))));function i$1(t,e){if(void 0===t)return;if(s(t))return t.getBoundingClientRect();if("object"==typeof t){const{top:e=0,left:n=0,right:r=0,bottom:o=0}=t;return {top:e,right:window.innerWidth-r,bottom:window.innerHeight-o,left:n}}if("parent"===t)return e.parentNode.getBoundingClientRect();const n=document.querySelector(t);if(null===n)throw new Error("The selector provided for bound doesn't exists in the document.");return n.getBoundingClientRect()}var a$2=(t,e,n)=>t.style.setProperty(e,n),s=t=>t instanceof HTMLElement,d$1=(d,l={})=>{let c,u,{bounds:f,axis:g="both",gpuAcceleration:h=!0,legacyTranslate:p=!0,transform:m,applyUserSelectHack:y=!0,disabled:b=!1,ignoreMultitouch:w=!1,recomputeBounds:v=t,grid:x,position:E,cancel:S,handle:A,defaultClass:C="neodrag",defaultClassDragging:N="neodrag-dragging",defaultClassDragged:D="neodrag-dragged",defaultPosition:M={x:0,y:0},onDragStart:B,onDrag:$,onDragEnd:R}=l,H=!1,L=0,P=0,T=0,X=0,Y=0,q=0,{x:k,y:U}=E?{x:E?.x??0,y:E?.y??0}:M;Q(k,U);let W,j,z,F,G,I="",J=!!E;v={...t,...v};const K=document.body.style,O=d.classList;function Q(t=L,e=P){if(!m){if(p){let n=`${+t}px, ${+e}px`;return a$2(d,"transform",h?`translate3d(${n}, 0)`:`translate(${n})`)}return a$2(d,"translate",`${+t}px ${+e}px ${h?"1px":""}`)}const r=m({offsetX:t,offsetY:e,rootNode:d});n$2(r)&&a$2(d,"transform",r);}const V=(t,e)=>{const n={offsetX:L,offsetY:P,rootNode:d,currentNode:G};d.dispatchEvent(new CustomEvent(t,{detail:n})),e?.(n);};const Z=addEventListener;Z("pointerdown",tt,!1),Z("pointerup",et,!1),Z("pointermove",nt,!1),a$2(d,"touch-action","none");const _=()=>{let t=d.offsetWidth/j.width;return isNaN(t)&&(t=1),t};function tt(t){if(b)return;if(2===t.button)return;if(w&&!t.isPrimary)return;if(v.dragStart&&(W=i$1(f,d)),n$2(A)&&n$2(S)&&A===S)throw new Error("`handle` selector can't be same as `cancel` selector");if(O.add(C),z=function(t,e){if(!t)return [e];if(s(t))return [t];if(Array.isArray(t))return t;const n=e.querySelectorAll(t);if(null===n)throw new Error("Selector passed for `handle` option should be child of the element on which the action is applied");return Array.from(n.values())}(A,d),F=function(t,e){if(!t)return [];if(s(t))return [t];if(Array.isArray(t))return t;const n=e.querySelectorAll(t);if(null===n)throw new Error("Selector passed for `cancel` option should be child of the element on which the action is applied");return Array.from(n.values())}(S,d),c=/(both|x)/.test(g),u=/(both|y)/.test(g),o(F,z))throw new Error("Element being dragged can't be a child of the element on which `cancel` is applied");const e=t.composedPath()[0];if(!z.some((t=>t.contains(e)||t.shadowRoot?.contains(e)))||o(F,[e]))return;G=1===z.length?d:z.find((t=>t.contains(e))),H=!0,j=d.getBoundingClientRect(),y&&(I=K.userSelect,K.userSelect="none"),V("neodrag:start",B);const{clientX:r,clientY:a}=t,l=_();c&&(T=r-k/l),u&&(X=a-U/l),W&&(Y=r-j.left,q=a-j.top);}function et(){H&&(v.dragEnd&&(W=i$1(f,d)),O.remove(N),O.add(D),y&&(K.userSelect=I),V("neodrag:end",R),c&&(T=L),u&&(X=P),H=!1);}function nt(t){if(!H)return;v.drag&&(W=i$1(f,d)),O.add(N),t.preventDefault(),j=d.getBoundingClientRect();let n=t.clientX,o=t.clientY;const a=_();if(W){const t={left:W.left+Y,top:W.top+q,right:W.right+Y-j.width,bottom:W.bottom+q-j.height};n=e(n,t.left,t.right),o=e(o,t.top,t.bottom);}if(Array.isArray(x)){let[t,e]=x;if(isNaN(+t)||t<0)throw new Error("1st argument of `grid` must be a valid positive number");if(isNaN(+e)||e<0)throw new Error("2nd argument of `grid` must be a valid positive number");let i=n-T,s=o-X;[i,s]=r([t/a,e/a],i,s),n=T+i,o=X+s;}c&&(L=Math.round((n-T)*a)),u&&(P=Math.round((o-X)*a)),k=L,U=P,V("neodrag",$),Q();}return {destroy:()=>{const t=removeEventListener;t("pointerdown",tt,!1),t("pointerup",et,!1),t("pointermove",nt,!1);},update:e=>{g=e.axis||"both",b=e.disabled??!1,w=e.ignoreMultitouch??!1,A=e.handle,f=e.bounds,v=e.recomputeBounds??t,S=e.cancel,y=e.applyUserSelectHack??!0,x=e.grid,h=e.gpuAcceleration??!0,p=e.legacyTranslate??!0,m=e.transform;const n=O.contains(D);O.remove(C,D),C=e.defaultClass??"neodrag",N=e.defaultClassDragging??"neodrag-dragging",D=e.defaultClassDragged??"neodrag-dragged",O.add(C),n&&O.add(D),J&&(k=L=e.position?.x??L,U=P=e.position?.y??P,Q());}}};

	function arraysAreEqual(arr1, arr2) {
	    if (arr1.length !== arr2.length) {
	        return false;
	    }
	    return arr1.every((value, index) => value === arr2[index]);
	}

	/**
	 * Returns the array element after to the given index.
	 * @param array the array.
	 * @param currentIndex the index of the current element.
	 * @param loop loop to the beginning of the array if the next index is out of bounds?
	 */
	function next(array, index, loop = true) {
	    if (index === array.length - 1) {
	        return loop ? array[0] : array[index];
	    }
	    return array[index + 1];
	}
	/**
	 * Returns the array element prior to the given index.
	 * @param array the array.
	 * @param currentIndex the index of the current element.
	 * @param loop loop to the end of the array if the previous index is out of bounds?
	 */
	function prev(array, currentIndex, loop = true) {
	    if (currentIndex <= 0) {
	        return loop ? array[array.length - 1] : array[0];
	    }
	    return array[currentIndex - 1];
	}
	/**
	 * Returns the last element in an array.
	 * @param array the array.
	 */
	function last$1(array) {
	    return array[array.length - 1];
	}

	/**
	 * A utility function that converts a style object to a string.
	 *
	 * @param style - The style object to convert
	 * @returns The style object as a string
	 */
	function styleToString(style) {
	    return Object.keys(style).reduce((str, key) => {
	        if (style[key] === undefined)
	            return str;
	        return str + `${key}:${style[key]};`;
	    }, '');
	}

	function disabledAttr(disabled) {
	    return disabled ? true : undefined;
	}
	({
	    type: 'hidden',
	    'aria-hidden': true,
	    hidden: true,
	    tabIndex: -1,
	    style: styleToString({
	        position: 'absolute',
	        opacity: 0,
	        'pointer-events': 'none',
	        margin: 0,
	        transform: 'translateX(-100%)',
	    }),
	});

	function lightable(value) {
	    function subscribe(run) {
	        run(value);
	        return () => {
	            // don't need to unsub from anything
	        };
	    }
	    return { subscribe };
	}

	function getElementByMeltId(id) {
	    if (!isBrowser)
	        return null;
	    const el = document.querySelector(`[data-melt-id="${id}"]`);
	    return isHTMLElement(el) ? el : null;
	}
	const hiddenAction = (obj) => {
	    return new Proxy(obj, {
	        get(target, prop, receiver) {
	            return Reflect.get(target, prop, receiver);
	        },
	        ownKeys(target) {
	            return Reflect.ownKeys(target).filter((key) => key !== 'action');
	        },
	    });
	};
	const isFunctionWithParams = (fn) => {
	    return typeof fn === 'function';
	};
	function builder(name, args) {
	    const { stores, action, returned } = args ?? {};
	    const derivedStore = (() => {
	        if (stores && returned) {
	            // If stores are provided, create a derived store from them
	            return derived(stores, (values) => {
	                const result = returned(values);
	                if (isFunctionWithParams(result)) {
	                    const fn = (...args) => {
	                        return hiddenAction({
	                            ...result(...args),
	                            [`data-melt-${name}`]: '',
	                            action: action ?? noop$1,
	                        });
	                    };
	                    fn.action = action ?? noop$1;
	                    return fn;
	                }
	                return hiddenAction({
	                    ...result,
	                    [`data-melt-${name}`]: '',
	                    action: action ?? noop$1,
	                });
	            });
	        }
	        else {
	            // If stores are not provided, return a lightable store, for consistency
	            const returnedFn = returned;
	            const result = returnedFn?.();
	            if (isFunctionWithParams(result)) {
	                const resultFn = (...args) => {
	                    return hiddenAction({
	                        ...result(...args),
	                        [`data-melt-${name}`]: '',
	                        action: action ?? noop$1,
	                    });
	                };
	                resultFn.action = action ?? noop$1;
	                return lightable(resultFn);
	            }
	            return lightable(hiddenAction({
	                ...result,
	                [`data-melt-${name}`]: '',
	                action: action ?? noop$1,
	            }));
	        }
	    })();
	    const actionFn = (action ??
	        (() => {
	            /** noop */
	        }));
	    actionFn.subscribe = derivedStore.subscribe;
	    return actionFn;
	}
	function createElHelpers(prefix) {
	    const name = (part) => (part ? `${prefix}-${part}` : prefix);
	    const attribute = (part) => `data-melt-${prefix}${part ? `-${part}` : ''}`;
	    const selector = (part) => `[data-melt-${prefix}${part ? `-${part}` : ''}]`;
	    const getEl = (part) => document.querySelector(selector(part));
	    return {
	        name,
	        attribute,
	        selector,
	        getEl,
	    };
	}

	const isBrowser = typeof document !== 'undefined';
	function isHTMLElement(element) {
	    return element instanceof HTMLElement;
	}

	/**
	 * Executes an array of callback functions with the same arguments.
	 * @template T The types of the arguments that the callback functions take.
	 * @param n array of callback functions to execute.
	 * @returns A new function that executes all of the original callback functions with the same arguments.
	 */
	function executeCallbacks(...callbacks) {
	    return (...args) => {
	        for (const callback of callbacks) {
	            if (typeof callback === 'function') {
	                callback(...args);
	            }
	        }
	    };
	}
	/**
	 * A no operation function (does nothing)
	 */
	function noop$1() {
	    //
	}

	/**
	 * Adds an event listener to the specified target element(s) for the given event(s), and returns a function to remove it.
	 * @param target The target element(s) to add the event listener to.
	 * @param event The event(s) to listen for.
	 * @param handler The function to be called when the event is triggered.
	 * @param options An optional object that specifies characteristics about the event listener.
	 * @returns A function that removes the event listener from the target element(s).
	 */
	function addEventListener$1(target, event, handler, options) {
	    const events = Array.isArray(event) ? event : [event];
	    // Add the event listener to each specified event for the target element(s).
	    events.forEach((_event) => target.addEventListener(_event, handler, options));
	    // Return a function that removes the event listener from the target element(s).
	    return () => {
	        events.forEach((_event) => target.removeEventListener(_event, handler, options));
	    };
	}
	function addMeltEventListener(target, event, handler, options) {
	    const events = Array.isArray(event) ? event : [event];
	    if (typeof handler === 'function') {
	        const handlerWithMelt = withMelt((_event) => handler(_event));
	        // Add the event listener to each specified event for the target element(s).
	        events.forEach((_event) => target.addEventListener(_event, handlerWithMelt, options));
	        // Return a function that removes the event listener from the target element(s).
	        return () => {
	            events.forEach((_event) => target.removeEventListener(_event, handlerWithMelt, options));
	        };
	    }
	    return () => noop$1();
	}
	function dispatchMeltEvent(originalEvent) {
	    const node = originalEvent.currentTarget;
	    if (!isHTMLElement(node))
	        return null;
	    const customMeltEvent = new CustomEvent(`m-${originalEvent.type}`, {
	        detail: {
	            originalEvent,
	        },
	        cancelable: true,
	    });
	    node.dispatchEvent(customMeltEvent);
	    return customMeltEvent;
	}
	function withMelt(handler) {
	    return (event) => {
	        const customEvent = dispatchMeltEvent(event);
	        if (customEvent?.defaultPrevented)
	            return;
	        return handler(event);
	    };
	}

	/**
	 * Detects the text direction in the element.
	 * @returns {TextDirection} The text direction ('ltr' for left-to-right or 'rtl' for right-to-left).
	 */
	function getElemDirection(elem) {
	    const style = window.getComputedStyle(elem);
	    const direction = style.getPropertyValue('direction');
	    return direction;
	}

	function omit(obj, ...keys) {
	    const result = {};
	    for (const key of Object.keys(obj)) {
	        if (!keys.includes(key)) {
	            result[key] = obj[key];
	        }
	    }
	    return result;
	}

	/**
	 * Transforms an existing store into a store with a `get` method.
	 * Uses subscriptions to keep the value up to date, so make sure to call `destroy` when you're done with it.
	 * @date 20/01/2024 - 16:38:39
	 *
	 * @export
	 * @template {Readable<unknown>} T
	 * @param {T} store
	 * @returns {WithGet<T>}
	 */
	function withGet(store) {
	    return {
	        ...store,
	        get: () => get_store_value(store),
	    };
	}
	withGet.writable = function (initial) {
	    const internal = writable(initial);
	    let value = initial;
	    return {
	        subscribe: internal.subscribe,
	        set(newValue) {
	            internal.set(newValue);
	            value = newValue;
	        },
	        update(updater) {
	            const newValue = updater(value);
	            internal.set(newValue);
	            value = newValue;
	        },
	        get() {
	            return value;
	        },
	    };
	};
	withGet.derived = function (stores, fn) {
	    const subscribers = new Map();
	    const get = () => {
	        const values = Array.isArray(stores) ? stores.map((store) => store.get()) : stores.get();
	        return fn(values);
	    };
	    const subscribe = (subscriber) => {
	        const unsubscribers = [];
	        const storesArr = Array.isArray(stores) ? stores : [stores];
	        storesArr.forEach((store) => {
	            unsubscribers.push(store.subscribe(() => {
	                subscriber(get());
	            }));
	        });
	        subscriber(get());
	        subscribers.set(subscriber, unsubscribers);
	        return () => {
	            const unsubscribers = subscribers.get(subscriber);
	            if (unsubscribers) {
	                for (const unsubscribe of unsubscribers) {
	                    unsubscribe();
	                }
	            }
	            subscribers.delete(subscriber);
	        };
	    };
	    return {
	        get,
	        subscribe,
	    };
	};

	const overridable = (_store, onChange) => {
	    const store = withGet(_store);
	    const update = (updater, sideEffect) => {
	        store.update((curr) => {
	            const next = updater(curr);
	            let res = next;
	            if (onChange) {
	                res = onChange({ curr, next });
	            }
	            sideEffect?.(res);
	            return res;
	        });
	    };
	    const set = (curr) => {
	        update(() => curr);
	    };
	    return {
	        ...store,
	        update,
	        set,
	    };
	};

	function sleep(ms) {
	    return new Promise((resolve) => setTimeout(resolve, ms));
	}

	let urlAlphabet =
	  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict';
	let nanoid = (size = 21) => {
	  let id = '';
	  let i = size;
	  while (i--) {
	    id += urlAlphabet[(Math.random() * 64) | 0];
	  }
	  return id
	};

	/**
	 * A function that generates a random id
	 * @returns An id
	 */
	function generateId() {
	    return nanoid(10);
	}
	function generateIds(args) {
	    return args.reduce((acc, curr) => {
	        acc[curr] = generateId();
	        return acc;
	    }, {});
	}

	/**
	 * A constant object that maps commonly used keyboard keys to their corresponding string values.
	 * This object can be used in other parts of the application to handle keyboard input and prevent
	 * hard-coded strings throughout.
	 */
	const kbd = {
	    ALT: 'Alt',
	    ARROW_DOWN: 'ArrowDown',
	    ARROW_LEFT: 'ArrowLeft',
	    ARROW_RIGHT: 'ArrowRight',
	    ARROW_UP: 'ArrowUp',
	    BACKSPACE: 'Backspace',
	    CAPS_LOCK: 'CapsLock',
	    CONTROL: 'Control',
	    DELETE: 'Delete',
	    END: 'End',
	    ENTER: 'Enter',
	    ESCAPE: 'Escape',
	    F1: 'F1',
	    F10: 'F10',
	    F11: 'F11',
	    F12: 'F12',
	    F2: 'F2',
	    F3: 'F3',
	    F4: 'F4',
	    F5: 'F5',
	    F6: 'F6',
	    F7: 'F7',
	    F8: 'F8',
	    F9: 'F9',
	    HOME: 'Home',
	    META: 'Meta',
	    PAGE_DOWN: 'PageDown',
	    PAGE_UP: 'PageUp',
	    SHIFT: 'Shift',
	    SPACE: ' ',
	    TAB: 'Tab',
	    CTRL: 'Control',
	    ASTERISK: '*',
	    A: 'a',
	    P: 'p',
	};
	const getNextKey = (dir = 'ltr', orientation = 'horizontal') => {
	    return {
	        horizontal: dir === 'rtl' ? kbd.ARROW_LEFT : kbd.ARROW_RIGHT,
	        vertical: kbd.ARROW_DOWN,
	    }[orientation];
	};
	const getPrevKey = (dir = 'ltr', orientation = 'horizontal') => {
	    return {
	        horizontal: dir === 'rtl' ? kbd.ARROW_RIGHT : kbd.ARROW_LEFT,
	        vertical: kbd.ARROW_UP,
	    }[orientation];
	};
	const getDirectionalKeys = (dir = 'ltr', orientation = 'horizontal') => {
	    return {
	        nextKey: getNextKey(dir, orientation),
	        prevKey: getPrevKey(dir, orientation),
	    };
	};

	/**
	 * Given an object of properties, returns an object of writable stores
	 * with the same properties and values.
	 */
	function toWritableStores(properties) {
	    const result = {};
	    Object.keys(properties).forEach((key) => {
	        const propertyKey = key;
	        const value = properties[propertyKey];
	        result[propertyKey] = withGet(writable(value));
	    });
	    return result;
	}

	/**
	 * Manage roving focus between elements. Sets the current active element to
	 * tabindex -1 and the next element to tabindex 0.
	 *
	 * @param nextElement The element to focus on
	 */
	function handleRovingFocus(nextElement) {
	    if (!isBrowser)
	        return;
	    sleep(1).then(() => {
	        const currentFocusedElement = document.activeElement;
	        if (!isHTMLElement(currentFocusedElement) || currentFocusedElement === nextElement)
	            return;
	        currentFocusedElement.tabIndex = -1;
	        if (nextElement) {
	            nextElement.tabIndex = 0;
	            nextElement.focus();
	        }
	    });
	}

	const { name: name$2, selector: selector$2 } = createElHelpers('accordion');
	const defaults$4 = {
	    multiple: false,
	    disabled: false,
	    forceVisible: false,
	};
	const createAccordion = (props) => {
	    const withDefaults = { ...defaults$4, ...props };
	    const options = toWritableStores(omit(withDefaults, 'value', 'onValueChange', 'defaultValue'));
	    const meltIds = generateIds(['root']);
	    const { disabled, forceVisible } = options;
	    const valueWritable = withDefaults.value ?? writable(withDefaults.defaultValue);
	    const value = overridable(valueWritable, withDefaults?.onValueChange);
	    const isSelected = (key, v) => {
	        if (v === undefined)
	            return false;
	        if (typeof v === 'string')
	            return v === key;
	        return v.includes(key);
	    };
	    const isSelectedStore = derived(value, ($value) => {
	        return (key) => isSelected(key, $value);
	    });
	    const root = builder(name$2(), {
	        returned: () => ({
	            'data-melt-id': meltIds.root,
	        }),
	    });
	    const parseItemProps = (props) => {
	        if (typeof props === 'string') {
	            return { value: props };
	        }
	        else {
	            return props;
	        }
	    };
	    const parseHeadingProps = (props) => {
	        if (typeof props === 'number') {
	            return { level: props };
	        }
	        else {
	            return props;
	        }
	    };
	    const item = builder(name$2('item'), {
	        stores: value,
	        returned: ($value) => {
	            return (props) => {
	                const { value: itemValue, disabled } = parseItemProps(props);
	                return {
	                    'data-state': isSelected(itemValue, $value) ? 'open' : 'closed',
	                    'data-disabled': disabledAttr(disabled),
	                };
	            };
	        },
	    });
	    const trigger = builder(name$2('trigger'), {
	        stores: [value, disabled],
	        returned: ([$value, $disabled]) => {
	            return (props) => {
	                const { value: itemValue, disabled } = parseItemProps(props);
	                // generate the content ID here so that we can grab it in the content
	                // builder action to ensure the values match.
	                return {
	                    disabled: disabledAttr($disabled || disabled),
	                    'aria-expanded': isSelected(itemValue, $value) ? true : false,
	                    'aria-disabled': disabled ? true : false,
	                    'data-disabled': disabledAttr(disabled),
	                    'data-value': itemValue,
	                    'data-state': isSelected(itemValue, $value) ? 'open' : 'closed',
	                };
	            };
	        },
	        action: (node) => {
	            const unsub = executeCallbacks(addMeltEventListener(node, 'click', () => {
	                const disabled = node.dataset.disabled === 'true';
	                const itemValue = node.dataset.value;
	                if (disabled || !itemValue)
	                    return;
	                handleValueUpdate(itemValue);
	            }), addMeltEventListener(node, 'keydown', (e) => {
	                if (![kbd.ARROW_DOWN, kbd.ARROW_UP, kbd.HOME, kbd.END].includes(e.key)) {
	                    return;
	                }
	                e.preventDefault();
	                if (e.key === kbd.SPACE || e.key === kbd.ENTER) {
	                    const disabled = node.dataset.disabled === 'true';
	                    const itemValue = node.dataset.value;
	                    if (disabled || !itemValue)
	                        return;
	                    handleValueUpdate(itemValue);
	                    return;
	                }
	                const el = e.target;
	                const rootEl = getElementByMeltId(meltIds.root);
	                if (!rootEl || !isHTMLElement(el))
	                    return;
	                const items = Array.from(rootEl.querySelectorAll(selector$2('trigger')));
	                const candidateItems = items.filter((item) => {
	                    if (!isHTMLElement(item))
	                        return false;
	                    return item.dataset.disabled !== 'true';
	                });
	                if (!candidateItems.length)
	                    return;
	                const elIdx = candidateItems.indexOf(el);
	                if (e.key === kbd.ARROW_DOWN) {
	                    candidateItems[(elIdx + 1) % candidateItems.length].focus();
	                }
	                if (e.key === kbd.ARROW_UP) {
	                    candidateItems[(elIdx - 1 + candidateItems.length) % candidateItems.length].focus();
	                }
	                if (e.key === kbd.HOME) {
	                    candidateItems[0].focus();
	                }
	                if (e.key === kbd.END) {
	                    candidateItems[candidateItems.length - 1].focus();
	                }
	            }));
	            return {
	                destroy: unsub,
	            };
	        },
	    });
	    const content = builder(name$2('content'), {
	        stores: [value, disabled, forceVisible],
	        returned: ([$value, $disabled, $forceVisible]) => {
	            return (props) => {
	                const { value: itemValue } = parseItemProps(props);
	                const isVisible = isSelected(itemValue, $value) || $forceVisible;
	                return {
	                    'data-state': isVisible ? 'open' : 'closed',
	                    'data-disabled': disabledAttr($disabled),
	                    'data-value': itemValue,
	                    hidden: isVisible ? undefined : true,
	                    style: styleToString({
	                        display: isVisible ? undefined : 'none',
	                    }),
	                };
	            };
	        },
	        action: (node) => {
	            tick().then(() => {
	                const contentId = generateId();
	                const triggerId = generateId();
	                const parentTrigger = document.querySelector(`${selector$2('trigger')}, [data-value="${node.dataset.value}"]`);
	                if (!isHTMLElement(parentTrigger))
	                    return;
	                node.id = contentId;
	                parentTrigger.setAttribute('aria-controls', contentId);
	                parentTrigger.id = triggerId;
	            });
	        },
	    });
	    const heading = builder(name$2('heading'), {
	        returned: () => {
	            return (props) => {
	                const { level } = parseHeadingProps(props);
	                return {
	                    role: 'heading',
	                    'aria-level': level,
	                    'data-heading-level': level,
	                };
	            };
	        },
	    });
	    function handleValueUpdate(itemValue) {
	        value.update(($value) => {
	            if ($value === undefined) {
	                return withDefaults.multiple ? [itemValue] : itemValue;
	            }
	            if (Array.isArray($value)) {
	                if ($value.includes(itemValue)) {
	                    return $value.filter((v) => v !== itemValue);
	                }
	                $value.push(itemValue);
	                return $value;
	            }
	            return $value === itemValue ? undefined : itemValue;
	        });
	    }
	    return {
	        ids: meltIds,
	        elements: {
	            root,
	            item,
	            trigger,
	            content,
	            heading,
	        },
	        states: {
	            value: value,
	        },
	        helpers: {
	            isSelected: isSelectedStore,
	        },
	        options,
	    };
	};

	// Modified from Grail UI v0.9.6 (2023-06-10)
	// Source: https://github.com/grail-ui/grail-ui
	// https://github.com/grail-ui/grail-ui/tree/master/packages/grail-ui/src/clickOutside/clickOutside.ts
	/**
	 * Creates a readable store that tracks the latest PointerEvent that occurred on the document.
	 *
	 * @returns A function to unsubscribe from the event listener and stop tracking pointer events.
	 */
	readable(undefined, (set) => {
	    /**
	     * Event handler for pointerdown events on the document.
	     * Updates the store's value with the latest PointerEvent and then resets it to undefined.
	     */
	    function clicked(event) {
	        set(event);
	        // New subscriptions will not trigger immediately
	        set(undefined);
	    }
	    // Adds a pointerdown event listener to the document, calling the clicked function when triggered.
	    const unsubscribe = addEventListener$1(document, 'pointerup', clicked, {
	        passive: false,
	        capture: true,
	    });
	    // Returns a function to unsubscribe from the event listener and stop tracking pointer events.
	    return unsubscribe;
	});

	/**
	 * Creates a readable store that tracks the latest Escape Keydown that occurred on the document.
	 *
	 * @returns A function to unsubscribe from the event listener and stop tracking keydown events.
	 */
	readable(undefined, (set) => {
	    /**
	     * Event handler for keydown events on the document.
	     * Updates the store's value with the latest Escape Keydown event and then resets it to undefined.
	     */
	    function keydown(event) {
	        if (event && event.key === kbd.ESCAPE) {
	            set(event);
	        }
	        // New subscriptions will not trigger immediately
	        set(undefined);
	    }
	    // Adds a keydown event listener to the document, calling the keydown function when triggered.
	    const unsubscribe = addEventListener$1(document, 'keydown', keydown, {
	        passive: false,
	    });
	    // Returns a function to unsubscribe from the event listener and stop tracking keydown events.
	    return unsubscribe;
	});

	/**
	 * A special action for Melt UI's preprocessor `@melt-ui/pp`.
	 *
	 * @see https://www.melt-ui.com/docs/preprocessor
	 *
	 * @example
	 * ```svelte
	 * <script>
	 * 	import { createLabel, melt } from '@melt-ui/svelte';
	 * 	const { elements: { root } } = createLabel();
	 * </script>
	 *
	 * <label use:melt={$root} />
	 * ```
	 */
	function melt(node, params) {
	    throw new Error("[MELTUI ERROR]: The `use:melt` action cannot be used without MeltUI's Preprocessor. See: https://www.melt-ui.com/docs/preprocessor");
	}

	const defaults$3 = {
	    orientation: 'horizontal',
	    decorative: false,
	};
	const createSeparator = (props) => {
	    const withDefaults = { ...defaults$3, ...props };
	    const options = toWritableStores(withDefaults);
	    const { orientation, decorative } = options;
	    const root = builder('separator', {
	        stores: [orientation, decorative],
	        returned: ([$orientation, $decorative]) => {
	            const ariaOrientation = $orientation === 'vertical' ? $orientation : undefined;
	            return {
	                role: $decorative ? 'none' : 'separator',
	                'aria-orientation': ariaOrientation,
	                'aria-hidden': $decorative,
	                'data-orientation': $orientation,
	            };
	        },
	    });
	    return {
	        elements: {
	            root,
	        },
	        options,
	    };
	};

	const defaults$2 = {
	    orientation: 'horizontal',
	    activateOnFocus: true,
	    loop: true,
	    autoSet: true,
	};
	const { name: name$1, selector: selector$1 } = createElHelpers('tabs');
	function createTabs(props) {
	    const withDefaults = { ...defaults$2, ...props };
	    const options = toWritableStores(omit(withDefaults, 'defaultValue', 'value', 'onValueChange', 'autoSet'));
	    const { orientation, activateOnFocus, loop } = options;
	    const valueWritable = withDefaults.value ?? writable(withDefaults.defaultValue);
	    const value = overridable(valueWritable, withDefaults?.onValueChange);
	    let ssrValue = withDefaults.defaultValue ?? value.get();
	    // Root
	    const root = builder(name$1(), {
	        stores: orientation,
	        returned: ($orientation) => {
	            return {
	                'data-orientation': $orientation,
	            };
	        },
	    });
	    // List
	    const list = builder(name$1('list'), {
	        stores: orientation,
	        returned: ($orientation) => {
	            return {
	                role: 'tablist',
	                'aria-orientation': $orientation,
	                'data-orientation': $orientation,
	            };
	        },
	    });
	    const parseTriggerProps = (props) => {
	        if (typeof props === 'string') {
	            return { value: props };
	        }
	        else {
	            return props;
	        }
	    };
	    const trigger = builder(name$1('trigger'), {
	        stores: [value, orientation],
	        returned: ([$value, $orientation]) => {
	            return (props) => {
	                const { value: tabValue, disabled } = parseTriggerProps(props);
	                if (!$value && !ssrValue && withDefaults.autoSet) {
	                    ssrValue = tabValue;
	                    $value = tabValue;
	                    value.set(tabValue);
	                }
	                const sourceOfTruth = isBrowser ? $value : ssrValue;
	                const isActive = sourceOfTruth === tabValue;
	                return {
	                    type: 'button',
	                    role: 'tab',
	                    'data-state': isActive ? 'active' : 'inactive',
	                    tabindex: isActive ? 0 : -1,
	                    'data-value': tabValue,
	                    'data-orientation': $orientation,
	                    'data-disabled': disabledAttr(disabled),
	                    disabled: disabledAttr(disabled),
	                };
	            };
	        },
	        action: (node) => {
	            const unsub = executeCallbacks(addMeltEventListener(node, 'focus', () => {
	                const disabled = node.dataset.disabled === 'true';
	                const tabValue = node.dataset.value;
	                if (activateOnFocus.get() && !disabled && tabValue !== undefined) {
	                    value.set(tabValue);
	                }
	            }), addMeltEventListener(node, 'click', (e) => {
	                node.focus();
	                e.preventDefault();
	                const disabled = node.dataset.disabled === 'true';
	                if (disabled)
	                    return;
	                const tabValue = node.dataset.value;
	                node.focus();
	                if (tabValue !== undefined) {
	                    value.set(tabValue);
	                }
	            }), addMeltEventListener(node, 'keydown', (e) => {
	                const tabValue = node.dataset.value;
	                if (!tabValue)
	                    return;
	                const el = e.currentTarget;
	                if (!isHTMLElement(el))
	                    return;
	                const rootEl = el.closest(selector$1());
	                if (!isHTMLElement(rootEl))
	                    return;
	                const $loop = loop.get();
	                const triggers = Array.from(rootEl.querySelectorAll('[role="tab"]')).filter((trigger) => isHTMLElement(trigger));
	                const enabledTriggers = triggers.filter((el) => !el.hasAttribute('data-disabled'));
	                const triggerIdx = enabledTriggers.findIndex((el) => el === e.target);
	                const dir = getElemDirection(rootEl);
	                const { nextKey, prevKey } = getDirectionalKeys(dir, orientation.get());
	                if (e.key === nextKey) {
	                    e.preventDefault();
	                    const nextEl = next(enabledTriggers, triggerIdx, $loop);
	                    nextEl.focus();
	                }
	                else if (e.key === prevKey) {
	                    e.preventDefault();
	                    const prevEl = prev(enabledTriggers, triggerIdx, $loop);
	                    prevEl.focus();
	                }
	                else if (e.key === kbd.ENTER || e.key === kbd.SPACE) {
	                    e.preventDefault();
	                    value.set(tabValue);
	                }
	                else if (e.key === kbd.HOME) {
	                    e.preventDefault();
	                    const firstTrigger = enabledTriggers[0];
	                    firstTrigger.focus();
	                }
	                else if (e.key === kbd.END) {
	                    e.preventDefault();
	                    const lastTrigger = last$1(enabledTriggers);
	                    lastTrigger.focus();
	                }
	            }));
	            return {
	                destroy: unsub,
	            };
	        },
	    });
	    // Content
	    const content = builder(name$1('content'), {
	        stores: value,
	        returned: ($value) => {
	            return (tabValue) => {
	                return {
	                    role: 'tabpanel',
	                    // TODO: improve
	                    'aria-labelledby': tabValue,
	                    hidden: isBrowser
	                        ? $value === tabValue
	                            ? undefined
	                            : true
	                        : ssrValue === tabValue
	                            ? undefined
	                            : true,
	                    tabindex: 0,
	                };
	            };
	        },
	    });
	    return {
	        elements: {
	            root,
	            list,
	            trigger,
	            content,
	        },
	        states: {
	            value,
	        },
	        options,
	    };
	}

	const defaults$1 = {
	    type: 'single',
	    orientation: 'horizontal',
	    loop: true,
	    rovingFocus: true,
	    disabled: false,
	    defaultValue: '',
	};
	const { name, selector } = createElHelpers('toggle-group');
	const createToggleGroup = (props) => {
	    const withDefaults = { ...defaults$1, ...props };
	    const options = toWritableStores(omit(withDefaults, 'value'));
	    const { type, orientation, loop, rovingFocus, disabled } = options;
	    const defaultValue = withDefaults.defaultValue
	        ? withDefaults.defaultValue
	        : withDefaults.type === 'single'
	            ? 'undefined'
	            : [];
	    const valueWritable = withDefaults.value ?? writable(defaultValue);
	    const value = overridable(valueWritable, withDefaults?.onValueChange);
	    const root = builder(name(), {
	        stores: orientation,
	        returned: ($orientation) => {
	            return {
	                role: 'group',
	                'data-orientation': $orientation,
	            };
	        },
	    });
	    const item = builder(name('item'), {
	        stores: [value, disabled, orientation, type],
	        returned: ([$value, $disabled, $orientation, $type]) => {
	            return (props) => {
	                const itemValue = typeof props === 'string' ? props : props.value;
	                const argDisabled = typeof props === 'string' ? false : !!props.disabled;
	                const disabled = $disabled || argDisabled;
	                const pressed = Array.isArray($value) ? $value.includes(itemValue) : $value === itemValue;
	                const isSingle = $type === 'single';
	                const isMultiple = $type === 'multiple' || $type === undefined;
	                return {
	                    disabled: disabledAttr(disabled),
	                    pressed,
	                    'data-orientation': $orientation,
	                    'data-disabled': disabledAttr(disabled),
	                    'data-state': pressed ? 'on' : 'off',
	                    'data-value': itemValue,
	                    'aria-pressed': isMultiple ? pressed : undefined,
	                    'aria-checked': isSingle ? pressed : undefined,
	                    type: 'button',
	                    role: isSingle ? 'radio' : undefined,
	                    tabindex: pressed ? 0 : -1,
	                };
	            };
	        },
	        action: (node) => {
	            let unsub = noop$1;
	            const parentGroup = node.closest(selector());
	            if (!isHTMLElement(parentGroup))
	                return {};
	            const items = Array.from(parentGroup.querySelectorAll(selector('item')));
	            const $value = value.get();
	            const anyPressed = Array.isArray($value) ? $value.length > 0 : $value !== null;
	            if (!anyPressed && items[0] === node) {
	                node.tabIndex = 0;
	            }
	            function getNodeProps() {
	                const itemValue = node.dataset.value;
	                const disabled = node.dataset.disabled === 'true';
	                return { value: itemValue, disabled };
	            }
	            function handleValueUpdate() {
	                const { value: itemValue, disabled } = getNodeProps();
	                if (itemValue === undefined || disabled)
	                    return;
	                value.update(($value) => {
	                    if (Array.isArray($value)) {
	                        if ($value.includes(itemValue)) {
	                            return $value.filter((i) => i !== itemValue);
	                        }
	                        $value.push(itemValue);
	                        return $value;
	                    }
	                    return $value === itemValue ? undefined : itemValue;
	                });
	            }
	            unsub = executeCallbacks(addMeltEventListener(node, 'click', () => {
	                handleValueUpdate();
	            }), addMeltEventListener(node, 'keydown', (e) => {
	                if (e.key === kbd.SPACE || e.key === kbd.ENTER) {
	                    e.preventDefault();
	                    handleValueUpdate();
	                    return;
	                }
	                if (!rovingFocus.get())
	                    return;
	                const el = e.currentTarget;
	                if (!isHTMLElement(el))
	                    return;
	                const root = el.closest(selector());
	                if (!isHTMLElement(root))
	                    return;
	                const items = Array.from(root.querySelectorAll(selector('item') + ':not([data-disabled])')).filter((item) => isHTMLElement(item));
	                const currentIndex = items.indexOf(el);
	                const dir = getElemDirection(el);
	                const $orientation = orientation.get();
	                const nextKey = {
	                    horizontal: dir === 'rtl' ? kbd.ARROW_LEFT : kbd.ARROW_RIGHT,
	                    vertical: kbd.ARROW_DOWN,
	                }[$orientation ?? 'horizontal'];
	                const prevKey = {
	                    horizontal: dir === 'rtl' ? kbd.ARROW_RIGHT : kbd.ARROW_LEFT,
	                    vertical: kbd.ARROW_UP,
	                }[$orientation ?? 'horizontal'];
	                const $loop = loop.get();
	                if (e.key === nextKey) {
	                    e.preventDefault();
	                    const nextIndex = currentIndex + 1;
	                    if (nextIndex >= items.length && $loop) {
	                        handleRovingFocus(items[0]);
	                    }
	                    else {
	                        handleRovingFocus(items[nextIndex]);
	                    }
	                }
	                else if (e.key === prevKey) {
	                    e.preventDefault();
	                    const prevIndex = currentIndex - 1;
	                    if (prevIndex < 0 && $loop) {
	                        handleRovingFocus(items[items.length - 1]);
	                    }
	                    else {
	                        handleRovingFocus(items[prevIndex]);
	                    }
	                }
	                else if (e.key === kbd.HOME) {
	                    e.preventDefault();
	                    handleRovingFocus(items[0]);
	                }
	                else if (e.key === kbd.END) {
	                    e.preventDefault();
	                    handleRovingFocus(items[items.length - 1]);
	                }
	            }));
	            return {
	                destroy: unsub,
	            };
	        },
	    });
	    const isPressed = derived(value, ($value) => {
	        return (itemValue) => {
	            return Array.isArray($value) ? $value.includes(itemValue) : $value === itemValue;
	        };
	    });
	    return {
	        elements: {
	            root,
	            item,
	        },
	        states: {
	            value,
	        },
	        helpers: {
	            isPressed,
	        },
	        options,
	    };
	};

	function createBitAttrs(bit, parts) {
	    const attrs = {};
	    parts.forEach((part) => {
	        attrs[part] = {
	            [`data-${bit}-${part}`]: "",
	        };
	    });
	    return (part) => attrs[part];
	}

	function createDispatcher() {
	    const dispatch = createEventDispatcher();
	    return (e) => {
	        const { originalEvent } = e.detail;
	        const { cancelable } = e;
	        const type = originalEvent.type;
	        const shouldContinue = dispatch(type, { originalEvent, currentTarget: originalEvent.currentTarget }, { cancelable });
	        if (!shouldContinue) {
	            e.preventDefault();
	        }
	    };
	}

	function removeUndefined(obj) {
	    const result = {};
	    for (const key in obj) {
	        const value = obj[key];
	        if (value !== undefined) {
	            result[key] = value;
	        }
	    }
	    return result;
	}

	function getOptionUpdater(options) {
	    return function (key, value) {
	        if (value === undefined)
	            return;
	        const store = options[key];
	        if (store) {
	            store.set(value);
	        }
	    };
	}

	function getAccordionData() {
	    const NAME = "accordion";
	    const ITEM_NAME = "accordion-item";
	    const PARTS = ["root", "content", "header", "item", "trigger"];
	    return { NAME, ITEM_NAME, PARTS };
	}
	function setCtx$3(props) {
	    const initAccordion = createAccordion(removeUndefined(props));
	    const { NAME, PARTS } = getAccordionData();
	    const getAttrs = createBitAttrs(NAME, PARTS);
	    const accordion = {
	        ...initAccordion,
	        getAttrs,
	        updateOption: getOptionUpdater(initAccordion.options),
	    };
	    setContext(NAME, accordion);
	    return accordion;
	}
	function getCtx$2() {
	    const { NAME } = getAccordionData();
	    return getContext(NAME);
	}
	function setItem(props) {
	    const { ITEM_NAME } = getAccordionData();
	    setContext(ITEM_NAME, { ...props });
	    const ctx = getCtx$2();
	    return { ...ctx, props };
	}
	function getItemProps() {
	    const { ITEM_NAME } = getAccordionData();
	    return getContext(ITEM_NAME);
	}
	function getContent() {
	    const ctx = getCtx$2();
	    const { value: props } = getItemProps();
	    return {
	        ...ctx,
	        props,
	    };
	}
	function getTrigger() {
	    const ctx = getCtx$2();
	    const { value, disabled } = getItemProps();
	    return {
	        ...ctx,
	        props: { value, disabled },
	    };
	}

	/* node_modules/bits-ui/dist/bits/accordion/components/accordion.svelte generated by Svelte v4.2.10 */
	const file$s = "node_modules/bits-ui/dist/bits/accordion/components/accordion.svelte";
	const get_default_slot_changes_1$a = dirty => ({ builder: dirty & /*builder*/ 4 });
	const get_default_slot_context_1$a = ctx => ({ builder: /*builder*/ ctx[2] });
	const get_default_slot_changes$c = dirty => ({ builder: dirty & /*builder*/ 4 });
	const get_default_slot_context$c = ctx => ({ builder: /*builder*/ ctx[2] });

	// (51:0) {:else}
	function create_else_block$g(ctx) {
		let div;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[11].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], get_default_slot_context_1$a);
		let div_levels = [/*builder*/ ctx[2], /*$$restProps*/ ctx[4]];
		let div_data = {};

		for (let i = 0; i < div_levels.length; i += 1) {
			div_data = assign(div_data, div_levels[i]);
		}

		const block = {
			c: function create() {
				div = element("div");
				if (default_slot) default_slot.c();
				set_attributes(div, div_data);
				add_location(div, file$s, 51, 1, 1187);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				/*div_binding*/ ctx[12](div);
				current = true;

				if (!mounted) {
					dispose = action_destroyer(/*builder*/ ctx[2].action(div));
					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder*/ 1028)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[10],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, get_default_slot_changes_1$a),
							get_default_slot_context_1$a
						);
					}
				}

				set_attributes(div, div_data = get_spread_update(div_levels, [
					dirty & /*builder*/ 4 && /*builder*/ ctx[2],
					dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]
				]));
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (default_slot) default_slot.d(detaching);
				/*div_binding*/ ctx[12](null);
				mounted = false;
				dispose();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block$g.name,
			type: "else",
			source: "(51:0) {:else}",
			ctx
		});

		return block;
	}

	// (49:0) {#if asChild}
	function create_if_block$l(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[11].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], get_default_slot_context$c);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder*/ 1028)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[10],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, get_default_slot_changes$c),
							get_default_slot_context$c
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$l.name,
			type: "if",
			source: "(49:0) {#if asChild}",
			ctx
		});

		return block;
	}

	function create_fragment$C(ctx) {
		let current_block_type_index;
		let if_block;
		let if_block_anchor;
		let current;
		const if_block_creators = [create_if_block$l, create_else_block$g];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*asChild*/ ctx[1]) return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		const block = {
			c: function create() {
				if_block.c();
				if_block_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if_blocks[current_block_type_index].d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$C.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$C($$self, $$props, $$invalidate) {
		let builder;
		const omit_props_names = ["multiple","value","onValueChange","disabled","asChild","el"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let $root;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Accordion', slots, ['default']);
		let { multiple = false } = $$props;
		let { value = void 0 } = $$props;
		let { onValueChange = void 0 } = $$props;
		let { disabled = false } = $$props;
		let { asChild = false } = $$props;
		let { el = void 0 } = $$props;

		const { elements: { root }, states: { value: localValue }, updateOption, getAttrs } = setCtx$3({
			multiple,
			disabled,
			defaultValue: value,
			onValueChange: ({ next }) => {
				if (Array.isArray(next)) {
					if (!Array.isArray(value) || !arraysAreEqual(value, next)) {
						onValueChange?.(next);
						$$invalidate(5, value = next);
						return next;
					}

					return next;
				}

				if (value !== next) {
					onValueChange?.(next);
					$$invalidate(5, value = next);
				}

				return next;
			}
		});

		validate_store(root, 'root');
		component_subscribe($$self, root, value => $$invalidate(9, $root = value));
		const attrs = getAttrs("root");

		function div_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				el = $$value;
				$$invalidate(0, el);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('multiple' in $$new_props) $$invalidate(6, multiple = $$new_props.multiple);
			if ('value' in $$new_props) $$invalidate(5, value = $$new_props.value);
			if ('onValueChange' in $$new_props) $$invalidate(7, onValueChange = $$new_props.onValueChange);
			if ('disabled' in $$new_props) $$invalidate(8, disabled = $$new_props.disabled);
			if ('asChild' in $$new_props) $$invalidate(1, asChild = $$new_props.asChild);
			if ('el' in $$new_props) $$invalidate(0, el = $$new_props.el);
			if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			arraysAreEqual,
			melt,
			setCtx: setCtx$3,
			multiple,
			value,
			onValueChange,
			disabled,
			asChild,
			el,
			root,
			localValue,
			updateOption,
			getAttrs,
			attrs,
			builder,
			$root
		});

		$$self.$inject_state = $$new_props => {
			if ('multiple' in $$props) $$invalidate(6, multiple = $$new_props.multiple);
			if ('value' in $$props) $$invalidate(5, value = $$new_props.value);
			if ('onValueChange' in $$props) $$invalidate(7, onValueChange = $$new_props.onValueChange);
			if ('disabled' in $$props) $$invalidate(8, disabled = $$new_props.disabled);
			if ('asChild' in $$props) $$invalidate(1, asChild = $$new_props.asChild);
			if ('el' in $$props) $$invalidate(0, el = $$new_props.el);
			if ('builder' in $$props) $$invalidate(2, builder = $$new_props.builder);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*value*/ 32) {
				value !== void 0 && // eslint-disable-next-line @typescript-eslint/no-explicit-any
				localValue.set(Array.isArray(value) ? [...value] : value);
			}

			if ($$self.$$.dirty & /*multiple*/ 64) {
				updateOption("multiple", multiple);
			}

			if ($$self.$$.dirty & /*disabled*/ 256) {
				updateOption("disabled", disabled);
			}

			if ($$self.$$.dirty & /*$root*/ 512) {
				$$invalidate(2, builder = $root);
			}

			if ($$self.$$.dirty & /*builder*/ 4) {
				Object.assign(builder, attrs);
			}
		};

		return [
			el,
			asChild,
			builder,
			root,
			$$restProps,
			value,
			multiple,
			onValueChange,
			disabled,
			$root,
			$$scope,
			slots,
			div_binding
		];
	}

	let Accordion$1 = class Accordion extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$C, create_fragment$C, safe_not_equal, {
				multiple: 6,
				value: 5,
				onValueChange: 7,
				disabled: 8,
				asChild: 1,
				el: 0
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Accordion",
				options,
				id: create_fragment$C.name
			});
		}

		get multiple() {
			throw new Error("<Accordion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set multiple(value) {
			throw new Error("<Accordion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get value() {
			throw new Error("<Accordion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set value(value) {
			throw new Error("<Accordion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get onValueChange() {
			throw new Error("<Accordion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set onValueChange(value) {
			throw new Error("<Accordion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get disabled() {
			throw new Error("<Accordion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set disabled(value) {
			throw new Error("<Accordion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get asChild() {
			throw new Error("<Accordion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set asChild(value) {
			throw new Error("<Accordion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get el() {
			throw new Error("<Accordion>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set el(value) {
			throw new Error("<Accordion>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	};

	/* node_modules/bits-ui/dist/bits/accordion/components/accordion-item.svelte generated by Svelte v4.2.10 */
	const file$r = "node_modules/bits-ui/dist/bits/accordion/components/accordion-item.svelte";
	const get_default_slot_changes_1$9 = dirty => ({ builder: dirty & /*builder*/ 4 });
	const get_default_slot_context_1$9 = ctx => ({ builder: /*builder*/ ctx[2] });
	const get_default_slot_changes$b = dirty => ({ builder: dirty & /*builder*/ 4 });
	const get_default_slot_context$b = ctx => ({ builder: /*builder*/ ctx[2] });

	// (21:0) {:else}
	function create_else_block$f(ctx) {
		let div;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[9].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], get_default_slot_context_1$9);
		let div_levels = [/*builder*/ ctx[2], /*$$restProps*/ ctx[4]];
		let div_data = {};

		for (let i = 0; i < div_levels.length; i += 1) {
			div_data = assign(div_data, div_levels[i]);
		}

		const block = {
			c: function create() {
				div = element("div");
				if (default_slot) default_slot.c();
				set_attributes(div, div_data);
				add_location(div, file$r, 21, 1, 420);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				/*div_binding*/ ctx[10](div);
				current = true;

				if (!mounted) {
					dispose = action_destroyer(/*builder*/ ctx[2].action(div));
					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder*/ 260)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[8],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, get_default_slot_changes_1$9),
							get_default_slot_context_1$9
						);
					}
				}

				set_attributes(div, div_data = get_spread_update(div_levels, [
					dirty & /*builder*/ 4 && /*builder*/ ctx[2],
					dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]
				]));
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (default_slot) default_slot.d(detaching);
				/*div_binding*/ ctx[10](null);
				mounted = false;
				dispose();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block$f.name,
			type: "else",
			source: "(21:0) {:else}",
			ctx
		});

		return block;
	}

	// (19:0) {#if asChild}
	function create_if_block$k(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[9].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], get_default_slot_context$b);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder*/ 260)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[8],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, get_default_slot_changes$b),
							get_default_slot_context$b
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$k.name,
			type: "if",
			source: "(19:0) {#if asChild}",
			ctx
		});

		return block;
	}

	function create_fragment$B(ctx) {
		let current_block_type_index;
		let if_block;
		let if_block_anchor;
		let current;
		const if_block_creators = [create_if_block$k, create_else_block$f];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*asChild*/ ctx[1]) return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		const block = {
			c: function create() {
				if_block.c();
				if_block_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if_blocks[current_block_type_index].d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$B.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$B($$self, $$props, $$invalidate) {
		let builder;
		const omit_props_names = ["value","disabled","asChild","el"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let $item;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Accordion_item', slots, ['default']);
		let { value } = $$props;
		let { disabled = void 0 } = $$props;
		let { asChild = false } = $$props;
		let { el = void 0 } = $$props;
		const { elements: { item }, props, getAttrs } = setItem({ value, disabled });
		validate_store(item, 'item');
		component_subscribe($$self, item, value => $$invalidate(7, $item = value));
		const attrs = getAttrs("item");

		$$self.$$.on_mount.push(function () {
			if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
				console.warn("<Accordion_item> was created without expected prop 'value'");
			}
		});

		function div_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				el = $$value;
				$$invalidate(0, el);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('value' in $$new_props) $$invalidate(5, value = $$new_props.value);
			if ('disabled' in $$new_props) $$invalidate(6, disabled = $$new_props.disabled);
			if ('asChild' in $$new_props) $$invalidate(1, asChild = $$new_props.asChild);
			if ('el' in $$new_props) $$invalidate(0, el = $$new_props.el);
			if ('$$scope' in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			melt,
			setItem,
			value,
			disabled,
			asChild,
			el,
			item,
			props,
			getAttrs,
			attrs,
			builder,
			$item
		});

		$$self.$inject_state = $$new_props => {
			if ('value' in $$props) $$invalidate(5, value = $$new_props.value);
			if ('disabled' in $$props) $$invalidate(6, disabled = $$new_props.disabled);
			if ('asChild' in $$props) $$invalidate(1, asChild = $$new_props.asChild);
			if ('el' in $$props) $$invalidate(0, el = $$new_props.el);
			if ('builder' in $$props) $$invalidate(2, builder = $$new_props.builder);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*$item*/ 128) {
				$$invalidate(2, builder = $item(props));
			}

			if ($$self.$$.dirty & /*builder*/ 4) {
				Object.assign(builder, attrs);
			}
		};

		return [
			el,
			asChild,
			builder,
			item,
			$$restProps,
			value,
			disabled,
			$item,
			$$scope,
			slots,
			div_binding
		];
	}

	let Accordion_item$1 = class Accordion_item extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$B, create_fragment$B, safe_not_equal, { value: 5, disabled: 6, asChild: 1, el: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Accordion_item",
				options,
				id: create_fragment$B.name
			});
		}

		get value() {
			throw new Error("<Accordion_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set value(value) {
			throw new Error("<Accordion_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get disabled() {
			throw new Error("<Accordion_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set disabled(value) {
			throw new Error("<Accordion_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get asChild() {
			throw new Error("<Accordion_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set asChild(value) {
			throw new Error("<Accordion_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get el() {
			throw new Error("<Accordion_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set el(value) {
			throw new Error("<Accordion_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	};

	/* node_modules/bits-ui/dist/bits/accordion/components/accordion-header.svelte generated by Svelte v4.2.10 */
	const file$q = "node_modules/bits-ui/dist/bits/accordion/components/accordion-header.svelte";
	const get_default_slot_changes_1$8 = dirty => ({ builder: dirty & /*builder*/ 4 });
	const get_default_slot_context_1$8 = ctx => ({ builder: /*builder*/ ctx[2] });
	const get_default_slot_changes$a = dirty => ({ builder: dirty & /*builder*/ 4 });
	const get_default_slot_context$a = ctx => ({ builder: /*builder*/ ctx[2] });

	// (19:0) {:else}
	function create_else_block$e(ctx) {
		let div;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[8].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], get_default_slot_context_1$8);
		let div_levels = [/*builder*/ ctx[2], /*$$restProps*/ ctx[4]];
		let div_data = {};

		for (let i = 0; i < div_levels.length; i += 1) {
			div_data = assign(div_data, div_levels[i]);
		}

		const block = {
			c: function create() {
				div = element("div");
				if (default_slot) default_slot.c();
				set_attributes(div, div_data);
				add_location(div, file$q, 19, 1, 379);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				/*div_binding*/ ctx[9](div);
				current = true;

				if (!mounted) {
					dispose = action_destroyer(/*builder*/ ctx[2].action(div));
					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder*/ 132)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[7],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, get_default_slot_changes_1$8),
							get_default_slot_context_1$8
						);
					}
				}

				set_attributes(div, div_data = get_spread_update(div_levels, [
					dirty & /*builder*/ 4 && /*builder*/ ctx[2],
					dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]
				]));
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (default_slot) default_slot.d(detaching);
				/*div_binding*/ ctx[9](null);
				mounted = false;
				dispose();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block$e.name,
			type: "else",
			source: "(19:0) {:else}",
			ctx
		});

		return block;
	}

	// (17:0) {#if asChild}
	function create_if_block$j(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[8].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], get_default_slot_context$a);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder*/ 132)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[7],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, get_default_slot_changes$a),
							get_default_slot_context$a
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$j.name,
			type: "if",
			source: "(17:0) {#if asChild}",
			ctx
		});

		return block;
	}

	function create_fragment$A(ctx) {
		let current_block_type_index;
		let if_block;
		let if_block_anchor;
		let current;
		const if_block_creators = [create_if_block$j, create_else_block$e];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*asChild*/ ctx[1]) return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		const block = {
			c: function create() {
				if_block.c();
				if_block_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if_blocks[current_block_type_index].d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$A.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$A($$self, $$props, $$invalidate) {
		let builder;
		const omit_props_names = ["level","asChild","el"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let $header;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Accordion_header', slots, ['default']);
		let { level = 3 } = $$props;
		let { asChild = false } = $$props;
		let { el = void 0 } = $$props;
		const { elements: { heading: header }, getAttrs } = getCtx$2();
		validate_store(header, 'header');
		component_subscribe($$self, header, value => $$invalidate(6, $header = value));
		const attrs = getAttrs("header");

		function div_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				el = $$value;
				$$invalidate(0, el);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('level' in $$new_props) $$invalidate(5, level = $$new_props.level);
			if ('asChild' in $$new_props) $$invalidate(1, asChild = $$new_props.asChild);
			if ('el' in $$new_props) $$invalidate(0, el = $$new_props.el);
			if ('$$scope' in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			melt,
			getCtx: getCtx$2,
			level,
			asChild,
			el,
			header,
			getAttrs,
			attrs,
			builder,
			$header
		});

		$$self.$inject_state = $$new_props => {
			if ('level' in $$props) $$invalidate(5, level = $$new_props.level);
			if ('asChild' in $$props) $$invalidate(1, asChild = $$new_props.asChild);
			if ('el' in $$props) $$invalidate(0, el = $$new_props.el);
			if ('builder' in $$props) $$invalidate(2, builder = $$new_props.builder);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*$header, level*/ 96) {
				$$invalidate(2, builder = $header(level));
			}

			if ($$self.$$.dirty & /*builder*/ 4) {
				Object.assign(builder, attrs);
			}
		};

		return [
			el,
			asChild,
			builder,
			header,
			$$restProps,
			level,
			$header,
			$$scope,
			slots,
			div_binding
		];
	}

	class Accordion_header extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$A, create_fragment$A, safe_not_equal, { level: 5, asChild: 1, el: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Accordion_header",
				options,
				id: create_fragment$A.name
			});
		}

		get level() {
			throw new Error("<Accordion_header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set level(value) {
			throw new Error("<Accordion_header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get asChild() {
			throw new Error("<Accordion_header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set asChild(value) {
			throw new Error("<Accordion_header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get el() {
			throw new Error("<Accordion_header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set el(value) {
			throw new Error("<Accordion_header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* node_modules/bits-ui/dist/bits/accordion/components/accordion-trigger.svelte generated by Svelte v4.2.10 */
	const file$p = "node_modules/bits-ui/dist/bits/accordion/components/accordion-trigger.svelte";
	const get_default_slot_changes_1$7 = dirty => ({ builder: dirty & /*builder*/ 4 });
	const get_default_slot_context_1$7 = ctx => ({ builder: /*builder*/ ctx[2] });
	const get_default_slot_changes$9 = dirty => ({ builder: dirty & /*builder*/ 4 });
	const get_default_slot_context$9 = ctx => ({ builder: /*builder*/ ctx[2] });

	// (21:0) {:else}
	function create_else_block$d(ctx) {
		let button;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[8].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], get_default_slot_context_1$7);
		let button_levels = [/*builder*/ ctx[2], { type: "button" }, /*$$restProps*/ ctx[5]];
		let button_data = {};

		for (let i = 0; i < button_levels.length; i += 1) {
			button_data = assign(button_data, button_levels[i]);
		}

		const block = {
			c: function create() {
				button = element("button");
				if (default_slot) default_slot.c();
				set_attributes(button, button_data);
				add_location(button, file$p, 21, 1, 469);
			},
			m: function mount(target, anchor) {
				insert_dev(target, button, anchor);

				if (default_slot) {
					default_slot.m(button, null);
				}

				if (button.autofocus) button.focus();
				/*button_binding*/ ctx[9](button);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(/*builder*/ ctx[2].action(button)),
						listen_dev(button, "m-keydown", /*dispatch*/ ctx[4], false, false, false, false),
						listen_dev(button, "m-click", /*dispatch*/ ctx[4], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder*/ 132)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[7],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, get_default_slot_changes_1$7),
							get_default_slot_context_1$7
						);
					}
				}

				set_attributes(button, button_data = get_spread_update(button_levels, [
					dirty & /*builder*/ 4 && /*builder*/ ctx[2],
					{ type: "button" },
					dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5]
				]));
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(button);
				}

				if (default_slot) default_slot.d(detaching);
				/*button_binding*/ ctx[9](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block$d.name,
			type: "else",
			source: "(21:0) {:else}",
			ctx
		});

		return block;
	}

	// (19:0) {#if asChild}
	function create_if_block$i(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[8].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], get_default_slot_context$9);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder*/ 132)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[7],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, get_default_slot_changes$9),
							get_default_slot_context$9
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$i.name,
			type: "if",
			source: "(19:0) {#if asChild}",
			ctx
		});

		return block;
	}

	function create_fragment$z(ctx) {
		let current_block_type_index;
		let if_block;
		let if_block_anchor;
		let current;
		const if_block_creators = [create_if_block$i, create_else_block$d];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*asChild*/ ctx[1]) return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		const block = {
			c: function create() {
				if_block.c();
				if_block_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if_blocks[current_block_type_index].d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$z.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$z($$self, $$props, $$invalidate) {
		let builder;
		const omit_props_names = ["asChild","el"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let $trigger;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Accordion_trigger', slots, ['default']);
		let { asChild = false } = $$props;
		let { el = void 0 } = $$props;
		const { elements: { trigger }, props, getAttrs } = getTrigger();
		validate_store(trigger, 'trigger');
		component_subscribe($$self, trigger, value => $$invalidate(6, $trigger = value));
		const dispatch = createDispatcher();
		const attrs = getAttrs("trigger");

		function button_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				el = $$value;
				$$invalidate(0, el);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('asChild' in $$new_props) $$invalidate(1, asChild = $$new_props.asChild);
			if ('el' in $$new_props) $$invalidate(0, el = $$new_props.el);
			if ('$$scope' in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			melt,
			getTrigger,
			createDispatcher,
			asChild,
			el,
			trigger,
			props,
			getAttrs,
			dispatch,
			attrs,
			builder,
			$trigger
		});

		$$self.$inject_state = $$new_props => {
			if ('asChild' in $$props) $$invalidate(1, asChild = $$new_props.asChild);
			if ('el' in $$props) $$invalidate(0, el = $$new_props.el);
			if ('builder' in $$props) $$invalidate(2, builder = $$new_props.builder);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*$trigger*/ 64) {
				$$invalidate(2, builder = $trigger(props));
			}

			if ($$self.$$.dirty & /*builder*/ 4) {
				Object.assign(builder, attrs);
			}
		};

		return [
			el,
			asChild,
			builder,
			trigger,
			dispatch,
			$$restProps,
			$trigger,
			$$scope,
			slots,
			button_binding
		];
	}

	let Accordion_trigger$1 = class Accordion_trigger extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$z, create_fragment$z, safe_not_equal, { asChild: 1, el: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Accordion_trigger",
				options,
				id: create_fragment$z.name
			});
		}

		get asChild() {
			throw new Error("<Accordion_trigger>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set asChild(value) {
			throw new Error("<Accordion_trigger>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get el() {
			throw new Error("<Accordion_trigger>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set el(value) {
			throw new Error("<Accordion_trigger>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	};

	/* node_modules/bits-ui/dist/bits/accordion/components/accordion-content.svelte generated by Svelte v4.2.10 */
	const file$o = "node_modules/bits-ui/dist/bits/accordion/components/accordion-content.svelte";
	const get_default_slot_changes_5 = dirty => ({ builder: dirty & /*builder*/ 256 });
	const get_default_slot_context_5 = ctx => ({ builder: /*builder*/ ctx[8] });
	const get_default_slot_changes_4 = dirty => ({ builder: dirty & /*builder*/ 256 });
	const get_default_slot_context_4 = ctx => ({ builder: /*builder*/ ctx[8] });
	const get_default_slot_changes_3 = dirty => ({ builder: dirty & /*builder*/ 256 });
	const get_default_slot_context_3 = ctx => ({ builder: /*builder*/ ctx[8] });
	const get_default_slot_changes_2 = dirty => ({ builder: dirty & /*builder*/ 256 });
	const get_default_slot_context_2 = ctx => ({ builder: /*builder*/ ctx[8] });
	const get_default_slot_changes_1$6 = dirty => ({ builder: dirty & /*builder*/ 256 });
	const get_default_slot_context_1$6 = ctx => ({ builder: /*builder*/ ctx[8] });
	const get_default_slot_changes$8 = dirty => ({ builder: dirty & /*builder*/ 256 });
	const get_default_slot_context$8 = ctx => ({ builder: /*builder*/ ctx[8] });

	// (48:29) 
	function create_if_block_5$1(ctx) {
		let div;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[16].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], get_default_slot_context_5);
		let div_levels = [/*builder*/ ctx[8], /*$$restProps*/ ctx[13]];
		let div_data = {};

		for (let i = 0; i < div_levels.length; i += 1) {
			div_data = assign(div_data, div_levels[i]);
		}

		const block = {
			c: function create() {
				div = element("div");
				if (default_slot) default_slot.c();
				set_attributes(div, div_data);
				add_location(div, file$o, 48, 1, 1466);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				/*div_binding_4*/ ctx[21](div);
				current = true;

				if (!mounted) {
					dispose = action_destroyer(/*builder*/ ctx[8].action(div));
					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder*/ 33024)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[15],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[15], dirty, get_default_slot_changes_5),
							get_default_slot_context_5
						);
					}
				}

				set_attributes(div, div_data = get_spread_update(div_levels, [
					dirty & /*builder*/ 256 && /*builder*/ ctx[8],
					dirty & /*$$restProps*/ 8192 && /*$$restProps*/ ctx[13]
				]));
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (default_slot) default_slot.d(detaching);
				/*div_binding_4*/ ctx[21](null);
				mounted = false;
				dispose();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_5$1.name,
			type: "if",
			source: "(48:29) ",
			ctx
		});

		return block;
	}

	// (44:46) 
	function create_if_block_4$2(ctx) {
		let div;
		let div_outro;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[16].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], get_default_slot_context_4);
		let div_levels = [/*builder*/ ctx[8], /*$$restProps*/ ctx[13]];
		let div_data = {};

		for (let i = 0; i < div_levels.length; i += 1) {
			div_data = assign(div_data, div_levels[i]);
		}

		const block = {
			c: function create() {
				div = element("div");
				if (default_slot) default_slot.c();
				set_attributes(div, div_data);
				add_location(div, file$o, 44, 1, 1296);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				/*div_binding_3*/ ctx[20](div);
				current = true;

				if (!mounted) {
					dispose = action_destroyer(/*builder*/ ctx[8].action(div));
					mounted = true;
				}
			},
			p: function update(new_ctx, dirty) {
				ctx = new_ctx;

				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder*/ 33024)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[15],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[15], dirty, get_default_slot_changes_4),
							get_default_slot_context_4
						);
					}
				}

				set_attributes(div, div_data = get_spread_update(div_levels, [
					dirty & /*builder*/ 256 && /*builder*/ ctx[8],
					dirty & /*$$restProps*/ 8192 && /*$$restProps*/ ctx[13]
				]));
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				if (div_outro) div_outro.end(1);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);

				if (local) {
					div_outro = create_out_transition(div, /*outTransition*/ ctx[5], /*outTransitionConfig*/ ctx[6]);
				}

				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (default_slot) default_slot.d(detaching);
				/*div_binding_3*/ ctx[20](null);
				if (detaching && div_outro) div_outro.end();
				mounted = false;
				dispose();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_4$2.name,
			type: "if",
			source: "(44:46) ",
			ctx
		});

		return block;
	}

	// (40:45) 
	function create_if_block_3$2(ctx) {
		let div;
		let div_intro;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[16].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], get_default_slot_context_3);
		let div_levels = [/*builder*/ ctx[8], /*$$restProps*/ ctx[13]];
		let div_data = {};

		for (let i = 0; i < div_levels.length; i += 1) {
			div_data = assign(div_data, div_levels[i]);
		}

		const block = {
			c: function create() {
				div = element("div");
				if (default_slot) default_slot.c();
				set_attributes(div, div_data);
				add_location(div, file$o, 40, 1, 1112);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				/*div_binding_2*/ ctx[19](div);
				current = true;

				if (!mounted) {
					dispose = action_destroyer(/*builder*/ ctx[8].action(div));
					mounted = true;
				}
			},
			p: function update(new_ctx, dirty) {
				ctx = new_ctx;

				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder*/ 33024)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[15],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[15], dirty, get_default_slot_changes_3),
							get_default_slot_context_3
						);
					}
				}

				set_attributes(div, div_data = get_spread_update(div_levels, [
					dirty & /*builder*/ 256 && /*builder*/ ctx[8],
					dirty & /*$$restProps*/ 8192 && /*$$restProps*/ ctx[13]
				]));
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);

				if (local) {
					if (!div_intro) {
						add_render_callback(() => {
							div_intro = create_in_transition(div, /*inTransition*/ ctx[3], /*inTransitionConfig*/ ctx[4]);
							div_intro.start();
						});
					}
				}

				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (default_slot) default_slot.d(detaching);
				/*div_binding_2*/ ctx[19](null);
				mounted = false;
				dispose();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_3$2.name,
			type: "if",
			source: "(40:45) ",
			ctx
		});

		return block;
	}

	// (30:62) 
	function create_if_block_2$3(ctx) {
		let div;
		let div_intro;
		let div_outro;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[16].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], get_default_slot_context_2);
		let div_levels = [/*builder*/ ctx[8], /*$$restProps*/ ctx[13]];
		let div_data = {};

		for (let i = 0; i < div_levels.length; i += 1) {
			div_data = assign(div_data, div_levels[i]);
		}

		const block = {
			c: function create() {
				div = element("div");
				if (default_slot) default_slot.c();
				set_attributes(div, div_data);
				add_location(div, file$o, 30, 1, 877);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				/*div_binding_1*/ ctx[18](div);
				current = true;

				if (!mounted) {
					dispose = action_destroyer(/*builder*/ ctx[8].action(div));
					mounted = true;
				}
			},
			p: function update(new_ctx, dirty) {
				ctx = new_ctx;

				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder*/ 33024)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[15],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[15], dirty, get_default_slot_changes_2),
							get_default_slot_context_2
						);
					}
				}

				set_attributes(div, div_data = get_spread_update(div_levels, [
					dirty & /*builder*/ 256 && /*builder*/ ctx[8],
					dirty & /*$$restProps*/ 8192 && /*$$restProps*/ ctx[13]
				]));
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);

				if (local) {
					add_render_callback(() => {
						if (!current) return;
						if (div_outro) div_outro.end(1);
						div_intro = create_in_transition(div, /*inTransition*/ ctx[3], /*inTransitionConfig*/ ctx[4]);
						div_intro.start();
					});
				}

				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				if (div_intro) div_intro.invalidate();

				if (local) {
					div_outro = create_out_transition(div, /*outTransition*/ ctx[5], /*outTransitionConfig*/ ctx[6]);
				}

				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (default_slot) default_slot.d(detaching);
				/*div_binding_1*/ ctx[18](null);
				if (detaching && div_outro) div_outro.end();
				mounted = false;
				dispose();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_2$3.name,
			type: "if",
			source: "(30:62) ",
			ctx
		});

		return block;
	}

	// (26:43) 
	function create_if_block_1$6(ctx) {
		let div;
		let div_transition;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[16].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], get_default_slot_context_1$6);
		let div_levels = [/*builder*/ ctx[8], /*$$restProps*/ ctx[13]];
		let div_data = {};

		for (let i = 0; i < div_levels.length; i += 1) {
			div_data = assign(div_data, div_levels[i]);
		}

		const block = {
			c: function create() {
				div = element("div");
				if (default_slot) default_slot.c();
				set_attributes(div, div_data);
				add_location(div, file$o, 26, 1, 673);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				/*div_binding*/ ctx[17](div);
				current = true;

				if (!mounted) {
					dispose = action_destroyer(/*builder*/ ctx[8].action(div));
					mounted = true;
				}
			},
			p: function update(new_ctx, dirty) {
				ctx = new_ctx;

				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder*/ 33024)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[15],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[15], dirty, get_default_slot_changes_1$6),
							get_default_slot_context_1$6
						);
					}
				}

				set_attributes(div, div_data = get_spread_update(div_levels, [
					dirty & /*builder*/ 256 && /*builder*/ ctx[8],
					dirty & /*$$restProps*/ 8192 && /*$$restProps*/ ctx[13]
				]));
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);

				if (local) {
					add_render_callback(() => {
						if (!current) return;
						if (!div_transition) div_transition = create_bidirectional_transition(div, /*transition*/ ctx[1], /*transitionConfig*/ ctx[2], true);
						div_transition.run(1);
					});
				}

				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);

				if (local) {
					if (!div_transition) div_transition = create_bidirectional_transition(div, /*transition*/ ctx[1], /*transitionConfig*/ ctx[2], false);
					div_transition.run(0);
				}

				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (default_slot) default_slot.d(detaching);
				/*div_binding*/ ctx[17](null);
				if (detaching && div_transition) div_transition.end();
				mounted = false;
				dispose();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_1$6.name,
			type: "if",
			source: "(26:43) ",
			ctx
		});

		return block;
	}

	// (24:0) {#if asChild && $isSelected(props)}
	function create_if_block$h(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[16].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[15], get_default_slot_context$8);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder*/ 33024)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[15],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[15], dirty, get_default_slot_changes$8),
							get_default_slot_context$8
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$h.name,
			type: "if",
			source: "(24:0) {#if asChild && $isSelected(props)}",
			ctx
		});

		return block;
	}

	function create_fragment$y(ctx) {
		let show_if;
		let show_if_1;
		let show_if_2;
		let show_if_3;
		let show_if_4;
		let show_if_5;
		let current_block_type_index;
		let if_block;
		let if_block_anchor;
		let current;

		const if_block_creators = [
			create_if_block$h,
			create_if_block_1$6,
			create_if_block_2$3,
			create_if_block_3$2,
			create_if_block_4$2,
			create_if_block_5$1
		];

		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (dirty & /*asChild, $isSelected*/ 640) show_if = null;
			if (dirty & /*transition, $isSelected*/ 514) show_if_1 = null;
			if (dirty & /*inTransition, outTransition, $isSelected*/ 552) show_if_2 = null;
			if (dirty & /*inTransition, $isSelected*/ 520) show_if_3 = null;
			if (dirty & /*outTransition, $isSelected*/ 544) show_if_4 = null;
			if (dirty & /*$isSelected*/ 512) show_if_5 = null;
			if (show_if == null) show_if = !!(/*asChild*/ ctx[7] && /*$isSelected*/ ctx[9](/*props*/ ctx[12]));
			if (show_if) return 0;
			if (show_if_1 == null) show_if_1 = !!(/*transition*/ ctx[1] && /*$isSelected*/ ctx[9](/*props*/ ctx[12]));
			if (show_if_1) return 1;
			if (show_if_2 == null) show_if_2 = !!(/*inTransition*/ ctx[3] && /*outTransition*/ ctx[5] && /*$isSelected*/ ctx[9](/*props*/ ctx[12]));
			if (show_if_2) return 2;
			if (show_if_3 == null) show_if_3 = !!(/*inTransition*/ ctx[3] && /*$isSelected*/ ctx[9](/*props*/ ctx[12]));
			if (show_if_3) return 3;
			if (show_if_4 == null) show_if_4 = !!(/*outTransition*/ ctx[5] && /*$isSelected*/ ctx[9](/*props*/ ctx[12]));
			if (show_if_4) return 4;
			if (show_if_5 == null) show_if_5 = !!/*$isSelected*/ ctx[9](/*props*/ ctx[12]);
			if (show_if_5) return 5;
			return -1;
		}

		if (~(current_block_type_index = select_block_type(ctx, -1))) {
			if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
		}

		const block = {
			c: function create() {
				if (if_block) if_block.c();
				if_block_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].m(target, anchor);
				}

				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx, dirty);

				if (current_block_type_index === previous_block_index) {
					if (~current_block_type_index) {
						if_blocks[current_block_type_index].p(ctx, dirty);
					}
				} else {
					if (if_block) {
						group_outros();

						transition_out(if_blocks[previous_block_index], 1, 1, () => {
							if_blocks[previous_block_index] = null;
						});

						check_outros();
					}

					if (~current_block_type_index) {
						if_block = if_blocks[current_block_type_index];

						if (!if_block) {
							if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
							if_block.c();
						} else {
							if_block.p(ctx, dirty);
						}

						transition_in(if_block, 1);
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					} else {
						if_block = null;
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if (~current_block_type_index) {
					if_blocks[current_block_type_index].d(detaching);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$y.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$y($$self, $$props, $$invalidate) {
		let builder;

		const omit_props_names = [
			"transition","transitionConfig","inTransition","inTransitionConfig","outTransition","outTransitionConfig","asChild","el"
		];

		let $$restProps = compute_rest_props($$props, omit_props_names);
		let $content;
		let $isSelected;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Accordion_content', slots, ['default']);
		let { transition = void 0 } = $$props;
		let { transitionConfig = void 0 } = $$props;
		let { inTransition = void 0 } = $$props;
		let { inTransitionConfig = void 0 } = $$props;
		let { outTransition = void 0 } = $$props;
		let { outTransitionConfig = void 0 } = $$props;
		let { asChild = false } = $$props;
		let { el = void 0 } = $$props;
		const { elements: { content }, helpers: { isSelected }, props, getAttrs } = getContent();
		validate_store(content, 'content');
		component_subscribe($$self, content, value => $$invalidate(14, $content = value));
		validate_store(isSelected, 'isSelected');
		component_subscribe($$self, isSelected, value => $$invalidate(9, $isSelected = value));
		const attrs = getAttrs("content");

		function div_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				el = $$value;
				$$invalidate(0, el);
			});
		}

		function div_binding_1($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				el = $$value;
				$$invalidate(0, el);
			});
		}

		function div_binding_2($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				el = $$value;
				$$invalidate(0, el);
			});
		}

		function div_binding_3($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				el = $$value;
				$$invalidate(0, el);
			});
		}

		function div_binding_4($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				el = $$value;
				$$invalidate(0, el);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(13, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('transition' in $$new_props) $$invalidate(1, transition = $$new_props.transition);
			if ('transitionConfig' in $$new_props) $$invalidate(2, transitionConfig = $$new_props.transitionConfig);
			if ('inTransition' in $$new_props) $$invalidate(3, inTransition = $$new_props.inTransition);
			if ('inTransitionConfig' in $$new_props) $$invalidate(4, inTransitionConfig = $$new_props.inTransitionConfig);
			if ('outTransition' in $$new_props) $$invalidate(5, outTransition = $$new_props.outTransition);
			if ('outTransitionConfig' in $$new_props) $$invalidate(6, outTransitionConfig = $$new_props.outTransitionConfig);
			if ('asChild' in $$new_props) $$invalidate(7, asChild = $$new_props.asChild);
			if ('el' in $$new_props) $$invalidate(0, el = $$new_props.el);
			if ('$$scope' in $$new_props) $$invalidate(15, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			melt,
			getContent,
			transition,
			transitionConfig,
			inTransition,
			inTransitionConfig,
			outTransition,
			outTransitionConfig,
			asChild,
			el,
			content,
			isSelected,
			props,
			getAttrs,
			attrs,
			builder,
			$content,
			$isSelected
		});

		$$self.$inject_state = $$new_props => {
			if ('transition' in $$props) $$invalidate(1, transition = $$new_props.transition);
			if ('transitionConfig' in $$props) $$invalidate(2, transitionConfig = $$new_props.transitionConfig);
			if ('inTransition' in $$props) $$invalidate(3, inTransition = $$new_props.inTransition);
			if ('inTransitionConfig' in $$props) $$invalidate(4, inTransitionConfig = $$new_props.inTransitionConfig);
			if ('outTransition' in $$props) $$invalidate(5, outTransition = $$new_props.outTransition);
			if ('outTransitionConfig' in $$props) $$invalidate(6, outTransitionConfig = $$new_props.outTransitionConfig);
			if ('asChild' in $$props) $$invalidate(7, asChild = $$new_props.asChild);
			if ('el' in $$props) $$invalidate(0, el = $$new_props.el);
			if ('builder' in $$props) $$invalidate(8, builder = $$new_props.builder);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*$content*/ 16384) {
				$$invalidate(8, builder = $content(props));
			}

			if ($$self.$$.dirty & /*builder*/ 256) {
				Object.assign(builder, attrs);
			}
		};

		return [
			el,
			transition,
			transitionConfig,
			inTransition,
			inTransitionConfig,
			outTransition,
			outTransitionConfig,
			asChild,
			builder,
			$isSelected,
			content,
			isSelected,
			props,
			$$restProps,
			$content,
			$$scope,
			slots,
			div_binding,
			div_binding_1,
			div_binding_2,
			div_binding_3,
			div_binding_4
		];
	}

	let Accordion_content$1 = class Accordion_content extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$y, create_fragment$y, safe_not_equal, {
				transition: 1,
				transitionConfig: 2,
				inTransition: 3,
				inTransitionConfig: 4,
				outTransition: 5,
				outTransitionConfig: 6,
				asChild: 7,
				el: 0
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Accordion_content",
				options,
				id: create_fragment$y.name
			});
		}

		get transition() {
			throw new Error("<Accordion_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set transition(value) {
			throw new Error("<Accordion_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get transitionConfig() {
			throw new Error("<Accordion_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set transitionConfig(value) {
			throw new Error("<Accordion_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get inTransition() {
			throw new Error("<Accordion_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set inTransition(value) {
			throw new Error("<Accordion_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get inTransitionConfig() {
			throw new Error("<Accordion_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set inTransitionConfig(value) {
			throw new Error("<Accordion_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get outTransition() {
			throw new Error("<Accordion_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set outTransition(value) {
			throw new Error("<Accordion_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get outTransitionConfig() {
			throw new Error("<Accordion_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set outTransitionConfig(value) {
			throw new Error("<Accordion_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get asChild() {
			throw new Error("<Accordion_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set asChild(value) {
			throw new Error("<Accordion_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get el() {
			throw new Error("<Accordion_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set el(value) {
			throw new Error("<Accordion_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	};

	var AccordionPrimitive = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Content: Accordion_content$1,
		Header: Accordion_header,
		Item: Accordion_item$1,
		Root: Accordion$1,
		Trigger: Accordion_trigger$1
	});

	function builderActions(node, params) {
	    const unsubs = [];
	    params.builders.forEach((builder) => {
	        const act = builder.action(node);
	        if (act) {
	            unsubs.push(act);
	        }
	    });
	    return {
	        destroy: () => {
	            unsubs.forEach((unsub) => {
	                if (unsub.destroy) {
	                    unsub.destroy();
	                }
	            });
	        },
	    };
	}
	function getAttrs(builders) {
	    const attrs = {};
	    builders.forEach((builder) => {
	        Object.keys(builder).forEach((key) => {
	            if (key !== "action") {
	                attrs[key] = builder[key];
	            }
	        });
	    });
	    return attrs;
	}

	/* node_modules/bits-ui/dist/bits/button/components/button.svelte generated by Svelte v4.2.10 */
	const file$n = "node_modules/bits-ui/dist/bits/button/components/button.svelte";

	// (32:0) {:else}
	function create_else_block$c(ctx) {
		let previous_tag = /*href*/ ctx[1] ? "a" : "button";
		let svelte_element_anchor;
		let current;
		validate_dynamic_element(/*href*/ ctx[1] ? "a" : "button");
		validate_void_dynamic_element(/*href*/ ctx[1] ? "a" : "button");
		let svelte_element = (/*href*/ ctx[1] ? "a" : "button") && create_dynamic_element_1(ctx);

		const block = {
			c: function create() {
				if (svelte_element) svelte_element.c();
				svelte_element_anchor = empty();
			},
			m: function mount(target, anchor) {
				if (svelte_element) svelte_element.m(target, anchor);
				insert_dev(target, svelte_element_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (/*href*/ ctx[1] ? "a" : "button") {
					if (!previous_tag) {
						svelte_element = create_dynamic_element_1(ctx);
						previous_tag = /*href*/ ctx[1] ? "a" : "button";
						svelte_element.c();
						svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
					} else if (safe_not_equal(previous_tag, /*href*/ ctx[1] ? "a" : "button")) {
						svelte_element.d(1);
						validate_dynamic_element(/*href*/ ctx[1] ? "a" : "button");
						validate_void_dynamic_element(/*href*/ ctx[1] ? "a" : "button");
						svelte_element = create_dynamic_element_1(ctx);
						previous_tag = /*href*/ ctx[1] ? "a" : "button";
						svelte_element.c();
						svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
					} else {
						svelte_element.p(ctx, dirty);
					}
				} else if (previous_tag) {
					svelte_element.d(1);
					svelte_element = null;
					previous_tag = /*href*/ ctx[1] ? "a" : "button";
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(svelte_element, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(svelte_element, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(svelte_element_anchor);
				}

				if (svelte_element) svelte_element.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block$c.name,
			type: "else",
			source: "(32:0) {:else}",
			ctx
		});

		return block;
	}

	// (11:0) {#if builders && builders.length}
	function create_if_block$g(ctx) {
		let previous_tag = /*href*/ ctx[1] ? "a" : "button";
		let svelte_element_anchor;
		let current;
		validate_dynamic_element(/*href*/ ctx[1] ? "a" : "button");
		validate_void_dynamic_element(/*href*/ ctx[1] ? "a" : "button");
		let svelte_element = (/*href*/ ctx[1] ? "a" : "button") && create_dynamic_element(ctx);

		const block = {
			c: function create() {
				if (svelte_element) svelte_element.c();
				svelte_element_anchor = empty();
			},
			m: function mount(target, anchor) {
				if (svelte_element) svelte_element.m(target, anchor);
				insert_dev(target, svelte_element_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (/*href*/ ctx[1] ? "a" : "button") {
					if (!previous_tag) {
						svelte_element = create_dynamic_element(ctx);
						previous_tag = /*href*/ ctx[1] ? "a" : "button";
						svelte_element.c();
						svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
					} else if (safe_not_equal(previous_tag, /*href*/ ctx[1] ? "a" : "button")) {
						svelte_element.d(1);
						validate_dynamic_element(/*href*/ ctx[1] ? "a" : "button");
						validate_void_dynamic_element(/*href*/ ctx[1] ? "a" : "button");
						svelte_element = create_dynamic_element(ctx);
						previous_tag = /*href*/ ctx[1] ? "a" : "button";
						svelte_element.c();
						svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
					} else {
						svelte_element.p(ctx, dirty);
					}
				} else if (previous_tag) {
					svelte_element.d(1);
					svelte_element = null;
					previous_tag = /*href*/ ctx[1] ? "a" : "button";
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(svelte_element, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(svelte_element, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(svelte_element_anchor);
				}

				if (svelte_element) svelte_element.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$g.name,
			type: "if",
			source: "(11:0) {#if builders && builders.length}",
			ctx
		});

		return block;
	}

	// (34:1) <svelte:element   this={href ? "a" : "button"}   type={href ? undefined : type}   {href}   on:click   on:change   on:keydown   on:keyup   on:mouseenter   on:mouseleave   tabindex="0"   {...$$restProps}   {...attrs}  >
	function create_dynamic_element_1(ctx) {
		let svelte_element;
		let svelte_element_type_value;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[7].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

		let svelte_element_levels = [
			{
				type: svelte_element_type_value = /*href*/ ctx[1] ? undefined : /*type*/ ctx[2]
			},
			{ href: /*href*/ ctx[1] },
			{ tabindex: "0" },
			/*$$restProps*/ ctx[5],
			/*attrs*/ ctx[4]
		];

		let svelte_element_data = {};

		for (let i = 0; i < svelte_element_levels.length; i += 1) {
			svelte_element_data = assign(svelte_element_data, svelte_element_levels[i]);
		}

		const block = {
			c: function create() {
				svelte_element = element(/*href*/ ctx[1] ? "a" : "button");
				if (default_slot) default_slot.c();
				set_dynamic_element_data(/*href*/ ctx[1] ? "a" : "button")(svelte_element, svelte_element_data);
				add_location(svelte_element, file$n, 33, 1, 726);
			},
			m: function mount(target, anchor) {
				insert_dev(target, svelte_element, anchor);

				if (default_slot) {
					default_slot.m(svelte_element, null);
				}

				current = true;

				if (!mounted) {
					dispose = [
						listen_dev(svelte_element, "click", /*click_handler_1*/ ctx[14], false, false, false, false),
						listen_dev(svelte_element, "change", /*change_handler_1*/ ctx[15], false, false, false, false),
						listen_dev(svelte_element, "keydown", /*keydown_handler_1*/ ctx[16], false, false, false, false),
						listen_dev(svelte_element, "keyup", /*keyup_handler_1*/ ctx[17], false, false, false, false),
						listen_dev(svelte_element, "mouseenter", /*mouseenter_handler_1*/ ctx[18], false, false, false, false),
						listen_dev(svelte_element, "mouseleave", /*mouseleave_handler_1*/ ctx[19], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[6],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
							null
						);
					}
				}

				set_dynamic_element_data(/*href*/ ctx[1] ? "a" : "button")(svelte_element, svelte_element_data = get_spread_update(svelte_element_levels, [
					(!current || dirty & /*href, type*/ 6 && svelte_element_type_value !== (svelte_element_type_value = /*href*/ ctx[1] ? undefined : /*type*/ ctx[2])) && { type: svelte_element_type_value },
					(!current || dirty & /*href*/ 2) && { href: /*href*/ ctx[1] },
					{ tabindex: "0" },
					dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5],
					/*attrs*/ ctx[4]
				]));
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(svelte_element);
				}

				if (default_slot) default_slot.d(detaching);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_dynamic_element_1.name,
			type: "child_dynamic_element",
			source: "(34:1) <svelte:element   this={href ? \\\"a\\\" : \\\"button\\\"}   type={href ? undefined : type}   {href}   on:click   on:change   on:keydown   on:keyup   on:mouseenter   on:mouseleave   tabindex=\\\"0\\\"   {...$$restProps}   {...attrs}  >",
			ctx
		});

		return block;
	}

	// (13:1) <svelte:element   this={href ? "a" : "button"}   bind:this={el}   type={href ? undefined : type}   {href}   on:click   on:change   on:keydown   on:keyup   on:mouseenter   on:mouseleave   tabindex="0"   use:builderActions={{ builders }}   {...getAttrs(builders)}   {...$$restProps}   {...attrs}  >
	function create_dynamic_element(ctx) {
		let svelte_element;
		let svelte_element_type_value;
		let builderActions_action;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[7].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

		let svelte_element_levels = [
			{
				type: svelte_element_type_value = /*href*/ ctx[1] ? undefined : /*type*/ ctx[2]
			},
			{ href: /*href*/ ctx[1] },
			{ tabindex: "0" },
			getAttrs(/*builders*/ ctx[3]),
			/*$$restProps*/ ctx[5],
			/*attrs*/ ctx[4]
		];

		let svelte_element_data = {};

		for (let i = 0; i < svelte_element_levels.length; i += 1) {
			svelte_element_data = assign(svelte_element_data, svelte_element_levels[i]);
		}

		const block = {
			c: function create() {
				svelte_element = element(/*href*/ ctx[1] ? "a" : "button");
				if (default_slot) default_slot.c();
				set_dynamic_element_data(/*href*/ ctx[1] ? "a" : "button")(svelte_element, svelte_element_data);
				add_location(svelte_element, file$n, 12, 1, 330);
			},
			m: function mount(target, anchor) {
				insert_dev(target, svelte_element, anchor);

				if (default_slot) {
					default_slot.m(svelte_element, null);
				}

				/*svelte_element_binding*/ ctx[20](svelte_element);
				current = true;

				if (!mounted) {
					dispose = [
						listen_dev(svelte_element, "click", /*click_handler*/ ctx[8], false, false, false, false),
						listen_dev(svelte_element, "change", /*change_handler*/ ctx[9], false, false, false, false),
						listen_dev(svelte_element, "keydown", /*keydown_handler*/ ctx[10], false, false, false, false),
						listen_dev(svelte_element, "keyup", /*keyup_handler*/ ctx[11], false, false, false, false),
						listen_dev(svelte_element, "mouseenter", /*mouseenter_handler*/ ctx[12], false, false, false, false),
						listen_dev(svelte_element, "mouseleave", /*mouseleave_handler*/ ctx[13], false, false, false, false),
						action_destroyer(builderActions_action = builderActions.call(null, svelte_element, { builders: /*builders*/ ctx[3] }))
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[6],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
							null
						);
					}
				}

				set_dynamic_element_data(/*href*/ ctx[1] ? "a" : "button")(svelte_element, svelte_element_data = get_spread_update(svelte_element_levels, [
					(!current || dirty & /*href, type*/ 6 && svelte_element_type_value !== (svelte_element_type_value = /*href*/ ctx[1] ? undefined : /*type*/ ctx[2])) && { type: svelte_element_type_value },
					(!current || dirty & /*href*/ 2) && { href: /*href*/ ctx[1] },
					{ tabindex: "0" },
					dirty & /*builders*/ 8 && getAttrs(/*builders*/ ctx[3]),
					dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5],
					/*attrs*/ ctx[4]
				]));

				if (builderActions_action && is_function(builderActions_action.update) && dirty & /*builders*/ 8) builderActions_action.update.call(null, { builders: /*builders*/ ctx[3] });
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(svelte_element);
				}

				if (default_slot) default_slot.d(detaching);
				/*svelte_element_binding*/ ctx[20](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_dynamic_element.name,
			type: "child_dynamic_element",
			source: "(13:1) <svelte:element   this={href ? \\\"a\\\" : \\\"button\\\"}   bind:this={el}   type={href ? undefined : type}   {href}   on:click   on:change   on:keydown   on:keyup   on:mouseenter   on:mouseleave   tabindex=\\\"0\\\"   use:builderActions={{ builders }}   {...getAttrs(builders)}   {...$$restProps}   {...attrs}  >",
			ctx
		});

		return block;
	}

	function create_fragment$x(ctx) {
		let current_block_type_index;
		let if_block;
		let if_block_anchor;
		let current;
		const if_block_creators = [create_if_block$g, create_else_block$c];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*builders*/ ctx[3] && /*builders*/ ctx[3].length) return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		const block = {
			c: function create() {
				if_block.c();
				if_block_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if_blocks[current_block_type_index].d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$x.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$x($$self, $$props, $$invalidate) {
		const omit_props_names = ["href","type","builders","el"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Button', slots, ['default']);
		let { href = void 0 } = $$props;
		let { type = void 0 } = $$props;
		let { builders = [] } = $$props;
		let { el = void 0 } = $$props;
		const attrs = { "data-button-root": "" };

		function click_handler(event) {
			bubble.call(this, $$self, event);
		}

		function change_handler(event) {
			bubble.call(this, $$self, event);
		}

		function keydown_handler(event) {
			bubble.call(this, $$self, event);
		}

		function keyup_handler(event) {
			bubble.call(this, $$self, event);
		}

		function mouseenter_handler(event) {
			bubble.call(this, $$self, event);
		}

		function mouseleave_handler(event) {
			bubble.call(this, $$self, event);
		}

		function click_handler_1(event) {
			bubble.call(this, $$self, event);
		}

		function change_handler_1(event) {
			bubble.call(this, $$self, event);
		}

		function keydown_handler_1(event) {
			bubble.call(this, $$self, event);
		}

		function keyup_handler_1(event) {
			bubble.call(this, $$self, event);
		}

		function mouseenter_handler_1(event) {
			bubble.call(this, $$self, event);
		}

		function mouseleave_handler_1(event) {
			bubble.call(this, $$self, event);
		}

		function svelte_element_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				el = $$value;
				$$invalidate(0, el);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('href' in $$new_props) $$invalidate(1, href = $$new_props.href);
			if ('type' in $$new_props) $$invalidate(2, type = $$new_props.type);
			if ('builders' in $$new_props) $$invalidate(3, builders = $$new_props.builders);
			if ('el' in $$new_props) $$invalidate(0, el = $$new_props.el);
			if ('$$scope' in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			builderActions,
			getAttrs,
			href,
			type,
			builders,
			el,
			attrs
		});

		$$self.$inject_state = $$new_props => {
			if ('href' in $$props) $$invalidate(1, href = $$new_props.href);
			if ('type' in $$props) $$invalidate(2, type = $$new_props.type);
			if ('builders' in $$props) $$invalidate(3, builders = $$new_props.builders);
			if ('el' in $$props) $$invalidate(0, el = $$new_props.el);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			el,
			href,
			type,
			builders,
			attrs,
			$$restProps,
			$$scope,
			slots,
			click_handler,
			change_handler,
			keydown_handler,
			keyup_handler,
			mouseenter_handler,
			mouseleave_handler,
			click_handler_1,
			change_handler_1,
			keydown_handler_1,
			keyup_handler_1,
			mouseenter_handler_1,
			mouseleave_handler_1,
			svelte_element_binding
		];
	}

	let Button$1 = class Button extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$x, create_fragment$x, safe_not_equal, { href: 1, type: 2, builders: 3, el: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Button",
				options,
				id: create_fragment$x.name
			});
		}

		get href() {
			throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set href(value) {
			throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get type() {
			throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set type(value) {
			throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get builders() {
			throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set builders(value) {
			throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get el() {
			throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set el(value) {
			throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	};

	var ButtonPrimitive = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Root: Button$1
	});

	function getSeparatorData() {
	    const NAME = "separator";
	    const PARTS = ["root"];
	    return {
	        NAME,
	        PARTS,
	    };
	}
	function setCtx$2(props) {
	    const { NAME, PARTS } = getSeparatorData();
	    const getAttrs = createBitAttrs(NAME, PARTS);
	    const separator = { ...createSeparator(removeUndefined(props)), getAttrs };
	    return {
	        ...separator,
	        updateOption: getOptionUpdater(separator.options),
	    };
	}

	/* node_modules/bits-ui/dist/bits/separator/components/separator.svelte generated by Svelte v4.2.10 */
	const file$m = "node_modules/bits-ui/dist/bits/separator/components/separator.svelte";
	const get_default_slot_changes$7 = dirty => ({ builder: dirty & /*builder*/ 4 });
	const get_default_slot_context$7 = ctx => ({ builder: /*builder*/ ctx[2] });

	// (25:0) {:else}
	function create_else_block$b(ctx) {
		let div;
		let mounted;
		let dispose;
		let div_levels = [/*builder*/ ctx[2], /*$$restProps*/ ctx[4]];
		let div_data = {};

		for (let i = 0; i < div_levels.length; i += 1) {
			div_data = assign(div_data, div_levels[i]);
		}

		const block = {
			c: function create() {
				div = element("div");
				set_attributes(div, div_data);
				add_location(div, file$m, 25, 1, 539);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
				/*div_binding*/ ctx[10](div);

				if (!mounted) {
					dispose = action_destroyer(/*builder*/ ctx[2].action(div));
					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				set_attributes(div, div_data = get_spread_update(div_levels, [
					dirty & /*builder*/ 4 && /*builder*/ ctx[2],
					dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]
				]));
			},
			i: noop$3,
			o: noop$3,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				/*div_binding*/ ctx[10](null);
				mounted = false;
				dispose();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block$b.name,
			type: "else",
			source: "(25:0) {:else}",
			ctx
		});

		return block;
	}

	// (23:0) {#if asChild}
	function create_if_block$f(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[9].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], get_default_slot_context$7);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder*/ 260)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[8],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, get_default_slot_changes$7),
							get_default_slot_context$7
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$f.name,
			type: "if",
			source: "(23:0) {#if asChild}",
			ctx
		});

		return block;
	}

	function create_fragment$w(ctx) {
		let current_block_type_index;
		let if_block;
		let if_block_anchor;
		let current;
		const if_block_creators = [create_if_block$f, create_else_block$b];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*asChild*/ ctx[1]) return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		const block = {
			c: function create() {
				if_block.c();
				if_block_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if_blocks[current_block_type_index].d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$w.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$w($$self, $$props, $$invalidate) {
		let builder;
		const omit_props_names = ["orientation","decorative","asChild","el"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let $root;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Separator', slots, ['default']);
		let { orientation = "horizontal" } = $$props;
		let { decorative = true } = $$props;
		let { asChild = false } = $$props;
		let { el = void 0 } = $$props;
		const { elements: { root }, updateOption, getAttrs } = setCtx$2({ orientation, decorative });
		validate_store(root, 'root');
		component_subscribe($$self, root, value => $$invalidate(7, $root = value));
		const attrs = getAttrs("root");

		function div_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				el = $$value;
				$$invalidate(0, el);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('orientation' in $$new_props) $$invalidate(5, orientation = $$new_props.orientation);
			if ('decorative' in $$new_props) $$invalidate(6, decorative = $$new_props.decorative);
			if ('asChild' in $$new_props) $$invalidate(1, asChild = $$new_props.asChild);
			if ('el' in $$new_props) $$invalidate(0, el = $$new_props.el);
			if ('$$scope' in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			melt,
			setCtx: setCtx$2,
			orientation,
			decorative,
			asChild,
			el,
			root,
			updateOption,
			getAttrs,
			attrs,
			builder,
			$root
		});

		$$self.$inject_state = $$new_props => {
			if ('orientation' in $$props) $$invalidate(5, orientation = $$new_props.orientation);
			if ('decorative' in $$props) $$invalidate(6, decorative = $$new_props.decorative);
			if ('asChild' in $$props) $$invalidate(1, asChild = $$new_props.asChild);
			if ('el' in $$props) $$invalidate(0, el = $$new_props.el);
			if ('builder' in $$props) $$invalidate(2, builder = $$new_props.builder);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*orientation*/ 32) {
				updateOption("orientation", orientation);
			}

			if ($$self.$$.dirty & /*decorative*/ 64) {
				updateOption("decorative", decorative);
			}

			if ($$self.$$.dirty & /*$root*/ 128) {
				$$invalidate(2, builder = $root);
			}

			if ($$self.$$.dirty & /*builder*/ 4) {
				Object.assign(builder, attrs);
			}
		};

		return [
			el,
			asChild,
			builder,
			root,
			$$restProps,
			orientation,
			decorative,
			$root,
			$$scope,
			slots,
			div_binding
		];
	}

	let Separator$1 = class Separator extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$w, create_fragment$w, safe_not_equal, {
				orientation: 5,
				decorative: 6,
				asChild: 1,
				el: 0
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Separator",
				options,
				id: create_fragment$w.name
			});
		}

		get orientation() {
			throw new Error("<Separator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set orientation(value) {
			throw new Error("<Separator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get decorative() {
			throw new Error("<Separator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set decorative(value) {
			throw new Error("<Separator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get asChild() {
			throw new Error("<Separator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set asChild(value) {
			throw new Error("<Separator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get el() {
			throw new Error("<Separator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set el(value) {
			throw new Error("<Separator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	};

	var SeparatorPrimitive = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Root: Separator$1
	});

	function getTabsData() {
	    const NAME = "tabs";
	    const PARTS = ["root", "content", "list", "trigger"];
	    return {
	        NAME,
	        PARTS,
	    };
	}
	function setCtx$1(props) {
	    const { NAME, PARTS } = getTabsData();
	    const getAttrs = createBitAttrs(NAME, PARTS);
	    const tabs = { ...createTabs(removeUndefined(props)), getAttrs };
	    setContext(NAME, tabs);
	    return {
	        ...tabs,
	        updateOption: getOptionUpdater(tabs.options),
	    };
	}
	function getCtx$1() {
	    const { NAME } = getTabsData();
	    return getContext(NAME);
	}

	/* node_modules/bits-ui/dist/bits/tabs/components/tabs.svelte generated by Svelte v4.2.10 */
	const file$l = "node_modules/bits-ui/dist/bits/tabs/components/tabs.svelte";

	const get_default_slot_changes_1$5 = dirty => ({
		builder: dirty & /*builder*/ 4,
		value: dirty & /*$localValue*/ 8
	});

	const get_default_slot_context_1$5 = ctx => ({
		builder: /*builder*/ ctx[2],
		value: /*$localValue*/ ctx[3]
	});

	const get_default_slot_changes$6 = dirty => ({
		builder: dirty & /*builder*/ 4,
		value: dirty & /*$localValue*/ 8
	});

	const get_default_slot_context$6 = ctx => ({
		builder: /*builder*/ ctx[2],
		value: /*$localValue*/ ctx[3]
	});

	// (49:0) {:else}
	function create_else_block$a(ctx) {
		let div;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[15].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[14], get_default_slot_context_1$5);
		let div_levels = [/*builder*/ ctx[2], /*$$restProps*/ ctx[6]];
		let div_data = {};

		for (let i = 0; i < div_levels.length; i += 1) {
			div_data = assign(div_data, div_levels[i]);
		}

		const block = {
			c: function create() {
				div = element("div");
				if (default_slot) default_slot.c();
				set_attributes(div, div_data);
				add_location(div, file$l, 49, 1, 1027);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				/*div_binding*/ ctx[16](div);
				current = true;

				if (!mounted) {
					dispose = action_destroyer(/*builder*/ ctx[2].action(div));
					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder, $localValue*/ 16396)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[14],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[14])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[14], dirty, get_default_slot_changes_1$5),
							get_default_slot_context_1$5
						);
					}
				}

				set_attributes(div, div_data = get_spread_update(div_levels, [
					dirty & /*builder*/ 4 && /*builder*/ ctx[2],
					dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6]
				]));
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (default_slot) default_slot.d(detaching);
				/*div_binding*/ ctx[16](null);
				mounted = false;
				dispose();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block$a.name,
			type: "else",
			source: "(49:0) {:else}",
			ctx
		});

		return block;
	}

	// (47:0) {#if asChild}
	function create_if_block$e(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[15].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[14], get_default_slot_context$6);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder, $localValue*/ 16396)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[14],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[14])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[14], dirty, get_default_slot_changes$6),
							get_default_slot_context$6
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$e.name,
			type: "if",
			source: "(47:0) {#if asChild}",
			ctx
		});

		return block;
	}

	function create_fragment$v(ctx) {
		let current_block_type_index;
		let if_block;
		let if_block_anchor;
		let current;
		const if_block_creators = [create_if_block$e, create_else_block$a];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*asChild*/ ctx[1]) return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		const block = {
			c: function create() {
				if_block.c();
				if_block_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if_blocks[current_block_type_index].d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$v.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$v($$self, $$props, $$invalidate) {
		let builder;

		const omit_props_names = [
			"orientation","activateOnFocus","loop","autoSet","value","onValueChange","asChild","el"
		];

		let $$restProps = compute_rest_props($$props, omit_props_names);
		let $root;
		let $localValue;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Tabs', slots, ['default']);
		let { orientation = void 0 } = $$props;
		let { activateOnFocus = void 0 } = $$props;
		let { loop = void 0 } = $$props;
		let { autoSet = void 0 } = $$props;
		let { value = void 0 } = $$props;
		let { onValueChange = void 0 } = $$props;
		let { asChild = false } = $$props;
		let { el = void 0 } = $$props;

		const { elements: { root }, states: { value: localValue }, updateOption, getAttrs } = setCtx$1({
			orientation,
			activateOnFocus,
			loop,
			autoSet,
			defaultValue: value,
			onValueChange: ({ next }) => {
				if (value !== next) {
					onValueChange?.(next);
					$$invalidate(7, value = next);
				}

				return next;
			}
		});

		validate_store(root, 'root');
		component_subscribe($$self, root, value => $$invalidate(13, $root = value));
		validate_store(localValue, 'localValue');
		component_subscribe($$self, localValue, value => $$invalidate(3, $localValue = value));
		const attrs = getAttrs("root");

		function div_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				el = $$value;
				$$invalidate(0, el);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('orientation' in $$new_props) $$invalidate(8, orientation = $$new_props.orientation);
			if ('activateOnFocus' in $$new_props) $$invalidate(9, activateOnFocus = $$new_props.activateOnFocus);
			if ('loop' in $$new_props) $$invalidate(10, loop = $$new_props.loop);
			if ('autoSet' in $$new_props) $$invalidate(11, autoSet = $$new_props.autoSet);
			if ('value' in $$new_props) $$invalidate(7, value = $$new_props.value);
			if ('onValueChange' in $$new_props) $$invalidate(12, onValueChange = $$new_props.onValueChange);
			if ('asChild' in $$new_props) $$invalidate(1, asChild = $$new_props.asChild);
			if ('el' in $$new_props) $$invalidate(0, el = $$new_props.el);
			if ('$$scope' in $$new_props) $$invalidate(14, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			melt,
			setCtx: setCtx$1,
			orientation,
			activateOnFocus,
			loop,
			autoSet,
			value,
			onValueChange,
			asChild,
			el,
			root,
			localValue,
			updateOption,
			getAttrs,
			attrs,
			builder,
			$root,
			$localValue
		});

		$$self.$inject_state = $$new_props => {
			if ('orientation' in $$props) $$invalidate(8, orientation = $$new_props.orientation);
			if ('activateOnFocus' in $$props) $$invalidate(9, activateOnFocus = $$new_props.activateOnFocus);
			if ('loop' in $$props) $$invalidate(10, loop = $$new_props.loop);
			if ('autoSet' in $$props) $$invalidate(11, autoSet = $$new_props.autoSet);
			if ('value' in $$props) $$invalidate(7, value = $$new_props.value);
			if ('onValueChange' in $$props) $$invalidate(12, onValueChange = $$new_props.onValueChange);
			if ('asChild' in $$props) $$invalidate(1, asChild = $$new_props.asChild);
			if ('el' in $$props) $$invalidate(0, el = $$new_props.el);
			if ('builder' in $$props) $$invalidate(2, builder = $$new_props.builder);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*value*/ 128) {
				value !== void 0 && localValue.set(value);
			}

			if ($$self.$$.dirty & /*orientation*/ 256) {
				updateOption("orientation", orientation);
			}

			if ($$self.$$.dirty & /*activateOnFocus*/ 512) {
				updateOption("activateOnFocus", activateOnFocus);
			}

			if ($$self.$$.dirty & /*loop*/ 1024) {
				updateOption("loop", loop);
			}

			if ($$self.$$.dirty & /*autoSet*/ 2048) {
				updateOption("autoSet", autoSet);
			}

			if ($$self.$$.dirty & /*$root*/ 8192) {
				$$invalidate(2, builder = $root);
			}

			if ($$self.$$.dirty & /*builder*/ 4) {
				Object.assign(builder, attrs);
			}
		};

		return [
			el,
			asChild,
			builder,
			$localValue,
			root,
			localValue,
			$$restProps,
			value,
			orientation,
			activateOnFocus,
			loop,
			autoSet,
			onValueChange,
			$root,
			$$scope,
			slots,
			div_binding
		];
	}

	let Tabs$1 = class Tabs extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$v, create_fragment$v, safe_not_equal, {
				orientation: 8,
				activateOnFocus: 9,
				loop: 10,
				autoSet: 11,
				value: 7,
				onValueChange: 12,
				asChild: 1,
				el: 0
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Tabs",
				options,
				id: create_fragment$v.name
			});
		}

		get orientation() {
			throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set orientation(value) {
			throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get activateOnFocus() {
			throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set activateOnFocus(value) {
			throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get loop() {
			throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set loop(value) {
			throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get autoSet() {
			throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set autoSet(value) {
			throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get value() {
			throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set value(value) {
			throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get onValueChange() {
			throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set onValueChange(value) {
			throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get asChild() {
			throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set asChild(value) {
			throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get el() {
			throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set el(value) {
			throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	};

	/* node_modules/bits-ui/dist/bits/tabs/components/tabs-content.svelte generated by Svelte v4.2.10 */
	const file$k = "node_modules/bits-ui/dist/bits/tabs/components/tabs-content.svelte";
	const get_default_slot_changes_1$4 = dirty => ({ builder: dirty & /*builder*/ 4 });
	const get_default_slot_context_1$4 = ctx => ({ builder: /*builder*/ ctx[2] });
	const get_default_slot_changes$5 = dirty => ({ builder: dirty & /*builder*/ 4 });
	const get_default_slot_context$5 = ctx => ({ builder: /*builder*/ ctx[2] });

	// (19:0) {:else}
	function create_else_block$9(ctx) {
		let div;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[8].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], get_default_slot_context_1$4);
		let div_levels = [/*builder*/ ctx[2], /*$$restProps*/ ctx[4]];
		let div_data = {};

		for (let i = 0; i < div_levels.length; i += 1) {
			div_data = assign(div_data, div_levels[i]);
		}

		const block = {
			c: function create() {
				div = element("div");
				if (default_slot) default_slot.c();
				set_attributes(div, div_data);
				add_location(div, file$k, 19, 1, 369);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				/*div_binding*/ ctx[9](div);
				current = true;

				if (!mounted) {
					dispose = action_destroyer(/*builder*/ ctx[2].action(div));
					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder*/ 132)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[7],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, get_default_slot_changes_1$4),
							get_default_slot_context_1$4
						);
					}
				}

				set_attributes(div, div_data = get_spread_update(div_levels, [
					dirty & /*builder*/ 4 && /*builder*/ ctx[2],
					dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]
				]));
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (default_slot) default_slot.d(detaching);
				/*div_binding*/ ctx[9](null);
				mounted = false;
				dispose();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block$9.name,
			type: "else",
			source: "(19:0) {:else}",
			ctx
		});

		return block;
	}

	// (17:0) {#if asChild}
	function create_if_block$d(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[8].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], get_default_slot_context$5);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder*/ 132)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[7],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, get_default_slot_changes$5),
							get_default_slot_context$5
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$d.name,
			type: "if",
			source: "(17:0) {#if asChild}",
			ctx
		});

		return block;
	}

	function create_fragment$u(ctx) {
		let current_block_type_index;
		let if_block;
		let if_block_anchor;
		let current;
		const if_block_creators = [create_if_block$d, create_else_block$9];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*asChild*/ ctx[1]) return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		const block = {
			c: function create() {
				if_block.c();
				if_block_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if_blocks[current_block_type_index].d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$u.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$u($$self, $$props, $$invalidate) {
		let builder;
		const omit_props_names = ["value","asChild","el"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let $content;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Tabs_content', slots, ['default']);
		let { value } = $$props;
		let { asChild = false } = $$props;
		let { el = void 0 } = $$props;
		const { elements: { content }, getAttrs } = getCtx$1();
		validate_store(content, 'content');
		component_subscribe($$self, content, value => $$invalidate(6, $content = value));
		const attrs = getAttrs("content");

		$$self.$$.on_mount.push(function () {
			if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
				console.warn("<Tabs_content> was created without expected prop 'value'");
			}
		});

		function div_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				el = $$value;
				$$invalidate(0, el);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('value' in $$new_props) $$invalidate(5, value = $$new_props.value);
			if ('asChild' in $$new_props) $$invalidate(1, asChild = $$new_props.asChild);
			if ('el' in $$new_props) $$invalidate(0, el = $$new_props.el);
			if ('$$scope' in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			melt,
			getCtx: getCtx$1,
			value,
			asChild,
			el,
			content,
			getAttrs,
			attrs,
			builder,
			$content
		});

		$$self.$inject_state = $$new_props => {
			if ('value' in $$props) $$invalidate(5, value = $$new_props.value);
			if ('asChild' in $$props) $$invalidate(1, asChild = $$new_props.asChild);
			if ('el' in $$props) $$invalidate(0, el = $$new_props.el);
			if ('builder' in $$props) $$invalidate(2, builder = $$new_props.builder);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*$content, value*/ 96) {
				$$invalidate(2, builder = $content(value));
			}

			if ($$self.$$.dirty & /*builder*/ 4) {
				Object.assign(builder, attrs);
			}
		};

		return [
			el,
			asChild,
			builder,
			content,
			$$restProps,
			value,
			$content,
			$$scope,
			slots,
			div_binding
		];
	}

	let Tabs_content$1 = class Tabs_content extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$u, create_fragment$u, safe_not_equal, { value: 5, asChild: 1, el: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Tabs_content",
				options,
				id: create_fragment$u.name
			});
		}

		get value() {
			throw new Error("<Tabs_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set value(value) {
			throw new Error("<Tabs_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get asChild() {
			throw new Error("<Tabs_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set asChild(value) {
			throw new Error("<Tabs_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get el() {
			throw new Error("<Tabs_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set el(value) {
			throw new Error("<Tabs_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	};

	/* node_modules/bits-ui/dist/bits/tabs/components/tabs-list.svelte generated by Svelte v4.2.10 */
	const file$j = "node_modules/bits-ui/dist/bits/tabs/components/tabs-list.svelte";
	const get_default_slot_changes_1$3 = dirty => ({ builder: dirty & /*builder*/ 4 });
	const get_default_slot_context_1$3 = ctx => ({ builder: /*builder*/ ctx[2] });
	const get_default_slot_changes$4 = dirty => ({ builder: dirty & /*builder*/ 4 });
	const get_default_slot_context$4 = ctx => ({ builder: /*builder*/ ctx[2] });

	// (18:0) {:else}
	function create_else_block$8(ctx) {
		let div;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[7].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], get_default_slot_context_1$3);
		let div_levels = [/*builder*/ ctx[2], /*$$restProps*/ ctx[4]];
		let div_data = {};

		for (let i = 0; i < div_levels.length; i += 1) {
			div_data = assign(div_data, div_levels[i]);
		}

		const block = {
			c: function create() {
				div = element("div");
				if (default_slot) default_slot.c();
				set_attributes(div, div_data);
				add_location(div, file$j, 18, 1, 335);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				/*div_binding*/ ctx[8](div);
				current = true;

				if (!mounted) {
					dispose = action_destroyer(/*builder*/ ctx[2].action(div));
					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder*/ 68)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[6],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, get_default_slot_changes_1$3),
							get_default_slot_context_1$3
						);
					}
				}

				set_attributes(div, div_data = get_spread_update(div_levels, [
					dirty & /*builder*/ 4 && /*builder*/ ctx[2],
					dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]
				]));
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (default_slot) default_slot.d(detaching);
				/*div_binding*/ ctx[8](null);
				mounted = false;
				dispose();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block$8.name,
			type: "else",
			source: "(18:0) {:else}",
			ctx
		});

		return block;
	}

	// (16:0) {#if asChild}
	function create_if_block$c(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[7].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], get_default_slot_context$4);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder*/ 68)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[6],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, get_default_slot_changes$4),
							get_default_slot_context$4
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$c.name,
			type: "if",
			source: "(16:0) {#if asChild}",
			ctx
		});

		return block;
	}

	function create_fragment$t(ctx) {
		let current_block_type_index;
		let if_block;
		let if_block_anchor;
		let current;
		const if_block_creators = [create_if_block$c, create_else_block$8];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*asChild*/ ctx[1]) return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		const block = {
			c: function create() {
				if_block.c();
				if_block_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if_blocks[current_block_type_index].d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$t.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$t($$self, $$props, $$invalidate) {
		let builder;
		const omit_props_names = ["asChild","el"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let $list;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Tabs_list', slots, ['default']);
		let { asChild = false } = $$props;
		let { el = void 0 } = $$props;
		const { elements: { list }, getAttrs } = getCtx$1();
		validate_store(list, 'list');
		component_subscribe($$self, list, value => $$invalidate(5, $list = value));
		const attrs = getAttrs("list");

		function div_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				el = $$value;
				$$invalidate(0, el);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('asChild' in $$new_props) $$invalidate(1, asChild = $$new_props.asChild);
			if ('el' in $$new_props) $$invalidate(0, el = $$new_props.el);
			if ('$$scope' in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			melt,
			getCtx: getCtx$1,
			asChild,
			el,
			list,
			getAttrs,
			attrs,
			builder,
			$list
		});

		$$self.$inject_state = $$new_props => {
			if ('asChild' in $$props) $$invalidate(1, asChild = $$new_props.asChild);
			if ('el' in $$props) $$invalidate(0, el = $$new_props.el);
			if ('builder' in $$props) $$invalidate(2, builder = $$new_props.builder);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*$list*/ 32) {
				$$invalidate(2, builder = $list);
			}

			if ($$self.$$.dirty & /*builder*/ 4) {
				Object.assign(builder, attrs);
			}
		};

		return [el, asChild, builder, list, $$restProps, $list, $$scope, slots, div_binding];
	}

	let Tabs_list$1 = class Tabs_list extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$t, create_fragment$t, safe_not_equal, { asChild: 1, el: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Tabs_list",
				options,
				id: create_fragment$t.name
			});
		}

		get asChild() {
			throw new Error("<Tabs_list>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set asChild(value) {
			throw new Error("<Tabs_list>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get el() {
			throw new Error("<Tabs_list>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set el(value) {
			throw new Error("<Tabs_list>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	};

	/* node_modules/bits-ui/dist/bits/tabs/components/tabs-trigger.svelte generated by Svelte v4.2.10 */
	const file$i = "node_modules/bits-ui/dist/bits/tabs/components/tabs-trigger.svelte";
	const get_default_slot_changes_1$2 = dirty => ({ builder: dirty & /*builder*/ 4 });
	const get_default_slot_context_1$2 = ctx => ({ builder: /*builder*/ ctx[2] });
	const get_default_slot_changes$3 = dirty => ({ builder: dirty & /*builder*/ 4 });
	const get_default_slot_context$3 = ctx => ({ builder: /*builder*/ ctx[2] });

	// (22:0) {:else}
	function create_else_block$7(ctx) {
		let button;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[10].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], get_default_slot_context_1$2);
		let button_levels = [/*builder*/ ctx[2], { type: "button" }, /*$$restProps*/ ctx[5]];
		let button_data = {};

		for (let i = 0; i < button_levels.length; i += 1) {
			button_data = assign(button_data, button_levels[i]);
		}

		const block = {
			c: function create() {
				button = element("button");
				if (default_slot) default_slot.c();
				set_attributes(button, button_data);
				add_location(button, file$i, 22, 1, 514);
			},
			m: function mount(target, anchor) {
				insert_dev(target, button, anchor);

				if (default_slot) {
					default_slot.m(button, null);
				}

				if (button.autofocus) button.focus();
				/*button_binding*/ ctx[11](button);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(/*builder*/ ctx[2].action(button)),
						listen_dev(button, "m-click", /*dispatch*/ ctx[4], false, false, false, false),
						listen_dev(button, "m-focus", /*dispatch*/ ctx[4], false, false, false, false),
						listen_dev(button, "m-keydown", /*dispatch*/ ctx[4], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder*/ 516)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[9],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, get_default_slot_changes_1$2),
							get_default_slot_context_1$2
						);
					}
				}

				set_attributes(button, button_data = get_spread_update(button_levels, [
					dirty & /*builder*/ 4 && /*builder*/ ctx[2],
					{ type: "button" },
					dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5]
				]));
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(button);
				}

				if (default_slot) default_slot.d(detaching);
				/*button_binding*/ ctx[11](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block$7.name,
			type: "else",
			source: "(22:0) {:else}",
			ctx
		});

		return block;
	}

	// (20:0) {#if asChild}
	function create_if_block$b(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[10].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], get_default_slot_context$3);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder*/ 516)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[9],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, get_default_slot_changes$3),
							get_default_slot_context$3
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$b.name,
			type: "if",
			source: "(20:0) {#if asChild}",
			ctx
		});

		return block;
	}

	function create_fragment$s(ctx) {
		let current_block_type_index;
		let if_block;
		let if_block_anchor;
		let current;
		const if_block_creators = [create_if_block$b, create_else_block$7];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*asChild*/ ctx[1]) return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		const block = {
			c: function create() {
				if_block.c();
				if_block_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if_blocks[current_block_type_index].d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$s.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$s($$self, $$props, $$invalidate) {
		let builder;
		const omit_props_names = ["value","disabled","asChild","el"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let $trigger;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Tabs_trigger', slots, ['default']);
		let { value } = $$props;
		let { disabled = void 0 } = $$props;
		let { asChild = false } = $$props;
		let { el = void 0 } = $$props;
		const { elements: { trigger }, getAttrs } = getCtx$1();
		validate_store(trigger, 'trigger');
		component_subscribe($$self, trigger, value => $$invalidate(8, $trigger = value));
		const dispatch = createDispatcher();
		const attrs = getAttrs("trigger");

		$$self.$$.on_mount.push(function () {
			if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
				console.warn("<Tabs_trigger> was created without expected prop 'value'");
			}
		});

		function button_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				el = $$value;
				$$invalidate(0, el);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('value' in $$new_props) $$invalidate(6, value = $$new_props.value);
			if ('disabled' in $$new_props) $$invalidate(7, disabled = $$new_props.disabled);
			if ('asChild' in $$new_props) $$invalidate(1, asChild = $$new_props.asChild);
			if ('el' in $$new_props) $$invalidate(0, el = $$new_props.el);
			if ('$$scope' in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			melt,
			getCtx: getCtx$1,
			createDispatcher,
			value,
			disabled,
			asChild,
			el,
			trigger,
			getAttrs,
			dispatch,
			attrs,
			builder,
			$trigger
		});

		$$self.$inject_state = $$new_props => {
			if ('value' in $$props) $$invalidate(6, value = $$new_props.value);
			if ('disabled' in $$props) $$invalidate(7, disabled = $$new_props.disabled);
			if ('asChild' in $$props) $$invalidate(1, asChild = $$new_props.asChild);
			if ('el' in $$props) $$invalidate(0, el = $$new_props.el);
			if ('builder' in $$props) $$invalidate(2, builder = $$new_props.builder);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*$trigger, value, disabled*/ 448) {
				$$invalidate(2, builder = $trigger({ value, disabled }));
			}

			if ($$self.$$.dirty & /*builder*/ 4) {
				Object.assign(builder, attrs);
			}
		};

		return [
			el,
			asChild,
			builder,
			trigger,
			dispatch,
			$$restProps,
			value,
			disabled,
			$trigger,
			$$scope,
			slots,
			button_binding
		];
	}

	let Tabs_trigger$1 = class Tabs_trigger extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$s, create_fragment$s, safe_not_equal, { value: 6, disabled: 7, asChild: 1, el: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Tabs_trigger",
				options,
				id: create_fragment$s.name
			});
		}

		get value() {
			throw new Error("<Tabs_trigger>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set value(value) {
			throw new Error("<Tabs_trigger>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get disabled() {
			throw new Error("<Tabs_trigger>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set disabled(value) {
			throw new Error("<Tabs_trigger>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get asChild() {
			throw new Error("<Tabs_trigger>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set asChild(value) {
			throw new Error("<Tabs_trigger>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get el() {
			throw new Error("<Tabs_trigger>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set el(value) {
			throw new Error("<Tabs_trigger>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	};

	var TabsPrimitive = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Content: Tabs_content$1,
		List: Tabs_list$1,
		Root: Tabs$1,
		Trigger: Tabs_trigger$1
	});

	function getToggleGroupData() {
	    const NAME = "toggle-group";
	    const PARTS = ["root", "item"];
	    return {
	        NAME,
	        PARTS,
	    };
	}
	function setCtx(props) {
	    const { NAME, PARTS } = getToggleGroupData();
	    const getAttrs = createBitAttrs(NAME, PARTS);
	    const toggleGroup = { ...createToggleGroup(removeUndefined(props)), getAttrs };
	    setContext(NAME, toggleGroup);
	    return {
	        ...toggleGroup,
	        updateOption: getOptionUpdater(toggleGroup.options),
	    };
	}
	function getCtx() {
	    const { NAME } = getToggleGroupData();
	    return getContext(NAME);
	}

	/* node_modules/bits-ui/dist/bits/toggle-group/components/toggle-group.svelte generated by Svelte v4.2.10 */
	const file$h = "node_modules/bits-ui/dist/bits/toggle-group/components/toggle-group.svelte";
	const get_default_slot_changes_1$1 = dirty => ({ builder: dirty & /*builder*/ 4 });
	const get_default_slot_context_1$1 = ctx => ({ builder: /*builder*/ ctx[2] });
	const get_default_slot_changes$2 = dirty => ({ builder: dirty & /*builder*/ 4 });
	const get_default_slot_context$2 = ctx => ({ builder: /*builder*/ ctx[2] });

	// (58:0) {:else}
	function create_else_block$6(ctx) {
		let div;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[13].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], get_default_slot_context_1$1);
		let div_levels = [/*builder*/ ctx[2], /*$$restProps*/ ctx[4]];
		let div_data = {};

		for (let i = 0; i < div_levels.length; i += 1) {
			div_data = assign(div_data, div_levels[i]);
		}

		const block = {
			c: function create() {
				div = element("div");
				if (default_slot) default_slot.c();
				set_attributes(div, div_data);
				add_location(div, file$h, 58, 1, 1272);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				/*div_binding*/ ctx[14](div);
				current = true;

				if (!mounted) {
					dispose = action_destroyer(/*builder*/ ctx[2].action(div));
					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder*/ 4100)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[12],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, get_default_slot_changes_1$1),
							get_default_slot_context_1$1
						);
					}
				}

				set_attributes(div, div_data = get_spread_update(div_levels, [
					dirty & /*builder*/ 4 && /*builder*/ ctx[2],
					dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]
				]));
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (default_slot) default_slot.d(detaching);
				/*div_binding*/ ctx[14](null);
				mounted = false;
				dispose();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block$6.name,
			type: "else",
			source: "(58:0) {:else}",
			ctx
		});

		return block;
	}

	// (56:0) {#if asChild}
	function create_if_block$a(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[13].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], get_default_slot_context$2);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder*/ 4100)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[12],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, get_default_slot_changes$2),
							get_default_slot_context$2
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$a.name,
			type: "if",
			source: "(56:0) {#if asChild}",
			ctx
		});

		return block;
	}

	function create_fragment$r(ctx) {
		let current_block_type_index;
		let if_block;
		let if_block_anchor;
		let current;
		const if_block_creators = [create_if_block$a, create_else_block$6];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*asChild*/ ctx[1]) return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		const block = {
			c: function create() {
				if_block.c();
				if_block_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if_blocks[current_block_type_index].d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$r.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$r($$self, $$props, $$invalidate) {
		let builder;
		const omit_props_names = ["type","disabled","loop","value","orientation","onValueChange","asChild","el"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let $root;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Toggle_group', slots, ['default']);
		let { type = "single" } = $$props;
		let { disabled = void 0 } = $$props;
		let { loop = void 0 } = $$props;
		let { value = void 0 } = $$props;
		let { orientation = void 0 } = $$props;
		let { onValueChange = void 0 } = $$props;
		let { asChild = false } = $$props;
		let { el = void 0 } = $$props;

		const { elements: { root }, states: { value: localValue }, updateOption, getAttrs } = setCtx({
			disabled,
			type,
			defaultValue: value,
			loop,
			orientation,
			onValueChange: ({ next }) => {
				if (Array.isArray(next)) {
					if (!Array.isArray(value) || !arraysAreEqual(value, next)) {
						onValueChange?.(next);
						$$invalidate(5, value = next);
						return next;
					}

					return next;
				}

				if (value !== next) {
					onValueChange?.(next);
					$$invalidate(5, value = next);
				}

				return next;
			}
		});

		validate_store(root, 'root');
		component_subscribe($$self, root, value => $$invalidate(11, $root = value));
		const attrs = getAttrs("root");

		function div_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				el = $$value;
				$$invalidate(0, el);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('type' in $$new_props) $$invalidate(6, type = $$new_props.type);
			if ('disabled' in $$new_props) $$invalidate(7, disabled = $$new_props.disabled);
			if ('loop' in $$new_props) $$invalidate(8, loop = $$new_props.loop);
			if ('value' in $$new_props) $$invalidate(5, value = $$new_props.value);
			if ('orientation' in $$new_props) $$invalidate(9, orientation = $$new_props.orientation);
			if ('onValueChange' in $$new_props) $$invalidate(10, onValueChange = $$new_props.onValueChange);
			if ('asChild' in $$new_props) $$invalidate(1, asChild = $$new_props.asChild);
			if ('el' in $$new_props) $$invalidate(0, el = $$new_props.el);
			if ('$$scope' in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			arraysAreEqual,
			melt,
			setCtx,
			type,
			disabled,
			loop,
			value,
			orientation,
			onValueChange,
			asChild,
			el,
			root,
			localValue,
			updateOption,
			getAttrs,
			attrs,
			builder,
			$root
		});

		$$self.$inject_state = $$new_props => {
			if ('type' in $$props) $$invalidate(6, type = $$new_props.type);
			if ('disabled' in $$props) $$invalidate(7, disabled = $$new_props.disabled);
			if ('loop' in $$props) $$invalidate(8, loop = $$new_props.loop);
			if ('value' in $$props) $$invalidate(5, value = $$new_props.value);
			if ('orientation' in $$props) $$invalidate(9, orientation = $$new_props.orientation);
			if ('onValueChange' in $$props) $$invalidate(10, onValueChange = $$new_props.onValueChange);
			if ('asChild' in $$props) $$invalidate(1, asChild = $$new_props.asChild);
			if ('el' in $$props) $$invalidate(0, el = $$new_props.el);
			if ('builder' in $$props) $$invalidate(2, builder = $$new_props.builder);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*value*/ 32) {
				value !== void 0 && localValue.set(Array.isArray(value) ? [...value] : value);
			}

			if ($$self.$$.dirty & /*disabled*/ 128) {
				updateOption("disabled", disabled);
			}

			if ($$self.$$.dirty & /*loop*/ 256) {
				updateOption("loop", loop);
			}

			if ($$self.$$.dirty & /*type*/ 64) {
				updateOption("type", type);
			}

			if ($$self.$$.dirty & /*orientation*/ 512) {
				updateOption("orientation", orientation);
			}

			if ($$self.$$.dirty & /*$root*/ 2048) {
				$$invalidate(2, builder = $root);
			}

			if ($$self.$$.dirty & /*builder*/ 4) {
				Object.assign(builder, attrs);
			}
		};

		return [
			el,
			asChild,
			builder,
			root,
			$$restProps,
			value,
			type,
			disabled,
			loop,
			orientation,
			onValueChange,
			$root,
			$$scope,
			slots,
			div_binding
		];
	}

	let Toggle_group$1 = class Toggle_group extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$r, create_fragment$r, safe_not_equal, {
				type: 6,
				disabled: 7,
				loop: 8,
				value: 5,
				orientation: 9,
				onValueChange: 10,
				asChild: 1,
				el: 0
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Toggle_group",
				options,
				id: create_fragment$r.name
			});
		}

		get type() {
			throw new Error("<Toggle_group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set type(value) {
			throw new Error("<Toggle_group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get disabled() {
			throw new Error("<Toggle_group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set disabled(value) {
			throw new Error("<Toggle_group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get loop() {
			throw new Error("<Toggle_group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set loop(value) {
			throw new Error("<Toggle_group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get value() {
			throw new Error("<Toggle_group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set value(value) {
			throw new Error("<Toggle_group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get orientation() {
			throw new Error("<Toggle_group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set orientation(value) {
			throw new Error("<Toggle_group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get onValueChange() {
			throw new Error("<Toggle_group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set onValueChange(value) {
			throw new Error("<Toggle_group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get asChild() {
			throw new Error("<Toggle_group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set asChild(value) {
			throw new Error("<Toggle_group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get el() {
			throw new Error("<Toggle_group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set el(value) {
			throw new Error("<Toggle_group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	};

	/* node_modules/bits-ui/dist/bits/toggle-group/components/toggle-group-item.svelte generated by Svelte v4.2.10 */
	const file$g = "node_modules/bits-ui/dist/bits/toggle-group/components/toggle-group-item.svelte";
	const get_default_slot_changes_1 = dirty => ({ builder: dirty & /*builder*/ 4 });
	const get_default_slot_context_1 = ctx => ({ builder: /*builder*/ ctx[2] });
	const get_default_slot_changes$1 = dirty => ({ builder: dirty & /*builder*/ 4 });
	const get_default_slot_context$1 = ctx => ({ builder: /*builder*/ ctx[2] });

	// (22:0) {:else}
	function create_else_block$5(ctx) {
		let button;
		let current;
		let mounted;
		let dispose;
		const default_slot_template = /*#slots*/ ctx[10].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], get_default_slot_context_1);
		let button_levels = [/*builder*/ ctx[2], /*$$restProps*/ ctx[5]];
		let button_data = {};

		for (let i = 0; i < button_levels.length; i += 1) {
			button_data = assign(button_data, button_levels[i]);
		}

		const block = {
			c: function create() {
				button = element("button");
				if (default_slot) default_slot.c();
				set_attributes(button, button_data);
				add_location(button, file$g, 22, 1, 494);
			},
			m: function mount(target, anchor) {
				insert_dev(target, button, anchor);

				if (default_slot) {
					default_slot.m(button, null);
				}

				if (button.autofocus) button.focus();
				/*button_binding*/ ctx[11](button);
				current = true;

				if (!mounted) {
					dispose = [
						action_destroyer(/*builder*/ ctx[2].action(button)),
						listen_dev(button, "m-click", /*dispatch*/ ctx[4], false, false, false, false),
						listen_dev(button, "m-keydown", /*dispatch*/ ctx[4], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder*/ 516)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[9],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, get_default_slot_changes_1),
							get_default_slot_context_1
						);
					}
				}

				set_attributes(button, button_data = get_spread_update(button_levels, [
					dirty & /*builder*/ 4 && /*builder*/ ctx[2],
					dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5]
				]));
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(button);
				}

				if (default_slot) default_slot.d(detaching);
				/*button_binding*/ ctx[11](null);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block$5.name,
			type: "else",
			source: "(22:0) {:else}",
			ctx
		});

		return block;
	}

	// (20:0) {#if asChild}
	function create_if_block$9(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[10].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], get_default_slot_context$1);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder*/ 516)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[9],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, get_default_slot_changes$1),
							get_default_slot_context$1
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$9.name,
			type: "if",
			source: "(20:0) {#if asChild}",
			ctx
		});

		return block;
	}

	function create_fragment$q(ctx) {
		let current_block_type_index;
		let if_block;
		let if_block_anchor;
		let current;
		const if_block_creators = [create_if_block$9, create_else_block$5];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*asChild*/ ctx[1]) return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		const block = {
			c: function create() {
				if_block.c();
				if_block_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if_blocks[current_block_type_index].d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$q.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$q($$self, $$props, $$invalidate) {
		let builder;
		const omit_props_names = ["value","disabled","asChild","el"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let $item;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Toggle_group_item', slots, ['default']);
		let { value } = $$props;
		let { disabled = false } = $$props;
		let { asChild = false } = $$props;
		let { el = void 0 } = $$props;
		const { elements: { item }, getAttrs } = getCtx();
		validate_store(item, 'item');
		component_subscribe($$self, item, value => $$invalidate(8, $item = value));
		const dispatch = createDispatcher();
		const attrs = getAttrs("item");

		$$self.$$.on_mount.push(function () {
			if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
				console.warn("<Toggle_group_item> was created without expected prop 'value'");
			}
		});

		function button_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				el = $$value;
				$$invalidate(0, el);
			});
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('value' in $$new_props) $$invalidate(6, value = $$new_props.value);
			if ('disabled' in $$new_props) $$invalidate(7, disabled = $$new_props.disabled);
			if ('asChild' in $$new_props) $$invalidate(1, asChild = $$new_props.asChild);
			if ('el' in $$new_props) $$invalidate(0, el = $$new_props.el);
			if ('$$scope' in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			melt,
			getCtx,
			createDispatcher,
			value,
			disabled,
			asChild,
			el,
			item,
			getAttrs,
			dispatch,
			attrs,
			builder,
			$item
		});

		$$self.$inject_state = $$new_props => {
			if ('value' in $$props) $$invalidate(6, value = $$new_props.value);
			if ('disabled' in $$props) $$invalidate(7, disabled = $$new_props.disabled);
			if ('asChild' in $$props) $$invalidate(1, asChild = $$new_props.asChild);
			if ('el' in $$props) $$invalidate(0, el = $$new_props.el);
			if ('builder' in $$props) $$invalidate(2, builder = $$new_props.builder);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*$item, value, disabled*/ 448) {
				$$invalidate(2, builder = $item({ value, disabled }));
			}

			if ($$self.$$.dirty & /*builder*/ 4) {
				Object.assign(builder, attrs);
			}
		};

		return [
			el,
			asChild,
			builder,
			item,
			dispatch,
			$$restProps,
			value,
			disabled,
			$item,
			$$scope,
			slots,
			button_binding
		];
	}

	let Toggle_group_item$1 = class Toggle_group_item extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$q, create_fragment$q, safe_not_equal, { value: 6, disabled: 7, asChild: 1, el: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Toggle_group_item",
				options,
				id: create_fragment$q.name
			});
		}

		get value() {
			throw new Error("<Toggle_group_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set value(value) {
			throw new Error("<Toggle_group_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get disabled() {
			throw new Error("<Toggle_group_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set disabled(value) {
			throw new Error("<Toggle_group_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get asChild() {
			throw new Error("<Toggle_group_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set asChild(value) {
			throw new Error("<Toggle_group_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get el() {
			throw new Error("<Toggle_group_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set el(value) {
			throw new Error("<Toggle_group_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	};

	var ToggleGroupPrimitive = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Item: Toggle_group_item$1,
		Root: Toggle_group$1
	});

	/* src/lib/components/ui/tabs/tabs-content.svelte generated by Svelte v4.2.10 */

	// (8:0) <TabsPrimitive.Content  class={cn(   "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",   className  )}  {value}  {...$$restProps} >
	function create_default_slot$d(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[3].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[4],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$d.name,
			type: "slot",
			source: "(8:0) <TabsPrimitive.Content  class={cn(   \\\"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\\\",   className  )}  {value}  {...$$restProps} >",
			ctx
		});

		return block;
	}

	function create_fragment$p(ctx) {
		let tabsprimitive_content;
		let current;

		const tabsprimitive_content_spread_levels = [
			{
				class: cn("mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2", /*className*/ ctx[0])
			},
			{ value: /*value*/ ctx[1] },
			/*$$restProps*/ ctx[2]
		];

		let tabsprimitive_content_props = {
			$$slots: { default: [create_default_slot$d] },
			$$scope: { ctx }
		};

		for (let i = 0; i < tabsprimitive_content_spread_levels.length; i += 1) {
			tabsprimitive_content_props = assign(tabsprimitive_content_props, tabsprimitive_content_spread_levels[i]);
		}

		tabsprimitive_content = new Tabs_content$1({
				props: tabsprimitive_content_props,
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(tabsprimitive_content.$$.fragment);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(tabsprimitive_content, target, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const tabsprimitive_content_changes = (dirty & /*className, value, $$restProps*/ 7)
				? get_spread_update(tabsprimitive_content_spread_levels, [
						dirty & /*className*/ 1 && {
							class: cn("mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2", /*className*/ ctx[0])
						},
						dirty & /*value*/ 2 && { value: /*value*/ ctx[1] },
						dirty & /*$$restProps*/ 4 && get_spread_object(/*$$restProps*/ ctx[2])
					])
				: {};

				if (dirty & /*$$scope*/ 16) {
					tabsprimitive_content_changes.$$scope = { dirty, ctx };
				}

				tabsprimitive_content.$set(tabsprimitive_content_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(tabsprimitive_content.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(tabsprimitive_content.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(tabsprimitive_content, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$p.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$p($$self, $$props, $$invalidate) {
		const omit_props_names = ["class","value"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Tabs_content', slots, ['default']);
		let { class: className = undefined } = $$props;
		let { value } = $$props;

		$$self.$$.on_mount.push(function () {
			if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
				console.warn("<Tabs_content> was created without expected prop 'value'");
			}
		});

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
			if ('value' in $$new_props) $$invalidate(1, value = $$new_props.value);
			if ('$$scope' in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({ TabsPrimitive, cn, className, value });

		$$self.$inject_state = $$new_props => {
			if ('className' in $$props) $$invalidate(0, className = $$new_props.className);
			if ('value' in $$props) $$invalidate(1, value = $$new_props.value);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [className, value, $$restProps, slots, $$scope];
	}

	class Tabs_content extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$p, create_fragment$p, safe_not_equal, { class: 0, value: 1 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Tabs_content",
				options,
				id: create_fragment$p.name
			});
		}

		get class() {
			throw new Error("<Tabs_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Tabs_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get value() {
			throw new Error("<Tabs_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set value(value) {
			throw new Error("<Tabs_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/lib/components/ui/tabs/tabs-list.svelte generated by Svelte v4.2.10 */

	// (7:0) <TabsPrimitive.List  class={cn(   "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",   className  )}  {...$$restProps} >
	function create_default_slot$c(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[2].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[3],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$c.name,
			type: "slot",
			source: "(7:0) <TabsPrimitive.List  class={cn(   \\\"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\\\",   className  )}  {...$$restProps} >",
			ctx
		});

		return block;
	}

	function create_fragment$o(ctx) {
		let tabsprimitive_list;
		let current;

		const tabsprimitive_list_spread_levels = [
			{
				class: cn("inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground", /*className*/ ctx[0])
			},
			/*$$restProps*/ ctx[1]
		];

		let tabsprimitive_list_props = {
			$$slots: { default: [create_default_slot$c] },
			$$scope: { ctx }
		};

		for (let i = 0; i < tabsprimitive_list_spread_levels.length; i += 1) {
			tabsprimitive_list_props = assign(tabsprimitive_list_props, tabsprimitive_list_spread_levels[i]);
		}

		tabsprimitive_list = new Tabs_list$1({
				props: tabsprimitive_list_props,
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(tabsprimitive_list.$$.fragment);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(tabsprimitive_list, target, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const tabsprimitive_list_changes = (dirty & /*className, $$restProps*/ 3)
				? get_spread_update(tabsprimitive_list_spread_levels, [
						dirty & /*className*/ 1 && {
							class: cn("inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground", /*className*/ ctx[0])
						},
						dirty & /*$$restProps*/ 2 && get_spread_object(/*$$restProps*/ ctx[1])
					])
				: {};

				if (dirty & /*$$scope*/ 8) {
					tabsprimitive_list_changes.$$scope = { dirty, ctx };
				}

				tabsprimitive_list.$set(tabsprimitive_list_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(tabsprimitive_list.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(tabsprimitive_list.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(tabsprimitive_list, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$o.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$o($$self, $$props, $$invalidate) {
		const omit_props_names = ["class"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Tabs_list', slots, ['default']);
		let { class: className = undefined } = $$props;

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
			if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({ TabsPrimitive, cn, className });

		$$self.$inject_state = $$new_props => {
			if ('className' in $$props) $$invalidate(0, className = $$new_props.className);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [className, $$restProps, slots, $$scope];
	}

	class Tabs_list extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$o, create_fragment$o, safe_not_equal, { class: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Tabs_list",
				options,
				id: create_fragment$o.name
			});
		}

		get class() {
			throw new Error("<Tabs_list>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Tabs_list>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/lib/components/ui/tabs/tabs-trigger.svelte generated by Svelte v4.2.10 */

	// (8:0) <TabsPrimitive.Trigger   class={cn(     "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:text-foreground data-[state=active]:shadow",     className   )}   {value}   {...$$restProps}   on:click   on:keydown   on:focus >
	function create_default_slot$b(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[3].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[7],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$b.name,
			type: "slot",
			source: "(8:0) <TabsPrimitive.Trigger   class={cn(     \\\"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:text-foreground data-[state=active]:shadow\\\",     className   )}   {value}   {...$$restProps}   on:click   on:keydown   on:focus >",
			ctx
		});

		return block;
	}

	function create_fragment$n(ctx) {
		let tabsprimitive_trigger;
		let current;

		const tabsprimitive_trigger_spread_levels = [
			{
				class: cn("inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:text-foreground data-[state=active]:shadow", /*className*/ ctx[0])
			},
			{ value: /*value*/ ctx[1] },
			/*$$restProps*/ ctx[2]
		];

		let tabsprimitive_trigger_props = {
			$$slots: { default: [create_default_slot$b] },
			$$scope: { ctx }
		};

		for (let i = 0; i < tabsprimitive_trigger_spread_levels.length; i += 1) {
			tabsprimitive_trigger_props = assign(tabsprimitive_trigger_props, tabsprimitive_trigger_spread_levels[i]);
		}

		tabsprimitive_trigger = new Tabs_trigger$1({
				props: tabsprimitive_trigger_props,
				$$inline: true
			});

		tabsprimitive_trigger.$on("click", /*click_handler*/ ctx[4]);
		tabsprimitive_trigger.$on("keydown", /*keydown_handler*/ ctx[5]);
		tabsprimitive_trigger.$on("focus", /*focus_handler*/ ctx[6]);

		const block = {
			c: function create() {
				create_component(tabsprimitive_trigger.$$.fragment);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(tabsprimitive_trigger, target, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const tabsprimitive_trigger_changes = (dirty & /*className, value, $$restProps*/ 7)
				? get_spread_update(tabsprimitive_trigger_spread_levels, [
						dirty & /*className*/ 1 && {
							class: cn("inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:text-foreground data-[state=active]:shadow", /*className*/ ctx[0])
						},
						dirty & /*value*/ 2 && { value: /*value*/ ctx[1] },
						dirty & /*$$restProps*/ 4 && get_spread_object(/*$$restProps*/ ctx[2])
					])
				: {};

				if (dirty & /*$$scope*/ 128) {
					tabsprimitive_trigger_changes.$$scope = { dirty, ctx };
				}

				tabsprimitive_trigger.$set(tabsprimitive_trigger_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(tabsprimitive_trigger.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(tabsprimitive_trigger.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(tabsprimitive_trigger, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$n.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$n($$self, $$props, $$invalidate) {
		const omit_props_names = ["class","value"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Tabs_trigger', slots, ['default']);
		let { class: className = undefined } = $$props;
		let { value } = $$props;

		$$self.$$.on_mount.push(function () {
			if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
				console.warn("<Tabs_trigger> was created without expected prop 'value'");
			}
		});

		function click_handler(event) {
			bubble.call(this, $$self, event);
		}

		function keydown_handler(event) {
			bubble.call(this, $$self, event);
		}

		function focus_handler(event) {
			bubble.call(this, $$self, event);
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
			if ('value' in $$new_props) $$invalidate(1, value = $$new_props.value);
			if ('$$scope' in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({ TabsPrimitive, cn, className, value });

		$$self.$inject_state = $$new_props => {
			if ('className' in $$props) $$invalidate(0, className = $$new_props.className);
			if ('value' in $$props) $$invalidate(1, value = $$new_props.value);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			className,
			value,
			$$restProps,
			slots,
			click_handler,
			keydown_handler,
			focus_handler,
			$$scope
		];
	}

	class Tabs_trigger extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$n, create_fragment$n, safe_not_equal, { class: 0, value: 1 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Tabs_trigger",
				options,
				id: create_fragment$n.name
			});
		}

		get class() {
			throw new Error("<Tabs_trigger>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Tabs_trigger>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get value() {
			throw new Error("<Tabs_trigger>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set value(value) {
			throw new Error("<Tabs_trigger>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	const Root$1 = Tabs$1;

	var Tabs = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Content: Tabs_content,
		List: Tabs_list,
		Root: Root$1,
		Tabs: Root$1,
		TabsContent: Tabs_content,
		TabsList: Tabs_list,
		TabsTrigger: Tabs_trigger,
		Trigger: Tabs_trigger
	});

	const elementStyleUnits = ['px', '%', 'rem', 'vh', 'vw',];
	const getViewportDimensions = () => {
	    const width = window.innerWidth;
	    const height = window.innerHeight;
	    return { width, height };
	};
	const getBaseFontSize = () => {
	    // Get the computed style of the root HTML element
	    const rootStyle = getComputedStyle(document.documentElement);
	    // Extract the font-size property value
	    const baseFontSize = rootStyle.fontSize;
	    // Convert the font size from a string (e.g., "16px") to an integer
	    return parseInt(baseFontSize, 10); // Base 10 for decimal
	};
	const updateValueToUnit = (oldVal, oldUnit, newUnit) => {
	    // Get base font size
	    const { width: viewportWidth, height: viewportHeight } = getViewportDimensions();
	    const baseFontSize = getBaseFontSize();
	    // Convert oldVal from oldUnit to pixels
	    let valueInPx;
	    switch (oldUnit) {
	        case 'rem':
	            valueInPx = oldVal * baseFontSize;
	            break;
	        case 'vw':
	            valueInPx = (oldVal / 100) * viewportWidth;
	            break;
	        case 'vh':
	            valueInPx = (oldVal / 100) * viewportHeight;
	            break;
	        // Assuming 1% of the viewport width for simplicity, adjust as necessary
	        case '%':
	            valueInPx = (oldVal / 100) * viewportWidth;
	            break;
	        case 'px':
	        default:
	            valueInPx = oldVal;
	            break;
	    }
	    // Convert valueInPx to newUnit
	    let newVal;
	    switch (newUnit) {
	        case 'rem':
	            newVal = valueInPx / baseFontSize;
	            break;
	        case 'vw':
	            newVal = (valueInPx / viewportWidth) * 100;
	            break;
	        case 'vh':
	            newVal = (valueInPx / viewportHeight) * 100;
	            break;
	        // Assuming 1% of the viewport width for simplicity, adjust as necessary
	        case '%':
	            newVal = (valueInPx / viewportWidth) * 100;
	            break;
	        case 'px':
	        default:
	            newVal = valueInPx;
	            break;
	    }
	    return newVal;
	};

	var ElementStyleType;
	(function (ElementStyleType) {
	    ElementStyleType["Text"] = "text";
	    ElementStyleType["Number"] = "number";
	    ElementStyleType["Select"] = "select";
	    ElementStyleType["Color"] = "color";
	})(ElementStyleType || (ElementStyleType = {}));
	var ElementStyleGroup;
	(function (ElementStyleGroup) {
	    ElementStyleGroup["Size"] = "Size";
	    ElementStyleGroup["Position"] = "Position";
	    ElementStyleGroup["Style"] = "Style";
	    ElementStyleGroup["Text"] = "Text";
	    ElementStyleGroup["Spacing"] = "Padding & Margin";
	    ElementStyleGroup["Effects"] = "Effects";
	})(ElementStyleGroup || (ElementStyleGroup = {}));
	// Custom order for the groups
	const groupOrder = [
	    ElementStyleGroup.Size,
	    ElementStyleGroup.Position,
	    ElementStyleGroup.Style,
	    ElementStyleGroup.Text,
	    ElementStyleGroup.Spacing,
	    ElementStyleGroup.Effects,
	];
	class ElementStyle {
	    constructor(key, value, displayName, type, group, 
	    // Optional
	    options, units, max) {
	        this.key = key;
	        this.value = value;
	        this.displayName = displayName;
	        this.type = type;
	        this.group = group;
	        this.options = options;
	        this.units = units;
	        this.max = max;
	    }
	}
	// https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units
	// Size: height, width, minHeight, minWidth, maxWidth, maxHeight, rotate, borderRadius
	// Position: position
	// Style: opacity, overflow, backgroundColor
	// Text: fontFamily fontSize fontWeight color letterSpacing lineHeight textAlign 
	// Spacing: marign padding
	// Effect: shadow border
	const elementStyles = [
	    // Size
	    new ElementStyle('width', '', 'W', ElementStyleType.Number, ElementStyleGroup.Size, [], elementStyleUnits, 1000),
	    new ElementStyle('height', '', 'H', ElementStyleType.Number, ElementStyleGroup.Size, [], elementStyleUnits, 1000),
	    new ElementStyle('minWidth', '', 'mW', ElementStyleType.Number, ElementStyleGroup.Size, [], elementStyleUnits, 1000),
	    new ElementStyle('minHeight', '', 'mH', ElementStyleType.Number, ElementStyleGroup.Size, [], elementStyleUnits, 1000),
	    new ElementStyle('maxWidth', '', 'MW', ElementStyleType.Number, ElementStyleGroup.Size, [], elementStyleUnits, 1000),
	    new ElementStyle('maxHeight', '', 'MH', ElementStyleType.Number, ElementStyleGroup.Size, [], elementStyleUnits, 1000),
	    new ElementStyle('rotate', '', 'Rot', ElementStyleType.Number, ElementStyleGroup.Size, [], ['deg', 'rad', 'grad', 'turn'], 1000),
	    new ElementStyle('borderRadius', '', 'Rad', ElementStyleType.Number, ElementStyleGroup.Size, [], elementStyleUnits, 1000),
	    // Position
	    new ElementStyle('position', 'relative', 'Type', ElementStyleType.Select, ElementStyleGroup.Position, ['relative', 'absolute', 'fixed', 'sticky', 'static']),
	    // Style
	    new ElementStyle('opacity', '100', 'Opacity', ElementStyleType.Number, ElementStyleGroup.Style, [], ['%'], 1),
	    new ElementStyle('overflow', 'visible', 'Overflow', ElementStyleType.Select, ElementStyleGroup.Style, ['visible', 'hidden', 'scroll', 'auto']),
	    new ElementStyle('backgroundColor', '', 'Background', ElementStyleType.Color, ElementStyleGroup.Style),
	    // Text
	    new ElementStyle('fontFamily', 'sans-serif', 'Font', ElementStyleType.Select, ElementStyleGroup.Text, [
	        'inherit',
	        'system-ui',
	        'serif',
	        'sans-serif',
	        'monospace',
	        'cursive',
	        'fantasy',
	        'emoji',
	        'math',
	        'fangsong'
	    ]),
	    new ElementStyle('fontSize', '16px', 'Font Size', ElementStyleType.Number, ElementStyleGroup.Text, [], elementStyleUnits, 100),
	    new ElementStyle('fontWeight', 'normal', 'Weight', ElementStyleType.Select, ElementStyleGroup.Text, [
	        'lighter',
	        'normal',
	        'bold',
	        'bolder',
	        '100',
	        '200',
	        '300',
	        '400',
	        '500',
	        '600',
	        '700',
	        '800',
	        '900'
	    ]),
	    new ElementStyle('color', '#000000', 'Color', ElementStyleType.Color, ElementStyleGroup.Text),
	    new ElementStyle('letterSpacing', '0px', 'Letter', ElementStyleType.Number, ElementStyleGroup.Text, [], elementStyleUnits, 100),
	    new ElementStyle('lineHeight', '100%', 'Line Height', ElementStyleType.Number, ElementStyleGroup.Text, [], elementStyleUnits, 100),
	    new ElementStyle('textAlign', 'start', 'Text Alignment', ElementStyleType.Select, ElementStyleGroup.Text, ['start', 'center', 'end',]),
	    // Spacing
	    new ElementStyle('marginTop', '', 'Margin Top', ElementStyleType.Number, ElementStyleGroup.Spacing, [], elementStyleUnits, 1000),
	    new ElementStyle('marginRight', '', 'Margin Right', ElementStyleType.Number, ElementStyleGroup.Spacing, [], elementStyleUnits, 1000),
	    new ElementStyle('marginBottom', '', 'Margin Bottom', ElementStyleType.Number, ElementStyleGroup.Spacing, [], elementStyleUnits, 1000),
	    new ElementStyle('marginLeft', '', 'Margin Left', ElementStyleType.Number, ElementStyleGroup.Spacing, [], elementStyleUnits, 1000),
	    new ElementStyle('paddingTop', '', 'Padding Top', ElementStyleType.Number, ElementStyleGroup.Spacing, [], elementStyleUnits, 1000),
	    new ElementStyle('paddingRight', '', 'Padding Right', ElementStyleType.Number, ElementStyleGroup.Spacing, [], elementStyleUnits, 1000),
	    new ElementStyle('paddingBottom', '', 'Padding Bottom', ElementStyleType.Number, ElementStyleGroup.Spacing, [], elementStyleUnits, 1000),
	    new ElementStyle('paddingLeft', '', 'Padding Left', ElementStyleType.Number, ElementStyleGroup.Spacing, [], elementStyleUnits, 1000),
	    // Effects
	    // TODO: Add effects
	];
	function sortGroupsByCustomOrder(groups) {
	    const sortedGroups = {};
	    // Iterate through the groupOrder array to ensure custom order
	    groupOrder.forEach(group => {
	        if (groups[group]) { // Check if the group exists in the input groups
	            sortedGroups[group] = groups[group];
	        }
	    });
	    return sortedGroups;
	}
	function groupElementStylesByGroup(elementStyles) {
	    return elementStyles.reduce((groups, style) => {
	        // Initialize the group if it doesn't exist
	        if (!groups[style.group]) {
	            groups[style.group] = [];
	        }
	        // Add the current style to the correct group
	        groups[style.group].push(style);
	        return sortGroupsByCustomOrder(groups);
	    }, {});
	}
	function getElementComputedStylesData(target) {
	    // Retrieve all computed styles for the clicked element
	    const computedStyles = getComputedStyle(target);
	    // TODO: Could get styles based on tag types
	    elementStyles.forEach((style) => {
	        const inlineStyle = target.style[style.key];
	        const computedStyle = computedStyles[style.key];
	        if (style.type === ElementStyleType.Number) {
	            style.value = (inlineStyle && inlineStyle !== '') ? inlineStyle : computedStyle;
	        }
	        else if (style.type === ElementStyleType.Color) {
	            style.value = computedStyle;
	        }
	        else {
	            style.value = inlineStyle && inlineStyle !== '' ? inlineStyle : computedStyle;
	        }
	    });
	    return elementStyles;
	}

	const STYLE_CHANGE = "STYLE_CHANGE";
	const OPEN_PROJECT = "OPEN_PROJECT";
	const elementSelectorCache = new WeakMap(); // Cache for element selectors
	function debounce(func, wait) {
	    const timeouts = {};
	    return function (...args) {
	        const context = this;
	        const element = args[0];
	        // Use cached selector if available, otherwise compute and cache it
	        if (!elementSelectorCache.has(element)) {
	            elementSelectorCache.set(element, getUniqueSelector(element));
	        }
	        const elementSelector = elementSelectorCache.get(element);
	        if (!timeouts[elementSelector]) {
	            func.apply(context, args); // Execute immediately
	        }
	        else {
	            clearTimeout(timeouts[elementSelector]);
	        }
	        const later = () => {
	            delete timeouts[elementSelector];
	            func.apply(context, args);
	        };
	        clearTimeout(timeouts[elementSelector]);
	        timeouts[elementSelector] = setTimeout(later, wait);
	    };
	}
	function postMessage(el, styleType, newValue, oldValue) {
	    const selector = elementSelectorCache.get(el) || getUniqueSelector(el);
	    const event = {
	        type: STYLE_CHANGE,
	        detail: {
	            selector: selector,
	            styleType: styleType,
	            newVal: newValue,
	            oldVal: oldValue,
	            path: el.dataset.onlookId,
	        },
	    };
	    addToHistory(event);
	    window.postMessage(event, window.location.origin);
	}
	let debouncedPostMessage = debounce(postMessage, 1000);
	function emitStyleChangeEvent(el, styleType, newValue, oldValue) {
	    debouncedPostMessage(el, styleType, newValue, oldValue);
	}
	function emitOpenProjectMessage() {
	    window.postMessage({ type: OPEN_PROJECT }, window.location.origin);
	}

	/**
	 * Slides an element in and out.
	 *
	 * https://svelte.dev/docs/svelte-transition#slide
	 * @param {Element} node
	 * @param {import('./public').SlideParams} [params]
	 * @returns {import('./public').TransitionConfig}
	 */
	function slide(node, { delay = 0, duration = 400, easing = cubicOut, axis = 'y' } = {}) {
		const style = getComputedStyle(node);
		const opacity = +style.opacity;
		const primary_property = axis === 'y' ? 'height' : 'width';
		const primary_property_value = parseFloat(style[primary_property]);
		const secondary_properties = axis === 'y' ? ['top', 'bottom'] : ['left', 'right'];
		const capitalized_secondary_properties = secondary_properties.map(
			(e) => `${e[0].toUpperCase()}${e.slice(1)}`
		);
		const padding_start_value = parseFloat(style[`padding${capitalized_secondary_properties[0]}`]);
		const padding_end_value = parseFloat(style[`padding${capitalized_secondary_properties[1]}`]);
		const margin_start_value = parseFloat(style[`margin${capitalized_secondary_properties[0]}`]);
		const margin_end_value = parseFloat(style[`margin${capitalized_secondary_properties[1]}`]);
		const border_width_start_value = parseFloat(
			style[`border${capitalized_secondary_properties[0]}Width`]
		);
		const border_width_end_value = parseFloat(
			style[`border${capitalized_secondary_properties[1]}Width`]
		);
		return {
			delay,
			duration,
			easing,
			css: (t) =>
				'overflow: hidden;' +
				`opacity: ${Math.min(t * 20, 1) * opacity};` +
				`${primary_property}: ${t * primary_property_value}px;` +
				`padding-${secondary_properties[0]}: ${t * padding_start_value}px;` +
				`padding-${secondary_properties[1]}: ${t * padding_end_value}px;` +
				`margin-${secondary_properties[0]}: ${t * margin_start_value}px;` +
				`margin-${secondary_properties[1]}: ${t * margin_end_value}px;` +
				`border-${secondary_properties[0]}-width: ${t * border_width_start_value}px;` +
				`border-${secondary_properties[1]}-width: ${t * border_width_end_value}px;`
		};
	}

	/* src/lib/components/ui/accordion/accordion-content.svelte generated by Svelte v4.2.10 */
	const file$f = "src/lib/components/ui/accordion/accordion-content.svelte";

	// (12:0) <AccordionPrimitive.Content  class={cn("overflow-hidden text-sm", className)}  {transition}  {transitionConfig}  {...$$restProps} >
	function create_default_slot$a(ctx) {
		let div;
		let current;
		const default_slot_template = /*#slots*/ ctx[4].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

		const block = {
			c: function create() {
				div = element("div");
				if (default_slot) default_slot.c();
				attr_dev(div, "class", "pb-4 pt-0");
				add_location(div, file$f, 22, 1, 440);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);

				if (default_slot) {
					default_slot.m(div, null);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[5],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$a.name,
			type: "slot",
			source: "(12:0) <AccordionPrimitive.Content  class={cn(\\\"overflow-hidden text-sm\\\", className)}  {transition}  {transitionConfig}  {...$$restProps} >",
			ctx
		});

		return block;
	}

	function create_fragment$m(ctx) {
		let accordionprimitive_content;
		let current;

		const accordionprimitive_content_spread_levels = [
			{
				class: cn("overflow-hidden text-sm", /*className*/ ctx[0])
			},
			{ transition: /*transition*/ ctx[1] },
			{
				transitionConfig: /*transitionConfig*/ ctx[2]
			},
			/*$$restProps*/ ctx[3]
		];

		let accordionprimitive_content_props = {
			$$slots: { default: [create_default_slot$a] },
			$$scope: { ctx }
		};

		for (let i = 0; i < accordionprimitive_content_spread_levels.length; i += 1) {
			accordionprimitive_content_props = assign(accordionprimitive_content_props, accordionprimitive_content_spread_levels[i]);
		}

		accordionprimitive_content = new Accordion_content$1({
				props: accordionprimitive_content_props,
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(accordionprimitive_content.$$.fragment);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(accordionprimitive_content, target, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const accordionprimitive_content_changes = (dirty & /*className, transition, transitionConfig, $$restProps*/ 15)
				? get_spread_update(accordionprimitive_content_spread_levels, [
						dirty & /*className*/ 1 && {
							class: cn("overflow-hidden text-sm", /*className*/ ctx[0])
						},
						dirty & /*transition*/ 2 && { transition: /*transition*/ ctx[1] },
						dirty & /*transitionConfig*/ 4 && {
							transitionConfig: /*transitionConfig*/ ctx[2]
						},
						dirty & /*$$restProps*/ 8 && get_spread_object(/*$$restProps*/ ctx[3])
					])
				: {};

				if (dirty & /*$$scope*/ 32) {
					accordionprimitive_content_changes.$$scope = { dirty, ctx };
				}

				accordionprimitive_content.$set(accordionprimitive_content_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(accordionprimitive_content.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(accordionprimitive_content.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(accordionprimitive_content, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$m.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$m($$self, $$props, $$invalidate) {
		const omit_props_names = ["class","transition","transitionConfig"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Accordion_content', slots, ['default']);
		let { class: className = undefined } = $$props;
		let { transition = slide } = $$props;
		let { transitionConfig = { duration: 200 } } = $$props;

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
			if ('transition' in $$new_props) $$invalidate(1, transition = $$new_props.transition);
			if ('transitionConfig' in $$new_props) $$invalidate(2, transitionConfig = $$new_props.transitionConfig);
			if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			AccordionPrimitive,
			cn,
			slide,
			className,
			transition,
			transitionConfig
		});

		$$self.$inject_state = $$new_props => {
			if ('className' in $$props) $$invalidate(0, className = $$new_props.className);
			if ('transition' in $$props) $$invalidate(1, transition = $$new_props.transition);
			if ('transitionConfig' in $$props) $$invalidate(2, transitionConfig = $$new_props.transitionConfig);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [className, transition, transitionConfig, $$restProps, slots, $$scope];
	}

	class Accordion_content extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$m, create_fragment$m, safe_not_equal, {
				class: 0,
				transition: 1,
				transitionConfig: 2
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Accordion_content",
				options,
				id: create_fragment$m.name
			});
		}

		get class() {
			throw new Error("<Accordion_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Accordion_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get transition() {
			throw new Error("<Accordion_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set transition(value) {
			throw new Error("<Accordion_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get transitionConfig() {
			throw new Error("<Accordion_content>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set transitionConfig(value) {
			throw new Error("<Accordion_content>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/lib/components/ui/accordion/accordion-item.svelte generated by Svelte v4.2.10 */

	// (8:0) <AccordionPrimitive.Item {value} class={cn("border-b", className)} {...$$restProps}>
	function create_default_slot$9(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[3].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[4],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$9.name,
			type: "slot",
			source: "(8:0) <AccordionPrimitive.Item {value} class={cn(\\\"border-b\\\", className)} {...$$restProps}>",
			ctx
		});

		return block;
	}

	function create_fragment$l(ctx) {
		let accordionprimitive_item;
		let current;

		const accordionprimitive_item_spread_levels = [
			{ value: /*value*/ ctx[1] },
			{
				class: cn("border-b", /*className*/ ctx[0])
			},
			/*$$restProps*/ ctx[2]
		];

		let accordionprimitive_item_props = {
			$$slots: { default: [create_default_slot$9] },
			$$scope: { ctx }
		};

		for (let i = 0; i < accordionprimitive_item_spread_levels.length; i += 1) {
			accordionprimitive_item_props = assign(accordionprimitive_item_props, accordionprimitive_item_spread_levels[i]);
		}

		accordionprimitive_item = new Accordion_item$1({
				props: accordionprimitive_item_props,
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(accordionprimitive_item.$$.fragment);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(accordionprimitive_item, target, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const accordionprimitive_item_changes = (dirty & /*value, className, $$restProps*/ 7)
				? get_spread_update(accordionprimitive_item_spread_levels, [
						dirty & /*value*/ 2 && { value: /*value*/ ctx[1] },
						dirty & /*className*/ 1 && {
							class: cn("border-b", /*className*/ ctx[0])
						},
						dirty & /*$$restProps*/ 4 && get_spread_object(/*$$restProps*/ ctx[2])
					])
				: {};

				if (dirty & /*$$scope*/ 16) {
					accordionprimitive_item_changes.$$scope = { dirty, ctx };
				}

				accordionprimitive_item.$set(accordionprimitive_item_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(accordionprimitive_item.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(accordionprimitive_item.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(accordionprimitive_item, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$l.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$l($$self, $$props, $$invalidate) {
		const omit_props_names = ["class","value"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Accordion_item', slots, ['default']);
		let { class: className = undefined } = $$props;
		let { value } = $$props;

		$$self.$$.on_mount.push(function () {
			if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
				console.warn("<Accordion_item> was created without expected prop 'value'");
			}
		});

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
			if ('value' in $$new_props) $$invalidate(1, value = $$new_props.value);
			if ('$$scope' in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({ AccordionPrimitive, cn, className, value });

		$$self.$inject_state = $$new_props => {
			if ('className' in $$props) $$invalidate(0, className = $$new_props.className);
			if ('value' in $$props) $$invalidate(1, value = $$new_props.value);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [className, value, $$restProps, slots, $$scope];
	}

	class Accordion_item extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$l, create_fragment$l, safe_not_equal, { class: 0, value: 1 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Accordion_item",
				options,
				id: create_fragment$l.name
			});
		}

		get class() {
			throw new Error("<Accordion_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Accordion_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get value() {
			throw new Error("<Accordion_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set value(value) {
			throw new Error("<Accordion_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/lib/components/ui/accordion/accordion-trigger.svelte generated by Svelte v4.2.10 */

	// (10:2) <AccordionPrimitive.Trigger     class={cn(       "flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",       className     )}     {...$$restProps}     on:click   >
	function create_default_slot_1$5(ctx) {
		let t;
		let chevrondown;
		let current;
		const default_slot_template = /*#slots*/ ctx[3].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

		chevrondown = new ChevronDown$1({
				props: {
					class: "h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200"
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
				t = space();
				create_component(chevrondown.$$.fragment);
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				insert_dev(target, t, anchor);
				mount_component(chevrondown, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[5],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				transition_in(chevrondown.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				transition_out(chevrondown.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}

				if (default_slot) default_slot.d(detaching);
				destroy_component(chevrondown, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_1$5.name,
			type: "slot",
			source: "(10:2) <AccordionPrimitive.Trigger     class={cn(       \\\"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\\\",       className     )}     {...$$restProps}     on:click   >",
			ctx
		});

		return block;
	}

	// (9:0) <AccordionPrimitive.Header {level} class="flex">
	function create_default_slot$8(ctx) {
		let accordionprimitive_trigger;
		let current;

		const accordionprimitive_trigger_spread_levels = [
			{
				class: cn("flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180", /*className*/ ctx[0])
			},
			/*$$restProps*/ ctx[2]
		];

		let accordionprimitive_trigger_props = {
			$$slots: { default: [create_default_slot_1$5] },
			$$scope: { ctx }
		};

		for (let i = 0; i < accordionprimitive_trigger_spread_levels.length; i += 1) {
			accordionprimitive_trigger_props = assign(accordionprimitive_trigger_props, accordionprimitive_trigger_spread_levels[i]);
		}

		accordionprimitive_trigger = new Accordion_trigger$1({
				props: accordionprimitive_trigger_props,
				$$inline: true
			});

		accordionprimitive_trigger.$on("click", /*click_handler*/ ctx[4]);

		const block = {
			c: function create() {
				create_component(accordionprimitive_trigger.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(accordionprimitive_trigger, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const accordionprimitive_trigger_changes = (dirty & /*className, $$restProps*/ 5)
				? get_spread_update(accordionprimitive_trigger_spread_levels, [
						dirty & /*className*/ 1 && {
							class: cn("flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180", /*className*/ ctx[0])
						},
						dirty & /*$$restProps*/ 4 && get_spread_object(/*$$restProps*/ ctx[2])
					])
				: {};

				if (dirty & /*$$scope*/ 32) {
					accordionprimitive_trigger_changes.$$scope = { dirty, ctx };
				}

				accordionprimitive_trigger.$set(accordionprimitive_trigger_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(accordionprimitive_trigger.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(accordionprimitive_trigger.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(accordionprimitive_trigger, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$8.name,
			type: "slot",
			source: "(9:0) <AccordionPrimitive.Header {level} class=\\\"flex\\\">",
			ctx
		});

		return block;
	}

	function create_fragment$k(ctx) {
		let accordionprimitive_header;
		let current;

		accordionprimitive_header = new Accordion_header({
				props: {
					level: /*level*/ ctx[1],
					class: "flex",
					$$slots: { default: [create_default_slot$8] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(accordionprimitive_header.$$.fragment);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(accordionprimitive_header, target, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const accordionprimitive_header_changes = {};
				if (dirty & /*level*/ 2) accordionprimitive_header_changes.level = /*level*/ ctx[1];

				if (dirty & /*$$scope, className, $$restProps*/ 37) {
					accordionprimitive_header_changes.$$scope = { dirty, ctx };
				}

				accordionprimitive_header.$set(accordionprimitive_header_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(accordionprimitive_header.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(accordionprimitive_header.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(accordionprimitive_header, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$k.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$k($$self, $$props, $$invalidate) {
		const omit_props_names = ["class","level"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Accordion_trigger', slots, ['default']);
		let { class: className = undefined } = $$props;
		let { level = 3 } = $$props;

		function click_handler(event) {
			bubble.call(this, $$self, event);
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
			if ('level' in $$new_props) $$invalidate(1, level = $$new_props.level);
			if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			AccordionPrimitive,
			ChevronDown: ChevronDown$1,
			cn,
			className,
			level
		});

		$$self.$inject_state = $$new_props => {
			if ('className' in $$props) $$invalidate(0, className = $$new_props.className);
			if ('level' in $$props) $$invalidate(1, level = $$new_props.level);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [className, level, $$restProps, slots, click_handler, $$scope];
	}

	class Accordion_trigger extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$k, create_fragment$k, safe_not_equal, { class: 0, level: 1 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Accordion_trigger",
				options,
				id: create_fragment$k.name
			});
		}

		get class() {
			throw new Error("<Accordion_trigger>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Accordion_trigger>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get level() {
			throw new Error("<Accordion_trigger>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set level(value) {
			throw new Error("<Accordion_trigger>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	const Root = Accordion$1;

	var Accordion = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Accordion: Root,
		AccordionContent: Accordion_content,
		AccordionItem: Accordion_item,
		AccordionTrigger: Accordion_trigger,
		Content: Accordion_content,
		Item: Accordion_item,
		Root: Root,
		Trigger: Accordion_trigger
	});

	/* src/lib/components/ui/input/input.svelte generated by Svelte v4.2.10 */
	const file$e = "src/lib/components/ui/input/input.svelte";

	function create_fragment$j(ctx) {
		let input;
		let input_class_value;
		let mounted;
		let dispose;

		let input_levels = [
			{
				class: input_class_value = cn("flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50", /*className*/ ctx[1])
			},
			/*$$restProps*/ ctx[2]
		];

		let input_data = {};

		for (let i = 0; i < input_levels.length; i += 1) {
			input_data = assign(input_data, input_levels[i]);
		}

		const block = {
			c: function create() {
				input = element("input");
				set_attributes(input, input_data);
				add_location(input, file$e, 13, 0, 150);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, input, anchor);
				if (input.autofocus) input.focus();
				set_input_value(input, /*value*/ ctx[0]);

				if (!mounted) {
					dispose = [
						listen_dev(input, "input", /*input_input_handler*/ ctx[17]),
						listen_dev(input, "blur", /*blur_handler*/ ctx[3], false, false, false, false),
						listen_dev(input, "change", /*change_handler*/ ctx[4], false, false, false, false),
						listen_dev(input, "click", /*click_handler*/ ctx[5], false, false, false, false),
						listen_dev(input, "focus", /*focus_handler*/ ctx[6], false, false, false, false),
						listen_dev(input, "focusin", /*focusin_handler*/ ctx[7], false, false, false, false),
						listen_dev(input, "focusout", /*focusout_handler*/ ctx[8], false, false, false, false),
						listen_dev(input, "keydown", /*keydown_handler*/ ctx[9], false, false, false, false),
						listen_dev(input, "keypress", /*keypress_handler*/ ctx[10], false, false, false, false),
						listen_dev(input, "keyup", /*keyup_handler*/ ctx[11], false, false, false, false),
						listen_dev(input, "mouseover", /*mouseover_handler*/ ctx[12], false, false, false, false),
						listen_dev(input, "mouseenter", /*mouseenter_handler*/ ctx[13], false, false, false, false),
						listen_dev(input, "mouseleave", /*mouseleave_handler*/ ctx[14], false, false, false, false),
						listen_dev(input, "paste", /*paste_handler*/ ctx[15], false, false, false, false),
						listen_dev(input, "input", /*input_handler*/ ctx[16], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, [dirty]) {
				set_attributes(input, input_data = get_spread_update(input_levels, [
					dirty & /*className*/ 2 && input_class_value !== (input_class_value = cn("flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50", /*className*/ ctx[1])) && { class: input_class_value },
					dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
				]));

				if (dirty & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
					set_input_value(input, /*value*/ ctx[0]);
				}
			},
			i: noop$3,
			o: noop$3,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(input);
				}

				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$j.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$j($$self, $$props, $$invalidate) {
		const omit_props_names = ["class","value"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Input', slots, []);
		let { class: className = undefined } = $$props;
		let { value = undefined } = $$props;

		function blur_handler(event) {
			bubble.call(this, $$self, event);
		}

		function change_handler(event) {
			bubble.call(this, $$self, event);
		}

		function click_handler(event) {
			bubble.call(this, $$self, event);
		}

		function focus_handler(event) {
			bubble.call(this, $$self, event);
		}

		function focusin_handler(event) {
			bubble.call(this, $$self, event);
		}

		function focusout_handler(event) {
			bubble.call(this, $$self, event);
		}

		function keydown_handler(event) {
			bubble.call(this, $$self, event);
		}

		function keypress_handler(event) {
			bubble.call(this, $$self, event);
		}

		function keyup_handler(event) {
			bubble.call(this, $$self, event);
		}

		function mouseover_handler(event) {
			bubble.call(this, $$self, event);
		}

		function mouseenter_handler(event) {
			bubble.call(this, $$self, event);
		}

		function mouseleave_handler(event) {
			bubble.call(this, $$self, event);
		}

		function paste_handler(event) {
			bubble.call(this, $$self, event);
		}

		function input_handler(event) {
			bubble.call(this, $$self, event);
		}

		function input_input_handler() {
			value = this.value;
			$$invalidate(0, value);
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
		};

		$$self.$capture_state = () => ({ cn, className, value });

		$$self.$inject_state = $$new_props => {
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('value' in $$props) $$invalidate(0, value = $$new_props.value);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			value,
			className,
			$$restProps,
			blur_handler,
			change_handler,
			click_handler,
			focus_handler,
			focusin_handler,
			focusout_handler,
			keydown_handler,
			keypress_handler,
			keyup_handler,
			mouseover_handler,
			mouseenter_handler,
			mouseleave_handler,
			paste_handler,
			input_handler,
			input_input_handler
		];
	}

	class Input extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$j, create_fragment$j, safe_not_equal, { class: 1, value: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Input",
				options,
				id: create_fragment$j.name
			});
		}

		get class() {
			throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get value() {
			throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set value(value) {
			throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/lib/components/ui/separator/separator.svelte generated by Svelte v4.2.10 */

	function create_fragment$i(ctx) {
		let separatorprimitive_root;
		let current;

		const separatorprimitive_root_spread_levels = [
			{
				class: cn(
					"shrink-0 bg-border",
					/*orientation*/ ctx[1] === "horizontal"
					? "h-[1px] w-full"
					: "h-full w-[1px]",
					/*className*/ ctx[0]
				)
			},
			{ orientation: /*orientation*/ ctx[1] },
			{ decorative: /*decorative*/ ctx[2] },
			/*$$restProps*/ ctx[3]
		];

		let separatorprimitive_root_props = {};

		for (let i = 0; i < separatorprimitive_root_spread_levels.length; i += 1) {
			separatorprimitive_root_props = assign(separatorprimitive_root_props, separatorprimitive_root_spread_levels[i]);
		}

		separatorprimitive_root = new Separator$1({
				props: separatorprimitive_root_props,
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(separatorprimitive_root.$$.fragment);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(separatorprimitive_root, target, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const separatorprimitive_root_changes = (dirty & /*orientation, className, decorative, $$restProps*/ 15)
				? get_spread_update(separatorprimitive_root_spread_levels, [
						dirty & /*orientation, className*/ 3 && {
							class: cn(
								"shrink-0 bg-border",
								/*orientation*/ ctx[1] === "horizontal"
								? "h-[1px] w-full"
								: "h-full w-[1px]",
								/*className*/ ctx[0]
							)
						},
						dirty & /*orientation*/ 2 && { orientation: /*orientation*/ ctx[1] },
						dirty & /*decorative*/ 4 && { decorative: /*decorative*/ ctx[2] },
						dirty & /*$$restProps*/ 8 && get_spread_object(/*$$restProps*/ ctx[3])
					])
				: {};

				separatorprimitive_root.$set(separatorprimitive_root_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(separatorprimitive_root.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(separatorprimitive_root.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(separatorprimitive_root, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$i.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$i($$self, $$props, $$invalidate) {
		const omit_props_names = ["class","orientation","decorative"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Separator', slots, []);
		let { class: className = undefined } = $$props;
		let { orientation = "horizontal" } = $$props;
		let { decorative = undefined } = $$props;

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
			if ('orientation' in $$new_props) $$invalidate(1, orientation = $$new_props.orientation);
			if ('decorative' in $$new_props) $$invalidate(2, decorative = $$new_props.decorative);
		};

		$$self.$capture_state = () => ({
			SeparatorPrimitive,
			cn,
			className,
			orientation,
			decorative
		});

		$$self.$inject_state = $$new_props => {
			if ('className' in $$props) $$invalidate(0, className = $$new_props.className);
			if ('orientation' in $$props) $$invalidate(1, orientation = $$new_props.orientation);
			if ('decorative' in $$props) $$invalidate(2, decorative = $$new_props.decorative);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [className, orientation, decorative, $$restProps];
	}

	class Separator extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$i, create_fragment$i, safe_not_equal, { class: 0, orientation: 1, decorative: 2 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Separator",
				options,
				id: create_fragment$i.name
			});
		}

		get class() {
			throw new Error("<Separator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Separator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get orientation() {
			throw new Error("<Separator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set orientation(value) {
			throw new Error("<Separator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get decorative() {
			throw new Error("<Separator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set decorative(value) {
			throw new Error("<Separator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/lib/components/ui/toggle-group/toggle-group.svelte generated by Svelte v4.2.10 */
	const get_default_slot_changes = dirty => ({ builder: dirty & /*builder*/ 256 });
	const get_default_slot_context = ctx => ({ builder: /*builder*/ ctx[8] });

	// (15:0) <ToggleGroupPrimitive.Root  class={cn("flex items-center justify-center gap-1", className)}  bind:value  {...$$restProps}  let:builder >
	function create_default_slot$7(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[5].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], get_default_slot_context);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope, builder*/ 384)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[7],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, get_default_slot_changes),
							get_default_slot_context
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$7.name,
			type: "slot",
			source: "(15:0) <ToggleGroupPrimitive.Root  class={cn(\\\"flex items-center justify-center gap-1\\\", className)}  bind:value  {...$$restProps}  let:builder >",
			ctx
		});

		return block;
	}

	function create_fragment$h(ctx) {
		let togglegroupprimitive_root;
		let updating_value;
		let current;

		const togglegroupprimitive_root_spread_levels = [
			{
				class: cn("flex items-center justify-center gap-1", /*className*/ ctx[1])
			},
			/*$$restProps*/ ctx[2]
		];

		function togglegroupprimitive_root_value_binding(value) {
			/*togglegroupprimitive_root_value_binding*/ ctx[6](value);
		}

		let togglegroupprimitive_root_props = {
			$$slots: {
				default: [
					create_default_slot$7,
					({ builder }) => ({ 8: builder }),
					({ builder }) => builder ? 256 : 0
				]
			},
			$$scope: { ctx }
		};

		for (let i = 0; i < togglegroupprimitive_root_spread_levels.length; i += 1) {
			togglegroupprimitive_root_props = assign(togglegroupprimitive_root_props, togglegroupprimitive_root_spread_levels[i]);
		}

		if (/*value*/ ctx[0] !== void 0) {
			togglegroupprimitive_root_props.value = /*value*/ ctx[0];
		}

		togglegroupprimitive_root = new Toggle_group$1({
				props: togglegroupprimitive_root_props,
				$$inline: true
			});

		binding_callbacks.push(() => bind(togglegroupprimitive_root, 'value', togglegroupprimitive_root_value_binding));

		const block = {
			c: function create() {
				create_component(togglegroupprimitive_root.$$.fragment);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(togglegroupprimitive_root, target, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const togglegroupprimitive_root_changes = (dirty & /*className, $$restProps*/ 6)
				? get_spread_update(togglegroupprimitive_root_spread_levels, [
						dirty & /*className*/ 2 && {
							class: cn("flex items-center justify-center gap-1", /*className*/ ctx[1])
						},
						dirty & /*$$restProps*/ 4 && get_spread_object(/*$$restProps*/ ctx[2])
					])
				: {};

				if (dirty & /*$$scope, builder*/ 384) {
					togglegroupprimitive_root_changes.$$scope = { dirty, ctx };
				}

				if (!updating_value && dirty & /*value*/ 1) {
					updating_value = true;
					togglegroupprimitive_root_changes.value = /*value*/ ctx[0];
					add_flush_callback(() => updating_value = false);
				}

				togglegroupprimitive_root.$set(togglegroupprimitive_root_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(togglegroupprimitive_root.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(togglegroupprimitive_root.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(togglegroupprimitive_root, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$h.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$h($$self, $$props, $$invalidate) {
		const omit_props_names = ["class","variant","size","value"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Toggle_group', slots, ['default']);
		let { class: className = undefined } = $$props;
		let { variant = "default" } = $$props;
		let { size = "default" } = $$props;
		let { value = undefined } = $$props;
		setToggleGroupCtx({ variant, size });

		function togglegroupprimitive_root_value_binding(value$1) {
			value = value$1;
			$$invalidate(0, value);
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
			if ('variant' in $$new_props) $$invalidate(3, variant = $$new_props.variant);
			if ('size' in $$new_props) $$invalidate(4, size = $$new_props.size);
			if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
			if ('$$scope' in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			ToggleGroupPrimitive,
			setToggleGroupCtx,
			cn,
			className,
			variant,
			size,
			value
		});

		$$self.$inject_state = $$new_props => {
			if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
			if ('variant' in $$props) $$invalidate(3, variant = $$new_props.variant);
			if ('size' in $$props) $$invalidate(4, size = $$new_props.size);
			if ('value' in $$props) $$invalidate(0, value = $$new_props.value);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			value,
			className,
			$$restProps,
			variant,
			size,
			slots,
			togglegroupprimitive_root_value_binding,
			$$scope
		];
	}

	class Toggle_group extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$h, create_fragment$h, safe_not_equal, { class: 1, variant: 3, size: 4, value: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Toggle_group",
				options,
				id: create_fragment$h.name
			});
		}

		get class() {
			throw new Error("<Toggle_group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Toggle_group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get variant() {
			throw new Error("<Toggle_group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set variant(value) {
			throw new Error("<Toggle_group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get size() {
			throw new Error("<Toggle_group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set size(value) {
			throw new Error("<Toggle_group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get value() {
			throw new Error("<Toggle_group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set value(value) {
			throw new Error("<Toggle_group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	var l=e=>typeof e=="boolean"?`${e}`:e===0?"0":e,u=e=>!e||typeof e!="object"||Object.keys(e).length===0,x=(e,o)=>JSON.stringify(e)===JSON.stringify(o);function i(e,o){e.forEach(function(r){Array.isArray(r)?i(r,o):o.push(r);});}function y(e){let o=[];return i(e,o),o}var a$1=(...e)=>y(e).filter(Boolean),p$1=(e,o)=>{let r={},c=Object.keys(e),f=Object.keys(o);for(let t of c)if(f.includes(t)){let s=e[t],n=o[t];typeof s=="object"&&typeof n=="object"?r[t]=p$1(s,n):Array.isArray(s)||Array.isArray(n)?r[t]=a$1(n,s):r[t]=n+" "+s;}else r[t]=e[t];for(let t of f)c.includes(t)||(r[t]=o[t]);return r},g$1=e=>!e||typeof e!="string"?e:e.replace(/\s+/g," ").trim();

	/**
	 * The code in this file is copied from https://github.com/lukeed/clsx and modified to suit the needs of tailwind-merge better.
	 *
	 * Specifically:
	 * - Runtime code from https://github.com/lukeed/clsx/blob/v1.2.1/src/index.js
	 * - TypeScript types from https://github.com/lukeed/clsx/blob/v1.2.1/clsx.d.ts
	 *
	 * Original code has MIT license: Copyright (c) Luke Edwards <luke.edwards05@gmail.com> (lukeed.com)
	 */
	function twJoin() {
	  var index = 0;
	  var argument;
	  var resolvedValue;
	  var string = '';
	  while (index < arguments.length) {
	    if (argument = arguments[index++]) {
	      if (resolvedValue = toValue(argument)) {
	        string && (string += ' ');
	        string += resolvedValue;
	      }
	    }
	  }
	  return string;
	}
	function toValue(mix) {
	  if (typeof mix === 'string') {
	    return mix;
	  }
	  var resolvedValue;
	  var string = '';
	  for (var k = 0; k < mix.length; k++) {
	    if (mix[k]) {
	      if (resolvedValue = toValue(mix[k])) {
	        string && (string += ' ');
	        string += resolvedValue;
	      }
	    }
	  }
	  return string;
	}

	var CLASS_PART_SEPARATOR = '-';
	function createClassUtils(config) {
	  var classMap = createClassMap(config);
	  var conflictingClassGroups = config.conflictingClassGroups,
	    _config$conflictingCl = config.conflictingClassGroupModifiers,
	    conflictingClassGroupModifiers = _config$conflictingCl === void 0 ? {} : _config$conflictingCl;
	  function getClassGroupId(className) {
	    var classParts = className.split(CLASS_PART_SEPARATOR);
	    // Classes like `-inset-1` produce an empty string as first classPart. We assume that classes for negative values are used correctly and remove it from classParts.
	    if (classParts[0] === '' && classParts.length !== 1) {
	      classParts.shift();
	    }
	    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);
	  }
	  function getConflictingClassGroupIds(classGroupId, hasPostfixModifier) {
	    var conflicts = conflictingClassGroups[classGroupId] || [];
	    if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
	      return [].concat(conflicts, conflictingClassGroupModifiers[classGroupId]);
	    }
	    return conflicts;
	  }
	  return {
	    getClassGroupId: getClassGroupId,
	    getConflictingClassGroupIds: getConflictingClassGroupIds
	  };
	}
	function getGroupRecursive(classParts, classPartObject) {
	  if (classParts.length === 0) {
	    return classPartObject.classGroupId;
	  }
	  var currentClassPart = classParts[0];
	  var nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
	  var classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : undefined;
	  if (classGroupFromNextClassPart) {
	    return classGroupFromNextClassPart;
	  }
	  if (classPartObject.validators.length === 0) {
	    return undefined;
	  }
	  var classRest = classParts.join(CLASS_PART_SEPARATOR);
	  return classPartObject.validators.find(function (_ref) {
	    var validator = _ref.validator;
	    return validator(classRest);
	  })?.classGroupId;
	}
	var arbitraryPropertyRegex = /^\[(.+)\]$/;
	function getGroupIdForArbitraryProperty(className) {
	  if (arbitraryPropertyRegex.test(className)) {
	    var arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];
	    var property = arbitraryPropertyClassName?.substring(0, arbitraryPropertyClassName.indexOf(':'));
	    if (property) {
	      // I use two dots here because one dot is used as prefix for class groups in plugins
	      return 'arbitrary..' + property;
	    }
	  }
	}
	/**
	 * Exported for testing only
	 */
	function createClassMap(config) {
	  var theme = config.theme,
	    prefix = config.prefix;
	  var classMap = {
	    nextPart: new Map(),
	    validators: []
	  };
	  var prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);
	  prefixedClassGroupEntries.forEach(function (_ref2) {
	    var classGroupId = _ref2[0],
	      classGroup = _ref2[1];
	    processClassesRecursively(classGroup, classMap, classGroupId, theme);
	  });
	  return classMap;
	}
	function processClassesRecursively(classGroup, classPartObject, classGroupId, theme) {
	  classGroup.forEach(function (classDefinition) {
	    if (typeof classDefinition === 'string') {
	      var classPartObjectToEdit = classDefinition === '' ? classPartObject : getPart(classPartObject, classDefinition);
	      classPartObjectToEdit.classGroupId = classGroupId;
	      return;
	    }
	    if (typeof classDefinition === 'function') {
	      if (isThemeGetter(classDefinition)) {
	        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);
	        return;
	      }
	      classPartObject.validators.push({
	        validator: classDefinition,
	        classGroupId: classGroupId
	      });
	      return;
	    }
	    Object.entries(classDefinition).forEach(function (_ref3) {
	      var key = _ref3[0],
	        classGroup = _ref3[1];
	      processClassesRecursively(classGroup, getPart(classPartObject, key), classGroupId, theme);
	    });
	  });
	}
	function getPart(classPartObject, path) {
	  var currentClassPartObject = classPartObject;
	  path.split(CLASS_PART_SEPARATOR).forEach(function (pathPart) {
	    if (!currentClassPartObject.nextPart.has(pathPart)) {
	      currentClassPartObject.nextPart.set(pathPart, {
	        nextPart: new Map(),
	        validators: []
	      });
	    }
	    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
	  });
	  return currentClassPartObject;
	}
	function isThemeGetter(func) {
	  return func.isThemeGetter;
	}
	function getPrefixedClassGroupEntries(classGroupEntries, prefix) {
	  if (!prefix) {
	    return classGroupEntries;
	  }
	  return classGroupEntries.map(function (_ref4) {
	    var classGroupId = _ref4[0],
	      classGroup = _ref4[1];
	    var prefixedClassGroup = classGroup.map(function (classDefinition) {
	      if (typeof classDefinition === 'string') {
	        return prefix + classDefinition;
	      }
	      if (typeof classDefinition === 'object') {
	        return Object.fromEntries(Object.entries(classDefinition).map(function (_ref5) {
	          var key = _ref5[0],
	            value = _ref5[1];
	          return [prefix + key, value];
	        }));
	      }
	      return classDefinition;
	    });
	    return [classGroupId, prefixedClassGroup];
	  });
	}

	// LRU cache inspired from hashlru (https://github.com/dominictarr/hashlru/blob/v1.0.4/index.js) but object replaced with Map to improve performance
	function createLruCache(maxCacheSize) {
	  if (maxCacheSize < 1) {
	    return {
	      get: function get() {
	        return undefined;
	      },
	      set: function set() {}
	    };
	  }
	  var cacheSize = 0;
	  var cache = new Map();
	  var previousCache = new Map();
	  function update(key, value) {
	    cache.set(key, value);
	    cacheSize++;
	    if (cacheSize > maxCacheSize) {
	      cacheSize = 0;
	      previousCache = cache;
	      cache = new Map();
	    }
	  }
	  return {
	    get: function get(key) {
	      var value = cache.get(key);
	      if (value !== undefined) {
	        return value;
	      }
	      if ((value = previousCache.get(key)) !== undefined) {
	        update(key, value);
	        return value;
	      }
	    },
	    set: function set(key, value) {
	      if (cache.has(key)) {
	        cache.set(key, value);
	      } else {
	        update(key, value);
	      }
	    }
	  };
	}

	var IMPORTANT_MODIFIER = '!';
	function createSplitModifiers(config) {
	  var separator = config.separator || ':';
	  var isSeparatorSingleCharacter = separator.length === 1;
	  var firstSeparatorCharacter = separator[0];
	  var separatorLength = separator.length;
	  // splitModifiers inspired by https://github.com/tailwindlabs/tailwindcss/blob/v3.2.2/src/util/splitAtTopLevelOnly.js
	  return function splitModifiers(className) {
	    var modifiers = [];
	    var bracketDepth = 0;
	    var modifierStart = 0;
	    var postfixModifierPosition;
	    for (var index = 0; index < className.length; index++) {
	      var currentCharacter = className[index];
	      if (bracketDepth === 0) {
	        if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index, index + separatorLength) === separator)) {
	          modifiers.push(className.slice(modifierStart, index));
	          modifierStart = index + separatorLength;
	          continue;
	        }
	        if (currentCharacter === '/') {
	          postfixModifierPosition = index;
	          continue;
	        }
	      }
	      if (currentCharacter === '[') {
	        bracketDepth++;
	      } else if (currentCharacter === ']') {
	        bracketDepth--;
	      }
	    }
	    var baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);
	    var hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);
	    var baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;
	    var maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : undefined;
	    return {
	      modifiers: modifiers,
	      hasImportantModifier: hasImportantModifier,
	      baseClassName: baseClassName,
	      maybePostfixModifierPosition: maybePostfixModifierPosition
	    };
	  };
	}
	/**
	 * Sorts modifiers according to following schema:
	 * - Predefined modifiers are sorted alphabetically
	 * - When an arbitrary variant appears, it must be preserved which modifiers are before and after it
	 */
	function sortModifiers(modifiers) {
	  if (modifiers.length <= 1) {
	    return modifiers;
	  }
	  var sortedModifiers = [];
	  var unsortedModifiers = [];
	  modifiers.forEach(function (modifier) {
	    var isArbitraryVariant = modifier[0] === '[';
	    if (isArbitraryVariant) {
	      sortedModifiers.push.apply(sortedModifiers, unsortedModifiers.sort().concat([modifier]));
	      unsortedModifiers = [];
	    } else {
	      unsortedModifiers.push(modifier);
	    }
	  });
	  sortedModifiers.push.apply(sortedModifiers, unsortedModifiers.sort());
	  return sortedModifiers;
	}

	function createConfigUtils(config) {
	  return {
	    cache: createLruCache(config.cacheSize),
	    splitModifiers: createSplitModifiers(config),
	    ...createClassUtils(config)
	  };
	}

	var SPLIT_CLASSES_REGEX = /\s+/;
	function mergeClassList(classList, configUtils) {
	  var splitModifiers = configUtils.splitModifiers,
	    getClassGroupId = configUtils.getClassGroupId,
	    getConflictingClassGroupIds = configUtils.getConflictingClassGroupIds;
	  /**
	   * Set of classGroupIds in following format:
	   * `{importantModifier}{variantModifiers}{classGroupId}`
	   * @example 'float'
	   * @example 'hover:focus:bg-color'
	   * @example 'md:!pr'
	   */
	  var classGroupsInConflict = new Set();
	  return classList.trim().split(SPLIT_CLASSES_REGEX).map(function (originalClassName) {
	    var _splitModifiers = splitModifiers(originalClassName),
	      modifiers = _splitModifiers.modifiers,
	      hasImportantModifier = _splitModifiers.hasImportantModifier,
	      baseClassName = _splitModifiers.baseClassName,
	      maybePostfixModifierPosition = _splitModifiers.maybePostfixModifierPosition;
	    var classGroupId = getClassGroupId(maybePostfixModifierPosition ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
	    var hasPostfixModifier = Boolean(maybePostfixModifierPosition);
	    if (!classGroupId) {
	      if (!maybePostfixModifierPosition) {
	        return {
	          isTailwindClass: false,
	          originalClassName: originalClassName
	        };
	      }
	      classGroupId = getClassGroupId(baseClassName);
	      if (!classGroupId) {
	        return {
	          isTailwindClass: false,
	          originalClassName: originalClassName
	        };
	      }
	      hasPostfixModifier = false;
	    }
	    var variantModifier = sortModifiers(modifiers).join(':');
	    var modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;
	    return {
	      isTailwindClass: true,
	      modifierId: modifierId,
	      classGroupId: classGroupId,
	      originalClassName: originalClassName,
	      hasPostfixModifier: hasPostfixModifier
	    };
	  }).reverse()
	  // Last class in conflict wins, so we need to filter conflicting classes in reverse order.
	  .filter(function (parsed) {
	    if (!parsed.isTailwindClass) {
	      return true;
	    }
	    var modifierId = parsed.modifierId,
	      classGroupId = parsed.classGroupId,
	      hasPostfixModifier = parsed.hasPostfixModifier;
	    var classId = modifierId + classGroupId;
	    if (classGroupsInConflict.has(classId)) {
	      return false;
	    }
	    classGroupsInConflict.add(classId);
	    getConflictingClassGroupIds(classGroupId, hasPostfixModifier).forEach(function (group) {
	      return classGroupsInConflict.add(modifierId + group);
	    });
	    return true;
	  }).reverse().map(function (parsed) {
	    return parsed.originalClassName;
	  }).join(' ');
	}

	function createTailwindMerge() {
	  for (var _len = arguments.length, createConfig = new Array(_len), _key = 0; _key < _len; _key++) {
	    createConfig[_key] = arguments[_key];
	  }
	  var configUtils;
	  var cacheGet;
	  var cacheSet;
	  var functionToCall = initTailwindMerge;
	  function initTailwindMerge(classList) {
	    var firstCreateConfig = createConfig[0],
	      restCreateConfig = createConfig.slice(1);
	    var config = restCreateConfig.reduce(function (previousConfig, createConfigCurrent) {
	      return createConfigCurrent(previousConfig);
	    }, firstCreateConfig());
	    configUtils = createConfigUtils(config);
	    cacheGet = configUtils.cache.get;
	    cacheSet = configUtils.cache.set;
	    functionToCall = tailwindMerge;
	    return tailwindMerge(classList);
	  }
	  function tailwindMerge(classList) {
	    var cachedResult = cacheGet(classList);
	    if (cachedResult) {
	      return cachedResult;
	    }
	    var result = mergeClassList(classList, configUtils);
	    cacheSet(classList, result);
	    return result;
	  }
	  return function callTailwindMerge() {
	    return functionToCall(twJoin.apply(null, arguments));
	  };
	}

	function fromTheme$1(key) {
	  var themeGetter = function themeGetter(theme) {
	    return theme[key] || [];
	  };
	  themeGetter.isThemeGetter = true;
	  return themeGetter;
	}

	var arbitraryValueRegex = /^\[(?:([a-z-]+):)?(.+)\]$/i;
	var fractionRegex = /^\d+\/\d+$/;
	var stringLengths = /*#__PURE__*/new Set(['px', 'full', 'screen']);
	var tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
	var lengthUnitRegex = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
	// Shadow always begins with x and y offset separated by underscore
	var shadowRegex = /^-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
	function isLength(value) {
	  return isNumber(value) || stringLengths.has(value) || fractionRegex.test(value) || isArbitraryLength(value);
	}
	function isArbitraryLength(value) {
	  return getIsArbitraryValue(value, 'length', isLengthOnly);
	}
	function isArbitrarySize(value) {
	  return getIsArbitraryValue(value, 'size', isNever);
	}
	function isArbitraryPosition(value) {
	  return getIsArbitraryValue(value, 'position', isNever);
	}
	function isArbitraryUrl(value) {
	  return getIsArbitraryValue(value, 'url', isUrl);
	}
	function isArbitraryNumber(value) {
	  return getIsArbitraryValue(value, 'number', isNumber);
	}
	function isNumber(value) {
	  return !Number.isNaN(Number(value));
	}
	function isPercent(value) {
	  return value.endsWith('%') && isNumber(value.slice(0, -1));
	}
	function isInteger(value) {
	  return isIntegerOnly(value) || getIsArbitraryValue(value, 'number', isIntegerOnly);
	}
	function isArbitraryValue(value) {
	  return arbitraryValueRegex.test(value);
	}
	function isAny() {
	  return true;
	}
	function isTshirtSize(value) {
	  return tshirtUnitRegex.test(value);
	}
	function isArbitraryShadow(value) {
	  return getIsArbitraryValue(value, '', isShadow);
	}
	function getIsArbitraryValue(value, label, testValue) {
	  var result = arbitraryValueRegex.exec(value);
	  if (result) {
	    if (result[1]) {
	      return result[1] === label;
	    }
	    return testValue(result[2]);
	  }
	  return false;
	}
	function isLengthOnly(value) {
	  return lengthUnitRegex.test(value);
	}
	function isNever() {
	  return false;
	}
	function isUrl(value) {
	  return value.startsWith('url(');
	}
	function isIntegerOnly(value) {
	  return Number.isInteger(Number(value));
	}
	function isShadow(value) {
	  return shadowRegex.test(value);
	}

	function getDefaultConfig() {
	  var colors = fromTheme$1('colors');
	  var spacing = fromTheme$1('spacing');
	  var blur = fromTheme$1('blur');
	  var brightness = fromTheme$1('brightness');
	  var borderColor = fromTheme$1('borderColor');
	  var borderRadius = fromTheme$1('borderRadius');
	  var borderSpacing = fromTheme$1('borderSpacing');
	  var borderWidth = fromTheme$1('borderWidth');
	  var contrast = fromTheme$1('contrast');
	  var grayscale = fromTheme$1('grayscale');
	  var hueRotate = fromTheme$1('hueRotate');
	  var invert = fromTheme$1('invert');
	  var gap = fromTheme$1('gap');
	  var gradientColorStops = fromTheme$1('gradientColorStops');
	  var gradientColorStopPositions = fromTheme$1('gradientColorStopPositions');
	  var inset = fromTheme$1('inset');
	  var margin = fromTheme$1('margin');
	  var opacity = fromTheme$1('opacity');
	  var padding = fromTheme$1('padding');
	  var saturate = fromTheme$1('saturate');
	  var scale = fromTheme$1('scale');
	  var sepia = fromTheme$1('sepia');
	  var skew = fromTheme$1('skew');
	  var space = fromTheme$1('space');
	  var translate = fromTheme$1('translate');
	  var getOverscroll = function getOverscroll() {
	    return ['auto', 'contain', 'none'];
	  };
	  var getOverflow = function getOverflow() {
	    return ['auto', 'hidden', 'clip', 'visible', 'scroll'];
	  };
	  var getSpacingWithAutoAndArbitrary = function getSpacingWithAutoAndArbitrary() {
	    return ['auto', isArbitraryValue, spacing];
	  };
	  var getSpacingWithArbitrary = function getSpacingWithArbitrary() {
	    return [isArbitraryValue, spacing];
	  };
	  var getLengthWithEmpty = function getLengthWithEmpty() {
	    return ['', isLength];
	  };
	  var getNumberWithAutoAndArbitrary = function getNumberWithAutoAndArbitrary() {
	    return ['auto', isNumber, isArbitraryValue];
	  };
	  var getPositions = function getPositions() {
	    return ['bottom', 'center', 'left', 'left-bottom', 'left-top', 'right', 'right-bottom', 'right-top', 'top'];
	  };
	  var getLineStyles = function getLineStyles() {
	    return ['solid', 'dashed', 'dotted', 'double', 'none'];
	  };
	  var getBlendModes = function getBlendModes() {
	    return ['normal', 'multiply', 'screen', 'overlay', 'darken', 'lighten', 'color-dodge', 'color-burn', 'hard-light', 'soft-light', 'difference', 'exclusion', 'hue', 'saturation', 'color', 'luminosity', 'plus-lighter'];
	  };
	  var getAlign = function getAlign() {
	    return ['start', 'end', 'center', 'between', 'around', 'evenly', 'stretch'];
	  };
	  var getZeroAndEmpty = function getZeroAndEmpty() {
	    return ['', '0', isArbitraryValue];
	  };
	  var getBreaks = function getBreaks() {
	    return ['auto', 'avoid', 'all', 'avoid-page', 'page', 'left', 'right', 'column'];
	  };
	  var getNumber = function getNumber() {
	    return [isNumber, isArbitraryNumber];
	  };
	  var getNumberAndArbitrary = function getNumberAndArbitrary() {
	    return [isNumber, isArbitraryValue];
	  };
	  return {
	    cacheSize: 500,
	    theme: {
	      colors: [isAny],
	      spacing: [isLength],
	      blur: ['none', '', isTshirtSize, isArbitraryValue],
	      brightness: getNumber(),
	      borderColor: [colors],
	      borderRadius: ['none', '', 'full', isTshirtSize, isArbitraryValue],
	      borderSpacing: getSpacingWithArbitrary(),
	      borderWidth: getLengthWithEmpty(),
	      contrast: getNumber(),
	      grayscale: getZeroAndEmpty(),
	      hueRotate: getNumberAndArbitrary(),
	      invert: getZeroAndEmpty(),
	      gap: getSpacingWithArbitrary(),
	      gradientColorStops: [colors],
	      gradientColorStopPositions: [isPercent, isArbitraryLength],
	      inset: getSpacingWithAutoAndArbitrary(),
	      margin: getSpacingWithAutoAndArbitrary(),
	      opacity: getNumber(),
	      padding: getSpacingWithArbitrary(),
	      saturate: getNumber(),
	      scale: getNumber(),
	      sepia: getZeroAndEmpty(),
	      skew: getNumberAndArbitrary(),
	      space: getSpacingWithArbitrary(),
	      translate: getSpacingWithArbitrary()
	    },
	    classGroups: {
	      // Layout
	      /**
	       * Aspect Ratio
	       * @see https://tailwindcss.com/docs/aspect-ratio
	       */
	      aspect: [{
	        aspect: ['auto', 'square', 'video', isArbitraryValue]
	      }],
	      /**
	       * Container
	       * @see https://tailwindcss.com/docs/container
	       */
	      container: ['container'],
	      /**
	       * Columns
	       * @see https://tailwindcss.com/docs/columns
	       */
	      columns: [{
	        columns: [isTshirtSize]
	      }],
	      /**
	       * Break After
	       * @see https://tailwindcss.com/docs/break-after
	       */
	      'break-after': [{
	        'break-after': getBreaks()
	      }],
	      /**
	       * Break Before
	       * @see https://tailwindcss.com/docs/break-before
	       */
	      'break-before': [{
	        'break-before': getBreaks()
	      }],
	      /**
	       * Break Inside
	       * @see https://tailwindcss.com/docs/break-inside
	       */
	      'break-inside': [{
	        'break-inside': ['auto', 'avoid', 'avoid-page', 'avoid-column']
	      }],
	      /**
	       * Box Decoration Break
	       * @see https://tailwindcss.com/docs/box-decoration-break
	       */
	      'box-decoration': [{
	        'box-decoration': ['slice', 'clone']
	      }],
	      /**
	       * Box Sizing
	       * @see https://tailwindcss.com/docs/box-sizing
	       */
	      box: [{
	        box: ['border', 'content']
	      }],
	      /**
	       * Display
	       * @see https://tailwindcss.com/docs/display
	       */
	      display: ['block', 'inline-block', 'inline', 'flex', 'inline-flex', 'table', 'inline-table', 'table-caption', 'table-cell', 'table-column', 'table-column-group', 'table-footer-group', 'table-header-group', 'table-row-group', 'table-row', 'flow-root', 'grid', 'inline-grid', 'contents', 'list-item', 'hidden'],
	      /**
	       * Floats
	       * @see https://tailwindcss.com/docs/float
	       */
	      "float": [{
	        "float": ['right', 'left', 'none']
	      }],
	      /**
	       * Clear
	       * @see https://tailwindcss.com/docs/clear
	       */
	      clear: [{
	        clear: ['left', 'right', 'both', 'none']
	      }],
	      /**
	       * Isolation
	       * @see https://tailwindcss.com/docs/isolation
	       */
	      isolation: ['isolate', 'isolation-auto'],
	      /**
	       * Object Fit
	       * @see https://tailwindcss.com/docs/object-fit
	       */
	      'object-fit': [{
	        object: ['contain', 'cover', 'fill', 'none', 'scale-down']
	      }],
	      /**
	       * Object Position
	       * @see https://tailwindcss.com/docs/object-position
	       */
	      'object-position': [{
	        object: [].concat(getPositions(), [isArbitraryValue])
	      }],
	      /**
	       * Overflow
	       * @see https://tailwindcss.com/docs/overflow
	       */
	      overflow: [{
	        overflow: getOverflow()
	      }],
	      /**
	       * Overflow X
	       * @see https://tailwindcss.com/docs/overflow
	       */
	      'overflow-x': [{
	        'overflow-x': getOverflow()
	      }],
	      /**
	       * Overflow Y
	       * @see https://tailwindcss.com/docs/overflow
	       */
	      'overflow-y': [{
	        'overflow-y': getOverflow()
	      }],
	      /**
	       * Overscroll Behavior
	       * @see https://tailwindcss.com/docs/overscroll-behavior
	       */
	      overscroll: [{
	        overscroll: getOverscroll()
	      }],
	      /**
	       * Overscroll Behavior X
	       * @see https://tailwindcss.com/docs/overscroll-behavior
	       */
	      'overscroll-x': [{
	        'overscroll-x': getOverscroll()
	      }],
	      /**
	       * Overscroll Behavior Y
	       * @see https://tailwindcss.com/docs/overscroll-behavior
	       */
	      'overscroll-y': [{
	        'overscroll-y': getOverscroll()
	      }],
	      /**
	       * Position
	       * @see https://tailwindcss.com/docs/position
	       */
	      position: ['static', 'fixed', 'absolute', 'relative', 'sticky'],
	      /**
	       * Top / Right / Bottom / Left
	       * @see https://tailwindcss.com/docs/top-right-bottom-left
	       */
	      inset: [{
	        inset: [inset]
	      }],
	      /**
	       * Right / Left
	       * @see https://tailwindcss.com/docs/top-right-bottom-left
	       */
	      'inset-x': [{
	        'inset-x': [inset]
	      }],
	      /**
	       * Top / Bottom
	       * @see https://tailwindcss.com/docs/top-right-bottom-left
	       */
	      'inset-y': [{
	        'inset-y': [inset]
	      }],
	      /**
	       * Start
	       * @see https://tailwindcss.com/docs/top-right-bottom-left
	       */
	      start: [{
	        start: [inset]
	      }],
	      /**
	       * End
	       * @see https://tailwindcss.com/docs/top-right-bottom-left
	       */
	      end: [{
	        end: [inset]
	      }],
	      /**
	       * Top
	       * @see https://tailwindcss.com/docs/top-right-bottom-left
	       */
	      top: [{
	        top: [inset]
	      }],
	      /**
	       * Right
	       * @see https://tailwindcss.com/docs/top-right-bottom-left
	       */
	      right: [{
	        right: [inset]
	      }],
	      /**
	       * Bottom
	       * @see https://tailwindcss.com/docs/top-right-bottom-left
	       */
	      bottom: [{
	        bottom: [inset]
	      }],
	      /**
	       * Left
	       * @see https://tailwindcss.com/docs/top-right-bottom-left
	       */
	      left: [{
	        left: [inset]
	      }],
	      /**
	       * Visibility
	       * @see https://tailwindcss.com/docs/visibility
	       */
	      visibility: ['visible', 'invisible', 'collapse'],
	      /**
	       * Z-Index
	       * @see https://tailwindcss.com/docs/z-index
	       */
	      z: [{
	        z: ['auto', isInteger]
	      }],
	      // Flexbox and Grid
	      /**
	       * Flex Basis
	       * @see https://tailwindcss.com/docs/flex-basis
	       */
	      basis: [{
	        basis: getSpacingWithAutoAndArbitrary()
	      }],
	      /**
	       * Flex Direction
	       * @see https://tailwindcss.com/docs/flex-direction
	       */
	      'flex-direction': [{
	        flex: ['row', 'row-reverse', 'col', 'col-reverse']
	      }],
	      /**
	       * Flex Wrap
	       * @see https://tailwindcss.com/docs/flex-wrap
	       */
	      'flex-wrap': [{
	        flex: ['wrap', 'wrap-reverse', 'nowrap']
	      }],
	      /**
	       * Flex
	       * @see https://tailwindcss.com/docs/flex
	       */
	      flex: [{
	        flex: ['1', 'auto', 'initial', 'none', isArbitraryValue]
	      }],
	      /**
	       * Flex Grow
	       * @see https://tailwindcss.com/docs/flex-grow
	       */
	      grow: [{
	        grow: getZeroAndEmpty()
	      }],
	      /**
	       * Flex Shrink
	       * @see https://tailwindcss.com/docs/flex-shrink
	       */
	      shrink: [{
	        shrink: getZeroAndEmpty()
	      }],
	      /**
	       * Order
	       * @see https://tailwindcss.com/docs/order
	       */
	      order: [{
	        order: ['first', 'last', 'none', isInteger]
	      }],
	      /**
	       * Grid Template Columns
	       * @see https://tailwindcss.com/docs/grid-template-columns
	       */
	      'grid-cols': [{
	        'grid-cols': [isAny]
	      }],
	      /**
	       * Grid Column Start / End
	       * @see https://tailwindcss.com/docs/grid-column
	       */
	      'col-start-end': [{
	        col: ['auto', {
	          span: ['full', isInteger]
	        }, isArbitraryValue]
	      }],
	      /**
	       * Grid Column Start
	       * @see https://tailwindcss.com/docs/grid-column
	       */
	      'col-start': [{
	        'col-start': getNumberWithAutoAndArbitrary()
	      }],
	      /**
	       * Grid Column End
	       * @see https://tailwindcss.com/docs/grid-column
	       */
	      'col-end': [{
	        'col-end': getNumberWithAutoAndArbitrary()
	      }],
	      /**
	       * Grid Template Rows
	       * @see https://tailwindcss.com/docs/grid-template-rows
	       */
	      'grid-rows': [{
	        'grid-rows': [isAny]
	      }],
	      /**
	       * Grid Row Start / End
	       * @see https://tailwindcss.com/docs/grid-row
	       */
	      'row-start-end': [{
	        row: ['auto', {
	          span: [isInteger]
	        }, isArbitraryValue]
	      }],
	      /**
	       * Grid Row Start
	       * @see https://tailwindcss.com/docs/grid-row
	       */
	      'row-start': [{
	        'row-start': getNumberWithAutoAndArbitrary()
	      }],
	      /**
	       * Grid Row End
	       * @see https://tailwindcss.com/docs/grid-row
	       */
	      'row-end': [{
	        'row-end': getNumberWithAutoAndArbitrary()
	      }],
	      /**
	       * Grid Auto Flow
	       * @see https://tailwindcss.com/docs/grid-auto-flow
	       */
	      'grid-flow': [{
	        'grid-flow': ['row', 'col', 'dense', 'row-dense', 'col-dense']
	      }],
	      /**
	       * Grid Auto Columns
	       * @see https://tailwindcss.com/docs/grid-auto-columns
	       */
	      'auto-cols': [{
	        'auto-cols': ['auto', 'min', 'max', 'fr', isArbitraryValue]
	      }],
	      /**
	       * Grid Auto Rows
	       * @see https://tailwindcss.com/docs/grid-auto-rows
	       */
	      'auto-rows': [{
	        'auto-rows': ['auto', 'min', 'max', 'fr', isArbitraryValue]
	      }],
	      /**
	       * Gap
	       * @see https://tailwindcss.com/docs/gap
	       */
	      gap: [{
	        gap: [gap]
	      }],
	      /**
	       * Gap X
	       * @see https://tailwindcss.com/docs/gap
	       */
	      'gap-x': [{
	        'gap-x': [gap]
	      }],
	      /**
	       * Gap Y
	       * @see https://tailwindcss.com/docs/gap
	       */
	      'gap-y': [{
	        'gap-y': [gap]
	      }],
	      /**
	       * Justify Content
	       * @see https://tailwindcss.com/docs/justify-content
	       */
	      'justify-content': [{
	        justify: ['normal'].concat(getAlign())
	      }],
	      /**
	       * Justify Items
	       * @see https://tailwindcss.com/docs/justify-items
	       */
	      'justify-items': [{
	        'justify-items': ['start', 'end', 'center', 'stretch']
	      }],
	      /**
	       * Justify Self
	       * @see https://tailwindcss.com/docs/justify-self
	       */
	      'justify-self': [{
	        'justify-self': ['auto', 'start', 'end', 'center', 'stretch']
	      }],
	      /**
	       * Align Content
	       * @see https://tailwindcss.com/docs/align-content
	       */
	      'align-content': [{
	        content: ['normal'].concat(getAlign(), ['baseline'])
	      }],
	      /**
	       * Align Items
	       * @see https://tailwindcss.com/docs/align-items
	       */
	      'align-items': [{
	        items: ['start', 'end', 'center', 'baseline', 'stretch']
	      }],
	      /**
	       * Align Self
	       * @see https://tailwindcss.com/docs/align-self
	       */
	      'align-self': [{
	        self: ['auto', 'start', 'end', 'center', 'stretch', 'baseline']
	      }],
	      /**
	       * Place Content
	       * @see https://tailwindcss.com/docs/place-content
	       */
	      'place-content': [{
	        'place-content': [].concat(getAlign(), ['baseline'])
	      }],
	      /**
	       * Place Items
	       * @see https://tailwindcss.com/docs/place-items
	       */
	      'place-items': [{
	        'place-items': ['start', 'end', 'center', 'baseline', 'stretch']
	      }],
	      /**
	       * Place Self
	       * @see https://tailwindcss.com/docs/place-self
	       */
	      'place-self': [{
	        'place-self': ['auto', 'start', 'end', 'center', 'stretch']
	      }],
	      // Spacing
	      /**
	       * Padding
	       * @see https://tailwindcss.com/docs/padding
	       */
	      p: [{
	        p: [padding]
	      }],
	      /**
	       * Padding X
	       * @see https://tailwindcss.com/docs/padding
	       */
	      px: [{
	        px: [padding]
	      }],
	      /**
	       * Padding Y
	       * @see https://tailwindcss.com/docs/padding
	       */
	      py: [{
	        py: [padding]
	      }],
	      /**
	       * Padding Start
	       * @see https://tailwindcss.com/docs/padding
	       */
	      ps: [{
	        ps: [padding]
	      }],
	      /**
	       * Padding End
	       * @see https://tailwindcss.com/docs/padding
	       */
	      pe: [{
	        pe: [padding]
	      }],
	      /**
	       * Padding Top
	       * @see https://tailwindcss.com/docs/padding
	       */
	      pt: [{
	        pt: [padding]
	      }],
	      /**
	       * Padding Right
	       * @see https://tailwindcss.com/docs/padding
	       */
	      pr: [{
	        pr: [padding]
	      }],
	      /**
	       * Padding Bottom
	       * @see https://tailwindcss.com/docs/padding
	       */
	      pb: [{
	        pb: [padding]
	      }],
	      /**
	       * Padding Left
	       * @see https://tailwindcss.com/docs/padding
	       */
	      pl: [{
	        pl: [padding]
	      }],
	      /**
	       * Margin
	       * @see https://tailwindcss.com/docs/margin
	       */
	      m: [{
	        m: [margin]
	      }],
	      /**
	       * Margin X
	       * @see https://tailwindcss.com/docs/margin
	       */
	      mx: [{
	        mx: [margin]
	      }],
	      /**
	       * Margin Y
	       * @see https://tailwindcss.com/docs/margin
	       */
	      my: [{
	        my: [margin]
	      }],
	      /**
	       * Margin Start
	       * @see https://tailwindcss.com/docs/margin
	       */
	      ms: [{
	        ms: [margin]
	      }],
	      /**
	       * Margin End
	       * @see https://tailwindcss.com/docs/margin
	       */
	      me: [{
	        me: [margin]
	      }],
	      /**
	       * Margin Top
	       * @see https://tailwindcss.com/docs/margin
	       */
	      mt: [{
	        mt: [margin]
	      }],
	      /**
	       * Margin Right
	       * @see https://tailwindcss.com/docs/margin
	       */
	      mr: [{
	        mr: [margin]
	      }],
	      /**
	       * Margin Bottom
	       * @see https://tailwindcss.com/docs/margin
	       */
	      mb: [{
	        mb: [margin]
	      }],
	      /**
	       * Margin Left
	       * @see https://tailwindcss.com/docs/margin
	       */
	      ml: [{
	        ml: [margin]
	      }],
	      /**
	       * Space Between X
	       * @see https://tailwindcss.com/docs/space
	       */
	      'space-x': [{
	        'space-x': [space]
	      }],
	      /**
	       * Space Between X Reverse
	       * @see https://tailwindcss.com/docs/space
	       */
	      'space-x-reverse': ['space-x-reverse'],
	      /**
	       * Space Between Y
	       * @see https://tailwindcss.com/docs/space
	       */
	      'space-y': [{
	        'space-y': [space]
	      }],
	      /**
	       * Space Between Y Reverse
	       * @see https://tailwindcss.com/docs/space
	       */
	      'space-y-reverse': ['space-y-reverse'],
	      // Sizing
	      /**
	       * Width
	       * @see https://tailwindcss.com/docs/width
	       */
	      w: [{
	        w: ['auto', 'min', 'max', 'fit', isArbitraryValue, spacing]
	      }],
	      /**
	       * Min-Width
	       * @see https://tailwindcss.com/docs/min-width
	       */
	      'min-w': [{
	        'min-w': ['min', 'max', 'fit', isArbitraryValue, isLength]
	      }],
	      /**
	       * Max-Width
	       * @see https://tailwindcss.com/docs/max-width
	       */
	      'max-w': [{
	        'max-w': ['0', 'none', 'full', 'min', 'max', 'fit', 'prose', {
	          screen: [isTshirtSize]
	        }, isTshirtSize, isArbitraryValue]
	      }],
	      /**
	       * Height
	       * @see https://tailwindcss.com/docs/height
	       */
	      h: [{
	        h: [isArbitraryValue, spacing, 'auto', 'min', 'max', 'fit']
	      }],
	      /**
	       * Min-Height
	       * @see https://tailwindcss.com/docs/min-height
	       */
	      'min-h': [{
	        'min-h': ['min', 'max', 'fit', isArbitraryValue, isLength]
	      }],
	      /**
	       * Max-Height
	       * @see https://tailwindcss.com/docs/max-height
	       */
	      'max-h': [{
	        'max-h': [isArbitraryValue, spacing, 'min', 'max', 'fit']
	      }],
	      // Typography
	      /**
	       * Font Size
	       * @see https://tailwindcss.com/docs/font-size
	       */
	      'font-size': [{
	        text: ['base', isTshirtSize, isArbitraryLength]
	      }],
	      /**
	       * Font Smoothing
	       * @see https://tailwindcss.com/docs/font-smoothing
	       */
	      'font-smoothing': ['antialiased', 'subpixel-antialiased'],
	      /**
	       * Font Style
	       * @see https://tailwindcss.com/docs/font-style
	       */
	      'font-style': ['italic', 'not-italic'],
	      /**
	       * Font Weight
	       * @see https://tailwindcss.com/docs/font-weight
	       */
	      'font-weight': [{
	        font: ['thin', 'extralight', 'light', 'normal', 'medium', 'semibold', 'bold', 'extrabold', 'black', isArbitraryNumber]
	      }],
	      /**
	       * Font Family
	       * @see https://tailwindcss.com/docs/font-family
	       */
	      'font-family': [{
	        font: [isAny]
	      }],
	      /**
	       * Font Variant Numeric
	       * @see https://tailwindcss.com/docs/font-variant-numeric
	       */
	      'fvn-normal': ['normal-nums'],
	      /**
	       * Font Variant Numeric
	       * @see https://tailwindcss.com/docs/font-variant-numeric
	       */
	      'fvn-ordinal': ['ordinal'],
	      /**
	       * Font Variant Numeric
	       * @see https://tailwindcss.com/docs/font-variant-numeric
	       */
	      'fvn-slashed-zero': ['slashed-zero'],
	      /**
	       * Font Variant Numeric
	       * @see https://tailwindcss.com/docs/font-variant-numeric
	       */
	      'fvn-figure': ['lining-nums', 'oldstyle-nums'],
	      /**
	       * Font Variant Numeric
	       * @see https://tailwindcss.com/docs/font-variant-numeric
	       */
	      'fvn-spacing': ['proportional-nums', 'tabular-nums'],
	      /**
	       * Font Variant Numeric
	       * @see https://tailwindcss.com/docs/font-variant-numeric
	       */
	      'fvn-fraction': ['diagonal-fractions', 'stacked-fractons'],
	      /**
	       * Letter Spacing
	       * @see https://tailwindcss.com/docs/letter-spacing
	       */
	      tracking: [{
	        tracking: ['tighter', 'tight', 'normal', 'wide', 'wider', 'widest', isArbitraryValue]
	      }],
	      /**
	       * Line Clamp
	       * @see https://tailwindcss.com/docs/line-clamp
	       */
	      'line-clamp': [{
	        'line-clamp': ['none', isNumber, isArbitraryNumber]
	      }],
	      /**
	       * Line Height
	       * @see https://tailwindcss.com/docs/line-height
	       */
	      leading: [{
	        leading: ['none', 'tight', 'snug', 'normal', 'relaxed', 'loose', isArbitraryValue, isLength]
	      }],
	      /**
	       * List Style Image
	       * @see https://tailwindcss.com/docs/list-style-image
	       */
	      'list-image': [{
	        'list-image': ['none', isArbitraryValue]
	      }],
	      /**
	       * List Style Type
	       * @see https://tailwindcss.com/docs/list-style-type
	       */
	      'list-style-type': [{
	        list: ['none', 'disc', 'decimal', isArbitraryValue]
	      }],
	      /**
	       * List Style Position
	       * @see https://tailwindcss.com/docs/list-style-position
	       */
	      'list-style-position': [{
	        list: ['inside', 'outside']
	      }],
	      /**
	       * Placeholder Color
	       * @deprecated since Tailwind CSS v3.0.0
	       * @see https://tailwindcss.com/docs/placeholder-color
	       */
	      'placeholder-color': [{
	        placeholder: [colors]
	      }],
	      /**
	       * Placeholder Opacity
	       * @see https://tailwindcss.com/docs/placeholder-opacity
	       */
	      'placeholder-opacity': [{
	        'placeholder-opacity': [opacity]
	      }],
	      /**
	       * Text Alignment
	       * @see https://tailwindcss.com/docs/text-align
	       */
	      'text-alignment': [{
	        text: ['left', 'center', 'right', 'justify', 'start', 'end']
	      }],
	      /**
	       * Text Color
	       * @see https://tailwindcss.com/docs/text-color
	       */
	      'text-color': [{
	        text: [colors]
	      }],
	      /**
	       * Text Opacity
	       * @see https://tailwindcss.com/docs/text-opacity
	       */
	      'text-opacity': [{
	        'text-opacity': [opacity]
	      }],
	      /**
	       * Text Decoration
	       * @see https://tailwindcss.com/docs/text-decoration
	       */
	      'text-decoration': ['underline', 'overline', 'line-through', 'no-underline'],
	      /**
	       * Text Decoration Style
	       * @see https://tailwindcss.com/docs/text-decoration-style
	       */
	      'text-decoration-style': [{
	        decoration: [].concat(getLineStyles(), ['wavy'])
	      }],
	      /**
	       * Text Decoration Thickness
	       * @see https://tailwindcss.com/docs/text-decoration-thickness
	       */
	      'text-decoration-thickness': [{
	        decoration: ['auto', 'from-font', isLength]
	      }],
	      /**
	       * Text Underline Offset
	       * @see https://tailwindcss.com/docs/text-underline-offset
	       */
	      'underline-offset': [{
	        'underline-offset': ['auto', isArbitraryValue, isLength]
	      }],
	      /**
	       * Text Decoration Color
	       * @see https://tailwindcss.com/docs/text-decoration-color
	       */
	      'text-decoration-color': [{
	        decoration: [colors]
	      }],
	      /**
	       * Text Transform
	       * @see https://tailwindcss.com/docs/text-transform
	       */
	      'text-transform': ['uppercase', 'lowercase', 'capitalize', 'normal-case'],
	      /**
	       * Text Overflow
	       * @see https://tailwindcss.com/docs/text-overflow
	       */
	      'text-overflow': ['truncate', 'text-ellipsis', 'text-clip'],
	      /**
	       * Text Indent
	       * @see https://tailwindcss.com/docs/text-indent
	       */
	      indent: [{
	        indent: getSpacingWithArbitrary()
	      }],
	      /**
	       * Vertical Alignment
	       * @see https://tailwindcss.com/docs/vertical-align
	       */
	      'vertical-align': [{
	        align: ['baseline', 'top', 'middle', 'bottom', 'text-top', 'text-bottom', 'sub', 'super', isArbitraryValue]
	      }],
	      /**
	       * Whitespace
	       * @see https://tailwindcss.com/docs/whitespace
	       */
	      whitespace: [{
	        whitespace: ['normal', 'nowrap', 'pre', 'pre-line', 'pre-wrap', 'break-spaces']
	      }],
	      /**
	       * Word Break
	       * @see https://tailwindcss.com/docs/word-break
	       */
	      "break": [{
	        "break": ['normal', 'words', 'all', 'keep']
	      }],
	      /**
	       * Hyphens
	       * @see https://tailwindcss.com/docs/hyphens
	       */
	      hyphens: [{
	        hyphens: ['none', 'manual', 'auto']
	      }],
	      /**
	       * Content
	       * @see https://tailwindcss.com/docs/content
	       */
	      content: [{
	        content: ['none', isArbitraryValue]
	      }],
	      // Backgrounds
	      /**
	       * Background Attachment
	       * @see https://tailwindcss.com/docs/background-attachment
	       */
	      'bg-attachment': [{
	        bg: ['fixed', 'local', 'scroll']
	      }],
	      /**
	       * Background Clip
	       * @see https://tailwindcss.com/docs/background-clip
	       */
	      'bg-clip': [{
	        'bg-clip': ['border', 'padding', 'content', 'text']
	      }],
	      /**
	       * Background Opacity
	       * @deprecated since Tailwind CSS v3.0.0
	       * @see https://tailwindcss.com/docs/background-opacity
	       */
	      'bg-opacity': [{
	        'bg-opacity': [opacity]
	      }],
	      /**
	       * Background Origin
	       * @see https://tailwindcss.com/docs/background-origin
	       */
	      'bg-origin': [{
	        'bg-origin': ['border', 'padding', 'content']
	      }],
	      /**
	       * Background Position
	       * @see https://tailwindcss.com/docs/background-position
	       */
	      'bg-position': [{
	        bg: [].concat(getPositions(), [isArbitraryPosition])
	      }],
	      /**
	       * Background Repeat
	       * @see https://tailwindcss.com/docs/background-repeat
	       */
	      'bg-repeat': [{
	        bg: ['no-repeat', {
	          repeat: ['', 'x', 'y', 'round', 'space']
	        }]
	      }],
	      /**
	       * Background Size
	       * @see https://tailwindcss.com/docs/background-size
	       */
	      'bg-size': [{
	        bg: ['auto', 'cover', 'contain', isArbitrarySize]
	      }],
	      /**
	       * Background Image
	       * @see https://tailwindcss.com/docs/background-image
	       */
	      'bg-image': [{
	        bg: ['none', {
	          'gradient-to': ['t', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl']
	        }, isArbitraryUrl]
	      }],
	      /**
	       * Background Color
	       * @see https://tailwindcss.com/docs/background-color
	       */
	      'bg-color': [{
	        bg: [colors]
	      }],
	      /**
	       * Gradient Color Stops From Position
	       * @see https://tailwindcss.com/docs/gradient-color-stops
	       */
	      'gradient-from-pos': [{
	        from: [gradientColorStopPositions]
	      }],
	      /**
	       * Gradient Color Stops Via Position
	       * @see https://tailwindcss.com/docs/gradient-color-stops
	       */
	      'gradient-via-pos': [{
	        via: [gradientColorStopPositions]
	      }],
	      /**
	       * Gradient Color Stops To Position
	       * @see https://tailwindcss.com/docs/gradient-color-stops
	       */
	      'gradient-to-pos': [{
	        to: [gradientColorStopPositions]
	      }],
	      /**
	       * Gradient Color Stops From
	       * @see https://tailwindcss.com/docs/gradient-color-stops
	       */
	      'gradient-from': [{
	        from: [gradientColorStops]
	      }],
	      /**
	       * Gradient Color Stops Via
	       * @see https://tailwindcss.com/docs/gradient-color-stops
	       */
	      'gradient-via': [{
	        via: [gradientColorStops]
	      }],
	      /**
	       * Gradient Color Stops To
	       * @see https://tailwindcss.com/docs/gradient-color-stops
	       */
	      'gradient-to': [{
	        to: [gradientColorStops]
	      }],
	      // Borders
	      /**
	       * Border Radius
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      rounded: [{
	        rounded: [borderRadius]
	      }],
	      /**
	       * Border Radius Start
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-s': [{
	        'rounded-s': [borderRadius]
	      }],
	      /**
	       * Border Radius End
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-e': [{
	        'rounded-e': [borderRadius]
	      }],
	      /**
	       * Border Radius Top
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-t': [{
	        'rounded-t': [borderRadius]
	      }],
	      /**
	       * Border Radius Right
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-r': [{
	        'rounded-r': [borderRadius]
	      }],
	      /**
	       * Border Radius Bottom
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-b': [{
	        'rounded-b': [borderRadius]
	      }],
	      /**
	       * Border Radius Left
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-l': [{
	        'rounded-l': [borderRadius]
	      }],
	      /**
	       * Border Radius Start Start
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-ss': [{
	        'rounded-ss': [borderRadius]
	      }],
	      /**
	       * Border Radius Start End
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-se': [{
	        'rounded-se': [borderRadius]
	      }],
	      /**
	       * Border Radius End End
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-ee': [{
	        'rounded-ee': [borderRadius]
	      }],
	      /**
	       * Border Radius End Start
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-es': [{
	        'rounded-es': [borderRadius]
	      }],
	      /**
	       * Border Radius Top Left
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-tl': [{
	        'rounded-tl': [borderRadius]
	      }],
	      /**
	       * Border Radius Top Right
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-tr': [{
	        'rounded-tr': [borderRadius]
	      }],
	      /**
	       * Border Radius Bottom Right
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-br': [{
	        'rounded-br': [borderRadius]
	      }],
	      /**
	       * Border Radius Bottom Left
	       * @see https://tailwindcss.com/docs/border-radius
	       */
	      'rounded-bl': [{
	        'rounded-bl': [borderRadius]
	      }],
	      /**
	       * Border Width
	       * @see https://tailwindcss.com/docs/border-width
	       */
	      'border-w': [{
	        border: [borderWidth]
	      }],
	      /**
	       * Border Width X
	       * @see https://tailwindcss.com/docs/border-width
	       */
	      'border-w-x': [{
	        'border-x': [borderWidth]
	      }],
	      /**
	       * Border Width Y
	       * @see https://tailwindcss.com/docs/border-width
	       */
	      'border-w-y': [{
	        'border-y': [borderWidth]
	      }],
	      /**
	       * Border Width Start
	       * @see https://tailwindcss.com/docs/border-width
	       */
	      'border-w-s': [{
	        'border-s': [borderWidth]
	      }],
	      /**
	       * Border Width End
	       * @see https://tailwindcss.com/docs/border-width
	       */
	      'border-w-e': [{
	        'border-e': [borderWidth]
	      }],
	      /**
	       * Border Width Top
	       * @see https://tailwindcss.com/docs/border-width
	       */
	      'border-w-t': [{
	        'border-t': [borderWidth]
	      }],
	      /**
	       * Border Width Right
	       * @see https://tailwindcss.com/docs/border-width
	       */
	      'border-w-r': [{
	        'border-r': [borderWidth]
	      }],
	      /**
	       * Border Width Bottom
	       * @see https://tailwindcss.com/docs/border-width
	       */
	      'border-w-b': [{
	        'border-b': [borderWidth]
	      }],
	      /**
	       * Border Width Left
	       * @see https://tailwindcss.com/docs/border-width
	       */
	      'border-w-l': [{
	        'border-l': [borderWidth]
	      }],
	      /**
	       * Border Opacity
	       * @see https://tailwindcss.com/docs/border-opacity
	       */
	      'border-opacity': [{
	        'border-opacity': [opacity]
	      }],
	      /**
	       * Border Style
	       * @see https://tailwindcss.com/docs/border-style
	       */
	      'border-style': [{
	        border: [].concat(getLineStyles(), ['hidden'])
	      }],
	      /**
	       * Divide Width X
	       * @see https://tailwindcss.com/docs/divide-width
	       */
	      'divide-x': [{
	        'divide-x': [borderWidth]
	      }],
	      /**
	       * Divide Width X Reverse
	       * @see https://tailwindcss.com/docs/divide-width
	       */
	      'divide-x-reverse': ['divide-x-reverse'],
	      /**
	       * Divide Width Y
	       * @see https://tailwindcss.com/docs/divide-width
	       */
	      'divide-y': [{
	        'divide-y': [borderWidth]
	      }],
	      /**
	       * Divide Width Y Reverse
	       * @see https://tailwindcss.com/docs/divide-width
	       */
	      'divide-y-reverse': ['divide-y-reverse'],
	      /**
	       * Divide Opacity
	       * @see https://tailwindcss.com/docs/divide-opacity
	       */
	      'divide-opacity': [{
	        'divide-opacity': [opacity]
	      }],
	      /**
	       * Divide Style
	       * @see https://tailwindcss.com/docs/divide-style
	       */
	      'divide-style': [{
	        divide: getLineStyles()
	      }],
	      /**
	       * Border Color
	       * @see https://tailwindcss.com/docs/border-color
	       */
	      'border-color': [{
	        border: [borderColor]
	      }],
	      /**
	       * Border Color X
	       * @see https://tailwindcss.com/docs/border-color
	       */
	      'border-color-x': [{
	        'border-x': [borderColor]
	      }],
	      /**
	       * Border Color Y
	       * @see https://tailwindcss.com/docs/border-color
	       */
	      'border-color-y': [{
	        'border-y': [borderColor]
	      }],
	      /**
	       * Border Color Top
	       * @see https://tailwindcss.com/docs/border-color
	       */
	      'border-color-t': [{
	        'border-t': [borderColor]
	      }],
	      /**
	       * Border Color Right
	       * @see https://tailwindcss.com/docs/border-color
	       */
	      'border-color-r': [{
	        'border-r': [borderColor]
	      }],
	      /**
	       * Border Color Bottom
	       * @see https://tailwindcss.com/docs/border-color
	       */
	      'border-color-b': [{
	        'border-b': [borderColor]
	      }],
	      /**
	       * Border Color Left
	       * @see https://tailwindcss.com/docs/border-color
	       */
	      'border-color-l': [{
	        'border-l': [borderColor]
	      }],
	      /**
	       * Divide Color
	       * @see https://tailwindcss.com/docs/divide-color
	       */
	      'divide-color': [{
	        divide: [borderColor]
	      }],
	      /**
	       * Outline Style
	       * @see https://tailwindcss.com/docs/outline-style
	       */
	      'outline-style': [{
	        outline: [''].concat(getLineStyles())
	      }],
	      /**
	       * Outline Offset
	       * @see https://tailwindcss.com/docs/outline-offset
	       */
	      'outline-offset': [{
	        'outline-offset': [isArbitraryValue, isLength]
	      }],
	      /**
	       * Outline Width
	       * @see https://tailwindcss.com/docs/outline-width
	       */
	      'outline-w': [{
	        outline: [isLength]
	      }],
	      /**
	       * Outline Color
	       * @see https://tailwindcss.com/docs/outline-color
	       */
	      'outline-color': [{
	        outline: [colors]
	      }],
	      /**
	       * Ring Width
	       * @see https://tailwindcss.com/docs/ring-width
	       */
	      'ring-w': [{
	        ring: getLengthWithEmpty()
	      }],
	      /**
	       * Ring Width Inset
	       * @see https://tailwindcss.com/docs/ring-width
	       */
	      'ring-w-inset': ['ring-inset'],
	      /**
	       * Ring Color
	       * @see https://tailwindcss.com/docs/ring-color
	       */
	      'ring-color': [{
	        ring: [colors]
	      }],
	      /**
	       * Ring Opacity
	       * @see https://tailwindcss.com/docs/ring-opacity
	       */
	      'ring-opacity': [{
	        'ring-opacity': [opacity]
	      }],
	      /**
	       * Ring Offset Width
	       * @see https://tailwindcss.com/docs/ring-offset-width
	       */
	      'ring-offset-w': [{
	        'ring-offset': [isLength]
	      }],
	      /**
	       * Ring Offset Color
	       * @see https://tailwindcss.com/docs/ring-offset-color
	       */
	      'ring-offset-color': [{
	        'ring-offset': [colors]
	      }],
	      // Effects
	      /**
	       * Box Shadow
	       * @see https://tailwindcss.com/docs/box-shadow
	       */
	      shadow: [{
	        shadow: ['', 'inner', 'none', isTshirtSize, isArbitraryShadow]
	      }],
	      /**
	       * Box Shadow Color
	       * @see https://tailwindcss.com/docs/box-shadow-color
	       */
	      'shadow-color': [{
	        shadow: [isAny]
	      }],
	      /**
	       * Opacity
	       * @see https://tailwindcss.com/docs/opacity
	       */
	      opacity: [{
	        opacity: [opacity]
	      }],
	      /**
	       * Mix Blend Mode
	       * @see https://tailwindcss.com/docs/mix-blend-mode
	       */
	      'mix-blend': [{
	        'mix-blend': getBlendModes()
	      }],
	      /**
	       * Background Blend Mode
	       * @see https://tailwindcss.com/docs/background-blend-mode
	       */
	      'bg-blend': [{
	        'bg-blend': getBlendModes()
	      }],
	      // Filters
	      /**
	       * Filter
	       * @deprecated since Tailwind CSS v3.0.0
	       * @see https://tailwindcss.com/docs/filter
	       */
	      filter: [{
	        filter: ['', 'none']
	      }],
	      /**
	       * Blur
	       * @see https://tailwindcss.com/docs/blur
	       */
	      blur: [{
	        blur: [blur]
	      }],
	      /**
	       * Brightness
	       * @see https://tailwindcss.com/docs/brightness
	       */
	      brightness: [{
	        brightness: [brightness]
	      }],
	      /**
	       * Contrast
	       * @see https://tailwindcss.com/docs/contrast
	       */
	      contrast: [{
	        contrast: [contrast]
	      }],
	      /**
	       * Drop Shadow
	       * @see https://tailwindcss.com/docs/drop-shadow
	       */
	      'drop-shadow': [{
	        'drop-shadow': ['', 'none', isTshirtSize, isArbitraryValue]
	      }],
	      /**
	       * Grayscale
	       * @see https://tailwindcss.com/docs/grayscale
	       */
	      grayscale: [{
	        grayscale: [grayscale]
	      }],
	      /**
	       * Hue Rotate
	       * @see https://tailwindcss.com/docs/hue-rotate
	       */
	      'hue-rotate': [{
	        'hue-rotate': [hueRotate]
	      }],
	      /**
	       * Invert
	       * @see https://tailwindcss.com/docs/invert
	       */
	      invert: [{
	        invert: [invert]
	      }],
	      /**
	       * Saturate
	       * @see https://tailwindcss.com/docs/saturate
	       */
	      saturate: [{
	        saturate: [saturate]
	      }],
	      /**
	       * Sepia
	       * @see https://tailwindcss.com/docs/sepia
	       */
	      sepia: [{
	        sepia: [sepia]
	      }],
	      /**
	       * Backdrop Filter
	       * @deprecated since Tailwind CSS v3.0.0
	       * @see https://tailwindcss.com/docs/backdrop-filter
	       */
	      'backdrop-filter': [{
	        'backdrop-filter': ['', 'none']
	      }],
	      /**
	       * Backdrop Blur
	       * @see https://tailwindcss.com/docs/backdrop-blur
	       */
	      'backdrop-blur': [{
	        'backdrop-blur': [blur]
	      }],
	      /**
	       * Backdrop Brightness
	       * @see https://tailwindcss.com/docs/backdrop-brightness
	       */
	      'backdrop-brightness': [{
	        'backdrop-brightness': [brightness]
	      }],
	      /**
	       * Backdrop Contrast
	       * @see https://tailwindcss.com/docs/backdrop-contrast
	       */
	      'backdrop-contrast': [{
	        'backdrop-contrast': [contrast]
	      }],
	      /**
	       * Backdrop Grayscale
	       * @see https://tailwindcss.com/docs/backdrop-grayscale
	       */
	      'backdrop-grayscale': [{
	        'backdrop-grayscale': [grayscale]
	      }],
	      /**
	       * Backdrop Hue Rotate
	       * @see https://tailwindcss.com/docs/backdrop-hue-rotate
	       */
	      'backdrop-hue-rotate': [{
	        'backdrop-hue-rotate': [hueRotate]
	      }],
	      /**
	       * Backdrop Invert
	       * @see https://tailwindcss.com/docs/backdrop-invert
	       */
	      'backdrop-invert': [{
	        'backdrop-invert': [invert]
	      }],
	      /**
	       * Backdrop Opacity
	       * @see https://tailwindcss.com/docs/backdrop-opacity
	       */
	      'backdrop-opacity': [{
	        'backdrop-opacity': [opacity]
	      }],
	      /**
	       * Backdrop Saturate
	       * @see https://tailwindcss.com/docs/backdrop-saturate
	       */
	      'backdrop-saturate': [{
	        'backdrop-saturate': [saturate]
	      }],
	      /**
	       * Backdrop Sepia
	       * @see https://tailwindcss.com/docs/backdrop-sepia
	       */
	      'backdrop-sepia': [{
	        'backdrop-sepia': [sepia]
	      }],
	      // Tables
	      /**
	       * Border Collapse
	       * @see https://tailwindcss.com/docs/border-collapse
	       */
	      'border-collapse': [{
	        border: ['collapse', 'separate']
	      }],
	      /**
	       * Border Spacing
	       * @see https://tailwindcss.com/docs/border-spacing
	       */
	      'border-spacing': [{
	        'border-spacing': [borderSpacing]
	      }],
	      /**
	       * Border Spacing X
	       * @see https://tailwindcss.com/docs/border-spacing
	       */
	      'border-spacing-x': [{
	        'border-spacing-x': [borderSpacing]
	      }],
	      /**
	       * Border Spacing Y
	       * @see https://tailwindcss.com/docs/border-spacing
	       */
	      'border-spacing-y': [{
	        'border-spacing-y': [borderSpacing]
	      }],
	      /**
	       * Table Layout
	       * @see https://tailwindcss.com/docs/table-layout
	       */
	      'table-layout': [{
	        table: ['auto', 'fixed']
	      }],
	      /**
	       * Caption Side
	       * @see https://tailwindcss.com/docs/caption-side
	       */
	      caption: [{
	        caption: ['top', 'bottom']
	      }],
	      // Transitions and Animation
	      /**
	       * Tranisition Property
	       * @see https://tailwindcss.com/docs/transition-property
	       */
	      transition: [{
	        transition: ['none', 'all', '', 'colors', 'opacity', 'shadow', 'transform', isArbitraryValue]
	      }],
	      /**
	       * Transition Duration
	       * @see https://tailwindcss.com/docs/transition-duration
	       */
	      duration: [{
	        duration: getNumberAndArbitrary()
	      }],
	      /**
	       * Transition Timing Function
	       * @see https://tailwindcss.com/docs/transition-timing-function
	       */
	      ease: [{
	        ease: ['linear', 'in', 'out', 'in-out', isArbitraryValue]
	      }],
	      /**
	       * Transition Delay
	       * @see https://tailwindcss.com/docs/transition-delay
	       */
	      delay: [{
	        delay: getNumberAndArbitrary()
	      }],
	      /**
	       * Animation
	       * @see https://tailwindcss.com/docs/animation
	       */
	      animate: [{
	        animate: ['none', 'spin', 'ping', 'pulse', 'bounce', isArbitraryValue]
	      }],
	      // Transforms
	      /**
	       * Transform
	       * @see https://tailwindcss.com/docs/transform
	       */
	      transform: [{
	        transform: ['', 'gpu', 'none']
	      }],
	      /**
	       * Scale
	       * @see https://tailwindcss.com/docs/scale
	       */
	      scale: [{
	        scale: [scale]
	      }],
	      /**
	       * Scale X
	       * @see https://tailwindcss.com/docs/scale
	       */
	      'scale-x': [{
	        'scale-x': [scale]
	      }],
	      /**
	       * Scale Y
	       * @see https://tailwindcss.com/docs/scale
	       */
	      'scale-y': [{
	        'scale-y': [scale]
	      }],
	      /**
	       * Rotate
	       * @see https://tailwindcss.com/docs/rotate
	       */
	      rotate: [{
	        rotate: [isInteger, isArbitraryValue]
	      }],
	      /**
	       * Translate X
	       * @see https://tailwindcss.com/docs/translate
	       */
	      'translate-x': [{
	        'translate-x': [translate]
	      }],
	      /**
	       * Translate Y
	       * @see https://tailwindcss.com/docs/translate
	       */
	      'translate-y': [{
	        'translate-y': [translate]
	      }],
	      /**
	       * Skew X
	       * @see https://tailwindcss.com/docs/skew
	       */
	      'skew-x': [{
	        'skew-x': [skew]
	      }],
	      /**
	       * Skew Y
	       * @see https://tailwindcss.com/docs/skew
	       */
	      'skew-y': [{
	        'skew-y': [skew]
	      }],
	      /**
	       * Transform Origin
	       * @see https://tailwindcss.com/docs/transform-origin
	       */
	      'transform-origin': [{
	        origin: ['center', 'top', 'top-right', 'right', 'bottom-right', 'bottom', 'bottom-left', 'left', 'top-left', isArbitraryValue]
	      }],
	      // Interactivity
	      /**
	       * Accent Color
	       * @see https://tailwindcss.com/docs/accent-color
	       */
	      accent: [{
	        accent: ['auto', colors]
	      }],
	      /**
	       * Appearance
	       * @see https://tailwindcss.com/docs/appearance
	       */
	      appearance: ['appearance-none'],
	      /**
	       * Cursor
	       * @see https://tailwindcss.com/docs/cursor
	       */
	      cursor: [{
	        cursor: ['auto', 'default', 'pointer', 'wait', 'text', 'move', 'help', 'not-allowed', 'none', 'context-menu', 'progress', 'cell', 'crosshair', 'vertical-text', 'alias', 'copy', 'no-drop', 'grab', 'grabbing', 'all-scroll', 'col-resize', 'row-resize', 'n-resize', 'e-resize', 's-resize', 'w-resize', 'ne-resize', 'nw-resize', 'se-resize', 'sw-resize', 'ew-resize', 'ns-resize', 'nesw-resize', 'nwse-resize', 'zoom-in', 'zoom-out', isArbitraryValue]
	      }],
	      /**
	       * Caret Color
	       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
	       */
	      'caret-color': [{
	        caret: [colors]
	      }],
	      /**
	       * Pointer Events
	       * @see https://tailwindcss.com/docs/pointer-events
	       */
	      'pointer-events': [{
	        'pointer-events': ['none', 'auto']
	      }],
	      /**
	       * Resize
	       * @see https://tailwindcss.com/docs/resize
	       */
	      resize: [{
	        resize: ['none', 'y', 'x', '']
	      }],
	      /**
	       * Scroll Behavior
	       * @see https://tailwindcss.com/docs/scroll-behavior
	       */
	      'scroll-behavior': [{
	        scroll: ['auto', 'smooth']
	      }],
	      /**
	       * Scroll Margin
	       * @see https://tailwindcss.com/docs/scroll-margin
	       */
	      'scroll-m': [{
	        'scroll-m': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Margin X
	       * @see https://tailwindcss.com/docs/scroll-margin
	       */
	      'scroll-mx': [{
	        'scroll-mx': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Margin Y
	       * @see https://tailwindcss.com/docs/scroll-margin
	       */
	      'scroll-my': [{
	        'scroll-my': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Margin Start
	       * @see https://tailwindcss.com/docs/scroll-margin
	       */
	      'scroll-ms': [{
	        'scroll-ms': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Margin End
	       * @see https://tailwindcss.com/docs/scroll-margin
	       */
	      'scroll-me': [{
	        'scroll-me': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Margin Top
	       * @see https://tailwindcss.com/docs/scroll-margin
	       */
	      'scroll-mt': [{
	        'scroll-mt': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Margin Right
	       * @see https://tailwindcss.com/docs/scroll-margin
	       */
	      'scroll-mr': [{
	        'scroll-mr': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Margin Bottom
	       * @see https://tailwindcss.com/docs/scroll-margin
	       */
	      'scroll-mb': [{
	        'scroll-mb': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Margin Left
	       * @see https://tailwindcss.com/docs/scroll-margin
	       */
	      'scroll-ml': [{
	        'scroll-ml': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Padding
	       * @see https://tailwindcss.com/docs/scroll-padding
	       */
	      'scroll-p': [{
	        'scroll-p': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Padding X
	       * @see https://tailwindcss.com/docs/scroll-padding
	       */
	      'scroll-px': [{
	        'scroll-px': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Padding Y
	       * @see https://tailwindcss.com/docs/scroll-padding
	       */
	      'scroll-py': [{
	        'scroll-py': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Padding Start
	       * @see https://tailwindcss.com/docs/scroll-padding
	       */
	      'scroll-ps': [{
	        'scroll-ps': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Padding End
	       * @see https://tailwindcss.com/docs/scroll-padding
	       */
	      'scroll-pe': [{
	        'scroll-pe': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Padding Top
	       * @see https://tailwindcss.com/docs/scroll-padding
	       */
	      'scroll-pt': [{
	        'scroll-pt': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Padding Right
	       * @see https://tailwindcss.com/docs/scroll-padding
	       */
	      'scroll-pr': [{
	        'scroll-pr': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Padding Bottom
	       * @see https://tailwindcss.com/docs/scroll-padding
	       */
	      'scroll-pb': [{
	        'scroll-pb': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Padding Left
	       * @see https://tailwindcss.com/docs/scroll-padding
	       */
	      'scroll-pl': [{
	        'scroll-pl': getSpacingWithArbitrary()
	      }],
	      /**
	       * Scroll Snap Align
	       * @see https://tailwindcss.com/docs/scroll-snap-align
	       */
	      'snap-align': [{
	        snap: ['start', 'end', 'center', 'align-none']
	      }],
	      /**
	       * Scroll Snap Stop
	       * @see https://tailwindcss.com/docs/scroll-snap-stop
	       */
	      'snap-stop': [{
	        snap: ['normal', 'always']
	      }],
	      /**
	       * Scroll Snap Type
	       * @see https://tailwindcss.com/docs/scroll-snap-type
	       */
	      'snap-type': [{
	        snap: ['none', 'x', 'y', 'both']
	      }],
	      /**
	       * Scroll Snap Type Strictness
	       * @see https://tailwindcss.com/docs/scroll-snap-type
	       */
	      'snap-strictness': [{
	        snap: ['mandatory', 'proximity']
	      }],
	      /**
	       * Touch Action
	       * @see https://tailwindcss.com/docs/touch-action
	       */
	      touch: [{
	        touch: ['auto', 'none', 'pinch-zoom', 'manipulation', {
	          pan: ['x', 'left', 'right', 'y', 'up', 'down']
	        }]
	      }],
	      /**
	       * User Select
	       * @see https://tailwindcss.com/docs/user-select
	       */
	      select: [{
	        select: ['none', 'text', 'all', 'auto']
	      }],
	      /**
	       * Will Change
	       * @see https://tailwindcss.com/docs/will-change
	       */
	      'will-change': [{
	        'will-change': ['auto', 'scroll', 'contents', 'transform', isArbitraryValue]
	      }],
	      // SVG
	      /**
	       * Fill
	       * @see https://tailwindcss.com/docs/fill
	       */
	      fill: [{
	        fill: [colors, 'none']
	      }],
	      /**
	       * Stroke Width
	       * @see https://tailwindcss.com/docs/stroke-width
	       */
	      'stroke-w': [{
	        stroke: [isLength, isArbitraryNumber]
	      }],
	      /**
	       * Stroke
	       * @see https://tailwindcss.com/docs/stroke
	       */
	      stroke: [{
	        stroke: [colors, 'none']
	      }],
	      // Accessibility
	      /**
	       * Screen Readers
	       * @see https://tailwindcss.com/docs/screen-readers
	       */
	      sr: ['sr-only', 'not-sr-only']
	    },
	    conflictingClassGroups: {
	      overflow: ['overflow-x', 'overflow-y'],
	      overscroll: ['overscroll-x', 'overscroll-y'],
	      inset: ['inset-x', 'inset-y', 'start', 'end', 'top', 'right', 'bottom', 'left'],
	      'inset-x': ['right', 'left'],
	      'inset-y': ['top', 'bottom'],
	      flex: ['basis', 'grow', 'shrink'],
	      gap: ['gap-x', 'gap-y'],
	      p: ['px', 'py', 'ps', 'pe', 'pt', 'pr', 'pb', 'pl'],
	      px: ['pr', 'pl'],
	      py: ['pt', 'pb'],
	      m: ['mx', 'my', 'ms', 'me', 'mt', 'mr', 'mb', 'ml'],
	      mx: ['mr', 'ml'],
	      my: ['mt', 'mb'],
	      'font-size': ['leading'],
	      'fvn-normal': ['fvn-ordinal', 'fvn-slashed-zero', 'fvn-figure', 'fvn-spacing', 'fvn-fraction'],
	      'fvn-ordinal': ['fvn-normal'],
	      'fvn-slashed-zero': ['fvn-normal'],
	      'fvn-figure': ['fvn-normal'],
	      'fvn-spacing': ['fvn-normal'],
	      'fvn-fraction': ['fvn-normal'],
	      rounded: ['rounded-s', 'rounded-e', 'rounded-t', 'rounded-r', 'rounded-b', 'rounded-l', 'rounded-ss', 'rounded-se', 'rounded-ee', 'rounded-es', 'rounded-tl', 'rounded-tr', 'rounded-br', 'rounded-bl'],
	      'rounded-s': ['rounded-ss', 'rounded-es'],
	      'rounded-e': ['rounded-se', 'rounded-ee'],
	      'rounded-t': ['rounded-tl', 'rounded-tr'],
	      'rounded-r': ['rounded-tr', 'rounded-br'],
	      'rounded-b': ['rounded-br', 'rounded-bl'],
	      'rounded-l': ['rounded-tl', 'rounded-bl'],
	      'border-spacing': ['border-spacing-x', 'border-spacing-y'],
	      'border-w': ['border-w-s', 'border-w-e', 'border-w-t', 'border-w-r', 'border-w-b', 'border-w-l'],
	      'border-w-x': ['border-w-r', 'border-w-l'],
	      'border-w-y': ['border-w-t', 'border-w-b'],
	      'border-color': ['border-color-t', 'border-color-r', 'border-color-b', 'border-color-l'],
	      'border-color-x': ['border-color-r', 'border-color-l'],
	      'border-color-y': ['border-color-t', 'border-color-b'],
	      'scroll-m': ['scroll-mx', 'scroll-my', 'scroll-ms', 'scroll-me', 'scroll-mt', 'scroll-mr', 'scroll-mb', 'scroll-ml'],
	      'scroll-mx': ['scroll-mr', 'scroll-ml'],
	      'scroll-my': ['scroll-mt', 'scroll-mb'],
	      'scroll-p': ['scroll-px', 'scroll-py', 'scroll-ps', 'scroll-pe', 'scroll-pt', 'scroll-pr', 'scroll-pb', 'scroll-pl'],
	      'scroll-px': ['scroll-pr', 'scroll-pl'],
	      'scroll-py': ['scroll-pt', 'scroll-pb']
	    },
	    conflictingClassGroupModifiers: {
	      'font-size': ['leading']
	    }
	  };
	}

	/**
	 * @param baseConfig Config where other config will be merged into. This object will be mutated.
	 * @param configExtension Partial config to merge into the `baseConfig`.
	 */
	function mergeConfigs(baseConfig, configExtension) {
	  for (var key in configExtension) {
	    mergePropertyRecursively(baseConfig, key, configExtension[key]);
	  }
	  return baseConfig;
	}
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var overrideTypes = /*#__PURE__*/new Set(['string', 'number', 'boolean']);
	function mergePropertyRecursively(baseObject, mergeKey, mergeValue) {
	  if (!hasOwnProperty.call(baseObject, mergeKey) || overrideTypes.has(typeof mergeValue) || mergeValue === null) {
	    baseObject[mergeKey] = mergeValue;
	    return;
	  }
	  if (Array.isArray(mergeValue) && Array.isArray(baseObject[mergeKey])) {
	    baseObject[mergeKey] = baseObject[mergeKey].concat(mergeValue);
	    return;
	  }
	  if (typeof mergeValue === 'object' && typeof baseObject[mergeKey] === 'object') {
	    if (baseObject[mergeKey] === null) {
	      baseObject[mergeKey] = mergeValue;
	      return;
	    }
	    for (var nextKey in mergeValue) {
	      mergePropertyRecursively(baseObject[mergeKey], nextKey, mergeValue[nextKey]);
	    }
	  }
	}

	function extendTailwindMerge(configExtension) {
	  for (var _len = arguments.length, createConfig = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    createConfig[_key - 1] = arguments[_key];
	  }
	  return typeof configExtension === 'function' ? createTailwindMerge.apply(void 0, [getDefaultConfig, configExtension].concat(createConfig)) : createTailwindMerge.apply(void 0, [function () {
	    return mergeConfigs(getDefaultConfig(), configExtension);
	  }].concat(createConfig));
	}

	var twMerge = /*#__PURE__*/createTailwindMerge(getDefaultConfig);

	var se={twMerge:!0,twMergeConfig:{},responsiveVariants:!1},_=s=>s||void 0,N=(...s)=>_(y(s).filter(Boolean).join(" ")),q=null,M={},F=!1,w=(...s)=>b$1=>b$1.twMerge?((!q||F)&&(F=!1,q=u(M)?twMerge:extendTailwindMerge(M)),_(q(N(s)))):N(s),Z=(s,b)=>{for(let e in b)s.hasOwnProperty(e)?s[e]=N(s[e],b[e]):s[e]=b[e];return s},ie=(s,b$1)=>{let{extend:e=null,slots:j={},variants:U={},compoundVariants:C=[],compoundSlots:V=[],defaultVariants:W={}}=s,m={...se,...b$1},S=e!=null&&e.base?N(e.base,s==null?void 0:s.base):s==null?void 0:s.base,g$1$1=e!=null&&e.variants&&!u(e.variants)?p$1(U,e.variants):U,A=e!=null&&e.defaultVariants&&!u(e.defaultVariants)?{...e.defaultVariants,...W}:W;!u(m.twMergeConfig)&&!x(m.twMergeConfig,M)&&(F=!0,M=m.twMergeConfig);let O=u(e==null?void 0:e.slots),$=u(j)?{}:{base:N(s==null?void 0:s.base,O&&(e==null?void 0:e.base)),...j},h$1=O?$:Z({...e==null?void 0:e.slots},u($)?{base:s==null?void 0:s.base}:$),v=l$1=>{if(u(g$1$1)&&u(j)&&O)return w(S,l$1==null?void 0:l$1.class,l$1==null?void 0:l$1.className)(m);if(C&&!Array.isArray(C))throw new TypeError(`The "compoundVariants" prop must be an array. Received: ${typeof C}`);if(V&&!Array.isArray(V))throw new TypeError(`The "compoundSlots" prop must be an array. Received: ${typeof V}`);let K=(t,n,a=[],i)=>{let r=a;if(typeof n=="string")r=r.concat(g$1(n).split(" ").map(c=>`${t}:${c}`));else if(Array.isArray(n))r=r.concat(n.reduce((c,f)=>c.concat(`${t}:${f}`),[]));else if(typeof n=="object"&&typeof i=="string"){for(let c in n)if(n.hasOwnProperty(c)&&c===i){let f=n[c];if(f&&typeof f=="string"){let o=g$1(f);r[i]?r[i]=r[i].concat(o.split(" ").map(u=>`${t}:${u}`)):r[i]=o.split(" ").map(u=>`${t}:${u}`);}else Array.isArray(f)&&f.length>0&&(r[i]=f.reduce((o,u)=>o.concat(`${t}:${u}`),[]));}}return r},z=(t,n=g$1$1,a$1=null,i=null)=>{var J;let r=n[t];if(!r||u(r))return null;let c=(J=i==null?void 0:i[t])!=null?J:l$1==null?void 0:l$1[t];if(c===null)return null;let f=l(c),o=Array.isArray(m.responsiveVariants)&&m.responsiveVariants.length>0||m.responsiveVariants===!0,u$1=A==null?void 0:A[t],d=[];if(typeof f=="object"&&o)for(let[k,L]of Object.entries(f)){let ae=r[L];if(k==="initial"){u$1=L;continue}Array.isArray(m.responsiveVariants)&&!m.responsiveVariants.includes(k)||(d=K(k,ae,d,a$1));}let T=r[f]||r[l(u$1)];return typeof d=="object"&&typeof a$1=="string"&&d[a$1]?Z(d,T):d.length>0?(d.push(T),d):T},P=()=>g$1$1?Object.keys(g$1$1).map(t=>z(t,g$1$1)):null,p=(t,n)=>{if(!g$1$1||typeof g$1$1!="object")return null;let a=new Array;for(let i in g$1$1){let r=z(i,g$1$1,t,n),c=t==="base"&&typeof r=="string"?r:r&&r[t];c&&(a[a.length]=c);}return a},D={};for(let t in l$1)l$1[t]!==void 0&&(D[t]=l$1[t]);let G=(t,n)=>{var i;let a=typeof(l$1==null?void 0:l$1[t])=="object"?{[t]:(i=l$1[t])==null?void 0:i.initial}:{};return {...A,...D,...a,...n}},H=(t=[],n)=>{let a=[];for(let{class:i,className:r,...c}of t){let f=!0;for(let[o,u]of Object.entries(c)){let d=G(o,n);if(Array.isArray(u)){if(!u.includes(d[o])){f=!1;break}}else if(d[o]!==u){f=!1;break}}f&&(i&&a.push(i),r&&a.push(r));}return a},I=t=>{let n=H(C,t),a=H(e==null?void 0:e.compoundVariants,t);return a$1(a,n)},ee=t=>{let n=I(t);if(!Array.isArray(n))return n;let a={};for(let i of n)if(typeof i=="string"&&(a.base=w(a.base,i)(m)),typeof i=="object")for(let[r,c]of Object.entries(i))a[r]=w(a[r],c)(m);return a},te=t=>{if(V.length<1)return null;let n={};for(let{slots:a=[],class:i,className:r,...c}of V){if(!u(c)){let f=!0;for(let o of Object.keys(c)){let u=G(o,t)[o];if(u===void 0||(Array.isArray(c[o])?!c[o].includes(u):c[o]!==u)){f=!1;break}}if(!f)continue}for(let f of a)n[f]=n[f]||[],n[f].push([i,r]);}return n};if(!u(j)||!O){let t={};if(typeof h$1=="object"&&!u(h$1))for(let n of Object.keys(h$1))t[n]=a=>{var i,r;return w(h$1[n],p(n,a),((i=ee(a))!=null?i:[])[n],((r=te(a))!=null?r:[])[n],a==null?void 0:a.class,a==null?void 0:a.className)(m)};return t}return w(S,P(),I(),l$1==null?void 0:l$1.class,l$1==null?void 0:l$1.className)(m)},x$1=()=>{if(!(!g$1$1||typeof g$1$1!="object"))return Object.keys(g$1$1)};return v.variantKeys=x$1(),v.extend=e,v.base=S,v.slots=h$1,v.variants=g$1$1,v.defaultVariants=A,v.compoundSlots=V,v.compoundVariants=C,v};

	const toggleVariants = ie({
	    base: "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
	    variants: {
	        variant: {
	            default: "bg-transparent",
	            outline: "border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground",
	        },
	        size: {
	            default: "h-9 px-3",
	            sm: "h-8 px-2",
	            lg: "h-10 px-3",
	        },
	    },
	    defaultVariants: {
	        variant: "default",
	        size: "default",
	    },
	});

	/* src/lib/components/ui/toggle-group/toggle-group-item.svelte generated by Svelte v4.2.10 */

	// (13:0) <ToggleGroupPrimitive.Item  class={cn(   toggleVariants({    variant: ctx.variant || variant,    size: ctx.size || size,   }),   className  )}  {value}  {...$$restProps} >
	function create_default_slot$6(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[6].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[7],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$6.name,
			type: "slot",
			source: "(13:0) <ToggleGroupPrimitive.Item  class={cn(   toggleVariants({    variant: ctx.variant || variant,    size: ctx.size || size,   }),   className  )}  {value}  {...$$restProps} >",
			ctx
		});

		return block;
	}

	function create_fragment$g(ctx) {
		let togglegroupprimitive_item;
		let current;

		const togglegroupprimitive_item_spread_levels = [
			{
				class: cn(
					toggleVariants({
						variant: /*ctx*/ ctx[4].variant || /*variant*/ ctx[1],
						size: /*ctx*/ ctx[4].size || /*size*/ ctx[2]
					}),
					/*className*/ ctx[0]
				)
			},
			{ value: /*value*/ ctx[3] },
			/*$$restProps*/ ctx[5]
		];

		let togglegroupprimitive_item_props = {
			$$slots: { default: [create_default_slot$6] },
			$$scope: { ctx }
		};

		for (let i = 0; i < togglegroupprimitive_item_spread_levels.length; i += 1) {
			togglegroupprimitive_item_props = assign(togglegroupprimitive_item_props, togglegroupprimitive_item_spread_levels[i]);
		}

		togglegroupprimitive_item = new Toggle_group_item$1({
				props: togglegroupprimitive_item_props,
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(togglegroupprimitive_item.$$.fragment);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(togglegroupprimitive_item, target, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const togglegroupprimitive_item_changes = (dirty & /*ctx, variant, size, className, value, $$restProps*/ 63)
				? get_spread_update(togglegroupprimitive_item_spread_levels, [
						dirty & /*ctx, variant, size, className*/ 23 && {
							class: cn(
								toggleVariants({
									variant: /*ctx*/ ctx[4].variant || /*variant*/ ctx[1],
									size: /*ctx*/ ctx[4].size || /*size*/ ctx[2]
								}),
								/*className*/ ctx[0]
							)
						},
						dirty & /*value*/ 8 && { value: /*value*/ ctx[3] },
						dirty & /*$$restProps*/ 32 && get_spread_object(/*$$restProps*/ ctx[5])
					])
				: {};

				if (dirty & /*$$scope*/ 128) {
					togglegroupprimitive_item_changes.$$scope = { dirty, ctx };
				}

				togglegroupprimitive_item.$set(togglegroupprimitive_item_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(togglegroupprimitive_item.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(togglegroupprimitive_item.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(togglegroupprimitive_item, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$g.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$g($$self, $$props, $$invalidate) {
		const omit_props_names = ["class","variant","size","value"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Toggle_group_item', slots, ['default']);
		let { class: className = undefined } = $$props;
		let { variant = "default" } = $$props;
		let { size = "default" } = $$props;
		let { value } = $$props;
		const ctx = getToggleGroupCtx();

		$$self.$$.on_mount.push(function () {
			if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
				console.warn("<Toggle_group_item> was created without expected prop 'value'");
			}
		});

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
			if ('variant' in $$new_props) $$invalidate(1, variant = $$new_props.variant);
			if ('size' in $$new_props) $$invalidate(2, size = $$new_props.size);
			if ('value' in $$new_props) $$invalidate(3, value = $$new_props.value);
			if ('$$scope' in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			ToggleGroupPrimitive,
			cn,
			getToggleGroupCtx,
			toggleVariants,
			className,
			variant,
			size,
			value,
			ctx
		});

		$$self.$inject_state = $$new_props => {
			if ('className' in $$props) $$invalidate(0, className = $$new_props.className);
			if ('variant' in $$props) $$invalidate(1, variant = $$new_props.variant);
			if ('size' in $$props) $$invalidate(2, size = $$new_props.size);
			if ('value' in $$props) $$invalidate(3, value = $$new_props.value);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [className, variant, size, value, ctx, $$restProps, slots, $$scope];
	}

	class Toggle_group_item extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$g, create_fragment$g, safe_not_equal, { class: 0, variant: 1, size: 2, value: 3 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Toggle_group_item",
				options,
				id: create_fragment$g.name
			});
		}

		get class() {
			throw new Error("<Toggle_group_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Toggle_group_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get variant() {
			throw new Error("<Toggle_group_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set variant(value) {
			throw new Error("<Toggle_group_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get size() {
			throw new Error("<Toggle_group_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set size(value) {
			throw new Error("<Toggle_group_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get value() {
			throw new Error("<Toggle_group_item>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set value(value) {
			throw new Error("<Toggle_group_item>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	function setToggleGroupCtx(props) {
	    setContext("toggleGroup", props);
	}
	function getToggleGroupCtx() {
	    return getContext("toggleGroup");
	}

	var ToggleGroup = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Item: Toggle_group_item,
		Root: Toggle_group,
		ToggleGroup: Toggle_group,
		ToggleGroupItem: Toggle_group_item,
		getToggleGroupCtx: getToggleGroupCtx,
		setToggleGroupCtx: setToggleGroupCtx
	});

	/* src/lib/components/editor/inputs/SelectInput.svelte generated by Svelte v4.2.10 */
	const file$d = "src/lib/components/editor/inputs/SelectInput.svelte";

	function get_each_context$4(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[4] = list[i];
		return child_ctx;
	}

	// (6:0) {#if elementStyle}
	function create_if_block$8(ctx) {
		let current_block_type_index;
		let if_block;
		let if_block_anchor;
		let current;
		const if_block_creators = [create_if_block_1$5, create_else_block$4];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*elementStyle*/ ctx[0].key === "textAlign") return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		const block = {
			c: function create() {
				if_block.c();
				if_block_anchor = empty();
			},
			m: function mount(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if_blocks[current_block_type_index].d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$8.name,
			type: "if",
			source: "(6:0) {#if elementStyle}",
			ctx
		});

		return block;
	}

	// (83:2) {:else}
	function create_else_block$4(ctx) {
		let select;
		let show_if = !/*elementStyle*/ ctx[0].options.includes(/*elementStyle*/ ctx[0].value);
		let if_block_anchor;
		let select_name_value;
		let select_value_value;
		let mounted;
		let dispose;
		let if_block = show_if && create_if_block_2$2(ctx);
		let each_value = ensure_array_like_dev(/*elementStyle*/ ctx[0].options ?? []);
		let each_blocks = [];

		for (let i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
		}

		const block = {
			c: function create() {
				select = element("select");
				if (if_block) if_block.c();
				if_block_anchor = empty();

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				attr_dev(select, "name", select_name_value = /*elementStyle*/ ctx[0].displayName);
				attr_dev(select, "class", "border-none text-xs text-text bg-transparent appearance-none text-end focus:outline-none focus:ring-0 capitalize");
				add_location(select, file$d, 86, 4, 2727);
			},
			m: function mount(target, anchor) {
				insert_dev(target, select, anchor);
				if (if_block) if_block.m(select, null);
				append_dev(select, if_block_anchor);

				for (let i = 0; i < each_blocks.length; i += 1) {
					if (each_blocks[i]) {
						each_blocks[i].m(select, null);
					}
				}

				select_option(select, /*elementStyle*/ ctx[0].value);

				if (!mounted) {
					dispose = listen_dev(select, "input", /*input_handler*/ ctx[3], false, false, false, false);
					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (dirty & /*elementStyle*/ 1) show_if = !/*elementStyle*/ ctx[0].options.includes(/*elementStyle*/ ctx[0].value);

				if (show_if) {
					if (if_block) {
						if_block.p(ctx, dirty);
					} else {
						if_block = create_if_block_2$2(ctx);
						if_block.c();
						if_block.m(select, if_block_anchor);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}

				if (dirty & /*elementStyle*/ 1) {
					each_value = ensure_array_like_dev(/*elementStyle*/ ctx[0].options ?? []);
					let i;

					for (i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context$4(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(child_ctx, dirty);
						} else {
							each_blocks[i] = create_each_block$4(child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(select, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].d(1);
					}

					each_blocks.length = each_value.length;
				}

				if (dirty & /*elementStyle*/ 1 && select_name_value !== (select_name_value = /*elementStyle*/ ctx[0].displayName)) {
					attr_dev(select, "name", select_name_value);
				}

				if (dirty & /*elementStyle*/ 1 && select_value_value !== (select_value_value = /*elementStyle*/ ctx[0].value)) {
					select_option(select, /*elementStyle*/ ctx[0].value);
				}
			},
			i: noop$3,
			o: noop$3,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(select);
				}

				if (if_block) if_block.d();
				destroy_each(each_blocks, detaching);
				mounted = false;
				dispose();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block$4.name,
			type: "else",
			source: "(83:2) {:else}",
			ctx
		});

		return block;
	}

	// (7:2) {#if elementStyle.key === "textAlign"}
	function create_if_block_1$5(ctx) {
		let togglegroup_root;
		let current;

		togglegroup_root = new Toggle_group({
				props: {
					type: "single",
					value: /*elementStyle*/ ctx[0].value,
					onValueChange: /*func*/ ctx[2],
					$$slots: { default: [create_default_slot$5] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(togglegroup_root.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(togglegroup_root, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const togglegroup_root_changes = {};
				if (dirty & /*elementStyle*/ 1) togglegroup_root_changes.value = /*elementStyle*/ ctx[0].value;
				if (dirty & /*updateElementStyle, elementStyle*/ 3) togglegroup_root_changes.onValueChange = /*func*/ ctx[2];

				if (dirty & /*$$scope*/ 128) {
					togglegroup_root_changes.$$scope = { dirty, ctx };
				}

				togglegroup_root.$set(togglegroup_root_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(togglegroup_root.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(togglegroup_root.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(togglegroup_root, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_1$5.name,
			type: "if",
			source: "(7:2) {#if elementStyle.key === \\\"textAlign\\\"}",
			ctx
		});

		return block;
	}

	// (92:6) {#if !elementStyle.options.includes(elementStyle.value)}
	function create_if_block_2$2(ctx) {
		let option_1;
		let t_value = /*elementStyle*/ ctx[0].value + "";
		let t;
		let option_1_value_value;

		const block = {
			c: function create() {
				option_1 = element("option");
				t = text(t_value);
				option_1.__value = option_1_value_value = /*elementStyle*/ ctx[0].value;
				set_input_value(option_1, option_1.__value);
				add_location(option_1, file$d, 95, 8, 3114);
			},
			m: function mount(target, anchor) {
				insert_dev(target, option_1, anchor);
				append_dev(option_1, t);
			},
			p: function update(ctx, dirty) {
				if (dirty & /*elementStyle*/ 1 && t_value !== (t_value = /*elementStyle*/ ctx[0].value + "")) set_data_dev(t, t_value);

				if (dirty & /*elementStyle*/ 1 && option_1_value_value !== (option_1_value_value = /*elementStyle*/ ctx[0].value)) {
					prop_dev(option_1, "__value", option_1_value_value);
					set_input_value(option_1, option_1.__value);
				}
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(option_1);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_2$2.name,
			type: "if",
			source: "(92:6) {#if !elementStyle.options.includes(elementStyle.value)}",
			ctx
		});

		return block;
	}

	// (95:6) {#each elementStyle.options ?? [] as option}
	function create_each_block$4(ctx) {
		let option_1;
		let t_value = /*option*/ ctx[4] + "";
		let t;
		let option_1_value_value;

		const block = {
			c: function create() {
				option_1 = element("option");
				t = text(t_value);
				option_1.__value = option_1_value_value = /*option*/ ctx[4];
				set_input_value(option_1, option_1.__value);
				add_location(option_1, file$d, 98, 8, 3250);
			},
			m: function mount(target, anchor) {
				insert_dev(target, option_1, anchor);
				append_dev(option_1, t);
			},
			p: function update(ctx, dirty) {
				if (dirty & /*elementStyle*/ 1 && t_value !== (t_value = /*option*/ ctx[4] + "")) set_data_dev(t, t_value);

				if (dirty & /*elementStyle*/ 1 && option_1_value_value !== (option_1_value_value = /*option*/ ctx[4])) {
					prop_dev(option_1, "__value", option_1_value_value);
					set_input_value(option_1, option_1.__value);
				}
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(option_1);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_each_block$4.name,
			type: "each",
			source: "(95:6) {#each elementStyle.options ?? [] as option}",
			ctx
		});

		return block;
	}

	// (19:6) <ToggleGroup.Item class="px-1.5" value="start"         >
	function create_default_slot_3$4(ctx) {
		let svg;
		let g;
		let path;
		let defs;
		let clipPath;
		let rect;

		const block = {
			c: function create() {
				svg = svg_element("svg");
				g = svg_element("g");
				path = svg_element("path");
				defs = svg_element("defs");
				clipPath = svg_element("clipPath");
				rect = svg_element("rect");
				attr_dev(path, "d", "M12.5 12.5H2.5V14.1667H12.5V12.5ZM12.5 5.83333H2.5V7.5H12.5V5.83333ZM2.5 10.8333H17.5V9.16667H2.5V10.8333ZM2.5 17.5H17.5V15.8333H2.5V17.5ZM2.5 2.5V4.16667H17.5V2.5H2.5Z");
				attr_dev(path, "fill", "white");
				add_location(path, file$d, 30, 12, 765);
				attr_dev(g, "clip-path", "url(#clip0_134_5601)");
				add_location(g, file$d, 29, 10, 716);
				attr_dev(rect, "width", "20");
				attr_dev(rect, "height", "20");
				attr_dev(rect, "fill", "white");
				add_location(rect, file$d, 37, 14, 1089);
				attr_dev(clipPath, "id", "clip0_134_5601");
				add_location(clipPath, file$d, 36, 12, 1044);
				add_location(defs, file$d, 35, 10, 1025);
				attr_dev(svg, "width", "20");
				attr_dev(svg, "height", "20");
				attr_dev(svg, "viewBox", "0 0 20 20");
				attr_dev(svg, "fill", "none");
				attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
				add_location(svg, file$d, 22, 9, 551);
			},
			m: function mount(target, anchor) {
				insert_dev(target, svg, anchor);
				append_dev(svg, g);
				append_dev(g, path);
				append_dev(svg, defs);
				append_dev(defs, clipPath);
				append_dev(clipPath, rect);
			},
			p: noop$3,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(svg);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_3$4.name,
			type: "slot",
			source: "(19:6) <ToggleGroup.Item class=\\\"px-1.5\\\" value=\\\"start\\\"         >",
			ctx
		});

		return block;
	}

	// (40:6) <ToggleGroup.Item value="center" class="px-1.5"         >
	function create_default_slot_2$4(ctx) {
		let svg;
		let g;
		let path;
		let defs;
		let clipPath;
		let rect;

		const block = {
			c: function create() {
				svg = svg_element("svg");
				g = svg_element("g");
				path = svg_element("path");
				defs = svg_element("defs");
				clipPath = svg_element("clipPath");
				rect = svg_element("rect");
				attr_dev(path, "d", "M5.83333 12.5V14.1667H14.1667V12.5H5.83333ZM2.5 17.5H17.5V15.8333H2.5V17.5ZM2.5 10.8333H17.5V9.16667H2.5V10.8333ZM5.83333 5.83333V7.5H14.1667V5.83333H5.83333ZM2.5 2.5V4.16667H17.5V2.5H2.5Z");
				attr_dev(path, "fill", "white");
				add_location(path, file$d, 51, 12, 1494);
				attr_dev(g, "clip-path", "url(#clip0_134_5604)");
				add_location(g, file$d, 50, 10, 1445);
				attr_dev(rect, "width", "20");
				attr_dev(rect, "height", "20");
				attr_dev(rect, "fill", "white");
				add_location(rect, file$d, 58, 14, 1838);
				attr_dev(clipPath, "id", "clip0_134_5604");
				add_location(clipPath, file$d, 57, 12, 1793);
				add_location(defs, file$d, 56, 10, 1774);
				attr_dev(svg, "width", "20");
				attr_dev(svg, "height", "20");
				attr_dev(svg, "viewBox", "0 0 20 20");
				attr_dev(svg, "fill", "none");
				attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
				add_location(svg, file$d, 43, 9, 1280);
			},
			m: function mount(target, anchor) {
				insert_dev(target, svg, anchor);
				append_dev(svg, g);
				append_dev(g, path);
				append_dev(svg, defs);
				append_dev(defs, clipPath);
				append_dev(clipPath, rect);
			},
			p: noop$3,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(svg);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_2$4.name,
			type: "slot",
			source: "(40:6) <ToggleGroup.Item value=\\\"center\\\" class=\\\"px-1.5\\\"         >",
			ctx
		});

		return block;
	}

	// (61:6) <ToggleGroup.Item value="end" class="px-1.5"         >
	function create_default_slot_1$4(ctx) {
		let svg;
		let g;
		let path;
		let defs;
		let clipPath;
		let rect;

		const block = {
			c: function create() {
				svg = svg_element("svg");
				g = svg_element("g");
				path = svg_element("path");
				defs = svg_element("defs");
				clipPath = svg_element("clipPath");
				rect = svg_element("rect");
				attr_dev(path, "d", "M2.5 17.5H17.5V15.8333H2.5V17.5ZM7.5 14.1667H17.5V12.5H7.5V14.1667ZM2.5 10.8333H17.5V9.16667H2.5V10.8333ZM7.5 7.5H17.5V5.83333H7.5V7.5ZM2.5 2.5V4.16667H17.5V2.5H2.5Z");
				attr_dev(path, "fill", "white");
				add_location(path, file$d, 72, 12, 2240);
				attr_dev(g, "clip-path", "url(#clip0_134_5607)");
				add_location(g, file$d, 71, 10, 2191);
				attr_dev(rect, "width", "20");
				attr_dev(rect, "height", "20");
				attr_dev(rect, "fill", "white");
				add_location(rect, file$d, 79, 14, 2561);
				attr_dev(clipPath, "id", "clip0_134_5607");
				add_location(clipPath, file$d, 78, 12, 2516);
				add_location(defs, file$d, 77, 10, 2497);
				attr_dev(svg, "width", "20");
				attr_dev(svg, "height", "20");
				attr_dev(svg, "viewBox", "0 0 20 20");
				attr_dev(svg, "fill", "none");
				attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
				add_location(svg, file$d, 64, 9, 2026);
			},
			m: function mount(target, anchor) {
				insert_dev(target, svg, anchor);
				append_dev(svg, g);
				append_dev(g, path);
				append_dev(svg, defs);
				append_dev(defs, clipPath);
				append_dev(clipPath, rect);
			},
			p: noop$3,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(svg);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_1$4.name,
			type: "slot",
			source: "(61:6) <ToggleGroup.Item value=\\\"end\\\" class=\\\"px-1.5\\\"         >",
			ctx
		});

		return block;
	}

	// (8:4) <ToggleGroup.Root       type="single"       value={elementStyle.value}       onValueChange={(val) => {         if (!val) {           updateElementStyle(elementStyle.key, "inherit");           return;         }         updateElementStyle(elementStyle.key, val);       }}     >
	function create_default_slot$5(ctx) {
		let togglegroup_item0;
		let t0;
		let togglegroup_item1;
		let t1;
		let togglegroup_item2;
		let current;

		togglegroup_item0 = new Toggle_group_item({
				props: {
					class: "px-1.5",
					value: "start",
					$$slots: { default: [create_default_slot_3$4] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		togglegroup_item1 = new Toggle_group_item({
				props: {
					value: "center",
					class: "px-1.5",
					$$slots: { default: [create_default_slot_2$4] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		togglegroup_item2 = new Toggle_group_item({
				props: {
					value: "end",
					class: "px-1.5",
					$$slots: { default: [create_default_slot_1$4] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(togglegroup_item0.$$.fragment);
				t0 = space();
				create_component(togglegroup_item1.$$.fragment);
				t1 = space();
				create_component(togglegroup_item2.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(togglegroup_item0, target, anchor);
				insert_dev(target, t0, anchor);
				mount_component(togglegroup_item1, target, anchor);
				insert_dev(target, t1, anchor);
				mount_component(togglegroup_item2, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const togglegroup_item0_changes = {};

				if (dirty & /*$$scope*/ 128) {
					togglegroup_item0_changes.$$scope = { dirty, ctx };
				}

				togglegroup_item0.$set(togglegroup_item0_changes);
				const togglegroup_item1_changes = {};

				if (dirty & /*$$scope*/ 128) {
					togglegroup_item1_changes.$$scope = { dirty, ctx };
				}

				togglegroup_item1.$set(togglegroup_item1_changes);
				const togglegroup_item2_changes = {};

				if (dirty & /*$$scope*/ 128) {
					togglegroup_item2_changes.$$scope = { dirty, ctx };
				}

				togglegroup_item2.$set(togglegroup_item2_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(togglegroup_item0.$$.fragment, local);
				transition_in(togglegroup_item1.$$.fragment, local);
				transition_in(togglegroup_item2.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(togglegroup_item0.$$.fragment, local);
				transition_out(togglegroup_item1.$$.fragment, local);
				transition_out(togglegroup_item2.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t0);
					detach_dev(t1);
				}

				destroy_component(togglegroup_item0, detaching);
				destroy_component(togglegroup_item1, detaching);
				destroy_component(togglegroup_item2, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$5.name,
			type: "slot",
			source: "(8:4) <ToggleGroup.Root       type=\\\"single\\\"       value={elementStyle.value}       onValueChange={(val) => {         if (!val) {           updateElementStyle(elementStyle.key, \\\"inherit\\\");           return;         }         updateElementStyle(elementStyle.key, val);       }}     >",
			ctx
		});

		return block;
	}

	function create_fragment$f(ctx) {
		let if_block_anchor;
		let current;
		let if_block = /*elementStyle*/ ctx[0] && create_if_block$8(ctx);

		const block = {
			c: function create() {
				if (if_block) if_block.c();
				if_block_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (if_block) if_block.m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (/*elementStyle*/ ctx[0]) {
					if (if_block) {
						if_block.p(ctx, dirty);

						if (dirty & /*elementStyle*/ 1) {
							transition_in(if_block, 1);
						}
					} else {
						if_block = create_if_block$8(ctx);
						if_block.c();
						transition_in(if_block, 1);
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					group_outros();

					transition_out(if_block, 1, 1, () => {
						if_block = null;
					});

					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if (if_block) if_block.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$f.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$f($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('SelectInput', slots, []);
		let { elementStyle } = $$props;
		let { updateElementStyle } = $$props;

		$$self.$$.on_mount.push(function () {
			if (elementStyle === undefined && !('elementStyle' in $$props || $$self.$$.bound[$$self.$$.props['elementStyle']])) {
				console.warn("<SelectInput> was created without expected prop 'elementStyle'");
			}

			if (updateElementStyle === undefined && !('updateElementStyle' in $$props || $$self.$$.bound[$$self.$$.props['updateElementStyle']])) {
				console.warn("<SelectInput> was created without expected prop 'updateElementStyle'");
			}
		});

		const writable_props = ['elementStyle', 'updateElementStyle'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SelectInput> was created with unknown prop '${key}'`);
		});

		const func = val => {
			if (!val) {
				updateElementStyle(elementStyle.key, "inherit");
				return;
			}

			updateElementStyle(elementStyle.key, val);
		};

		const input_handler = event => {
			updateElementStyle(elementStyle.key, event.target.value);
		};

		$$self.$$set = $$props => {
			if ('elementStyle' in $$props) $$invalidate(0, elementStyle = $$props.elementStyle);
			if ('updateElementStyle' in $$props) $$invalidate(1, updateElementStyle = $$props.updateElementStyle);
		};

		$$self.$capture_state = () => ({
			ToggleGroup,
			elementStyle,
			updateElementStyle
		});

		$$self.$inject_state = $$props => {
			if ('elementStyle' in $$props) $$invalidate(0, elementStyle = $$props.elementStyle);
			if ('updateElementStyle' in $$props) $$invalidate(1, updateElementStyle = $$props.updateElementStyle);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [elementStyle, updateElementStyle, func, input_handler];
	}

	class SelectInput extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$f, create_fragment$f, safe_not_equal, { elementStyle: 0, updateElementStyle: 1 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "SelectInput",
				options,
				id: create_fragment$f.name
			});
		}

		get elementStyle() {
			throw new Error("<SelectInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set elementStyle(value) {
			throw new Error("<SelectInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get updateElementStyle() {
			throw new Error("<SelectInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set updateElementStyle(value) {
			throw new Error("<SelectInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	// A is m x n. B is n x p. product is m x p.
	function multiplyMatrices (A, B) {
		let m = A.length;

		if (!Array.isArray(A[0])) {
			// A is vector, convert to [[a, b, c, ...]]
			A = [A];
		}

		if (!Array.isArray(B[0])) {
			// B is vector, convert to [[a], [b], [c], ...]]
			B = B.map(x => [x]);
		}

		let p = B[0].length;
		let B_cols = B[0].map((_, i) => B.map(x => x[i])); // transpose B
		let product = A.map(row => B_cols.map(col => {
			let ret = 0;

			if (!Array.isArray(row)) {
				for (let c of col) {
					ret += row * c;
				}

				return ret;
			}

			for (let i=0; i < row.length; i++) {
				ret += row[i] * (col[i] || 0);
			}

			return ret;
		}));

		if (m === 1) {
			product = product[0]; // Avoid [[a, b, c, ...]]
		}

		if (p === 1) {
			return product.map(x => x[0]); // Avoid [[a], [b], [c], ...]]
		}

		return product;
	}

	/**
	 * Various utility functions
	 */


	/**
	 * Check if a value is a string (including a String object)
	 * @param {*} str - Value to check
	 * @returns {boolean}
	 */
	function isString (str) {
		return type(str) === "string";
	}

	/**
	 * Determine the internal JavaScript [[Class]] of an object.
	 * @param {*} o - Value to check
	 * @returns {string}
	 */
	function type (o) {
		let str = Object.prototype.toString.call(o);

		return (str.match(/^\[object\s+(.*?)\]$/)[1] || "").toLowerCase();
	}

	/**
	 * Round a number to a certain number of significant digits
	 * @param {number} n - The number to round
	 * @param {number} precision - Number of significant digits
	 */
	function toPrecision (n, precision) {
		n = +n;
		precision = +precision;
		let integerLength = (Math.floor(n) + "").length;

		if (precision > integerLength) {
			return +n.toFixed(precision - integerLength);
		}
		else {
			let p10 = 10 ** (integerLength - precision);
			return Math.round(n / p10) * p10;
		}
	}

	/**
	* Parse a CSS function, regardless of its name and arguments
	* @param String str String to parse
	* @return {{name, args, rawArgs}}
	*/
	function parseFunction (str) {
		if (!str) {
			return;
		}

		str = str.trim();

		const isFunctionRegex = /^([a-z]+)\((.+?)\)$/i;
		const isNumberRegex = /^-?[\d.]+$/;
		let parts = str.match(isFunctionRegex);

		if (parts) {
			// It is a function, parse args
			let args = [];
			parts[2].replace(/\/?\s*([-\w.]+(?:%|deg)?)/g, ($0, arg) => {
				if (/%$/.test(arg)) {
					// Convert percentages to 0-1 numbers
					arg = new Number(arg.slice(0, -1) / 100);
					arg.type = "<percentage>";
				}
				else if (/deg$/.test(arg)) {
					// Drop deg from degrees and convert to number
					// TODO handle other units too
					arg = new Number(+arg.slice(0, -3));
					arg.type = "<angle>";
					arg.unit = "deg";
				}
				else if (isNumberRegex.test(arg)) {
					// Convert numerical args to numbers
					arg = new Number(arg);
					arg.type = "<number>";
				}

				if ($0.startsWith("/")) {
					// It's alpha
					arg = arg instanceof Number? arg : new Number(arg);
					arg.alpha = true;
				}

				args.push(arg);
			});

			return {
				name: parts[1].toLowerCase(),
				rawName: parts[1],
				rawArgs: parts[2],
				// An argument could be (as of css-color-4):
				// a number, percentage, degrees (hue), ident (in color())
				args
			};
		}
	}

	function last (arr) {
		return arr[arr.length - 1];
	}

	function interpolate (start, end, p) {
		if (isNaN(start)) {
			return end;
		}

		if (isNaN(end)) {
			return start;
		}

		return start + (end - start) * p;
	}

	function interpolateInv (start, end, value) {
		return (value - start) / (end - start);
	}

	function mapRange (from, to, value) {
		return interpolate(to[0], to[1], interpolateInv(from[0], from[1], value));
	}

	function parseCoordGrammar (coordGrammars) {
		return coordGrammars.map(coordGrammar => {
			return coordGrammar.split("|").map(type => {
				type = type.trim();
				let range = type.match(/^(<[a-z]+>)\[(-?[.\d]+),\s*(-?[.\d]+)\]?$/);

				if (range) {
					let ret = new String(range[1]);
					ret.range = [+range[2], +range[3]];
					return ret;
				}

				return type;
			});
		});
	}

	var util = /*#__PURE__*/Object.freeze({
		__proto__: null,
		interpolate: interpolate,
		interpolateInv: interpolateInv,
		isString: isString,
		last: last,
		mapRange: mapRange,
		multiplyMatrices: multiplyMatrices,
		parseCoordGrammar: parseCoordGrammar,
		parseFunction: parseFunction,
		toPrecision: toPrecision,
		type: type
	});

	/**
	 * A class for adding deep extensibility to any piece of JS code
	 */
	class Hooks {
		add (name, callback, first) {
			if (typeof arguments[0] != "string") {
				// Multiple hooks
				for (var name in arguments[0]) {
					this.add(name, arguments[0][name], arguments[1]);
				}

				return;
			}

			(Array.isArray(name)? name : [name]).forEach(function (name) {
				this[name] = this[name] || [];

				if (callback) {
					this[name][first? "unshift" : "push"](callback);
				}
			}, this);
		}

		run (name, env) {
			this[name] = this[name] || [];
			this[name].forEach(function (callback) {
				callback.call(env && env.context? env.context : env, env);
			});
		}
	}
	/**
	 * The instance of {@link Hooks} used throughout Color.js
	 */
	const hooks = new Hooks();

	// Global defaults one may want to configure

	var defaults = {
		gamut_mapping: "lch.c",
		precision: 5,
		deltaE: "76", // Default deltaE method
	};

	const WHITES = {
		// for compatibility, the four-digit chromaticity-derived ones everyone else uses
		D50: [0.3457 / 0.3585, 1.00000, (1.0 - 0.3457 - 0.3585) / 0.3585],
		D65: [0.3127 / 0.3290, 1.00000, (1.0 - 0.3127 - 0.3290) / 0.3290],
	};

	function getWhite (name) {
		if (Array.isArray(name)) {
			return name;
		}

		return WHITES[name];
	}

	// Adapt XYZ from white point W1 to W2
	function adapt$1 (W1, W2, XYZ, options = {}) {
		W1 = getWhite(W1);
		W2 = getWhite(W2);

		if (!W1 || !W2) {
			throw new TypeError(`Missing white point to convert ${!W1? "from" : ""}${!W1&&!W2? "/" : ""}${!W2? "to" : ""}`);
		}

		if (W1 === W2) {
			// Same whitepoints, no conversion needed
			return XYZ;
		}

		let env = {W1, W2, XYZ, options};

		hooks.run("chromatic-adaptation-start", env);

		if (!env.M) {
			if (env.W1 === WHITES.D65 && env.W2 === WHITES.D50) {
				env.M = [
					[  1.0479298208405488,    0.022946793341019088,  -0.05019222954313557 ],
					[  0.029627815688159344,  0.990434484573249,     -0.01707382502938514 ],
					[ -0.009243058152591178,  0.015055144896577895,   0.7518742899580008  ]
				];
			}
			else if (env.W1 === WHITES.D50 && env.W2 === WHITES.D65) {

				env.M = [
					[  0.9554734527042182,   -0.023098536874261423,  0.0632593086610217   ],
					[ -0.028369706963208136,  1.0099954580058226,    0.021041398966943008 ],
					[  0.012314001688319899, -0.020507696433477912,  1.3303659366080753   ]
				];
			}
		}

		hooks.run("chromatic-adaptation-end", env);

		if (env.M) {
			return multiplyMatrices(env.M, env.XYZ);
		}
		else {
			throw new TypeError("Only Bradford CAT with white points D50 and D65 supported for now.");
		}
	}

	const ε$4 = .000075;

	/**
	 * Class to represent a color space
	 */
	class ColorSpace {
		constructor (options) {
			this.id = options.id;
			this.name = options.name;
			this.base = options.base ? ColorSpace.get(options.base) : null;
			this.aliases = options.aliases;

			if (this.base) {
				this.fromBase = options.fromBase;
				this.toBase = options.toBase;
			}

			// Coordinate metadata

			let coords = options.coords ?? this.base.coords;

			for (let name in coords) {
				if (!("name" in coords[name])) {
					coords[name].name = name;
				}
			}
			this.coords = coords;

			// White point

			let white = options.white ?? this.base.white ?? "D65";
			this.white = getWhite(white);

			// Sort out formats

			this.formats = options.formats ?? {};

			for (let name in this.formats) {
				let format = this.formats[name];
				format.type ||= "function";
				format.name ||= name;
			}

			if (options.cssId && !this.formats.functions?.color) {
				this.formats.color = { id: options.cssId };
				Object.defineProperty(this, "cssId", {value: options.cssId});
			}
			else if (this.formats?.color && !this.formats?.color.id) {
				this.formats.color.id = this.id;
			}

			// Other stuff
			this.referred = options.referred;

			// Compute ancestors and store them, since they will never change
			Object.defineProperty(this, "path", {
				value: getPath(this).reverse(),
				writable: false,
				enumerable: true,
				configurable: true,
			});

			hooks.run("colorspace-init-end", this);
		}

		inGamut (coords, {epsilon = ε$4} = {}) {
			if (this.isPolar) {
				// Do not check gamut through polar coordinates
				coords = this.toBase(coords);

				return this.base.inGamut(coords, {epsilon});
			}

			let coordMeta = Object.values(this.coords);

			return coords.every((c, i) => {
				let meta = coordMeta[i];

				if (meta.type !== "angle" && meta.range) {
					if (Number.isNaN(c)) {
						// NaN is always in gamut
						return true;
					}

					let [min, max] = meta.range;
					return (min === undefined || c >= min - epsilon)
					    && (max === undefined || c <= max + epsilon);
				}

				return true;
			});
		}

		get cssId () {
			return this.formats.functions?.color?.id || this.id;
		}

		get isPolar () {
			for (let id in this.coords) {
				if (this.coords[id].type === "angle") {
					return true;
				}
			}

			return false;
		}

		getFormat (format) {
			if (typeof format === "object") {
				format = processFormat(format, this);
				return format;
			}

			let ret;
			if (format === "default") {
				// Get first format
				ret = Object.values(this.formats)[0];
			}
			else {
				ret = this.formats[format];
			}

			if (ret) {
				ret = processFormat(ret, this);
				return ret;
			}

			return null;
		}

		// We cannot rely on simple === because then ColorSpace objects cannot be proxied
		equals (space) {
			if (!space) {
				return false;
			}

			return this === space || this.id === space.id;
		}

		to (space, coords) {
			if (arguments.length === 1) {
				[space, coords] = [space.space, space.coords];
			}

			space = ColorSpace.get(space);

			if (this.equals(space)) {
				// Same space, no change needed
				return coords;
			}

			// Convert NaN to 0, which seems to be valid in every coordinate of every color space
			coords = coords.map(c => Number.isNaN(c)? 0 : c);

			// Find connection space = lowest common ancestor in the base tree
			let myPath = this.path;
			let otherPath = space.path;

			let connectionSpace, connectionSpaceIndex;

			for (let i=0; i < myPath.length; i++) {
				if (myPath[i].equals(otherPath[i])) {
					connectionSpace = myPath[i];
					connectionSpaceIndex = i;
				}
				else {
					break;
				}
			}

			if (!connectionSpace) {
				// This should never happen
				throw new Error(`Cannot convert between color spaces ${this} and ${space}: no connection space was found`);
			}

			// Go up from current space to connection space
			for (let i = myPath.length - 1; i > connectionSpaceIndex; i--) {
				coords = myPath[i].toBase(coords);
			}

			// Go down from connection space to target space
			for (let i = connectionSpaceIndex + 1; i < otherPath.length; i++) {
				coords = otherPath[i].fromBase(coords);
			}

			return coords;
		}

		from (space, coords) {
			if (arguments.length === 1) {
				[space, coords] = [space.space, space.coords];
			}

			space = ColorSpace.get(space);

			return space.to(this, coords);
		}

		toString () {
			return `${this.name} (${this.id})`;
		}

		getMinCoords () {
			let ret = [];

			for (let id in this.coords) {
				let meta = this.coords[id];
				let range = meta.range || meta.refRange;
				ret.push(range?.min ?? 0);
			}

			return ret;
		}

		static registry = {};

		// Returns array of unique color spaces
		static get all () {
			return [...new Set(Object.values(ColorSpace.registry))];
		}

		static register (id, space) {
			if (arguments.length === 1) {
				space = arguments[0];
				id = space.id;
			}

			space = this.get(space);

			if (this.registry[id] && this.registry[id] !== space) {
				throw new Error(`Duplicate color space registration: '${id}'`);
			}
			this.registry[id] = space;

			// Register aliases when called without an explicit ID.
			if (arguments.length === 1 && space.aliases) {
				for (let alias of space.aliases) {
					this.register(alias, space);
				}
			}

			return space;
		}

		/**
		 * Lookup ColorSpace object by name
		 * @param {ColorSpace | string} name
		 */
		static get (space, ...alternatives) {
			if (!space || space instanceof ColorSpace) {
				return space;
			}

			let argType = type(space);

			if (argType === "string") {
				// It's a color space id
				let ret = ColorSpace.registry[space.toLowerCase()];

				if (!ret) {
					throw new TypeError(`No color space found with id = "${space}"`);
				}

				return ret;
			}

			if (alternatives.length) {
				return ColorSpace.get(...alternatives);
			}

			throw new TypeError(`${space} is not a valid color space`);
		}

		/**
		 * Get metadata about a coordinate of a color space
		 *
		 * @static
		 * @param {Array | string} ref
		 * @param {ColorSpace | string} [workingSpace]
		 * @return {Object}
		 */
		static resolveCoord (ref, workingSpace) {
			let coordType = type(ref);
			let space, coord;

			if (coordType === "string") {
				if (ref.includes(".")) {
					// Absolute coordinate
					[space, coord] = ref.split(".");
				}
				else {
					// Relative coordinate
					[space, coord] = [, ref];
				}
			}
			else if (Array.isArray(ref)) {
				[space, coord] = ref;
			}
			else {
				// Object
				space = ref.space;
				coord = ref.coordId;
			}

			space = ColorSpace.get(space);

			if (!space) {
				space = workingSpace;
			}

			if (!space) {
				throw new TypeError(`Cannot resolve coordinate reference ${ref}: No color space specified and relative references are not allowed here`);
			}

			coordType = type(coord);

			if (coordType === "number" || coordType === "string" && coord >= 0) {
				// Resolve numerical coord
				let meta = Object.entries(space.coords)[coord];

				if (meta) {
					return {space, id: meta[0], index: coord, ...meta[1]};
				}
			}

			space = ColorSpace.get(space);

			let normalizedCoord = coord.toLowerCase();

			let i = 0;
			for (let id in space.coords) {
				let meta = space.coords[id];

				if (id.toLowerCase() === normalizedCoord || meta.name?.toLowerCase() === normalizedCoord) {
					return {space, id, index: i, ...meta};
				}

				i++;
			}

			throw new TypeError(`No "${coord}" coordinate found in ${space.name}. Its coordinates are: ${Object.keys(space.coords).join(", ")}`);
		}

		static DEFAULT_FORMAT = {
			type: "functions",
			name: "color",
		};
	}

	function getPath (space) {
		let ret = [space];

		for (let s = space; s = s.base;) {
			ret.push(s);
		}

		return ret;
	}

	function processFormat (format, {coords} = {}) {
		if (format.coords && !format.coordGrammar) {
			format.type ||= "function";
			format.name ||= "color";

			// Format has not been processed
			format.coordGrammar = parseCoordGrammar(format.coords);

			let coordFormats = Object.entries(coords).map(([id, coordMeta], i) => {
				// Preferred format for each coord is the first one
				let outputType = format.coordGrammar[i][0];

				let fromRange = coordMeta.range || coordMeta.refRange;
				let toRange = outputType.range, suffix = "";

				// Non-strict equals intentional since outputType could be a string object
				if (outputType == "<percentage>") {
					toRange = [0, 100];
					suffix = "%";
				}
				else if (outputType == "<angle>") {
					suffix = "deg";
				}

				return  {fromRange, toRange, suffix};
			});

			format.serializeCoords = (coords, precision) => {
				return coords.map((c, i) => {
					let {fromRange, toRange, suffix} = coordFormats[i];

					if (fromRange && toRange) {
						c = mapRange(fromRange, toRange, c);
					}

					c = toPrecision(c, precision);

					if (suffix) {
						c += suffix;
					}

					return c;
				});
			};
		}

		return format;
	}

	var XYZ_D65 = new ColorSpace({
		id: "xyz-d65",
		name: "XYZ D65",
		coords: {
			x: {name: "X"},
			y: {name: "Y"},
			z: {name: "Z"},
		},
		white: "D65",
		formats: {
			color: {
				ids: ["xyz-d65", "xyz"],
			}
		},
		aliases: ["xyz"],
	});

	/**
	 * Convenience class for RGB color spaces
	 * @extends {ColorSpace}
	 */
	class RGBColorSpace extends ColorSpace {
		/**
		 * Creates a new RGB ColorSpace.
		 * If coords are not specified, they will use the default RGB coords.
		 * Instead of `fromBase()` and `toBase()` functions,
		 * you can specify to/from XYZ matrices and have `toBase()` and `fromBase()` automatically generated.
		 * @param {*} options - Same options as {@link ColorSpace} plus:
		 * @param {number[][]} options.toXYZ_M - Matrix to convert to XYZ
		 * @param {number[][]} options.fromXYZ_M - Matrix to convert from XYZ
		 */
		constructor (options) {
			if (!options.coords) {
				options.coords = {
					r: {
						range: [0, 1],
						name: "Red"
					},
					g: {
						range: [0, 1],
						name: "Green"
					},
					b: {
						range: [0, 1],
						name: "Blue"
					}
				};
			}

			if (!options.base) {
				options.base = XYZ_D65;
			}

			if (options.toXYZ_M && options.fromXYZ_M) {
				options.toBase ??= rgb => {
					let xyz = multiplyMatrices(options.toXYZ_M, rgb);

					if (this.white !== this.base.white) {
						// Perform chromatic adaptation
						xyz = adapt$1(this.white, this.base.white, xyz);
					}

					return xyz;
				};

				options.fromBase ??= xyz => {
					xyz = adapt$1(this.base.white, this.white, xyz);
					return multiplyMatrices(options.fromXYZ_M, xyz);
				};
			}

			options.referred ??= "display";

			super(options);
		}
	}

	/**
	 * Convert a CSS Color string to a color object
	 * @param {string} str
	 * @param {object} [options]
	 * @param {object} [options.meta] - Object for additional information about the parsing
	 * @returns { Color }
	 */
	function parse$1 (str, {meta} = {}) {
		let env = {"str": String(str)?.trim()};
		hooks.run("parse-start", env);

		if (env.color) {
			return env.color;
		}

		env.parsed = parseFunction(env.str);

		if (env.parsed) {
			// Is a functional syntax
			let name = env.parsed.name;

			if (name === "color") {
				// color() function
				let id = env.parsed.args.shift();
				let alpha = env.parsed.rawArgs.indexOf("/") > 0? env.parsed.args.pop() : 1;

				for (let space of ColorSpace.all) {
					let colorSpec = space.getFormat("color");

					if (colorSpec) {
						if (id === colorSpec.id || colorSpec.ids?.includes(id)) {
							// From https://drafts.csswg.org/css-color-4/#color-function
							// If more <number>s or <percentage>s are provided than parameters that the colorspace takes, the excess <number>s at the end are ignored.
							// If less <number>s or <percentage>s are provided than parameters that the colorspace takes, the missing parameters default to 0. (This is particularly convenient for multichannel printers where the additional inks are spot colors or varnishes that most colors on the page won’t use.)
							const coords = Object.keys(space.coords).map((_, i) => env.parsed.args[i] || 0);

							if (meta) {
								meta.formatId = "color";
							}

							return {spaceId: space.id, coords, alpha};
						}
					}
				}

				// Not found
				let didYouMean = "";
				if (id in ColorSpace.registry) {
					// Used color space id instead of color() id, these are often different
					let cssId = ColorSpace.registry[id].formats?.functions?.color?.id;

					if (cssId) {
						didYouMean = `Did you mean color(${cssId})?`;
					}
				}

				throw new TypeError(`Cannot parse color(${id}). ` + (didYouMean || "Missing a plugin?"));
			}
			else {
				for (let space of ColorSpace.all) {
					// color space specific function
					let format = space.getFormat(name);
					if (format && format.type === "function") {
						let alpha = 1;

						if (format.lastAlpha || last(env.parsed.args).alpha) {
							alpha = env.parsed.args.pop();
						}

						let coords = env.parsed.args;

						let types;

						if (format.coordGrammar) {
							types = Object.entries(space.coords).map(([id, coordMeta], i) => {
								let coordGrammar = format.coordGrammar[i];
								let providedType = coords[i]?.type;

								// Find grammar alternative that matches the provided type
								// Non-strict equals is intentional because we are comparing w/ string objects
								let type = coordGrammar.find(c => c == providedType);

								// Check that each coord conforms to its grammar
								if (!type) {
									// Type does not exist in the grammar, throw
									let coordName = coordMeta.name || id;
									throw new TypeError(`${providedType} not allowed for ${coordName} in ${name}()`);
								}

								let fromRange = type.range;

								if (providedType === "<percentage>") {
									fromRange ||= [0, 1];
								}

								let toRange = coordMeta.range || coordMeta.refRange;

								if (fromRange && toRange) {
									coords[i] = mapRange(fromRange, toRange, coords[i]);
								}

								return type;
							});
						}

						if (meta) {
							Object.assign(meta, {formatId: format.name, types});
						}

						return {
							spaceId: space.id,
							coords, alpha
						};
					}
				}
			}
		}
		else {
			// Custom, colorspace-specific format
			for (let space of ColorSpace.all) {
				for (let formatId in space.formats) {
					let format = space.formats[formatId];

					if (format.type !== "custom") {
						continue;
					}

					if (format.test && !format.test(env.str)) {
						continue;
					}

					let color = format.parse(env.str);

					if (color) {
						color.alpha ??= 1;

						if (meta) {
							meta.formatId = formatId;
						}

						return color;
					}
				}
			}
		}


		// If we're here, we couldn't parse
		throw new TypeError(`Could not parse ${str} as a color. Missing a plugin?`);
	}

	/**
	 * Resolves a color reference (object or string) to a plain color object
	 * @param {Color | {space, coords, alpha} | string} color
	 * @returns {{space, coords, alpha}}
	 */
	function getColor (color) {
		if (!color) {
			throw new TypeError("Empty color reference");
		}

		if (isString(color)) {
			color = parse$1(color);
		}

		// Object fixup
		let space = color.space || color.spaceId;

		if (!(space instanceof ColorSpace)) {
			// Convert string id to color space object
			color.space = ColorSpace.get(space);
		}

		if (color.alpha === undefined) {
			color.alpha = 1;
		}

		return color;
	}

	/**
	 * Get the coordinates of a color in another color space
	 *
	 * @param {string | ColorSpace} space
	 * @returns {number[]}
	 */
	function getAll (color, space) {
		space = ColorSpace.get(space);
		return space.from(color);
	}

	function get (color, prop) {
		let {space, index} = ColorSpace.resolveCoord(prop, color.space);
		let coords = getAll(color, space);
		return coords[index];
	}

	function setAll (color, space, coords) {
		space = ColorSpace.get(space);
		color.coords = space.to(color.space, coords);
		return color;
	}

	// Set properties and return current instance
	function set (color, prop, value) {
		color = getColor(color);

		if (arguments.length === 2 && type(arguments[1]) === "object") {
			// Argument is an object literal
			let object = arguments[1];
			for (let p in object) {
				set(color, p, object[p]);
			}
		}
		else {
			if (typeof value === "function") {
				value = value(get(color, prop));
			}

			let {space, index} = ColorSpace.resolveCoord(prop, color.space);
			let coords = getAll(color, space);
			coords[index] = value;
			setAll(color, space, coords);
		}

		return color;
	}

	var XYZ_D50 = new ColorSpace({
		id: "xyz-d50",
		name: "XYZ D50",
		white: "D50",
		base: XYZ_D65,
		fromBase: coords => adapt$1(XYZ_D65.white, "D50", coords),
		toBase: coords => adapt$1("D50", XYZ_D65.white, coords),
		formats: {
			color: {}
		},
	});

	// κ * ε  = 2^3 = 8
	const ε$3 = 216/24389;  // 6^3/29^3 == (24/116)^3
	const ε3$1 = 24/116;
	const κ$1 = 24389/27;   // 29^3/3^3

	let white$1 = WHITES.D50;

	var lab = new ColorSpace({
		id: "lab",
		name: "Lab",
		coords: {
			l: {
				refRange: [0, 100],
				name: "L"
			},
			a: {
				refRange: [-125, 125]
			},
			b: {
				refRange: [-125, 125]
			}
		},

		// Assuming XYZ is relative to D50, convert to CIE Lab
		// from CIE standard, which now defines these as a rational fraction
		white: white$1,

		base: XYZ_D50,
		// Convert D50-adapted XYX to Lab
		//  CIE 15.3:2004 section 8.2.1.1
		fromBase (XYZ) {
			// compute xyz, which is XYZ scaled relative to reference white
			let xyz = XYZ.map((value, i) => value / white$1[i]);

			// now compute f
			let f = xyz.map(value => value > ε$3 ? Math.cbrt(value) : (κ$1 * value + 16)/116);

			return [
				(116 * f[1]) - 16, 	 // L
				500 * (f[0] - f[1]), // a
				200 * (f[1] - f[2])  // b
			];
		},
		// Convert Lab to D50-adapted XYZ
		// Same result as CIE 15.3:2004 Appendix D although the derivation is different
		// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
		toBase (Lab) {
			// compute f, starting with the luminance-related term
			let f = [];
			f[1] = (Lab[0] + 16)/116;
			f[0] = Lab[1]/500 + f[1];
			f[2] = f[1] - Lab[2]/200;

			// compute xyz
			let xyz = [
				f[0]   > ε3$1  ?  Math.pow(f[0], 3)            : (116*f[0]-16)/κ$1,
				Lab[0] > 8   ?  Math.pow((Lab[0]+16)/116, 3) : Lab[0]/κ$1,
				f[2]   > ε3$1  ?  Math.pow(f[2], 3)            : (116*f[2]-16)/κ$1
			];

			// Compute XYZ by scaling xyz by reference white
			return xyz.map((value, i) => value * white$1[i]);
		},

		formats: {
			"lab": {
				coords: ["<number> | <percentage>", "<number> | <percentage>[-1,1]", "<number> | <percentage>[-1,1]"],
			}
		}
	});

	function constrain (angle) {
		return ((angle % 360) + 360) % 360;
	}

	function adjust (arc, angles) {
		if (arc === "raw") {
			return angles;
		}

		let [a1, a2] = angles.map(constrain);

		let angleDiff = a2 - a1;

		if (arc === "increasing") {
			if (angleDiff < 0) {
				a2 += 360;
			}
		}
		else if (arc === "decreasing") {
			if (angleDiff > 0) {
				a1 += 360;
			}
		}
		else if (arc === "longer") {
			if (-180 < angleDiff && angleDiff < 180) {
				if (angleDiff > 0) {
					a1 += 360;
				}
				else {
					a2 += 360;
				}
			}
		}
		else if (arc === "shorter") {
			if (angleDiff > 180) {
				a1 += 360;
			}
			else if (angleDiff < -180) {
				a2 += 360;
			}
		}

		return [a1, a2];
	}

	var lch = new ColorSpace({
		id: "lch",
		name: "LCH",
		coords: {
			l: {
				refRange: [0, 100],
				name: "Lightness"
			},
			c: {
				refRange: [0, 150],
				name: "Chroma"
			},
			h: {
				refRange: [0, 360],
				type: "angle",
				name: "Hue"
			}
		},

		base: lab,
		fromBase (Lab) {
			// Convert to polar form
			let [L, a, b] = Lab;
			let hue;
			const ε = 0.02;

			if (Math.abs(a) < ε && Math.abs(b) < ε) {
				hue = NaN;
			}
			else {
				hue = Math.atan2(b, a) * 180 / Math.PI;
			}

			return [
				L, // L is still L
				Math.sqrt(a ** 2 + b ** 2), // Chroma
				constrain(hue) // Hue, in degrees [0 to 360)
			];
		},
		toBase (LCH) {
			// Convert from polar form
			let [Lightness, Chroma, Hue] = LCH;
			// Clamp any negative Chroma
			if (Chroma < 0) {
				Chroma = 0;
			}		// Deal with NaN Hue
			if (isNaN(Hue)) {
				Hue = 0;
			}
			return [
				Lightness, // L is still L
				Chroma * Math.cos(Hue * Math.PI / 180), // a
				Chroma * Math.sin(Hue * Math.PI / 180)  // b
			];
		},

		formats: {
			"lch": {
				coords: ["<number> | <percentage>", "<number> | <percentage>", "<number> | <angle>"],
			}
		}
	});

	// deltaE2000 is a statistically significant improvement
	// and is recommended by the CIE and Idealliance
	// especially for color differences less than 10 deltaE76
	// but is wicked complicated
	// and many implementations have small errors!
	// DeltaE2000 is also discontinuous; in case this
	// matters to you, use deltaECMC instead.

	const Gfactor = 25 ** 7;
	const π$1 = Math.PI;
	const r2d = 180 / π$1;
	const d2r$1 = π$1 / 180;

	function deltaE2000 (color, sample, {kL = 1, kC = 1, kH = 1} = {}) {
		// Given this color as the reference
		// and the function parameter as the sample,
		// calculate deltaE 2000.

		// This implementation assumes the parametric
		// weighting factors kL, kC and kH
		// for the influence of viewing conditions
		// are all 1, as sadly seems typical.
		// kL should be increased for lightness texture or noise
		// and kC increased for chroma noise

		let [L1, a1, b1] = lab.from(color);
		let C1 = lch.from(lab, [L1, a1, b1])[1];
		let [L2, a2, b2] = lab.from(sample);
		let C2 = lch.from(lab, [L2, a2, b2])[1];

		// Check for negative Chroma,
		// which might happen through
		// direct user input of LCH values

		if (C1 < 0) {
			C1 = 0;
		}
		if (C2 < 0) {
			C2 = 0;
		}

		let Cbar = (C1 + C2)/2; // mean Chroma

		// calculate a-axis asymmetry factor from mean Chroma
		// this turns JND ellipses for near-neutral colors back into circles
		let C7 = Cbar ** 7;

		let G = 0.5 * (1 - Math.sqrt(C7/(C7 + Gfactor)));

		// scale a axes by asymmetry factor
		// this by the way is why there is no Lab2000 colorspace
		let adash1 = (1 + G) * a1;
		let adash2 = (1 + G) * a2;

		// calculate new Chroma from scaled a and original b axes
		let Cdash1 = Math.sqrt(adash1 ** 2 + b1 ** 2);
		let Cdash2 = Math.sqrt(adash2 ** 2 + b2 ** 2);

		// calculate new hues, with zero hue for true neutrals
		// and in degrees, not radians

		let h1 = (adash1 === 0 && b1 === 0)? 0: Math.atan2(b1, adash1);
		let h2 = (adash2 === 0 && b2 === 0)? 0: Math.atan2(b2, adash2);

		if (h1 < 0) {
			h1 += 2 * π$1;
		}
		if (h2 < 0) {
			h2 += 2 * π$1;
		}

		h1 *= r2d;
		h2 *= r2d;

		// Lightness and Chroma differences; sign matters
		let ΔL = L2 - L1;
		let ΔC = Cdash2 - Cdash1;

		// Hue difference, getting the sign correct
		let hdiff = h2 - h1;
		let hsum = h1 + h2;
		let habs = Math.abs(hdiff);
		let Δh;

		if (Cdash1 * Cdash2 === 0) {
			Δh = 0;
		}
		else if (habs <= 180) {
			Δh = hdiff;
		}
		else if (hdiff > 180) {
			Δh = hdiff - 360;
		}
		else if (hdiff < -180) {
			Δh = hdiff + 360;
		}
		else {
			console.log("the unthinkable has happened");
		}

		// weighted Hue difference, more for larger Chroma
		let ΔH = 2 * Math.sqrt(Cdash2 * Cdash1) * Math.sin(Δh * d2r$1 / 2);

		// calculate mean Lightness and Chroma
		let Ldash = (L1 + L2)/2;
		let Cdash = (Cdash1 + Cdash2)/2;
		let Cdash7 = Math.pow(Cdash, 7);

		// Compensate for non-linearity in the blue region of Lab.
		// Four possibilities for hue weighting factor,
		// depending on the angles, to get the correct sign
		let hdash;
		if (Cdash1 * Cdash2 === 0) {
			hdash = hsum;   // which should be zero
		}
		else if (habs <= 180) {
			hdash = hsum / 2;
		}
		else if (hsum < 360) {
			hdash = (hsum + 360) / 2;
		}
		else {
			hdash = (hsum - 360) / 2;
		}

		// positional corrections to the lack of uniformity of CIELAB
		// These are all trying to make JND ellipsoids more like spheres

		// SL Lightness crispening factor
		// a background with L=50 is assumed
		let lsq = (Ldash - 50) ** 2;
		let SL = 1 + ((0.015 * lsq) / Math.sqrt(20 + lsq));

		// SC Chroma factor, similar to those in CMC and deltaE 94 formulae
		let SC = 1 + 0.045 * Cdash;

		// Cross term T for blue non-linearity
		let T = 1;
		T -= (0.17 * Math.cos((     hdash - 30)  * d2r$1));
		T += (0.24 * Math.cos(  2 * hdash        * d2r$1));
		T += (0.32 * Math.cos(((3 * hdash) + 6)  * d2r$1));
		T -= (0.20 * Math.cos(((4 * hdash) - 63) * d2r$1));

		// SH Hue factor depends on Chroma,
		// as well as adjusted hue angle like deltaE94.
		let SH = 1 + 0.015 * Cdash * T;

		// RT Hue rotation term compensates for rotation of JND ellipses
		// and Munsell constant hue lines
		// in the medium-high Chroma blue region
		// (Hue 225 to 315)
		let Δθ = 30 * Math.exp(-1 * (((hdash - 275)/25) ** 2));
		let RC = 2 * Math.sqrt(Cdash7/(Cdash7 + Gfactor));
		let RT = -1 * Math.sin(2 * Δθ * d2r$1) * RC;

		// Finally calculate the deltaE, term by term as root sume of squares
		let dE = (ΔL / (kL * SL)) ** 2;
		dE += (ΔC / (kC * SC)) ** 2;
		dE += (ΔH / (kH * SH)) ** 2;
		dE += RT * (ΔC / (kC * SC)) * (ΔH / (kH * SH));
		return Math.sqrt(dE);
		// Yay!!!
	}

	const ε$2 = .000075;

	/**
	 * Check if a color is in gamut of either its own or another color space
	 * @return {Boolean} Is the color in gamut?
	 */
	function inGamut (color, space = color.space, {epsilon = ε$2} = {}) {
		color = getColor(color);
		space = ColorSpace.get(space);
		let coords = color.coords;

		if (space !== color.space) {
			coords = space.from(color);
		}

		return space.inGamut(coords, {epsilon});
	}

	function clone (color) {
		return {
			space: color.space,
			coords: color.coords.slice(),
			alpha: color.alpha
		};
	}

	/**
	 * Force coordinates to be in gamut of a certain color space.
	 * Mutates the color it is passed.
	 * @param {Object} options
	 * @param {string} options.method - How to force into gamut.
	 *        If "clip", coordinates are just clipped to their reference range.
	 *        If in the form [colorSpaceId].[coordName], that coordinate is reduced
	 *        until the color is in gamut. Please note that this may produce nonsensical
	 *        results for certain coordinates (e.g. hue) or infinite loops if reducing the coordinate never brings the color in gamut.
	 * @param {ColorSpace|string} options.space - The space whose gamut we want to map to
	 */
	function toGamut (color, {method = defaults.gamut_mapping, space = color.space} = {}) {
		if (isString(arguments[1])) {
			space = arguments[1];
		}

		space = ColorSpace.get(space);

		if (inGamut(color, space, {epsilon: 0})) {
			return getColor(color);
		}

		// 3 spaces:
		// color.space: current color space
		// space: space whose gamut we are mapping to
		// mapSpace: space with the coord we're reducing
		let spaceColor = to(color, space);

		if (method !== "clip" && !inGamut(color, space)) {
			let clipped = toGamut(clone(spaceColor), {method: "clip", space});
			if (deltaE2000(color, clipped) > 2) {
				// Reduce a coordinate of a certain color space until the color is in gamut
				let coordMeta = ColorSpace.resolveCoord(method);
				let mapSpace = coordMeta.space;
				let coordId = coordMeta.id;

				let mappedColor = to(spaceColor, mapSpace);
				let bounds = coordMeta.range || coordMeta.refRange;
				let min = bounds[0];
				let ε = .01; // for deltaE
				let low = min;
				let high = get(mappedColor, coordId);

				while (high - low > ε) {
					let clipped = clone(mappedColor);
					clipped = toGamut(clipped, {space, method: "clip"});
					let deltaE = deltaE2000(mappedColor, clipped);

					if (deltaE - 2 < ε) {
						low = get(mappedColor, coordId);
					}
					else {
						high = get(mappedColor, coordId);
					}

					set(mappedColor, coordId, (low + high) / 2);
				}

				spaceColor = to(mappedColor, space);
			}
			else {
				spaceColor = clipped;
			}
		}

		if (method === "clip" // Dumb coord clipping
			// finish off smarter gamut mapping with clip to get rid of ε, see #17
			|| !inGamut(spaceColor, space, {epsilon: 0})
		) {
			let bounds = Object.values(space.coords).map(c => c.range || []);

			spaceColor.coords = spaceColor.coords.map((c, i) => {
				let [min, max] = bounds[i];

				if (min !== undefined) {
					c = Math.max(min, c);
				}

				if (max !== undefined) {
					c = Math.min(c, max);
				}

				return c;
			});
		}

		if (space !== color.space) {
			spaceColor = to(spaceColor, color.space);
		}

		color.coords = spaceColor.coords;
		return color;
	}

	toGamut.returns = "color";

	/**
	 * Convert to color space and return a new color
	 * @param {Object|string} space - Color space object or id
	 * @param {Object} options
	 * @param {boolean} options.inGamut - Whether to force resulting color in gamut
	 * @returns {Color}
	 */
	function to (color, space, {inGamut} = {}) {
		color = getColor(color);
		space = ColorSpace.get(space);

		let coords = space.from(color);
		let ret = {space, coords, alpha: color.alpha};

		if (inGamut) {
			ret = toGamut(ret);
		}

		return ret;
	}

	to.returns = "color";

	/**
	 * Generic toString() method, outputs a color(spaceId ...coords) function, a functional syntax, or custom formats defined by the color space
	 * @param {Object} options
	 * @param {number} options.precision - Significant digits
	 * @param {boolean} options.inGamut - Adjust coordinates to fit in gamut first? [default: false]
	 */
	function serialize$1 (color, {
		precision = defaults.precision,
		format = "default",
		inGamut: inGamut$1 = true,
		...customOptions
	} = {}) {
		let ret;

		color = getColor(color);

		let formatId = format;
		format = color.space.getFormat(format)
			   ?? color.space.getFormat("default")
			   ?? ColorSpace.DEFAULT_FORMAT;

		inGamut$1 ||= format.toGamut;

		let coords = color.coords;

		// Convert NaN to zeros to have a chance at a valid CSS color
		// Also convert -0 to 0
		// This also clones it so we can manipulate it
		coords = coords.map(c => c? c : 0);

		if (inGamut$1 && !inGamut(color)) {
			coords = toGamut(clone(color), inGamut$1 === true? undefined : inGamut$1).coords;
		}

		if (format.type === "custom") {
			customOptions.precision = precision;

			if (format.serialize) {
				ret = format.serialize(coords, color.alpha, customOptions);
			}
			else {
				throw new TypeError(`format ${formatId} can only be used to parse colors, not for serialization`);
			}
		}
		else {
			// Functional syntax
			let name = format.name || "color";

			if (format.serializeCoords) {
				coords = format.serializeCoords(coords, precision);
			}
			else {
				if (precision !== null) {
					coords = coords.map(c => toPrecision(c, precision));
				}
			}

			let args = [...coords];

			if (name === "color") {
				// If output is a color() function, add colorspace id as first argument
				let cssId = format.id || format.ids?.[0] || color.space.id;
				args.unshift(cssId);
			}

			let alpha = color.alpha;
			if (precision !== null) {
				alpha = toPrecision(alpha, precision);
			}

			let strAlpha = color.alpha < 1 && !format.noAlpha? `${format.commas? "," : " /"} ${alpha}` : "";
			ret = `${name}(${args.join(format.commas? ", " : " ")}${strAlpha})`;
		}

		return ret;
	}

	// convert an array of linear-light rec2020 values to CIE XYZ
	// using  D65 (no chromatic adaptation)
	// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
	// 0 is actually calculated as  4.994106574466076e-17
	const toXYZ_M$5 = [
		[ 0.6369580483012914, 0.14461690358620832,  0.1688809751641721  ],
		[ 0.2627002120112671, 0.6779980715188708,   0.05930171646986196 ],
		[ 0.000000000000000,  0.028072693049087428, 1.060985057710791   ]
	];

	// from ITU-R BT.2124-0 Annex 2 p.3
	const fromXYZ_M$5 = [
		[  1.716651187971268,  -0.355670783776392, -0.253366281373660  ],
		[ -0.666684351832489,   1.616481236634939,  0.0157685458139111 ],
		[  0.017639857445311,  -0.042770613257809,  0.942103121235474  ]
	];

	var REC2020Linear = new RGBColorSpace({
		id: "rec2020-linear",
		name: "Linear REC.2020",
		white: "D65",
		toXYZ_M: toXYZ_M$5,
		fromXYZ_M: fromXYZ_M$5,
		formats: {
			color: {},
		}
	});

	// import sRGB from "./srgb.js";

	const α = 1.09929682680944;
	const β = 0.018053968510807;

	var REC2020 = new RGBColorSpace({
		id: "rec2020",
		name: "REC.2020",
		base: REC2020Linear,
		// Non-linear transfer function from Rec. ITU-R BT.2020-2 table 4
		toBase (RGB) {
			return RGB.map(function (val) {
				if (val < β * 4.5 ) {
					return val / 4.5;
				}

				return Math.pow((val + α -1 ) / α, 1/0.45);
			});
		},
		fromBase (RGB) {
			return RGB.map(function (val) {
				if (val >= β ) {
					return α * Math.pow(val, 0.45) - (α - 1);
				}

				return 4.5 * val;
			});
		},
		formats: {
			color: {},
		}
	});

	const toXYZ_M$4 = [
		[0.4865709486482162, 0.26566769316909306, 0.1982172852343625],
		[0.2289745640697488, 0.6917385218365064,  0.079286914093745],
		[0.0000000000000000, 0.04511338185890264, 1.043944368900976]
	];

	const fromXYZ_M$4 = [
		[ 2.493496911941425,   -0.9313836179191239, -0.40271078445071684],
		[-0.8294889695615747,   1.7626640603183463,  0.023624685841943577],
		[ 0.03584583024378447, -0.07617238926804182, 0.9568845240076872]
	];

	var P3Linear = new RGBColorSpace({
		id: "p3-linear",
		name: "Linear P3",
		white: "D65",
		toXYZ_M: toXYZ_M$4,
		fromXYZ_M: fromXYZ_M$4
	});

	// This is the linear-light version of sRGB
	// as used for example in SVG filters
	// or in Canvas

	// This matrix was calculated directly from the RGB and white chromaticities
	// when rounded to 8 decimal places, it agrees completely with the official matrix
	// see https://github.com/w3c/csswg-drafts/issues/5922
	const toXYZ_M$3 = [
		[ 0.41239079926595934, 0.357584339383878,   0.1804807884018343  ],
		[ 0.21263900587151027, 0.715168678767756,   0.07219231536073371 ],
		[ 0.01933081871559182, 0.11919477979462598, 0.9505321522496607  ]
	];

	// This matrix is the inverse of the above;
	// again it agrees with the official definition when rounded to 8 decimal places
	const fromXYZ_M$3 = [
		[  3.2409699419045226,  -1.537383177570094,   -0.4986107602930034  ],
		[ -0.9692436362808796,   1.8759675015077202,   0.04155505740717559 ],
		[  0.05563007969699366, -0.20397695888897652,  1.0569715142428786  ]
	];

	var sRGBLinear = new RGBColorSpace({
		id: "srgb-linear",
		name: "Linear sRGB",
		white: "D65",
		toXYZ_M: toXYZ_M$3,
		fromXYZ_M: fromXYZ_M$3,
		formats: {
			color: {}
		},
	});

	/* List of CSS color keywords
	 * Note that this does not include currentColor, transparent,
	 * or system colors
	 */

	// To produce: Visit https://www.w3.org/TR/css-color-4/#named-colors
	// and run in the console:
	// copy($$("tr", $(".named-color-table tbody")).map(tr => `"${tr.cells[2].textContent.trim()}": [${tr.cells[4].textContent.trim().split(/\s+/).map(c => c === "0"? "0" : c === "255"? "1" : c + " / 255").join(", ")}]`).join(",\n"))
	var KEYWORDS = {
		"aliceblue": [240 / 255, 248 / 255, 1],
		"antiquewhite": [250 / 255, 235 / 255, 215 / 255],
		"aqua": [0, 1, 1],
		"aquamarine": [127 / 255, 1, 212 / 255],
		"azure": [240 / 255, 1, 1],
		"beige": [245 / 255, 245 / 255, 220 / 255],
		"bisque": [1, 228 / 255, 196 / 255],
		"black": [0, 0, 0],
		"blanchedalmond": [1, 235 / 255, 205 / 255],
		"blue": [0, 0, 1],
		"blueviolet": [138 / 255, 43 / 255, 226 / 255],
		"brown": [165 / 255, 42 / 255, 42 / 255],
		"burlywood": [222 / 255, 184 / 255, 135 / 255],
		"cadetblue": [95 / 255, 158 / 255, 160 / 255],
		"chartreuse": [127 / 255, 1, 0],
		"chocolate": [210 / 255, 105 / 255, 30 / 255],
		"coral": [1, 127 / 255, 80 / 255],
		"cornflowerblue": [100 / 255, 149 / 255, 237 / 255],
		"cornsilk": [1, 248 / 255, 220 / 255],
		"crimson": [220 / 255, 20 / 255, 60 / 255],
		"cyan": [0, 1, 1],
		"darkblue": [0, 0, 139 / 255],
		"darkcyan": [0, 139 / 255, 139 / 255],
		"darkgoldenrod": [184 / 255, 134 / 255, 11 / 255],
		"darkgray": [169 / 255, 169 / 255, 169 / 255],
		"darkgreen": [0, 100 / 255, 0],
		"darkgrey": [169 / 255, 169 / 255, 169 / 255],
		"darkkhaki": [189 / 255, 183 / 255, 107 / 255],
		"darkmagenta": [139 / 255, 0, 139 / 255],
		"darkolivegreen": [85 / 255, 107 / 255, 47 / 255],
		"darkorange": [1, 140 / 255, 0],
		"darkorchid": [153 / 255, 50 / 255, 204 / 255],
		"darkred": [139 / 255, 0, 0],
		"darksalmon": [233 / 255, 150 / 255, 122 / 255],
		"darkseagreen": [143 / 255, 188 / 255, 143 / 255],
		"darkslateblue": [72 / 255, 61 / 255, 139 / 255],
		"darkslategray": [47 / 255, 79 / 255, 79 / 255],
		"darkslategrey": [47 / 255, 79 / 255, 79 / 255],
		"darkturquoise": [0, 206 / 255, 209 / 255],
		"darkviolet": [148 / 255, 0, 211 / 255],
		"deeppink": [1, 20 / 255, 147 / 255],
		"deepskyblue": [0, 191 / 255, 1],
		"dimgray": [105 / 255, 105 / 255, 105 / 255],
		"dimgrey": [105 / 255, 105 / 255, 105 / 255],
		"dodgerblue": [30 / 255, 144 / 255, 1],
		"firebrick": [178 / 255, 34 / 255, 34 / 255],
		"floralwhite": [1, 250 / 255, 240 / 255],
		"forestgreen": [34 / 255, 139 / 255, 34 / 255],
		"fuchsia": [1, 0, 1],
		"gainsboro": [220 / 255, 220 / 255, 220 / 255],
		"ghostwhite": [248 / 255, 248 / 255, 1],
		"gold": [1, 215 / 255, 0],
		"goldenrod": [218 / 255, 165 / 255, 32 / 255],
		"gray": [128 / 255, 128 / 255, 128 / 255],
		"green": [0, 128 / 255, 0],
		"greenyellow": [173 / 255, 1, 47 / 255],
		"grey": [128 / 255, 128 / 255, 128 / 255],
		"honeydew": [240 / 255, 1, 240 / 255],
		"hotpink": [1, 105 / 255, 180 / 255],
		"indianred": [205 / 255, 92 / 255, 92 / 255],
		"indigo": [75 / 255, 0, 130 / 255],
		"ivory": [1, 1, 240 / 255],
		"khaki": [240 / 255, 230 / 255, 140 / 255],
		"lavender": [230 / 255, 230 / 255, 250 / 255],
		"lavenderblush": [1, 240 / 255, 245 / 255],
		"lawngreen": [124 / 255, 252 / 255, 0],
		"lemonchiffon": [1, 250 / 255, 205 / 255],
		"lightblue": [173 / 255, 216 / 255, 230 / 255],
		"lightcoral": [240 / 255, 128 / 255, 128 / 255],
		"lightcyan": [224 / 255, 1, 1],
		"lightgoldenrodyellow": [250 / 255, 250 / 255, 210 / 255],
		"lightgray": [211 / 255, 211 / 255, 211 / 255],
		"lightgreen": [144 / 255, 238 / 255, 144 / 255],
		"lightgrey": [211 / 255, 211 / 255, 211 / 255],
		"lightpink": [1, 182 / 255, 193 / 255],
		"lightsalmon": [1, 160 / 255, 122 / 255],
		"lightseagreen": [32 / 255, 178 / 255, 170 / 255],
		"lightskyblue": [135 / 255, 206 / 255, 250 / 255],
		"lightslategray": [119 / 255, 136 / 255, 153 / 255],
		"lightslategrey": [119 / 255, 136 / 255, 153 / 255],
		"lightsteelblue": [176 / 255, 196 / 255, 222 / 255],
		"lightyellow": [1, 1, 224 / 255],
		"lime": [0, 1, 0],
		"limegreen": [50 / 255, 205 / 255, 50 / 255],
		"linen": [250 / 255, 240 / 255, 230 / 255],
		"magenta": [1, 0, 1],
		"maroon": [128 / 255, 0, 0],
		"mediumaquamarine": [102 / 255, 205 / 255, 170 / 255],
		"mediumblue": [0, 0, 205 / 255],
		"mediumorchid": [186 / 255, 85 / 255, 211 / 255],
		"mediumpurple": [147 / 255, 112 / 255, 219 / 255],
		"mediumseagreen": [60 / 255, 179 / 255, 113 / 255],
		"mediumslateblue": [123 / 255, 104 / 255, 238 / 255],
		"mediumspringgreen": [0, 250 / 255, 154 / 255],
		"mediumturquoise": [72 / 255, 209 / 255, 204 / 255],
		"mediumvioletred": [199 / 255, 21 / 255, 133 / 255],
		"midnightblue": [25 / 255, 25 / 255, 112 / 255],
		"mintcream": [245 / 255, 1, 250 / 255],
		"mistyrose": [1, 228 / 255, 225 / 255],
		"moccasin": [1, 228 / 255, 181 / 255],
		"navajowhite": [1, 222 / 255, 173 / 255],
		"navy": [0, 0, 128 / 255],
		"oldlace": [253 / 255, 245 / 255, 230 / 255],
		"olive": [128 / 255, 128 / 255, 0],
		"olivedrab": [107 / 255, 142 / 255, 35 / 255],
		"orange": [1, 165 / 255, 0],
		"orangered": [1, 69 / 255, 0],
		"orchid": [218 / 255, 112 / 255, 214 / 255],
		"palegoldenrod": [238 / 255, 232 / 255, 170 / 255],
		"palegreen": [152 / 255, 251 / 255, 152 / 255],
		"paleturquoise": [175 / 255, 238 / 255, 238 / 255],
		"palevioletred": [219 / 255, 112 / 255, 147 / 255],
		"papayawhip": [1, 239 / 255, 213 / 255],
		"peachpuff": [1, 218 / 255, 185 / 255],
		"peru": [205 / 255, 133 / 255, 63 / 255],
		"pink": [1, 192 / 255, 203 / 255],
		"plum": [221 / 255, 160 / 255, 221 / 255],
		"powderblue": [176 / 255, 224 / 255, 230 / 255],
		"purple": [128 / 255, 0, 128 / 255],
		"rebeccapurple": [102 / 255, 51 / 255, 153 / 255],
		"red": [1, 0, 0],
		"rosybrown": [188 / 255, 143 / 255, 143 / 255],
		"royalblue": [65 / 255, 105 / 255, 225 / 255],
		"saddlebrown": [139 / 255, 69 / 255, 19 / 255],
		"salmon": [250 / 255, 128 / 255, 114 / 255],
		"sandybrown": [244 / 255, 164 / 255, 96 / 255],
		"seagreen": [46 / 255, 139 / 255, 87 / 255],
		"seashell": [1, 245 / 255, 238 / 255],
		"sienna": [160 / 255, 82 / 255, 45 / 255],
		"silver": [192 / 255, 192 / 255, 192 / 255],
		"skyblue": [135 / 255, 206 / 255, 235 / 255],
		"slateblue": [106 / 255, 90 / 255, 205 / 255],
		"slategray": [112 / 255, 128 / 255, 144 / 255],
		"slategrey": [112 / 255, 128 / 255, 144 / 255],
		"snow": [1, 250 / 255, 250 / 255],
		"springgreen": [0, 1, 127 / 255],
		"steelblue": [70 / 255, 130 / 255, 180 / 255],
		"tan": [210 / 255, 180 / 255, 140 / 255],
		"teal": [0, 128 / 255, 128 / 255],
		"thistle": [216 / 255, 191 / 255, 216 / 255],
		"tomato": [1, 99 / 255, 71 / 255],
		"turquoise": [64 / 255, 224 / 255, 208 / 255],
		"violet": [238 / 255, 130 / 255, 238 / 255],
		"wheat": [245 / 255, 222 / 255, 179 / 255],
		"white": [1, 1, 1],
		"whitesmoke": [245 / 255, 245 / 255, 245 / 255],
		"yellow": [1, 1, 0],
		"yellowgreen": [154 / 255, 205 / 255, 50 / 255]
	};

	let coordGrammar = Array(3).fill("<percentage> | <number>[0, 255]");
	let coordGrammarNumber = Array(3).fill("<number>[0, 255]");

	var sRGB = new RGBColorSpace({
		id: "srgb",
		name: "sRGB",
		base: sRGBLinear,
		fromBase: rgb => {
			// convert an array of linear-light sRGB values in the range 0.0-1.0
			// to gamma corrected form
			// https://en.wikipedia.org/wiki/SRGB
			return rgb.map(val => {
				let sign = val < 0? -1 : 1;
				let abs = val * sign;

				if (abs > 0.0031308) {
					return sign * (1.055 * (abs ** (1/2.4)) - 0.055);
				}

				return 12.92 * val;
			});
		},
		toBase: rgb => {
			// convert an array of sRGB values in the range 0.0 - 1.0
			// to linear light (un-companded) form.
			// https://en.wikipedia.org/wiki/SRGB
			return rgb.map(val => {
				let sign = val < 0? -1 : 1;
				let abs = val * sign;

				if (abs < 0.04045) {
					return val / 12.92;
				}

				return sign * (((abs + 0.055) / 1.055) ** 2.4);
			});
		},
		formats: {
			"rgb": {
				coords: coordGrammar,
			},
			"rgb_number": {
				name: "rgb",
				commas: true,
				coords: coordGrammarNumber,
				noAlpha: true,
			},
			"color": { /* use defaults */ },
			"rgba": {
				coords: coordGrammar,
				commas: true,
				lastAlpha: true,
			},
			"rgba_number": {
				name: "rgba",
				commas: true,
				coords: coordGrammarNumber
			},
			"hex": {
				type: "custom",
				toGamut: true,
				test: str => /^#([a-f0-9]{3,4}){1,2}$/i.test(str),
				parse (str) {
					if (str.length <= 5) {
						// #rgb or #rgba, duplicate digits
						str = str.replace(/[a-f0-9]/gi, "$&$&");
					}

					let rgba = [];
					str.replace(/[a-f0-9]{2}/gi, component => {
						rgba.push(parseInt(component, 16) / 255);
					});

					return {
						spaceId: "srgb",
						coords: rgba.slice(0, 3),
						alpha: rgba.slice(3)[0]
					};
				},
				serialize: (coords, alpha, {
					collapse = true // collapse to 3-4 digit hex when possible?
				} = {}) => {
					if (alpha < 1) {
						coords.push(alpha);
					}

					coords = coords.map(c => Math.round(c * 255));

					let collapsible = collapse && coords.every(c => c % 17 === 0);

					let hex = coords.map(c => {
						if (collapsible) {
							return (c/17).toString(16);
						}

						return c.toString(16).padStart(2, "0");
					}).join("");

					return "#" + hex;
				}
			},
			"keyword": {
				type: "custom",
				test: str => /^[a-z]+$/i.test(str),
				parse (str) {
					str = str.toLowerCase();
					let ret = {spaceId: "srgb", coords: null, alpha: 1};

					if (str === "transparent") {
						ret.coords = KEYWORDS.black;
						ret.alpha = 0;
					}
					else {
						ret.coords = KEYWORDS[str];
					}

					if (ret.coords) {
						return ret;
					}
				}
			},
		}
	});

	var P3 = new RGBColorSpace({
		id: "p3",
		name: "P3",
		base: P3Linear,
		// Gamma encoding/decoding is the same as sRGB
		fromBase: sRGB.fromBase,
		toBase: sRGB.toBase,
		formats: {
			color: {
				id: "display-p3",
			}
		},
	});

	// Default space for CSS output. Code in Color.js makes this wider if there's a DOM available
	defaults.display_space = sRGB;

	if (typeof CSS !== "undefined" && CSS.supports) {
		// Find widest supported color space for CSS
		for (let space of [lab, REC2020, P3]) {
			let coords = space.getMinCoords();
			let color = {space, coords, alpha: 1};
			let str = serialize$1(color);

			if (CSS.supports("color", str)) {
				defaults.display_space = space;
				break;
			}
		}
	}

	/**
	 * Returns a serialization of the color that can actually be displayed in the browser.
	 * If the default serialization can be displayed, it is returned.
	 * Otherwise, the color is converted to Lab, REC2020, or P3, whichever is the widest supported.
	 * In Node.js, this is basically equivalent to `serialize()` but returns a `String` object instead.
	 *
	 * @export
	 * @param {{space, coords} | Color | string} color
	 * @param {*} [options={}] Options to be passed to serialize()
	 * @param {ColorSpace | string} [options.space = defaults.display_space] Color space to use for serialization if default is not supported
	 * @returns {String} String object containing the serialized color with a color property containing the converted color (or the original, if no conversion was necessary)
	 */
	function display (color, {space = defaults.display_space, ...options} = {}) {
		let ret = serialize$1(color, options);

		if (typeof CSS === "undefined" || CSS.supports("color", ret) || !defaults.display_space) {
			ret = new String(ret);
			ret.color = color;
		}
		else {
			// If we're here, what we were about to output is not supported
			// Fall back to fallback space
			let fallbackColor = to(color, space);
			ret = new String(serialize$1(fallbackColor, options));
			ret.color = fallbackColor;
		}

		return ret;
	}

	/**
	 * Euclidean distance of colors in an arbitrary color space
	 */
	function distance (color1, color2, space = "lab") {
		space = ColorSpace.get(space);

		let coords1 = space.from(color1);
		let coords2 = space.from(color2);

		return Math.sqrt(coords1.reduce((acc, c1, i) => {
			let c2 = coords2[i];
			if (isNaN(c1) || isNaN(c2)) {
				return acc;
			}

			return acc + (c2 - c1) ** 2;
		}, 0));
	}

	function equals (color1, color2) {
		color1 = getColor(color1);
		color2 = getColor(color2);

		return color1.space === color2.space
			   && color1.alpha === color2.alpha
			   && color1.coords.every((c, i) => c === color2.coords[i]);
	}

	/**
	 * Relative luminance
	 */

	function getLuminance (color) {
		return get(color, [XYZ_D65, "y"]);
	}

	function setLuminance (color, value) {
		set(color, [XYZ_D65, "y"], value);
	}

	function register$2 (Color) {
		Object.defineProperty(Color.prototype, "luminance", {
			get () {
				return getLuminance(this);
			},
			set (value) {
				setLuminance(this, value);
			}
		});
	}

	var luminance = /*#__PURE__*/Object.freeze({
		__proto__: null,
		getLuminance: getLuminance,
		register: register$2,
		setLuminance: setLuminance
	});

	// WCAG 2.0 contrast https://www.w3.org/TR/WCAG20-TECHS/G18.html
	// Simple contrast, with fixed 5% viewing flare contribution
	// Symmetric, does not matter which is foreground and which is background


	function contrastWCAG21 (color1, color2) {
		color1 = getColor(color1);
		color2 = getColor(color2);

		let Y1 = Math.max(getLuminance(color1), 0);
		let Y2 = Math.max(getLuminance(color2), 0);

		if (Y2 > Y1) {
			[Y1, Y2] = [Y2, Y1];
		}

		return (Y1 + .05) / (Y2 + .05);
	}

	// APCA 0.0.98G
	// https://github.com/Myndex/apca-w3
	// see also https://github.com/w3c/silver/issues/643


	// exponents
	const normBG = 0.56;
	const normTXT = 0.57;
	const revTXT = 0.62;
	const revBG = 0.65;

	// clamps
	const blkThrs = 0.022;
	const blkClmp = 1.414;
	const loClip = 0.1;
	const deltaYmin = 0.0005;

	// scalers
	// see https://github.com/w3c/silver/issues/645
	const scaleBoW = 1.14;
	const loBoWoffset = 0.027;
	const scaleWoB= 1.14;

	function fclamp (Y) {
		if (Y >= blkThrs) {
			return Y;
		}
		return Y + (blkThrs - Y) ** blkClmp;
	}

	function linearize (val) {
		let sign = val < 0? -1 : 1;
		let abs = Math.abs(val);
		return sign * Math.pow(abs, 2.4);
	}

	// Not symmetric, requires a foreground (text) color, and a background color
	function contrastAPCA (background, foreground) {
		foreground = getColor(foreground);
		background = getColor(background);

		let S;
		let C;
		let Sapc;

		// Myndex as-published, assumes sRGB inputs
		let R, G, B;

		foreground = to(foreground, "srgb");
		// Should these be clamped to in-gamut values?

		// Calculates "screen luminance" with non-standard simple gamma EOTF
		// weights should be from CSS Color 4, not the ones here which are via Myndex and copied from Lindbloom
		[R, G, B] = foreground.coords;
		let lumTxt = linearize(R) * 0.2126729 + linearize(G) * 0.7151522 + linearize(B) * 0.0721750;

		background = to(background, "srgb");
		[R, G, B] = background.coords;
		let lumBg = linearize(R) * 0.2126729 + linearize(G) * 0.7151522 + linearize(B) * 0.0721750;

		// toe clamping of very dark values to account for flare
		let Ytxt = fclamp(lumTxt);
		let Ybg = fclamp(lumBg);

		// are we "Black on White" (dark on light), or light on dark?
		let BoW = Ybg > Ytxt;

		// why is this a delta, when Y is not perceptually uniform?
		// Answer: it is a noise gate, see
		// https://github.com/LeaVerou/color.js/issues/208
		if (Math.abs(Ybg - Ytxt) < deltaYmin) {
			C = 0;
		}
		else {
			if (BoW) {
				// dark text on light background
				S = Ybg ** normBG - Ytxt ** normTXT;
				C = S * scaleBoW;
			}
			else {
				// light text on dark background
				S = Ybg ** revBG - Ytxt ** revTXT;
				C = S * scaleWoB;
			}
		}
		if (Math.abs(C) < loClip) {
			Sapc = 0;
		}
		else if (C > 0) {
			// not clear whether Woffset is loBoWoffset or loWoBoffset
			// but they have the same value
			Sapc = C - loBoWoffset;
		}
		else {
			Sapc = C + loBoWoffset;
		}

		return Sapc * 100;
	}

	// Michelson  luminance contrast
	// the relation between the spread and the sum of the two luminances
	// Symmetric, does not matter which is foreground and which is background
	// No black level compensation for flare.


	function contrastMichelson (color1, color2) {
		color1 = getColor(color1);
		color2 = getColor(color2);

		let Y1 = Math.max(getLuminance(color1), 0);
		let Y2 = Math.max(getLuminance(color2), 0);

		if (Y2 > Y1) {
			[Y1, Y2] = [Y2, Y1];
		}

		let denom = (Y1 + Y2);
		return denom === 0 ? 0 : (Y1 - Y2) / denom;
	}

	// Weber luminance contrast
	// The difference between the two luminances divided by the lower luminance
	// Symmetric, does not matter which is foreground and which is background
	// No black level compensation for flare.


	// the darkest sRGB color above black is #000001 and this produces
	// a plain Weber contrast of ~45647.
	// So, setting the divide-by-zero result at 50000 is a reasonable
	// max clamp for the plain Weber
	const max = 50000;

	function contrastWeber (color1, color2) {
		color1 = getColor(color1);
		color2 = getColor(color2);

		let Y1 = Math.max(getLuminance(color1), 0);
		let Y2 = Math.max(getLuminance(color2), 0);

		if (Y2 > Y1) {
			[Y1, Y2] = [Y2, Y1];
		}

		return Y2 === 0 ? max : (Y1 - Y2) / Y2;
	}

	// CIE Lightness difference, as used by Google Material Design
	// Google HCT Tone is the same as CIE Lightness
	// https://material.io/blog/science-of-color-design


	function contrastLstar (color1, color2) {
		color1 = getColor(color1);
		color2 = getColor(color2);

		let L1 = get(color1, [lab, "l"]);
		let L2 = get(color2, [lab, "l"]);

		return Math.abs(L1 - L2);
	}

	// κ * ε  = 2^3 = 8
	const ε$1 = 216/24389;  // 6^3/29^3 == (24/116)^3
	const ε3 = 24/116;
	const κ = 24389/27;   // 29^3/3^3

	let white = WHITES.D65;

	var lab_d65 = new ColorSpace({
		id: "lab-d65",
		name: "Lab D65",
		coords: {
			l: {
				refRange: [0, 100],
				name: "L"
			},
			a: {
				refRange: [-125, 125]
			},
			b: {
				refRange: [-125, 125]
			}
		},

		// Assuming XYZ is relative to D65, convert to CIE Lab
		// from CIE standard, which now defines these as a rational fraction
		white,

		base: XYZ_D65,
		// Convert D65-adapted XYZ to Lab
		//  CIE 15.3:2004 section 8.2.1.1
		fromBase (XYZ) {
			// compute xyz, which is XYZ scaled relative to reference white
			let xyz = XYZ.map((value, i) => value / white[i]);

			// now compute f
			let f = xyz.map(value => value > ε$1 ? Math.cbrt(value) : (κ * value + 16)/116);

			return [
				(116 * f[1]) - 16, 	 // L
				500 * (f[0] - f[1]), // a
				200 * (f[1] - f[2])  // b
			];
		},
		// Convert Lab to D65-adapted XYZ
		// Same result as CIE 15.3:2004 Appendix D although the derivation is different
		// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
		toBase (Lab) {
			// compute f, starting with the luminance-related term
			let f = [];
			f[1] = (Lab[0] + 16)/116;
			f[0] = Lab[1]/500 + f[1];
			f[2] = f[1] - Lab[2]/200;

			// compute xyz
			let xyz = [
				f[0]   > ε3  ?  Math.pow(f[0], 3)            : (116*f[0]-16)/κ,
				Lab[0] > 8   ?  Math.pow((Lab[0]+16)/116, 3) : Lab[0]/κ,
				f[2]   > ε3  ?  Math.pow(f[2], 3)            : (116*f[2]-16)/κ
			];

			// Compute XYZ by scaling xyz by reference white
			return xyz.map((value, i) => value * white[i]);
		},

		formats: {
			"lab-d65": {
				coords: ["<number> | <percentage>", "<number> | <percentage>[-1,1]", "<number> | <percentage>[-1,1]"],
			}
		}
	});

	// Delta Phi Star perceptual lightness contrast
	// See https://github.com/Myndex/deltaphistar
	// The (difference between two Lstars each raised to phi) raised to (1/phi)
	// Symmetric, does not matter which is foreground and which is background


	const phi = Math.pow(5, 0.5) * 0.5 + 0.5; // Math.phi can be used if Math.js

	function contrastDeltaPhi (color1, color2) {
		color1 = getColor(color1);
		color2 = getColor(color2);

		let Lstr1 = get(color1, [lab_d65, "l"]);
		let Lstr2 = get(color2, [lab_d65, "l"]);

		let deltaPhiStar = Math.abs(Math.pow(Lstr1, phi) - Math.pow(Lstr2, phi));

		let contrast = Math.pow(deltaPhiStar, (1 / phi)) * Math.SQRT2 - 40;

		return (contrast < 7.5) ? 0.0 : contrast ;
	}

	var contrastMethods = /*#__PURE__*/Object.freeze({
		__proto__: null,
		contrastAPCA: contrastAPCA,
		contrastDeltaPhi: contrastDeltaPhi,
		contrastLstar: contrastLstar,
		contrastMichelson: contrastMichelson,
		contrastWCAG21: contrastWCAG21,
		contrastWeber: contrastWeber
	});

	function contrast (background, foreground, o = {}) {
		if (isString(o)) {
			o = {algorithm: o};
		}

		let {algorithm, ...rest} = o;

		if (!algorithm) {
			let algorithms = Object.keys(contrastMethods).map(a => a.replace(/^contrast/, "")).join(", ");
			throw new TypeError(`contrast() function needs a contrast algorithm. Please specify one of: ${algorithms}`);
		}

		background = getColor(background);
		foreground = getColor(foreground);

		for (let a in contrastMethods) {
			if ("contrast" + algorithm.toLowerCase() === a.toLowerCase()) {
				return contrastMethods[a](background, foreground, rest);
			}
		}

		throw new TypeError(`Unknown contrast algorithm: ${algorithm}`);
	}

	// Chromaticity coordinates
	function uv (color) {
		let [X, Y, Z] = getAll(color, XYZ_D65);
		let denom = X + 15 * Y + 3 * Z;
		return [4 * X / denom, 9 * Y / denom];
	}

	function xy (color) {
		let [X, Y, Z] = getAll(color, XYZ_D65);
		let  sum = X + Y + Z;
		return [X / sum, Y / sum];
	}

	function register$1 (Color) {
		// no setters, as lightness information is lost
		// when converting color to chromaticity
		Object.defineProperty(Color.prototype, "uv", {
			get () {
				return uv(this);
			}
		});

		Object.defineProperty(Color.prototype, "xy", {
			get () {
				return xy(this);
			}
		});
	}

	var chromaticity = /*#__PURE__*/Object.freeze({
		__proto__: null,
		register: register$1,
		uv: uv,
		xy: xy
	});

	function deltaE76 (color, sample) {
		return distance(color, sample, "lab");
	}

	// More accurate color-difference formulae
	// than the simple 1976 Euclidean distance in Lab

	// CMC by the Color Measurement Committee of the
	// Bradford Society of Dyeists and Colorsts, 1994.
	// Uses LCH rather than Lab,
	// with different weights for L, C and H differences
	// A nice increase in accuracy for modest increase in complexity
	const π = Math.PI;
	const d2r = π / 180;

	function deltaECMC (color, sample, {l = 2, c = 1} = {}) {
		// Given this color as the reference
		// and a sample,
		// calculate deltaE CMC.

		// This implementation assumes the parametric
		// weighting factors l:c are 2:1
		// which is typical for non-textile uses.

		let [L1, a1, b1] = lab.from(color);
		let [, C1, H1] = lch.from(lab, [L1, a1, b1]);
		let [L2, a2, b2] = lab.from(sample);
		let C2 = lch.from(lab, [L2, a2, b2])[1];

		// let [L1, a1, b1] = color.getAll(lab);
		// let C1 = color.get("lch.c");
		// let H1 = color.get("lch.h");
		// let [L2, a2, b2] = sample.getAll(lab);
		// let C2 = sample.get("lch.c");

		// Check for negative Chroma,
		// which might happen through
		// direct user input of LCH values

		if (C1 < 0) {
			C1 = 0;
		}
		if (C2 < 0) {
			C2 = 0;
		}

		// we don't need H2 as ΔH is calculated from Δa, Δb and ΔC

		// Lightness and Chroma differences
		// These are (color - sample), unlike deltaE2000
		let ΔL = L1 - L2;
		let ΔC = C1 - C2;

		let Δa = a1 - a2;
		let Δb = b1 - b2;

		// weighted Hue difference, less for larger Chroma difference

		let H2 = (Δa ** 2) + (Δb ** 2) - (ΔC ** 2);
		// due to roundoff error it is possible that, for zero a and b,
		// ΔC > Δa + Δb is 0, resulting in attempting
		// to take the square root of a negative number

		// trying instead the equation from Industrial Color Physics
		// By Georg A. Klein

		// let ΔH = ((a1 * b2) - (a2 * b1)) / Math.sqrt(0.5 * ((C2 * C1) + (a2 * a1) + (b2 * b1)));
		// console.log({ΔH});
		// This gives the same result to 12 decimal places
		// except it sometimes NaNs when trying to root a negative number

		// let ΔH = Math.sqrt(H2); we never actually use the root, it gets squared again!!

		// positional corrections to the lack of uniformity of CIELAB
		// These are all trying to make JND ellipsoids more like spheres

		// SL Lightness crispening factor, depends entirely on L1 not L2
		let SL = 0.511;	// linear portion of the Y to L transfer function
		if (L1 >= 16) {	// cubic portion
			SL = (0.040975 * L1) / (1 + 0.01765 * L1);
		}

		// SC Chroma factor
		let SC = ((0.0638 * C1) / (1 + 0.0131 * C1)) + 0.638;

		// Cross term T for blue non-linearity
		let T;
		if ( Number.isNaN(H1)) {
			H1 = 0;
		}

		if (H1 >= 164 && H1 <= 345) {
			T = 0.56 + Math.abs(0.2 * Math.cos((H1 + 168) * d2r));
		}
		else {
			T = 0.36 + Math.abs(0.4 * Math.cos((H1 + 35) * d2r));
		}
		// console.log({T});

		// SH Hue factor also depends on C1,
		let C4 = Math.pow(C1, 4);
		let F = Math.sqrt(C4 / (C4 + 1900));
		let SH = SC * ((F * T) + 1 - F);

		// Finally calculate the deltaE, term by term as root sume of squares
		let dE = (ΔL / (l * SL)) ** 2;
		dE += (ΔC / (c * SC)) ** 2;
		dE += (H2 / (SH ** 2));
		// dE += (ΔH / SH)  ** 2;
		return Math.sqrt(dE);
		// Yay!!!
	}

	const Yw$1 = 203;	// absolute luminance of media white

	var XYZ_Abs_D65 = new ColorSpace({
	// Absolute CIE XYZ, with a D65 whitepoint,
	// as used in most HDR colorspaces as a starting point.
	// SDR spaces are converted per BT.2048
	// so that diffuse, media white is 203 cd/m²
		id: "xyz-abs-d65",
		name: "Absolute XYZ D65",
		coords: {
			x: {
				refRange: [0, 9504.7],
				name: "Xa",
			},
			y: {
				refRange: [0, 10000],
				name: "Ya",
			},
			z: {
				refRange: [0, 10888.3],
				name: "Za",
			}
		},

		base: XYZ_D65,
		fromBase (XYZ) {
			// Make XYZ absolute, not relative to media white
			// Maximum luminance in PQ is 10,000 cd/m²
			// Relative XYZ has Y=1 for media white
			return XYZ.map (v => Math.max(v * Yw$1, 0));
		},
		toBase (AbsXYZ) {
			// Convert to media-white relative XYZ
			return AbsXYZ.map(v => Math.max(v / Yw$1, 0));
		}
	});

	const b$1 = 1.15;
	const g = 0.66;
	const n$1 = 2610 / (2 ** 14);
	const ninv$1 = (2 ** 14) / 2610;
	const c1$2 = 3424 / (2 ** 12);
	const c2$2 = 2413 / (2 ** 7);
	const c3$2 = 2392 / (2 ** 7);
	const p = 1.7 * 2523 / (2 ** 5);
	const pinv = (2 ** 5) / (1.7 * 2523);
	const d = -0.56;
	const d0 = 1.6295499532821566E-11;

	const XYZtoCone_M = [
		[  0.41478972, 0.579999,  0.0146480 ],
		[ -0.2015100,  1.120649,  0.0531008 ],
		[ -0.0166008,  0.264800,  0.6684799 ]
	];
	// XYZtoCone_M inverted
	const ConetoXYZ_M = [
		[  1.9242264357876067,  -1.0047923125953657,  0.037651404030618   ],
		[  0.35031676209499907,  0.7264811939316552, -0.06538442294808501 ],
		[ -0.09098281098284752, -0.3127282905230739,  1.5227665613052603  ]
	];
	const ConetoIab_M = [
		[  0.5,       0.5,       0        ],
		[  3.524000, -4.066708,  0.542708 ],
		[  0.199076,  1.096799, -1.295875 ]
	];
	// ConetoIab_M inverted
	const IabtoCone_M = [
		[ 1,                   0.1386050432715393,   0.05804731615611886 ],
		[ 0.9999999999999999, -0.1386050432715393,  -0.05804731615611886 ],
		[ 0.9999999999999998, -0.09601924202631895, -0.8118918960560388  ]
	];

	var Jzazbz = new ColorSpace({
		id: "jzazbz",
		name: "Jzazbz",
		coords: {
			jz: {
				refRange: [0, 1],
				name: "Jz",
			},
			az: {
				refRange: [-0.5, 0.5],
			},
			bz: {
				refRange: [-0.5, 0.5],
			}
		},

		base: XYZ_Abs_D65,
		fromBase (XYZ) {
			// First make XYZ absolute, not relative to media white
			// Maximum luminance in PQ is 10,000 cd/m²
			// Relative XYZ has Y=1 for media white
			// BT.2048 says media white Y=203 at PQ 58

			let [ Xa, Ya, Za ] = XYZ;

			// modify X and Y
			let Xm = (b$1 * Xa) - ((b$1 - 1) * Za);
			let Ym = (g * Ya) - ((g - 1) * Xa);

			// move to LMS cone domain
			let LMS = multiplyMatrices(XYZtoCone_M, [ Xm, Ym, Za ]);

			// PQ-encode LMS
			let PQLMS = LMS.map (function (val) {
				let num = c1$2 + (c2$2 * ((val / 10000) ** n$1));
				let denom = 1 + (c3$2 * ((val / 10000) ** n$1));

				return (num / denom)  ** p;
			});

			// almost there, calculate Iz az bz
			let [ Iz, az, bz] = multiplyMatrices(ConetoIab_M, PQLMS);
			// console.log({Iz, az, bz});

			let Jz = ((1 + d) * Iz) / (1 + (d * Iz)) - d0;
			return [Jz, az, bz];
		},
		toBase (Jzazbz) {
			let [Jz, az, bz] = Jzazbz;
			let Iz = (Jz + d0) / (1 + d - d * (Jz + d0));

			// bring into LMS cone domain
			let PQLMS = multiplyMatrices(IabtoCone_M, [ Iz, az, bz ]);

			// convert from PQ-coded to linear-light
			let LMS = PQLMS.map(function (val) {
				let num = (c1$2 - (val ** pinv));
				let denom = (c3$2 * (val ** pinv)) - c2$2;
				let x = 10000 * ((num / denom) ** ninv$1);

				return (x); 	// luminance relative to diffuse white, [0, 70 or so].
			});

			// modified abs XYZ
			let [ Xm, Ym, Za ] = multiplyMatrices(ConetoXYZ_M, LMS);

			// restore standard D50 relative XYZ, relative to media white
			let Xa = (Xm + ((b$1 -1) * Za)) / b$1;
			let Ya = (Ym + ((g -1) * Xa)) / g;
			return [ Xa, Ya, Za ];
		},

		formats: {
			// https://drafts.csswg.org/css-color-hdr/#Jzazbz
			"color": {}
		}
	});

	var jzczhz = new ColorSpace({
		id: "jzczhz",
		name: "JzCzHz",
		coords: {
			jz: {
				refRange: [0, 1],
				name: "Jz",
			},
			cz: {
				refRange: [0, 1],
				name: "Chroma",
			},
			hz: {
				refRange: [0, 360],
				type: "angle",
				name: "Hue",
			}
		},

		base: Jzazbz,
		fromBase (jzazbz) {
			// Convert to polar form
			let [Jz, az, bz] = jzazbz;
			let hue;
			const ε = 0.0002; // chromatic components much smaller than a,b

			if (Math.abs(az) < ε && Math.abs(bz) < ε) {
				hue = NaN;
			}
			else {
				hue = Math.atan2(bz, az) * 180 / Math.PI;
			}

			return [
				Jz, // Jz is still Jz
				Math.sqrt(az ** 2 + bz ** 2), // Chroma
				constrain(hue) // Hue, in degrees [0 to 360)
			];
		},
		toBase (jzczhz) {
			// Convert from polar form
			// debugger;
			return [
				jzczhz[0], // Jz is still Jz
				jzczhz[1] * Math.cos(jzczhz[2] * Math.PI / 180), // az
				jzczhz[1] * Math.sin(jzczhz[2] * Math.PI / 180)  // bz
			];
		},
		formats: {
			color: {}
		},
	});

	// More accurate color-difference formulae
	// than the simple 1976 Euclidean distance in Lab

	// Uses JzCzHz, which has improved perceptual uniformity
	// and thus a simple Euclidean root-sum of ΔL² ΔC² ΔH²
	// gives good results.

	function deltaEJz (color, sample) {
		// Given this color as the reference
		// and a sample,
		// calculate deltaE in JzCzHz.
		let [Jz1, Cz1, Hz1] = jzczhz.from(color);
		let [Jz2, Cz2, Hz2] = jzczhz.from(sample);

		// Lightness and Chroma differences
		// sign does not matter as they are squared.
		let ΔJ = Jz1 - Jz2;
		let ΔC = Cz1 - Cz2;

		// length of chord for ΔH
		if ((Number.isNaN(Hz1)) && (Number.isNaN(Hz2))) {
			// both undefined hues
			Hz1 = 0;
			Hz2 = 0;
		}
		else if (Number.isNaN(Hz1)) {
			// one undefined, set to the defined hue
			Hz1 = Hz2;
		}
		else if (Number.isNaN(Hz2)) {
			Hz2 = Hz1;
		}

		let Δh = Hz1 - Hz2;
		let ΔH = 2 * Math.sqrt(Cz1 * Cz2) * Math.sin((Δh / 2) * (Math.PI / 180));

		return Math.sqrt(ΔJ ** 2 + ΔC ** 2 + ΔH ** 2);
	}

	const c1$1 = 3424 / 4096;
	const c2$1 = 2413 / 128;
	const c3$1 = 2392 / 128;
	const m1 = 2610 / 16384;
	const m2 = 2523 / 32;
	const im1 = 16384 / 2610;
	const im2 = 32 / 2523;

	// The matrix below includes the 4% crosstalk components
	// and is from the Dolby "What is ICtCp" paper"
	const XYZtoLMS_M$1 = [
		[ 0.3592,  0.6976, -0.0358],
		[-0.1922,  1.1004,  0.0755],
		[ 0.0070,  0.0749,  0.8434]
	];
	// linear-light Rec.2020 to LMS, again with crosstalk
	// rational terms from Jan Fröhlich,
	// Encoding High Dynamic Range andWide Color Gamut Imagery, p.97
	// and ITU-R BT.2124-0 p.2
	/*
	const Rec2020toLMS_M = [
		[ 1688 / 4096,  2146 / 4096,   262 / 4096 ],
		[  683 / 4096,  2951 / 4096,   462 / 4096 ],
		[   99 / 4096,   309 / 4096,  3688 / 4096 ]
	];
	*/
	// this includes the Ebner LMS coefficients,
	// the rotation, and the scaling to [-0.5,0.5] range
	// rational terms from Fröhlich p.97
	// and ITU-R BT.2124-0 pp.2-3
	const LMStoIPT_M = [
		[  2048 / 4096,   2048 / 4096,       0      ],
		[  6610 / 4096, -13613 / 4096,  7003 / 4096 ],
		[ 17933 / 4096, -17390 / 4096,  -543 / 4096 ]
	];

	// inverted matrices, calculated from the above
	const IPTtoLMS_M = [
		[0.99998889656284013833, 0.00860505014728705821,  0.1110343715986164786 ],
		[1.0000111034371598616, -0.00860505014728705821, -0.1110343715986164786 ],
		[1.000032063391005412,   0.56004913547279000113, -0.32063391005412026469],
	];
	/*
	const LMStoRec2020_M = [
		[ 3.4375568932814012112,   -2.5072112125095058195,   0.069654319228104608382],
		[-0.79142868665644156125,   1.9838372198740089874,  -0.19240853321756742626 ],
		[-0.025646662911506476363, -0.099240248643945566751, 1.1248869115554520431  ]
	];
	*/
	const LMStoXYZ_M$1 = [
		[ 2.0701800566956135096,   -1.3264568761030210255,    0.20661600684785517081 ],
		[ 0.36498825003265747974,   0.68046736285223514102,  -0.045421753075853231409],
		[-0.049595542238932107896, -0.049421161186757487412,  1.1879959417328034394  ]
	];

	// Only the PQ form of ICtCp is implemented here. There is also an HLG form.
	// from Dolby, "WHAT IS ICTCP?"
	// https://professional.dolby.com/siteassets/pdfs/ictcp_dolbywhitepaper_v071.pdf
	// and
	// Dolby, "Perceptual Color Volume
	// Measuring the Distinguishable Colors of HDR and WCG Displays"
	// https://professional.dolby.com/siteassets/pdfs/dolby-vision-measuring-perceptual-color-volume-v7.1.pdf
	var ictcp = new ColorSpace({
		id: "ictcp",
		name: "ICTCP",
		// From BT.2100-2 page 7:
		// During production, signal values are expected to exceed the
		// range E′ = [0.0 : 1.0]. This provides processing headroom and avoids
		// signal degradation during cascaded processing. Such values of E′,
		// below 0.0 or exceeding 1.0, should not be clipped during production
		// and exchange.
		// Values below 0.0 should not be clipped in reference displays (even
		// though they represent “negative” light) to allow the black level of
		// the signal (LB) to be properly set using test signals known as “PLUGE”
		coords: {
			i: {
				refRange: [0, 1],	// Constant luminance,
				name: "I"
			},
			ct: {
				refRange: [-0.5, 0.5],	// Full BT.2020 gamut in range [-0.5, 0.5]
				name: "CT"
			},
			cp: {
				refRange: [-0.5, 0.5],
				name: "CP"
			}
		},

		base: XYZ_Abs_D65,
		fromBase (XYZ) {
			// move to LMS cone domain
			let LMS = multiplyMatrices(XYZtoLMS_M$1, XYZ);

			return LMStoICtCp(LMS);
		},
		toBase (ICtCp) {
			let LMS = ICtCptoLMS(ICtCp);

			return multiplyMatrices(LMStoXYZ_M$1, LMS);
		},
		formats: {
			color: {}
		},
	});

	function LMStoICtCp (LMS) {
		// apply the PQ EOTF
		// we can't ever be dividing by zero because of the "1 +" in the denominator
		let PQLMS = LMS.map (function (val) {
			let num = c1$1 + (c2$1 * ((val / 10000) ** m1));
			let denom = 1 + (c3$1 * ((val / 10000) ** m1));

			return (num / denom)  ** m2;
		});

		// LMS to IPT, with rotation for Y'C'bC'r compatibility
		return multiplyMatrices(LMStoIPT_M, PQLMS);
	}

	function ICtCptoLMS (ICtCp) {
		let PQLMS = multiplyMatrices(IPTtoLMS_M, ICtCp);

		// From BT.2124-0 Annex 2 Conversion 3
		let LMS = PQLMS.map (function (val) {
			let num  = Math.max((val ** im2) - c1$1, 0);
			let denom = (c2$1 - (c3$1 * (val ** im2)));
			return 10000 * ((num / denom) ** im1);
		});

		return LMS;
	}

	// Delta E in ICtCp space,
	// which the ITU calls Delta E ITP, which is shorter
	// formulae from ITU Rec. ITU-R BT.2124-0

	function deltaEITP (color, sample) {
		// Given this color as the reference
		// and a sample,
		// calculate deltaE in ICtCp
		// which is simply the Euclidean distance

		let [ I1, T1, P1 ] = ictcp.from(color);
		let [ I2, T2, P2 ] = ictcp.from(sample);

		// the 0.25 factor is to undo the encoding scaling in Ct
		// the 720 is so that 1 deltaE = 1 JND
		// per  ITU-R BT.2124-0 p.3

		return 720 * Math.sqrt((I1 - I2) ** 2 + (0.25 * (T1 -T2) ** 2) + (P1 - P2) ** 2);
	}

	// Recalculated for consistent reference white
	// see https://github.com/w3c/csswg-drafts/issues/6642#issuecomment-943521484
	const XYZtoLMS_M = [
		[ 0.8190224432164319,    0.3619062562801221,   -0.12887378261216414 ],
		[ 0.0329836671980271,    0.9292868468965546,     0.03614466816999844 ],
		[ 0.048177199566046255,  0.26423952494422764,    0.6335478258136937  ]
	];
	// inverse of XYZtoLMS_M
	const LMStoXYZ_M = [
		[  1.2268798733741557,  -0.5578149965554813,   0.28139105017721583],
		[ -0.04057576262431372,  1.1122868293970594,  -0.07171106666151701],
		[ -0.07637294974672142, -0.4214933239627914,   1.5869240244272418 ]
	];
	const LMStoLab_M = [
		[  0.2104542553,   0.7936177850,  -0.0040720468 ],
		[  1.9779984951,  -2.4285922050,   0.4505937099 ],
		[  0.0259040371,   0.7827717662,  -0.8086757660 ]
	];
	// LMStoIab_M inverted
	const LabtoLMS_M = [
		[ 0.99999999845051981432,  0.39633779217376785678,   0.21580375806075880339  ],
		[ 1.0000000088817607767,  -0.1055613423236563494,   -0.063854174771705903402 ],
		[ 1.0000000546724109177,  -0.089484182094965759684, -1.2914855378640917399   ]
	];

	var OKLab = new ColorSpace({
		id: "oklab",
	    name: "Oklab",
	    coords: {
			l: {
				refRange: [0, 1],
				name: "L"
			},
			a: {
				refRange: [-0.4, 0.4]
			},
			b: {
				refRange: [-0.4, 0.4]
			}
	    },

		// Note that XYZ is relative to D65
	  white: "D65",
		base: XYZ_D65,
		fromBase (XYZ) {
			// move to LMS cone domain
			let LMS = multiplyMatrices(XYZtoLMS_M, XYZ);

			// non-linearity
			let LMSg = LMS.map(val => Math.cbrt(val));

			return multiplyMatrices(LMStoLab_M, LMSg);

		},
		toBase (OKLab) {
			// move to LMS cone domain
			let LMSg = multiplyMatrices(LabtoLMS_M, OKLab);

			// restore linearity
			let LMS = LMSg.map(val => val ** 3);

			return multiplyMatrices(LMStoXYZ_M, LMS);
		},

		formats: {
			"oklab": {
				coords: ["<percentage> | <number>", "<number> | <percentage>[-1,1]", "<number> | <percentage>[-1,1]"],
			}
		}
	});

	// More accurate color-difference formulae
	// than the simple 1976 Euclidean distance in CIE Lab


	function deltaEOK (color, sample) {
		// Given this color as the reference
		// and a sample,
		// calculate deltaEOK, term by term as root sum of squares
		let [L1, a1, b1] = OKLab.from(color);
		let [L2, a2, b2] = OKLab.from(sample);
		let ΔL = L1 - L2;
		let Δa = a1 - a2;
		let Δb = b1 - b2;
		return Math.sqrt(ΔL ** 2 + Δa ** 2 + Δb ** 2);
	}

	var deltaEMethods = {
		deltaE76,
		deltaECMC,
		deltaE2000,
		deltaEJz,
		deltaEITP,
		deltaEOK,
	};

	function deltaE (c1, c2, o = {}) {
		if (isString(o)) {
			o = {method: o};
		}

		let {method = defaults.deltaE, ...rest} = o;

		c1 = getColor(c1);
		c2 = getColor(c2);

		for (let m in deltaEMethods) {
			if ("deltae" + method.toLowerCase() === m.toLowerCase()) {
				return deltaEMethods[m](c1, c2, rest);
			}
		}

		throw new TypeError(`Unknown deltaE method: ${method}`);
	}

	function lighten (color, amount = .25) {
		let space = ColorSpace.get("oklch", "lch");
		let lightness = [space, "l"];
		return set(color, lightness, l => l * (1 + amount));
	}

	function darken (color, amount = .25) {
		let space = ColorSpace.get("oklch", "lch");
		let lightness = [space, "l"];
		return set(color, lightness, l => l * (1 - amount));
	}

	var variations = /*#__PURE__*/Object.freeze({
		__proto__: null,
		darken: darken,
		lighten: lighten
	});

	/**
	 * Functions related to color interpolation
	 */

	/**
	 * Return an intermediate color between two colors
	 * Signatures: mix(c1, c2, p, options)
	 *             mix(c1, c2, options)
	 *             mix(color)
	 * @param {Color | string} c1 The first color
	 * @param {Color | string} [c2] The second color
	 * @param {number} [p=.5] A 0-1 percentage where 0 is c1 and 1 is c2
	 * @param {Object} [o={}]
	 * @return {Color}
	 */
	function mix (c1, c2, p = .5, o = {}) {
		[c1, c2] = [getColor(c1), getColor(c2)];

		if (type(p) === "object") {
			[p, o] = [.5, p];
		}

		let {space, outputSpace, premultiplied} = o;

		let r = range(c1, c2, {space, outputSpace, premultiplied});
		return r(p);
	}

	/**
	 *
	 * @param {Color | string | Function} c1 The first color or a range
	 * @param {Color | string} [c2] The second color if c1 is not a range
	 * @param {Object} [options={}]
	 * @return {Color[]}
	 */
	function steps (c1, c2, options = {}) {
		let colorRange;

		if (isRange(c1)) {
			// Tweaking existing range
			[colorRange, options] = [c1, c2];
			[c1, c2] = colorRange.rangeArgs.colors;
		}

		let {
			maxDeltaE, deltaEMethod,
			steps = 2, maxSteps = 1000,
			...rangeOptions
		} = options;

		if (!colorRange) {
			[c1, c2] = [getColor(c1), getColor(c2)];
			colorRange = range(c1, c2, rangeOptions);
		}

		let totalDelta = deltaE(c1, c2);
		let actualSteps = maxDeltaE > 0? Math.max(steps, Math.ceil(totalDelta / maxDeltaE) + 1) : steps;
		let ret = [];

		if (maxSteps !== undefined) {
			actualSteps = Math.min(actualSteps, maxSteps);
		}

		if (actualSteps === 1) {
			ret = [{p: .5, color: colorRange(.5)}];
		}
		else {
			let step = 1 / (actualSteps - 1);
			ret = Array.from({length: actualSteps}, (_, i) => {
				let p = i * step;
				return {p, color: colorRange(p)};
			});
		}

		if (maxDeltaE > 0) {
			// Iterate over all stops and find max deltaE
			let maxDelta = ret.reduce((acc, cur, i) => {
				if (i === 0) {
					return 0;
				}

				let ΔΕ = deltaE(cur.color, ret[i - 1].color, deltaEMethod);
				return Math.max(acc, ΔΕ);
			}, 0);

			while (maxDelta > maxDeltaE) {
				// Insert intermediate stops and measure maxDelta again
				// We need to do this for all pairs, otherwise the midpoint shifts
				maxDelta = 0;

				for (let i = 1; (i < ret.length) && (ret.length < maxSteps); i++) {
					let prev = ret[i - 1];
					let cur = ret[i];

					let p = (cur.p + prev.p) / 2;
					let color = colorRange(p);
					maxDelta = Math.max(maxDelta, deltaE(color, prev.color), deltaE(color, cur.color));
					ret.splice(i, 0, {p, color: colorRange(p)});
					i++;
				}
			}
		}

		ret = ret.map(a => a.color);

		return ret;
	}
	/**
	 * Interpolate to color2 and return a function that takes a 0-1 percentage
	 * @param {Color | string | Function} color1 The first color or an existing range
	 * @param {Color | string} [color2] If color1 is a color, this is the second color
	 * @param {Object} [options={}]
	 * @returns {Function} A function that takes a 0-1 percentage and returns a color
	 */
	function range (color1, color2, options = {}) {
		if (isRange(color1)) {
			// Tweaking existing range
			let [r, options] = [color1, color2];

			return range(...r.rangeArgs.colors, {...r.rangeArgs.options, ...options});
		}

		let {space, outputSpace, progression, premultiplied} = options;

		color1 = getColor(color1);
		color2 = getColor(color2);

		// Make sure we're working on copies of these colors
		color1 = clone(color1);
		color2 = clone(color2);

		let rangeArgs = {colors: [color1, color2], options};

		if (space) {
			space = ColorSpace.get(space);
		}
		else {
			space = ColorSpace.registry[defaults.interpolationSpace] || color1.space;
		}

		outputSpace = outputSpace? ColorSpace.get(outputSpace) : space;

		color1 = to(color1, space);
		color2 = to(color2, space);

		// Gamut map to avoid areas of flat color
		color1 = toGamut(color1);
		color2 = toGamut(color2);

		// Handle hue interpolation
		// See https://github.com/w3c/csswg-drafts/issues/4735#issuecomment-635741840
		if (space.coords.h && space.coords.h.type === "angle") {
			let arc = options.hue = options.hue || "shorter";

			let hue = [space, "h"];
			let [θ1, θ2] = [get(color1, hue), get(color2, hue)];
			[θ1, θ2] = adjust(arc, [θ1, θ2]);
			set(color1, hue, θ1);
			set(color2, hue, θ2);
		}

		if (premultiplied) {
			// not coping with polar spaces yet
			color1.coords = color1.coords.map(c => c * color1.alpha);
			color2.coords = color2.coords.map(c => c * color2.alpha);
		}

		return Object.assign(p => {
			p = progression? progression(p) : p;
			let coords = color1.coords.map((start, i) => {
				let end = color2.coords[i];
				return interpolate(start, end, p);
			});

			let alpha = interpolate(color1.alpha, color2.alpha, p);
			let ret = {space, coords, alpha};

			if (premultiplied) {
				// undo premultiplication
				ret.coords = ret.coords.map(c => c / alpha);
			}

			if (outputSpace !== space) {
				ret = to(ret, outputSpace);
			}

			return ret;
		}, {
			rangeArgs
		});
	}
	function isRange (val) {
		return type(val) === "function" && !!val.rangeArgs;
	}
	defaults.interpolationSpace = "lab";

	function register (Color) {
		Color.defineFunction("mix", mix, {returns: "color"});
		Color.defineFunction("range", range, {returns: "function<color>"});
		Color.defineFunction("steps", steps, {returns: "array<color>"});
	}

	var interpolation = /*#__PURE__*/Object.freeze({
		__proto__: null,
		isRange: isRange,
		mix: mix,
		range: range,
		register: register,
		steps: steps
	});

	var HSL = new ColorSpace({
		id: "hsl",
		name: "HSL",
		coords: {
			h: {
				refRange: [0, 360],
				type: "angle",
				name: "Hue"
			},
			s: {
				range: [0, 100],
				name: "Saturation"
			},
			l: {
				range: [0, 100],
				name: "Lightness"
			}
		},

		base: sRGB,

		// Adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB
		fromBase: rgb => {
			let max = Math.max(...rgb);
			let min = Math.min(...rgb);
			let [r, g, b] = rgb;
			let [h, s, l] = [NaN, 0, (min + max)/2];
			let d = max - min;

			if (d !== 0) {
				s = (l === 0 || l === 1) ? 0 : (max - l) / Math.min(l, 1 - l);

				switch (max) {
					case r: h = (g - b) / d + (g < b ? 6 : 0); break;
					case g: h = (b - r) / d + 2; break;
					case b: h = (r - g) / d + 4;
				}

				h = h * 60;
			}

			return [h, s * 100, l * 100];
		},

		// Adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_RGB_alternative
		toBase: hsl => {
			let [h, s, l] = hsl;
			h = h % 360;

			if (h < 0) {
				h += 360;
			}

			s /= 100;
			l /= 100;

			function f (n) {
				let k = (n + h/30) % 12;
				let a = s * Math.min(l, 1 - l);
				return l - a * Math.max(-1, Math.min(k - 3, 9 - k, 1));
			}

			return [f(0), f(8), f(4)];
		},

		formats: {
			"hsl": {
				toGamut: true,
				coords: ["<number> | <angle>", "<percentage>", "<percentage>"],
			},
			"hsla": {
				coords: ["<number> | <angle>", "<percentage>", "<percentage>"],
				commas: true,
				lastAlpha: true,
			}
		},
	});

	// The Hue, Whiteness Blackness (HWB) colorspace
	// See https://drafts.csswg.org/css-color-4/#the-hwb-notation
	// Note that, like HSL, calculations are done directly on
	// gamma-corrected sRGB values rather than linearising them first.

	var HSV = new ColorSpace({
		id: "hsv",
		name: "HSV",
		coords: {
			h: {
				refRange: [0, 360],
				type: "angle",
				name: "Hue"
			},
			s: {
				range: [0, 100],
				name: "Saturation"
			},
			v: {
				range: [0, 100],
				name: "Value"
			}
		},

		base: HSL,
		// https://en.wikipedia.org/wiki/HSL_and_HSV#Interconversion
		fromBase (hsl) {
			let [h, s, l] = hsl;
			s /= 100;
			l /= 100;

			let v = l + s * Math.min(l, 1 - l);

			return [
				h, // h is the same
				v === 0? 0 : 200 * (1 - l / v), // s
				100 * v
			];
		},
		// https://en.wikipedia.org/wiki/HSL_and_HSV#Interconversion
		toBase (hsv) {
			let [h, s, v] = hsv;

			s /= 100;
			v /= 100;

			let l = v * (1 - s/2);

			return [
				h, // h is the same
				(l === 0 || l === 1)? 0 : ((v - l) / Math.min(l, 1 - l)) * 100,
				l * 100
			];
		},
		formats: {
			color: {
				toGamut: true,
			}
		}
	});

	// The Hue, Whiteness Blackness (HWB) colorspace
	// See https://drafts.csswg.org/css-color-4/#the-hwb-notation
	// Note that, like HSL, calculations are done directly on
	// gamma-corrected sRGB values rather than linearising them first.

	var hwb = new ColorSpace({
		id: "hwb",
		name: "HWB",
		coords: {
			h: {
				refRange: [0, 360],
				type: "angle",
				name: "Hue"
			},
			w: {
				range: [0, 100],
				name: "Whiteness"
			},
			b: {
				range: [0, 100],
				name: "Blackness"
			}
		},

		base: HSV,
		fromBase (hsv) {
			let [h, s, v] = hsv;

			return [h, v * (100 - s) / 100, 100 - v];
		},
		toBase (hwb) {
			let [h, w, b] = hwb;

			// Now convert percentages to [0..1]
			w /= 100;
			b /= 100;

			// Achromatic check (white plus black >= 1)
			let sum = w + b;
			if (sum >= 1) {
				 let gray = w / sum;
				 return [h, 0, gray * 100];
			}

			let v = (1 - b);
			let s = (v === 0) ? 0 : 1 - w / v;
			return [h, s * 100, v * 100];
		},

		formats: {
			"hwb": {
				toGamut: true,
				coords: ["<number> | <angle>", "<percentage>", "<percentage>"],
			}
		}
	});

	// convert an array of linear-light a98-rgb values to CIE XYZ
	// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
	// has greater numerical precision than section 4.3.5.3 of
	// https://www.adobe.com/digitalimag/pdfs/AdobeRGB1998.pdf
	// but the values below were calculated from first principles
	// from the chromaticity coordinates of R G B W
	const toXYZ_M$2 = [
		[ 0.5766690429101305,   0.1855582379065463,   0.1882286462349947  ],
		[ 0.29734497525053605,  0.6273635662554661,   0.07529145849399788 ],
		[ 0.02703136138641234,  0.07068885253582723,  0.9913375368376388  ]
	];

	const fromXYZ_M$2 = [
		[  2.0415879038107465,    -0.5650069742788596,   -0.34473135077832956 ],
		[ -0.9692436362808795,     1.8759675015077202,    0.04155505740717557 ],
		[  0.013444280632031142,  -0.11836239223101838,   1.0151749943912054  ]
	];

	var A98Linear = new RGBColorSpace({
		id: "a98rgb-linear",
		name: "Linear Adobe® 98 RGB compatible",
		white: "D65",
		toXYZ_M: toXYZ_M$2,
		fromXYZ_M: fromXYZ_M$2
	});

	var a98rgb = new RGBColorSpace({
		id: "a98rgb",
		name: "Adobe® 98 RGB compatible",
		base: A98Linear,
		toBase: RGB => RGB.map(val => Math.pow(Math.abs(val), 563 / 256) * Math.sign(val)),
		fromBase: RGB => RGB.map(val => Math.pow(Math.abs(val), 256 / 563) * Math.sign(val)),
		formats: {
			color: {
				id: "a98-rgb"
			}
		},
	});

	// convert an array of  prophoto-rgb values to CIE XYZ
	// using  D50 (so no chromatic adaptation needed afterwards)
	// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
	const toXYZ_M$1 = [
		[ 0.7977604896723027,  0.13518583717574031,  0.0313493495815248     ],
		[ 0.2880711282292934,  0.7118432178101014,   0.00008565396060525902 ],
		[ 0.0,                 0.0,                  0.8251046025104601     ]
	];

	const fromXYZ_M$1 = [
		[  1.3457989731028281,  -0.25558010007997534,  -0.05110628506753401 ],
		[ -0.5446224939028347,   1.5082327413132781,    0.02053603239147973 ],
		[  0.0,                  0.0,                   1.2119675456389454  ]
	];

	var ProPhotoLinear = new RGBColorSpace({
		id: "prophoto-linear",
		name: "Linear ProPhoto",
		white: "D50",
		base: XYZ_D50,
		toXYZ_M: toXYZ_M$1,
		fromXYZ_M: fromXYZ_M$1
	});

	const Et = 1/512;
	const Et2 = 16/512;

	var prophoto = new RGBColorSpace({
		id: "prophoto",
		name: "ProPhoto",
		base: ProPhotoLinear,
		toBase (RGB) {
			// Transfer curve is gamma 1.8 with a small linear portion
			return RGB.map(v => v < Et2? v / 16 : v ** 1.8);
		},
		fromBase (RGB) {
			return RGB.map(v => v >= Et? v ** (1/1.8) : 16 * v);
		},
		formats: {
			color: {
				id: "prophoto-rgb"
			}
		},
	});

	var oklch = new ColorSpace({
		id: "oklch",
		name: "Oklch",
		coords: {
			l: {
				refRange: [0, 1],
				name: "Lightness"
			},
			c: {
				refRange: [0, 0.4],
				name: "Chroma"
			},
			h: {
				refRange: [0, 360],
				type: "angle",
				name: "Hue"
			}
		},
		white: "D65",

		base: OKLab,
		fromBase (oklab) {
			// Convert to polar form
			let [L, a, b] = oklab;
			let h;
			const ε = 0.0002; // chromatic components much smaller than a,b

			if (Math.abs(a) < ε && Math.abs(b) < ε) {
				h = NaN;
			}
			else {
				h = Math.atan2(b, a) * 180 / Math.PI;
			}

			return [
				L, // OKLab L is still L
				Math.sqrt(a ** 2 + b ** 2), // Chroma
				constrain(h) // Hue, in degrees [0 to 360)
			];
		},
		// Convert from polar form
		toBase (oklch) {
			let [L, C, h] = oklch;
			let a, b;

			// check for NaN hue
			if (isNaN(h)) {
				a = 0;
				b = 0;
			}
			else {
				a = C * Math.cos(h * Math.PI / 180);
				b = C * Math.sin(h * Math.PI / 180);
			}

			return [ L, a, b ];
		},

		formats: {
			"oklch": {
				coords: ["<number> | <percentage>", "<number> | <percentage>[0,1]", "<number> | <angle>"],
			}
		}
	});

	const Yw = 203;	// absolute luminance of media white, cd/m²
	const n = 2610 / (2 ** 14);
	const ninv = (2 ** 14) / 2610;
	const m = 2523 / (2 ** 5);
	const minv = (2 ** 5) / 2523;
	const c1 = 3424 / (2 ** 12);
	const c2 = 2413 / (2 ** 7);
	const c3 = 2392 / (2 ** 7);

	var rec2100Pq = new RGBColorSpace({
		id: "rec2100pq",
		name: "REC.2100-PQ",
		base: REC2020Linear,
		toBase (RGB) {
			// given PQ encoded component in range [0, 1]
			// return media-white relative linear-light
			return RGB.map(function (val) {
				let x = ((Math.max(((val ** minv) - c1), 0) / (c2 - (c3 * (val ** minv)))) ** ninv);
				return (x * 10000 / Yw); 	// luminance relative to diffuse white, [0, 70 or so].
			});
		},
		fromBase (RGB) {
			// given media-white relative linear-light
			// returnPQ encoded component in range [0, 1]
			return RGB.map(function (val) {
				let x = Math.max(val * Yw / 10000, 0); 	// absolute luminance of peak white is 10,000 cd/m².
				let num = (c1 + (c2 * (x ** n)));
				let denom = (1 + (c3 * (x ** n)));

				return ((num / denom)  ** m);
			});
		},
		formats: {
			color: {
				id: "rec2100-pq"
			},
		},
	});

	// FIXME see https://github.com/LeaVerou/color.js/issues/190

	const a = 0.17883277;
	const b = 0.28466892; // 1 - (4 * a)
	const c = 0.55991073; // 0.5 - a * Math.log(4 *a)

	const scale = 3.7743;	// Place 18% grey at HLG 0.38, so media white at 0.75

	var rec2100Hlg = new RGBColorSpace({
		id: "rec2100hlg",
		cssid: "rec2100-hlg",
		name: "REC.2100-HLG",
		referred: "scene",

		base: REC2020Linear,
		toBase (RGB) {
			// given HLG encoded component in range [0, 1]
			// return media-white relative linear-light
			return RGB.map(function (val) {
				// first the HLG EOTF
				// ITU-R BT.2390-10 p.30 section
				// 6.3 The hybrid log-gamma electro-optical transfer function (EOTF)
				// Then scale by 3 so media white is 1.0
				if (val <= 0.5) {
					return (val ** 2) / 3 * scale;
				}
				return ((Math.exp((val - c) / a) + b) / 12) * scale;
			});
		},
		fromBase (RGB) {
			// given media-white relative linear-light
			// where diffuse white is 1.0,
			// return HLG encoded component in range [0, 1]
			return RGB.map(function (val) {
				// first scale to put linear-light media white at 1/3
				val /= scale;
				// now the HLG OETF
				// ITU-R BT.2390-10 p.23
				// 6.1 The hybrid log-gamma opto-electronic transfer function (OETF)
				if (val <= 1/12) {
					return Math.sqrt( 3 * val);
				}
				return a * Math.log(12 * val - b) + c;
			});
		},
		formats: {
			color: {
				id: "rec2100-hlg"
			},
		},
	});

	const CATs = {};

	hooks.add("chromatic-adaptation-start", env => {
		if (env.options.method) {
			env.M = adapt(env.W1, env.W2, env.options.method);
		}
	});

	hooks.add("chromatic-adaptation-end", env => {
		if (!env.M) {
			env.M = adapt(env.W1, env.W2, env.options.method);
		}
	});

	function defineCAT ({id, toCone_M, fromCone_M}) {
		// Use id, toCone_M, fromCone_M like variables
		CATs[id] = arguments[0];
	}
	function adapt (W1, W2, id = "Bradford") {
		// adapt from a source whitepoint or illuminant W1
		// to a destination whitepoint or illuminant W2,
		// using the given chromatic adaptation transform (CAT)
		// debugger;
		let method = CATs[id];

		let [ρs, γs, βs] = multiplyMatrices(method.toCone_M, W1);
		let [ρd, γd, βd] = multiplyMatrices(method.toCone_M, W2);

		// all practical illuminants have non-zero XYZ so no division by zero can occur below
		let scale = [
			[ρd/ρs,    0,      0      ],
			[0,        γd/γs,  0      ],
			[0,        0,      βd/βs  ]
		];
		// console.log({scale});

		let scaled_cone_M = multiplyMatrices(scale, method.toCone_M);
		let adapt_M	= multiplyMatrices(method.fromCone_M, scaled_cone_M);
		// console.log({scaled_cone_M, adapt_M});
		return adapt_M;
	}
	defineCAT({
		id: "von Kries",
		toCone_M: [
			[  0.4002400,  0.7076000, -0.0808100 ],
			[ -0.2263000,  1.1653200,  0.0457000 ],
			[  0.0000000,  0.0000000,  0.9182200 ]
		],
		fromCone_M: [
			[  1.8599364, -1.1293816,  0.2198974 ],
			[  0.3611914,  0.6388125, -0.0000064 ],
			[  0.0000000,  0.0000000,  1.0890636 ]
		]
	});

	defineCAT({
		id: "Bradford",
		// Convert an array of XYZ values in the range 0.0 - 1.0
		// to cone fundamentals
		toCone_M: [
			[  0.8951000,  0.2664000, -0.1614000 ],
			[ -0.7502000,  1.7135000,  0.0367000 ],
			[  0.0389000, -0.0685000,  1.0296000 ]
		],
		// and back
		fromCone_M: [
			[  0.9869929, -0.1470543,  0.1599627 ],
			[  0.4323053,  0.5183603,  0.0492912 ],
			[ -0.0085287,  0.0400428,  0.9684867 ]
		]
	});

	defineCAT({
		id: "CAT02",
		// with complete chromatic adaptation to W2, so D = 1.0
		toCone_M: [
			[  0.7328000,  0.4296000, -0.1624000 ],
			[ -0.7036000,  1.6975000,  0.0061000 ],
			[  0.0030000,  0.0136000,  0.9834000 ]
		],
		fromCone_M: [
			[  1.0961238, -0.2788690,  0.1827452 ],
			[  0.4543690,  0.4735332,  0.0720978 ],
			[ -0.0096276, -0.0056980,  1.0153256 ]
		]
	});

	defineCAT({
		id: "CAT16",
		toCone_M: [
			[  0.401288,  0.650173, -0.051461 ],
			[ -0.250268,  1.204414,  0.045854 ],
			[ -0.002079,  0.048952,  0.953127 ]
		],
		// the extra precision is needed to avoid roundtripping errors
		fromCone_M: [
			[  1.862067855087233e+0, -1.011254630531685e+0,   1.491867754444518e-1 ],
			[  3.875265432361372e-1,  6.214474419314753e-1,  -8.973985167612518e-3 ],
			[ -1.584149884933386e-2, -3.412293802851557e-2,   1.049964436877850e+0 ]
		]
	});

	Object.assign(WHITES, {
		// whitepoint values from ASTM E308-01 with 10nm spacing, 1931 2 degree observer
		// all normalized to Y (luminance) = 1.00000
		// Illuminant A is a tungsten electric light, giving a very warm, orange light.
		A:  [1.09850, 1.00000, 0.35585],

		// Illuminant C was an early approximation to daylight: illuminant A with a blue filter.
		C:   [0.98074, 1.000000, 1.18232],

		// The daylight series of illuminants simulate natural daylight.
		// The color temperature (in degrees Kelvin/100) ranges from
		// cool, overcast daylight (D50) to bright, direct sunlight (D65).
		D55: [0.95682, 1.00000, 0.92149],
		D75: [0.94972, 1.00000, 1.22638],

		// Equal-energy illuminant, used in two-stage CAT16
		E:   [1.00000, 1.00000, 1.00000],

		// The F series of illuminants represent fluorescent lights
		F2:  [0.99186, 1.00000, 0.67393],
		F7:  [0.95041, 1.00000, 1.08747],
		F11: [1.00962, 1.00000, 0.64350],
	});

	// The ACES whitepoint
	// see TB-2018-001 Derivation of the ACES White Point CIE Chromaticity Coordinates
	// also https://github.com/ampas/aces-dev/blob/master/documents/python/TB-2018-001/aces_wp.py
	// Similar to D60
	WHITES.ACES = [0.32168/0.33767, 1.00000, (1.00000 - 0.32168 - 0.33767)/0.33767];

	// convert an array of linear-light ACEScc values to CIE XYZ
	const toXYZ_M = [
		[  0.6624541811085053,   0.13400420645643313,  0.1561876870049078  ],
		[  0.27222871678091454,  0.6740817658111484,   0.05368951740793705 ],
		[ -0.005574649490394108, 0.004060733528982826, 1.0103391003129971  ]
	];
	const fromXYZ_M = [
		[  1.6410233796943257,   -0.32480329418479,    -0.23642469523761225  ],
		[ -0.6636628587229829,    1.6153315916573379,   0.016756347685530137 ],
		[  0.011721894328375376, -0.008284441996237409, 0.9883948585390215   ]
	];

	var ACEScg = new RGBColorSpace({
		id: "acescg",
		name: "ACEScg",

		// ACEScg – A scene-referred, linear-light encoding of ACES Data
		// https://docs.acescentral.com/specifications/acescg/
		// uses the AP1 primaries, see section 4.3.1 Color primaries
		coords: {
			r: {
				range: [0, 65504],
				name: "Red"
			},
			g: {
				range: [0, 65504],
				name: "Green"
			},
			b: {
				range: [0, 65504],
				name: "Blue"
			}
		},

		referred: "scene",

		white: WHITES.ACES,

		toXYZ_M,
		fromXYZ_M,

		formats: {
			color: {}
		},
	});

	// export default Color;

	const ε = 2 ** -16;

	// the smallest value which, in the 32bit IEEE 754 float encoding,
	// decodes as a non-negative value
	const ACES_min_nonzero = -0.35828683;

	// brightest encoded value, decodes to 65504
	const ACES_cc_max = (Math.log2(65504) + 9.72) / 17.52; // 1.468

	var acescc = new RGBColorSpace({
		id: "acescc",
		name: "ACEScc",
		// see S-2014-003 ACEScc – A Logarithmic Encoding of ACES Data
		// https://docs.acescentral.com/specifications/acescc/
		// uses the AP1 primaries, see section 4.3.1 Color primaries

		// Appendix A: "Very small ACES scene referred values below 7 1/4 stops
		// below 18% middle gray are encoded as negative ACEScc values.
		// These values should be preserved per the encoding in Section 4.4
		// so that all positive ACES values are maintained."
		coords: {
			r: {
				range: [ACES_min_nonzero, ACES_cc_max],
				name: "Red"
			},
			g: {
				range: [ACES_min_nonzero, ACES_cc_max],
				name: "Green"
			},
			b: {
				range: [ACES_min_nonzero, ACES_cc_max],
				name: "Blue"
			}
		},
		referred: "scene",

		base: ACEScg,
		// from section 4.4.2 Decoding Function
		toBase (RGB) {
			const low = (9.72 - 15) / 17.52; // -0.3014

			return RGB.map(function (val) {
				if (val <= low) {
					return (2 ** ((val * 17.52) - 9.72) - ε) * 2; // very low values, below -0.3014
				}
				else if (val < ACES_cc_max) {
					return 2 ** ((val * 17.52) - 9.72);
				}
				else { // val >= ACES_cc_max
					return 65504;
				}
			});
		},

		// Non-linear encoding function from S-2014-003, section 4.4.1 Encoding Function
		fromBase (RGB) {
			return RGB.map(function (val) {
				if (val <= 0) {
					return (Math.log2(ε) + 9.72) / 17.52; // -0.3584
				}
				else if (val < ε) {
					return  (Math.log2(ε + val * 0.5) + 9.72) / 17.52;
				}
				else { // val >= ε
					return  (Math.log2(val) + 9.72) / 17.52;
				}
			});
		},
		// encoded media white (rgb 1,1,1) => linear  [ 222.861, 222.861, 222.861 ]
		// encoded media black (rgb 0,0,0) => linear [ 0.0011857, 0.0011857, 0.0011857]
		formats: {
			color: {}
		}
	});

	var spaces = /*#__PURE__*/Object.freeze({
		__proto__: null,
		A98RGB: a98rgb,
		A98RGB_Linear: A98Linear,
		ACEScc: acescc,
		ACEScg: ACEScg,
		HSL: HSL,
		HSV: HSV,
		HWB: hwb,
		ICTCP: ictcp,
		JzCzHz: jzczhz,
		Jzazbz: Jzazbz,
		LCH: lch,
		Lab: lab,
		Lab_D65: lab_d65,
		OKLCH: oklch,
		OKLab: OKLab,
		P3: P3,
		P3_Linear: P3Linear,
		ProPhoto: prophoto,
		ProPhoto_Linear: ProPhotoLinear,
		REC_2020: REC2020,
		REC_2020_Linear: REC2020Linear,
		REC_2100_HLG: rec2100Hlg,
		REC_2100_PQ: rec2100Pq,
		XYZ_ABS_D65: XYZ_Abs_D65,
		XYZ_D50: XYZ_D50,
		XYZ_D65: XYZ_D65,
		sRGB: sRGB,
		sRGB_Linear: sRGBLinear
	});

	/**
	 * Class that represents a color
	 */
	class Color {
		/**
		 * Creates an instance of Color.
		 * Signatures:
		 * - `new Color(stringToParse)`
		 * - `new Color(otherColor)`
		 * - `new Color({space, coords, alpha})`
		 * - `new Color(space, coords, alpha)`
		 * - `new Color(spaceId, coords, alpha)`
		 */
		constructor (...args) {
			let color;

			if (args.length === 1) {
				color = getColor(args[0]);
			}

			let space, coords, alpha;

			if (color) {
				space = color.space || color.spaceId;
				coords = color.coords;
				alpha = color.alpha;
			}
			else {
				// default signature new Color(ColorSpace, array [, alpha])
				[space, coords, alpha] = args;
			}

			Object.defineProperty(this, "space", {
				value: ColorSpace.get(space),
				writable: false,
				enumerable: true,
				configurable: true, // see note in https://262.ecma-international.org/8.0/#sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver
			});
			this.coords = coords? coords.slice() : [0, 0, 0];
			this.alpha = alpha < 1? alpha : 1; // this also deals with NaN etc

			// Convert "NaN" to NaN
			for (let i = 0; i < this.coords.length; i++) {
				if (this.coords[i] === "NaN") {
					this.coords[i] = NaN;
				}
			}

			// Define getters and setters for each coordinate
			for (let id in this.space.coords) {
				Object.defineProperty(this, id, {
					get: () => this.get(id),
					set: value => this.set(id, value)
				});
			}
		}

		get spaceId () {
			return this.space.id;
		}

		clone () {
			return new Color(this.space, this.coords, this.alpha);
		}

		toJSON () {
			return {
				spaceId: this.spaceId,
				coords: this.coords,
				alpha: this.alpha
			};
		}

		display (...args) {
			let ret = display(this, ...args);

			// Convert color object to Color instance
			ret.color = new Color(ret.color);

			return ret;
		}

		/**
		 * Get a color from the argument passed
		 * Basically gets us the same result as new Color(color) but doesn't clone an existing color object
		 */
		static get (color, ...args) {
			if (color instanceof Color) {
				return color;
			}

			return new Color(color, ...args);
		}

		static defineFunction (name, code, o = code) {
			let {instance = true, returns} = o;

			let func = function (...args) {
				let ret = code(...args);

				if (returns === "color") {
					ret = Color.get(ret);
				}
				else if (returns === "function<color>") {
					let f = ret;
					ret = function (...args) {
						let ret = f(...args);
						return Color.get(ret);
					};
					// Copy any function metadata
					Object.assign(ret, f);
				}
				else if (returns === "array<color>") {
					ret = ret.map(c => Color.get(c));
				}

				return ret;
			};

			if (!(name in Color)) {
				Color[name] = func;
			}

			if (instance) {
				Color.prototype[name] = function (...args) {
					return func(this, ...args);
				};
			}
		}

		static defineFunctions (o) {
			for (let name in o) {
				Color.defineFunction(name, o[name], o[name]);
			}
		}

		static extend (exports) {
			if (exports.register) {
				exports.register(Color);
			}
			else {
				// No register method, just add the module's functions
				for (let name in exports) {
					Color.defineFunction(name, exports[name]);
				}
			}
		}
	}
	Color.defineFunctions({
		get,
		getAll,
		set,
		setAll,
		to,
		equals,
		inGamut,
		toGamut,
		distance,
		toString: serialize$1,
	});

	Object.assign(Color, {
		util,
		hooks,
		WHITES,
		Space: ColorSpace,
		spaces: ColorSpace.registry,
		parse: parse$1,

		// Global defaults one may want to configure
		defaults
	});

	for (let key of Object.keys(spaces)) {
		ColorSpace.register(spaces[key]);
	}

	/**
	 * This plugin defines getters and setters for color[spaceId]
	 * e.g. color.lch on *any* color gives us the lch coords
	 */

	// Add space accessors to existing color spaces
	for (let id in ColorSpace.registry) {
		addSpaceAccessors(id, ColorSpace.registry[id]);
	}

	// Add space accessors to color spaces not yet created
	hooks.add("colorspace-init-end", space => {
		addSpaceAccessors(space.id, space);
		space.aliases?.forEach(alias => {
			addSpaceAccessors(alias, space);
		});
	});

	function addSpaceAccessors (id, space) {
		// Coordinates can be looked up by both id and name
		Object.keys(space.coords);
		Object.values(space.coords).map(c => c.name);


		let propId = id.replace(/-/g, "_");

		Object.defineProperty(Color.prototype, propId, {
			// Convert coords to coords in another colorspace and return them
			// Source colorspace: this.spaceId
			// Target colorspace: id
			get () {
				let ret = this.getAll(id);

				if (typeof Proxy === "undefined") {
					// If proxies are not supported, just return a static array
					return ret;
				}

				// Enable color.spaceId.coordName syntax
				return new Proxy(ret, {
					has: (obj, property) => {
						try {
							ColorSpace.resolveCoord([space, property]);
							return true;
						}
						catch (e) {}

						return Reflect.has(obj, property);
					},
					get: (obj, property, receiver) => {
						if (property && typeof property !== "symbol" && !(property in obj)) {
							let {index} = ColorSpace.resolveCoord([space, property]);

							if (index >= 0) {
								return obj[index];
							}
						}

						return Reflect.get(obj, property, receiver);
					},
					set: (obj, property, value, receiver) => {
						if (property && typeof property !== "symbol" && !(property in obj) || property >= 0) {
							let {index} = ColorSpace.resolveCoord([space, property]);

							if (index >= 0) {
								obj[index] = value;

								// Update color.coords
								this.setAll(id, obj);

								return true;
							}
						}

						return Reflect.set(obj, property, value, receiver);
					},
				});
			},
			// Convert coords in another colorspace to internal coords and set them
			// Target colorspace: this.spaceId
			// Source colorspace: id
			set (coords) {
				this.setAll(id, coords);
			},
			configurable: true,
			enumerable: true
		});
	}

	// Import all modules of Color.js

	Color.extend(deltaEMethods);
	Color.extend({deltaE});
	Object.assign(Color, {deltaEMethods});
	Color.extend(variations);
	Color.extend({contrast});
	Color.extend(chromaticity);
	Color.extend(luminance);
	Color.extend(interpolation);
	Color.extend(contrastMethods);

	/* src/lib/components/editor/inputs/ColorInput.svelte generated by Svelte v4.2.10 */

	const { console: console_1$1 } = globals;
	const file$c = "src/lib/components/editor/inputs/ColorInput.svelte";

	function create_fragment$e(ctx) {
		let div1;
		let div0;
		let input0;
		let t;
		let input1;
		let mounted;
		let dispose;

		const block = {
			c: function create() {
				div1 = element("div");
				div0 = element("div");
				input0 = element("input");
				t = space();
				input1 = element("input");
				attr_dev(input0, "type", "color");
				attr_dev(input0, "class", "absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 rounded-full h-10 w-10 cursor-pointer");
				input0.value = /*inputString*/ ctx[2];
				add_location(input0, file$c, 33, 4, 740);
				attr_dev(div0, "class", "overflow-hidden rounded-full w-5 h-5 border border-border relative");
				add_location(div0, file$c, 30, 2, 648);
				attr_dev(input1, "class", "w-[3.5rem] text-xs border-none text-text bg-transparent text-end focus:outline-none focus:ring-0");
				attr_dev(input1, "type", "text");
				input1.value = /*inputString*/ ctx[2];
				attr_dev(input1, "placeholder", "--");
				add_location(input1, file$c, 44, 2, 1079);
				attr_dev(div1, "class", "flex flex-row gap-1 justify-end items-center rounded-lg cursor-pointer");
				add_location(div1, file$c, 27, 0, 558);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div1, anchor);
				append_dev(div1, div0);
				append_dev(div0, input0);
				append_dev(div1, t);
				append_dev(div1, input1);

				if (!mounted) {
					dispose = [
						listen_dev(input0, "input", /*input_handler*/ ctx[3], false, false, false, false),
						listen_dev(input1, "input", /*input_handler_1*/ ctx[4], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, [dirty]) {
				if (dirty & /*inputString*/ 4) {
					prop_dev(input0, "value", /*inputString*/ ctx[2]);
				}

				if (dirty & /*inputString*/ 4 && input1.value !== /*inputString*/ ctx[2]) {
					prop_dev(input1, "value", /*inputString*/ ctx[2]);
				}
			},
			i: noop$3,
			o: noop$3,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div1);
				}

				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$e.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function expandShorthandHex(hex) {
		if (hex.length <= 5) {
			return `#${hex[1]}${hex[1]}${hex[2]}${hex[2]}${hex[3]}${hex[3]}`;
		}

		return hex;
	}

	function instance$e($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('ColorInput', slots, []);
		let { elementStyle } = $$props;
		let { updateElementStyle } = $$props;
		let inputString = "#000000";

		$$self.$$.on_mount.push(function () {
			if (elementStyle === undefined && !('elementStyle' in $$props || $$self.$$.bound[$$self.$$.props['elementStyle']])) {
				console_1$1.warn("<ColorInput> was created without expected prop 'elementStyle'");
			}

			if (updateElementStyle === undefined && !('updateElementStyle' in $$props || $$self.$$.bound[$$self.$$.props['updateElementStyle']])) {
				console_1$1.warn("<ColorInput> was created without expected prop 'updateElementStyle'");
			}
		});

		const writable_props = ['elementStyle', 'updateElementStyle'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<ColorInput> was created with unknown prop '${key}'`);
		});

		const input_handler = event => {
			$$invalidate(2, inputString = event.target.value);
			updateElementStyle(elementStyle.key, event.target.value);
		};

		const input_handler_1 = event => {
			$$invalidate(2, inputString = event.target.value);
			updateElementStyle(elementStyle.key, event.target.value);
		};

		$$self.$$set = $$props => {
			if ('elementStyle' in $$props) $$invalidate(0, elementStyle = $$props.elementStyle);
			if ('updateElementStyle' in $$props) $$invalidate(1, updateElementStyle = $$props.updateElementStyle);
		};

		$$self.$capture_state = () => ({
			Color,
			elementStyle,
			updateElementStyle,
			inputString,
			expandShorthandHex
		});

		$$self.$inject_state = $$props => {
			if ('elementStyle' in $$props) $$invalidate(0, elementStyle = $$props.elementStyle);
			if ('updateElementStyle' in $$props) $$invalidate(1, updateElementStyle = $$props.updateElementStyle);
			if ('inputString' in $$props) $$invalidate(2, inputString = $$props.inputString);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*elementStyle*/ 1) {
				if (elementStyle.value) {
					try {
						$$invalidate(2, inputString = expandShorthandHex(new Color(elementStyle.value).toString({ format: "hex" })));
					} catch(e) {
						console.error("Error parsing color", e);
						$$invalidate(2, inputString = "#000000");
					}
				}
			}
		};

		return [elementStyle, updateElementStyle, inputString, input_handler, input_handler_1];
	}

	class ColorInput extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$e, create_fragment$e, safe_not_equal, { elementStyle: 0, updateElementStyle: 1 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "ColorInput",
				options,
				id: create_fragment$e.name
			});
		}

		get elementStyle() {
			throw new Error("<ColorInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set elementStyle(value) {
			throw new Error("<ColorInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get updateElementStyle() {
			throw new Error("<ColorInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set updateElementStyle(value) {
			throw new Error("<ColorInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/lib/components/editor/inputs/NumberUnitInput.svelte generated by Svelte v4.2.10 */
	const file$b = "src/lib/components/editor/inputs/NumberUnitInput.svelte";

	function get_each_context$3(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[12] = list[i];
		return child_ctx;
	}

	// (32:0) {#if elementStyle}
	function create_if_block$7(ctx) {
		let div;
		let input;
		let input_class_value;
		let input_value_value;
		let t0;
		let select;
		let option_1;
		let t1;
		let show_if = /*parsedUnit*/ ctx[6] !== "" && !/*elementStyle*/ ctx[0].units.includes(/*parsedUnit*/ ctx[6]);
		let if_block_anchor;
		let select_name_value;
		let select_class_value;
		let select_value_value;
		let mounted;
		let dispose;
		let if_block = show_if && create_if_block_1$4(ctx);
		let each_value = ensure_array_like_dev(/*elementStyle*/ ctx[0].units ?? []);
		let each_blocks = [];

		for (let i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
		}

		const block = {
			c: function create() {
				div = element("div");
				input = element("input");
				t0 = space();
				select = element("select");
				option_1 = element("option");
				t1 = text(auto);
				if (if_block) if_block.c();
				if_block_anchor = empty();

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				attr_dev(input, "type", "number");
				attr_dev(input, "class", input_class_value = "" + (/*inputWidth*/ ctx[3] + " text-xs border-none text-text bg-transparent text-end focus:outline-none focus:ring-0 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"));
				attr_dev(input, "placeholder", "--");
				input.value = input_value_value = /*isEmpty*/ ctx[8]() ? "" : /*parsedNumber*/ ctx[5];
				add_location(input, file$b, 44, 4, 1139);
				option_1.__value = auto;
				set_input_value(option_1, option_1.__value);
				add_location(option_1, file$b, 84, 6, 2583);
				attr_dev(select, "name", select_name_value = /*elementStyle*/ ctx[0].displayName);
				attr_dev(select, "placeholder", "auto");
				attr_dev(select, "class", select_class_value = "text-xs " + /*unitWidth*/ ctx[4] + " border-none text-text bg-transparent appearance-none " + (/*unitEnd*/ ctx[2] ? 'text-end' : 'text-start') + " focus:outline-none focus:ring-0");
				add_location(select, file$b, 57, 4, 1708);
				attr_dev(div, "class", "flex flex-row gap-1 justify-end");
				add_location(div, file$b, 43, 2, 1089);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
				append_dev(div, input);
				append_dev(div, t0);
				append_dev(div, select);
				append_dev(select, option_1);
				append_dev(option_1, t1);
				if (if_block) if_block.m(select, null);
				append_dev(select, if_block_anchor);

				for (let i = 0; i < each_blocks.length; i += 1) {
					if (each_blocks[i]) {
						each_blocks[i].m(select, null);
					}
				}

				select_option(select, /*isEmpty*/ ctx[8]() ? auto : /*parsedUnit*/ ctx[6]);

				if (!mounted) {
					dispose = [
						listen_dev(input, "input", /*input_handler*/ ctx[9], false, false, false, false),
						listen_dev(select, "input", /*input_handler_1*/ ctx[10], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (dirty & /*inputWidth*/ 8 && input_class_value !== (input_class_value = "" + (/*inputWidth*/ ctx[3] + " text-xs border-none text-text bg-transparent text-end focus:outline-none focus:ring-0 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"))) {
					attr_dev(input, "class", input_class_value);
				}

				if (dirty & /*parsedNumber*/ 32 && input_value_value !== (input_value_value = /*isEmpty*/ ctx[8]() ? "" : /*parsedNumber*/ ctx[5]) && input.value !== input_value_value) {
					prop_dev(input, "value", input_value_value);
				}

				if (dirty & /*parsedUnit, elementStyle*/ 65) show_if = /*parsedUnit*/ ctx[6] !== "" && !/*elementStyle*/ ctx[0].units.includes(/*parsedUnit*/ ctx[6]);

				if (show_if) {
					if (if_block) {
						if_block.p(ctx, dirty);
					} else {
						if_block = create_if_block_1$4(ctx);
						if_block.c();
						if_block.m(select, if_block_anchor);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}

				if (dirty & /*elementStyle*/ 1) {
					each_value = ensure_array_like_dev(/*elementStyle*/ ctx[0].units ?? []);
					let i;

					for (i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context$3(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(child_ctx, dirty);
						} else {
							each_blocks[i] = create_each_block$3(child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(select, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].d(1);
					}

					each_blocks.length = each_value.length;
				}

				if (dirty & /*elementStyle*/ 1 && select_name_value !== (select_name_value = /*elementStyle*/ ctx[0].displayName)) {
					attr_dev(select, "name", select_name_value);
				}

				if (dirty & /*unitWidth, unitEnd*/ 20 && select_class_value !== (select_class_value = "text-xs " + /*unitWidth*/ ctx[4] + " border-none text-text bg-transparent appearance-none " + (/*unitEnd*/ ctx[2] ? 'text-end' : 'text-start') + " focus:outline-none focus:ring-0")) {
					attr_dev(select, "class", select_class_value);
				}

				if (dirty & /*parsedUnit, elementStyle, auto*/ 65 && select_value_value !== (select_value_value = /*isEmpty*/ ctx[8]() ? auto : /*parsedUnit*/ ctx[6])) {
					select_option(select, /*isEmpty*/ ctx[8]() ? auto : /*parsedUnit*/ ctx[6]);
				}
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (if_block) if_block.d();
				destroy_each(each_blocks, detaching);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$7.name,
			type: "if",
			source: "(32:0) {#if elementStyle}",
			ctx
		});

		return block;
	}

	// (75:6) {#if parsedUnit !== "" && !elementStyle.units.includes(parsedUnit)}
	function create_if_block_1$4(ctx) {
		let option_1;
		let t;

		const block = {
			c: function create() {
				option_1 = element("option");
				t = text(/*parsedUnit*/ ctx[6]);
				option_1.__value = /*parsedUnit*/ ctx[6];
				set_input_value(option_1, option_1.__value);
				add_location(option_1, file$b, 86, 8, 2702);
			},
			m: function mount(target, anchor) {
				insert_dev(target, option_1, anchor);
				append_dev(option_1, t);
			},
			p: function update(ctx, dirty) {
				if (dirty & /*parsedUnit*/ 64) set_data_dev(t, /*parsedUnit*/ ctx[6]);

				if (dirty & /*parsedUnit, elementStyle, auto*/ 65) {
					prop_dev(option_1, "__value", /*parsedUnit*/ ctx[6]);
					set_input_value(option_1, option_1.__value);
				}
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(option_1);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_1$4.name,
			type: "if",
			source: "(75:6) {#if parsedUnit !== \\\"\\\" && !elementStyle.units.includes(parsedUnit)}",
			ctx
		});

		return block;
	}

	// (78:6) {#each elementStyle.units ?? [] as option}
	function create_each_block$3(ctx) {
		let option_1;
		let t_value = /*option*/ ctx[12] + "";
		let t;
		let option_1_value_value;

		const block = {
			c: function create() {
				option_1 = element("option");
				t = text(t_value);
				option_1.__value = option_1_value_value = /*option*/ ctx[12];
				set_input_value(option_1, option_1.__value);
				add_location(option_1, file$b, 89, 8, 2820);
			},
			m: function mount(target, anchor) {
				insert_dev(target, option_1, anchor);
				append_dev(option_1, t);
			},
			p: function update(ctx, dirty) {
				if (dirty & /*elementStyle*/ 1 && t_value !== (t_value = /*option*/ ctx[12] + "")) set_data_dev(t, t_value);

				if (dirty & /*elementStyle*/ 1 && option_1_value_value !== (option_1_value_value = /*option*/ ctx[12])) {
					prop_dev(option_1, "__value", option_1_value_value);
					set_input_value(option_1, option_1.__value);
				}
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(option_1);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_each_block$3.name,
			type: "each",
			source: "(78:6) {#each elementStyle.units ?? [] as option}",
			ctx
		});

		return block;
	}

	function create_fragment$d(ctx) {
		let if_block_anchor;
		let if_block = /*elementStyle*/ ctx[0] && create_if_block$7(ctx);

		const block = {
			c: function create() {
				if (if_block) if_block.c();
				if_block_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (if_block) if_block.m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
			},
			p: function update(ctx, [dirty]) {
				if (/*elementStyle*/ ctx[0]) {
					if (if_block) {
						if_block.p(ctx, dirty);
					} else {
						if_block = create_if_block$7(ctx);
						if_block.c();
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}
			},
			i: noop$3,
			o: noop$3,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if (if_block) if_block.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$d.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const auto = "auto";

	function instance$d($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('NumberUnitInput', slots, []);
		let { elementStyle } = $$props;
		let { updateElementStyle } = $$props;
		let { unitEnd = false } = $$props;
		let { inputWidth = "w-8" } = $$props;
		let { unitWidth = "w-8" } = $$props;
		let parsedNumber = 0;
		let parsedUnit = "";

		const stringToParsedValue = val => {
			const matches = val.match(/([-+]?[0-9]*\.?[0-9]+)([a-zA-Z%]*)/);
			let num = matches ? parseFloat(matches[1]) : 0;
			let unit = matches && matches[2] ? matches[2] : "";

			// Handle opacity, if no parsed unit, convert to percentage
			if (elementStyle.key === "opacity" && unit === "") {
				unit = "%";
				num = num <= 1 ? num * 100 : num;
			}

			return [num, unit];
		};

		const parsedValueToString = (floatValue, unit) => {
			return `${floatValue}${unit}`;
		};

		function isEmpty() {
			const numberIsEmpty = isNaN(parsedNumber) || parsedNumber === 0;
			const unitIsEmpty = parsedUnit === "";
			return numberIsEmpty && unitIsEmpty;
		}

		$$self.$$.on_mount.push(function () {
			if (elementStyle === undefined && !('elementStyle' in $$props || $$self.$$.bound[$$self.$$.props['elementStyle']])) {
				console.warn("<NumberUnitInput> was created without expected prop 'elementStyle'");
			}

			if (updateElementStyle === undefined && !('updateElementStyle' in $$props || $$self.$$.bound[$$self.$$.props['updateElementStyle']])) {
				console.warn("<NumberUnitInput> was created without expected prop 'updateElementStyle'");
			}
		});

		const writable_props = ['elementStyle', 'updateElementStyle', 'unitEnd', 'inputWidth', 'unitWidth'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NumberUnitInput> was created with unknown prop '${key}'`);
		});

		const input_handler = e => {
			const stringValue = parsedValueToString(e.target?.value, parsedUnit);

			if (stringValue !== elementStyle.value) {
				updateElementStyle(elementStyle.key, stringValue);
			}
		};

		const input_handler_1 = e => {
			if (e.target?.value === auto) {
				updateElementStyle(elementStyle.key, "inherit");
				$$invalidate(6, parsedUnit = "");
				$$invalidate(5, parsedNumber = 0);
				return;
			}

			let newNumber = updateValueToUnit(parsedNumber, parsedUnit, e.target?.value);
			const stringValue = parsedValueToString(newNumber, e.target?.value);

			if (stringValue !== elementStyle.value) {
				updateElementStyle(elementStyle.key, stringValue);
			}

			$$invalidate(5, parsedNumber = newNumber);
		};

		$$self.$$set = $$props => {
			if ('elementStyle' in $$props) $$invalidate(0, elementStyle = $$props.elementStyle);
			if ('updateElementStyle' in $$props) $$invalidate(1, updateElementStyle = $$props.updateElementStyle);
			if ('unitEnd' in $$props) $$invalidate(2, unitEnd = $$props.unitEnd);
			if ('inputWidth' in $$props) $$invalidate(3, inputWidth = $$props.inputWidth);
			if ('unitWidth' in $$props) $$invalidate(4, unitWidth = $$props.unitWidth);
		};

		$$self.$capture_state = () => ({
			updateValueToUnit,
			elementStyle,
			updateElementStyle,
			unitEnd,
			inputWidth,
			unitWidth,
			parsedNumber,
			parsedUnit,
			auto,
			stringToParsedValue,
			parsedValueToString,
			isEmpty
		});

		$$self.$inject_state = $$props => {
			if ('elementStyle' in $$props) $$invalidate(0, elementStyle = $$props.elementStyle);
			if ('updateElementStyle' in $$props) $$invalidate(1, updateElementStyle = $$props.updateElementStyle);
			if ('unitEnd' in $$props) $$invalidate(2, unitEnd = $$props.unitEnd);
			if ('inputWidth' in $$props) $$invalidate(3, inputWidth = $$props.inputWidth);
			if ('unitWidth' in $$props) $$invalidate(4, unitWidth = $$props.unitWidth);
			if ('parsedNumber' in $$props) $$invalidate(5, parsedNumber = $$props.parsedNumber);
			if ('parsedUnit' in $$props) $$invalidate(6, parsedUnit = $$props.parsedUnit);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*elementStyle*/ 1) {
				$$invalidate(5, [parsedNumber, parsedUnit] = stringToParsedValue(elementStyle.value), parsedNumber, ($$invalidate(6, parsedUnit), $$invalidate(0, elementStyle)));
			}
		};

		return [
			elementStyle,
			updateElementStyle,
			unitEnd,
			inputWidth,
			unitWidth,
			parsedNumber,
			parsedUnit,
			parsedValueToString,
			isEmpty,
			input_handler,
			input_handler_1
		];
	}

	class NumberUnitInput extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$d, create_fragment$d, safe_not_equal, {
				elementStyle: 0,
				updateElementStyle: 1,
				unitEnd: 2,
				inputWidth: 3,
				unitWidth: 4
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "NumberUnitInput",
				options,
				id: create_fragment$d.name
			});
		}

		get elementStyle() {
			throw new Error("<NumberUnitInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set elementStyle(value) {
			throw new Error("<NumberUnitInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get updateElementStyle() {
			throw new Error("<NumberUnitInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set updateElementStyle(value) {
			throw new Error("<NumberUnitInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get unitEnd() {
			throw new Error("<NumberUnitInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set unitEnd(value) {
			throw new Error("<NumberUnitInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get inputWidth() {
			throw new Error("<NumberUnitInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set inputWidth(value) {
			throw new Error("<NumberUnitInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get unitWidth() {
			throw new Error("<NumberUnitInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set unitWidth(value) {
			throw new Error("<NumberUnitInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	const TagMap = {
	    html: { title: "Root Element", description: "Represents the root (top-level element) of an HTML document, so it is also referred to as the root element. All other elements must be descendants of this element." },
	    head: { title: "Head Element", description: "Contains machine-readable information (metadata) about the document, like its title, scripts, and style sheets." },
	    body: { title: "Body", description: "Represents the content of an HTML document. There can be only one such element in a document." },
	    h1: { title: "Heading 1", description: "Represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest." },
	    h2: { title: "Heading 2", description: "Represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest." },
	    h3: { title: "Heading 3", description: "Represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest." },
	    h4: { title: "Heading 4", description: "Represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest." },
	    h5: { title: "Heading 5", description: "Represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest." },
	    h6: { title: "Heading 6", description: "Represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest." },
	    div: { title: "Division", description: "The generic container for flow content. It has no effect on the content or layout until styled in some way using CSS (e.g., styling is directly applied to it, or some kind of layout model like flexbox is applied to its parent element)." },
	    p: {
	        title: "Paragraph", description: "Represents a paragraph. Paragraphs are usually represented in visual media as blocks of text separated from adjacent blocks by blank lines and/or first-line indentation, but HTML paragraphs can be any structural grouping of related content, such as images or form fields."
	    },
	    span: {
	        title: "Span", description: "The <span> HTML element is a generic inline container for phrasing content, which does not inherently represent anything. It can be used to group elements for styling purposes (using the class or id attributes), or because they share attribute values, such as lang. It should be used only when no other semantic element is appropriate. <span> is very much like a <div> element, but <div> is a block-level element whereas a <span> is an inline-level element."
	    },
	    a: {
	        title: "Anchor", description: "<a>	Together with its href attribute, creates a hyperlink to web pages, files, email addresses, locations within the current page, or anything else a URL can address."
	    },
	    link: {
	        title: "Link", description: "Specifies relationships between the current document and an external resource. This element is most commonly used to link to CSS but is also used to establish site icons (both 'favicon' style icons and icons for the home screen and apps on mobile devices) among other things."
	    },
	    nav: {
	        title: "Navigation", description: "Represents a section of a page whose purpose is to provide navigation links, either within the current document or to other documents. Common examples of navigation sections are menus, tables of contents, and indexes."
	    },
	    ul: {
	        title: "Unordered List", description: "Represents an unordered list of items, typically rendered as a bulleted list."
	    },
	    ol: {
	        title: "Ordered List", description: "Represents an ordered list of items, typically rendered as a numbered list."
	    },
	    li: {
	        title: "List Item", description: "Represents an item in a list. It can only appear inside a list element, like <ul> or <ol>."
	    },
	    img: {
	        title: "Image", description: "Embeds an image into the document."
	    },
	    video: {
	        title: "Video", description: "Embeds a media player which supports video playback into the document."
	    },
	    audio: {
	        title: "Audio", description: "Embeds a media player which supports audio playback into the document."
	    },
	    iframe: {
	        title: "Inline Frame", description: "Represents a nested browsing context, effectively embedding another HTML page into the current page."
	    },
	    form: {
	        title: "Form", description: "Represents a document section that contains interactive controls to submit information to a web server."
	    },
	    input: {
	        title: "Input", description: "An element is used to create interactive controls for web-based forms in order to accept data from the user."
	    },
	    label: {
	        title: "Label", description: "Represents a caption for an item in a user interface."
	    },
	    select: {
	        title: "Select", description: "Represents a control that provides a menu of options."
	    },
	    option: {
	        title: "Option", description: "Represents an option in a <select> element, or a suggestion of a <datalist> element."
	    },
	    textarea: {
	        title: "Text Area", description: "Represents a multi-line plain-text editing control."
	    },
	    button: {
	        title: "Button", description: "The <button> HTML element is an interactive element activated by a user with a mouse, keyboard, finger, voice command, or other assistive technology. Once activated, it then performs an action, such as submitting a form or opening a dialog. \n\nBy default, HTML buttons are presented in a style resembling the platform the user agent runs on, but you can change buttons' appearance with CSS."
	    },
	    svg: {
	        title: "Scalable Vector Graphics", description: "A language for describing two-dimensional vector graphics in XML."
	    },
	    canvas: {
	        title: "Canvas", description: "Provides a resolution-dependent bitmap area, which can be used for rendering graphs, game graphics, or other visual images on the fly."
	    },
	    footer: {
	        title: "Footer", description: "Represents a footer for its nearest sectioning content or sectioning root element. A footer typically contains information about its section such as who wrote it, links to related documents, copyright data, and the like."
	    },
	    header: {
	        title: "Header", description: "Represents introductory content, typically a group of introductory or navigational aids."
	    },
	    main: {
	        title: "Main", description: "Represents the main content of the <body> of a document or application. The main content area consists of content that is directly related to or expands upon the central topic of a document or central functionality of an application."
	    },
	    section: {
	        title: "Section", description: "Represents a standalone section — which doesn't have a more specific semantic element to represent it — contained within an HTML document."
	    },
	    article: {
	        title: "Article", description: "Represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable (e.g., in syndication)."
	    },
	    aside: {
	        title: "Aside", description: "Represents a portion of a document whose content is only indirectly related to the document's main content."
	    },
	    details: {
	        title: "Details", description: "Represents additional information or controls which the user can obtain on demand."
	    },
	    summary: {
	        title: "Summary", description: "Represents a summary, caption, or legend for the rest of the contents of the <details> element, if any."
	    },
	    dialog: {
	        title: "Dialog", description: "Represents a dialog box or other interactive component, such as an inspector or window."
	    },
	    figure: {
	        title: "Figure", description: "Represents self-contained content, potentially with an optional caption, which is specified using the (figcaption) element."
	    },
	    figcaption: {
	        title: "Figure Caption", description: "Represents a caption or legend for the rest of the contents of the <figure> element, if any."
	    },
	    hr: {
	        title: "Horizontal Rule", description: "Represents a thematic break between paragraph-level elements: for example, a change of scene in a story, or a shift of topic within a section."
	    },
	    br: {
	        title: "Line Break", description: "Produces a line break in text (carriage-return). It is useful for writing a poem or an address, where the division of lines is significant."
	    },
	    small: {
	        title: "Small", description: "Represents side-comments such as small print."
	    },
	    strong: {
	        title: "Strong", description: "Indicates that its contents have strong importance, seriousness, or urgency."
	    },
	    em: {
	        title: "Emphasis", description: "Represents stress emphasis of its contents."
	    },
	    mark: {
	        title: "Mark", description: "Represents highlighted text, i.e., a run of text marked for reference purpose, due to its relevance in a particular context."
	    },
	    cite: {
	        title: "Citation", description: "Represents the title of a work (e.g. a book, a paper, an essay, a poem, a score, a song, a script, a film, a TV show, a game, a sculpture, a painting, a theater production, a play, an opera, a musical, an exhibition, a legal case report, or a legal code)."
	    },
	};

	/* src/lib/components/editor/inputs/TagInfo.svelte generated by Svelte v4.2.10 */
	const file$a = "src/lib/components/editor/inputs/TagInfo.svelte";

	// (24:2) {#if showMore}
	function create_if_block$6(ctx) {
		let div;
		let p0;
		let t0_value = /*tagInfo*/ ctx[2].description + "";
		let t0;
		let t1;
		let p1;
		let a;
		let div_transition;
		let current;

		const block = {
			c: function create() {
				div = element("div");
				p0 = element("p");
				t0 = text(t0_value);
				t1 = space();
				p1 = element("p");
				a = element("a");
				a.textContent = "Learn more";
				attr_dev(p0, "class", "pt-2 whitespace-pre-line");
				add_location(p0, file$a, 26, 6, 734);
				attr_dev(a, "href", "https://developer.mozilla.org/en-US/docs/Web/HTML/Element");
				attr_dev(a, "target", "_blank");
				add_location(a, file$a, 30, 8, 861);
				attr_dev(p1, "class", "pt-2 text-xs underline");
				add_location(p1, file$a, 29, 6, 818);
				add_location(div, file$a, 25, 4, 705);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
				append_dev(div, p0);
				append_dev(p0, t0);
				append_dev(div, t1);
				append_dev(div, p1);
				append_dev(p1, a);
				current = true;
			},
			p: function update(ctx, dirty) {
				if ((!current || dirty & /*tagInfo*/ 4) && t0_value !== (t0_value = /*tagInfo*/ ctx[2].description + "")) set_data_dev(t0, t0_value);
			},
			i: function intro(local) {
				if (current) return;

				if (local) {
					add_render_callback(() => {
						if (!current) return;
						if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, true);
						div_transition.run(1);
					});
				}

				current = true;
			},
			o: function outro(local) {
				if (local) {
					if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, false);
					div_transition.run(0);
				}

				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (detaching && div_transition) div_transition.end();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$6.name,
			type: "if",
			source: "(24:2) {#if showMore}",
			ctx
		});

		return block;
	}

	function create_fragment$c(ctx) {
		let button;
		let p;
		let span0;
		let t0_value = /*el*/ ctx[0].tagName.toLowerCase() + "";
		let t0;
		let t1;
		let span1;

		let t2_value = (/*tagInfo*/ ctx[2].title.toLowerCase() == /*el*/ ctx[0].tagName.toLowerCase()
		? ""
		: `${TagMap[/*el*/ ctx[0].tagName.toLowerCase()].title}`) + "";

		let t2;
		let t3;
		let mounted;
		let dispose;
		let if_block = /*showMore*/ ctx[1] && create_if_block$6(ctx);

		const block = {
			c: function create() {
				button = element("button");
				p = element("p");
				span0 = element("span");
				t0 = text(t0_value);
				t1 = space();
				span1 = element("span");
				t2 = text(t2_value);
				t3 = space();
				if (if_block) if_block.c();
				attr_dev(span0, "class", "capitalize");
				add_location(span0, file$a, 17, 4, 464);
				add_location(span1, file$a, 18, 4, 527);
				attr_dev(p, "class", "space-x-1");
				add_location(p, file$a, 16, 2, 438);
				attr_dev(button, "class", "text-start w-full p-2 mb-3 bg-stone-800 rounded text-xs cursor-pointer");
				add_location(button, file$a, 12, 0, 303);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, button, anchor);
				append_dev(button, p);
				append_dev(p, span0);
				append_dev(span0, t0);
				append_dev(p, t1);
				append_dev(p, span1);
				append_dev(span1, t2);
				append_dev(button, t3);
				if (if_block) if_block.m(button, null);

				if (!mounted) {
					dispose = listen_dev(button, "click", /*click_handler*/ ctx[4], false, false, false, false);
					mounted = true;
				}
			},
			p: function update(ctx, [dirty]) {
				if (dirty & /*el*/ 1 && t0_value !== (t0_value = /*el*/ ctx[0].tagName.toLowerCase() + "")) set_data_dev(t0, t0_value);

				if (dirty & /*tagInfo, el*/ 5 && t2_value !== (t2_value = (/*tagInfo*/ ctx[2].title.toLowerCase() == /*el*/ ctx[0].tagName.toLowerCase()
				? ""
				: `${TagMap[/*el*/ ctx[0].tagName.toLowerCase()].title}`) + "")) set_data_dev(t2, t2_value);

				if (/*showMore*/ ctx[1]) {
					if (if_block) {
						if_block.p(ctx, dirty);

						if (dirty & /*showMore*/ 2) {
							transition_in(if_block, 1);
						}
					} else {
						if_block = create_if_block$6(ctx);
						if_block.c();
						transition_in(if_block, 1);
						if_block.m(button, null);
					}
				} else if (if_block) {
					group_outros();

					transition_out(if_block, 1, 1, () => {
						if_block = null;
					});

					check_outros();
				}
			},
			i: function intro(local) {
				transition_in(if_block);
			},
			o: function outro(local) {
				transition_out(if_block);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(button);
				}

				if (if_block) if_block.d();
				mounted = false;
				dispose();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$c.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$c($$self, $$props, $$invalidate) {
		let tagInfo;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('TagInfo', slots, []);
		var _a;
		let { el } = $$props;
		let showMore = false;

		$$self.$$.on_mount.push(function () {
			if (el === undefined && !('el' in $$props || $$self.$$.bound[$$self.$$.props['el']])) {
				console.warn("<TagInfo> was created without expected prop 'el'");
			}
		});

		const writable_props = ['el'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TagInfo> was created with unknown prop '${key}'`);
		});

		const click_handler = () => $$invalidate(1, showMore = !showMore);

		$$self.$$set = $$props => {
			if ('el' in $$props) $$invalidate(0, el = $$props.el);
		};

		$$self.$capture_state = () => ({ _a, TagMap, slide, el, showMore, tagInfo });

		$$self.$inject_state = $$props => {
			if ('_a' in $$props) $$invalidate(3, _a = $$props._a);
			if ('el' in $$props) $$invalidate(0, el = $$props.el);
			if ('showMore' in $$props) $$invalidate(1, showMore = $$props.showMore);
			if ('tagInfo' in $$props) $$invalidate(2, tagInfo = $$props.tagInfo);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*el, _a*/ 9) {
				$$invalidate(2, tagInfo = $$invalidate(3, _a = TagMap[el.tagName.toLowerCase()]) !== null && _a !== void 0
				? _a
				: { title: el.tagName, description: "" });
			}
		};

		return [el, showMore, tagInfo, _a, click_handler];
	}

	class TagInfo extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$c, create_fragment$c, safe_not_equal, { el: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "TagInfo",
				options,
				id: create_fragment$c.name
			});
		}

		get el() {
			throw new Error("<TagInfo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set el(value) {
			throw new Error("<TagInfo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/lib/components/editor/inputs/SizeSection.svelte generated by Svelte v4.2.10 */
	const file$9 = "src/lib/components/editor/inputs/SizeSection.svelte";

	function get_each_context$2(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[2] = list[i];
		return child_ctx;
	}

	// (53:8) {:else}
	function create_else_block$3(ctx) {
		let p;
		let t_value = /*elementStyle*/ ctx[2].displayName + "";
		let t;

		const block = {
			c: function create() {
				p = element("p");
				t = text(t_value);
				attr_dev(p, "class", "text-xs text-left opacity-60");
				add_location(p, file$9, 56, 10, 2200);
			},
			m: function mount(target, anchor) {
				insert_dev(target, p, anchor);
				append_dev(p, t);
			},
			p: function update(ctx, dirty) {
				if (dirty & /*elementStyles*/ 1 && t_value !== (t_value = /*elementStyle*/ ctx[2].displayName + "")) set_data_dev(t, t_value);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(p);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block$3.name,
			type: "else",
			source: "(53:8) {:else}",
			ctx
		});

		return block;
	}

	// (27:54) 
	function create_if_block_1$3(ctx) {
		let svg;
		let g;
		let path;
		let defs;
		let clipPath;
		let rect;

		const block = {
			c: function create() {
				svg = svg_element("svg");
				g = svg_element("g");
				path = svg_element("path");
				defs = svg_element("defs");
				clipPath = svg_element("clipPath");
				rect = svg_element("rect");
				attr_dev(path, "d", "M15.25 15.25H16.75V16.75H15.25V15.25ZM15.25 13.75H16.75V12.25H15.25V13.75ZM3.25 10.75H4.75V9.25H3.25V10.75ZM3.25 13.75H4.75V12.25H3.25V13.75ZM3.25 7.75H4.75V6.25H3.25V7.75ZM3.25 4.75H4.75V3.25H3.25V4.75ZM6.25 4.75H7.75V3.25H6.25V4.75ZM12.25 16.75H13.75V15.25H12.25V16.75ZM9.25 16.75H10.75V15.25H9.25V16.75ZM12.25 16.75H13.75V15.25H12.25V16.75ZM6.25 16.75H7.75V15.25H6.25V16.75ZM3.25 16.75H4.75V15.25H3.25V16.75ZM16.75 7C16.75 4.93 15.07 3.25 13 3.25H9.25V4.75H13C14.2375 4.75 15.25 5.7625 15.25 7V10.75H16.75V7Z");
				attr_dev(path, "fill", "white");
				attr_dev(path, "fill-opacity", "0.6");
				add_location(path, file$9, 38, 14, 1234);
				attr_dev(g, "clip-path", "url(#clip0_138_14625)");
				add_location(g, file$9, 37, 12, 1182);
				attr_dev(rect, "width", "18");
				attr_dev(rect, "height", "18");
				attr_dev(rect, "fill", "white");
				attr_dev(rect, "transform", "translate(1 1)");
				add_location(rect, file$9, 46, 16, 1951);
				attr_dev(clipPath, "id", "clip0_138_14625");
				add_location(clipPath, file$9, 45, 14, 1903);
				add_location(defs, file$9, 44, 12, 1882);
				attr_dev(svg, "width", "20");
				attr_dev(svg, "height", "20");
				attr_dev(svg, "viewBox", "0 0 20 20");
				attr_dev(svg, "fill", "none");
				attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
				add_location(svg, file$9, 30, 10, 1003);
			},
			m: function mount(target, anchor) {
				insert_dev(target, svg, anchor);
				append_dev(svg, g);
				append_dev(g, path);
				append_dev(svg, defs);
				append_dev(defs, clipPath);
				append_dev(clipPath, rect);
			},
			p: noop$3,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(svg);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_1$3.name,
			type: "if",
			source: "(27:54) ",
			ctx
		});

		return block;
	}

	// (12:8) {#if elementStyle.key === "rotate"}
	function create_if_block$5(ctx) {
		let svg;
		let path;

		const block = {
			c: function create() {
				svg = svg_element("svg");
				path = svg_element("path");
				attr_dev(path, "d", "M3 3L3 9.46154M17 17L10.2692 17M10.2692 17L3 17L3 9.46154M10.2692 17L10.2692 16.7308C10.2692 12.7161 7.01468 9.46154 3 9.46154V9.46154");
				attr_dev(path, "stroke", "white");
				attr_dev(path, "stroke-opacity", "0.6");
				attr_dev(path, "stroke-width", "1.2");
				add_location(path, file$9, 22, 12, 650);
				attr_dev(svg, "width", "20");
				attr_dev(svg, "height", "20");
				attr_dev(svg, "viewBox", "0 0 20 20");
				attr_dev(svg, "fill", "none");
				attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
				add_location(svg, file$9, 15, 10, 471);
			},
			m: function mount(target, anchor) {
				insert_dev(target, svg, anchor);
				append_dev(svg, path);
			},
			p: noop$3,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(svg);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$5.name,
			type: "if",
			source: "(12:8) {#if elementStyle.key === \\\"rotate\\\"}",
			ctx
		});

		return block;
	}

	// (9:2) {#each elementStyles as elementStyle}
	function create_each_block$2(ctx) {
		let div1;
		let div0;
		let t0;
		let numberunitinput;
		let t1;
		let current;

		function select_block_type(ctx, dirty) {
			if (/*elementStyle*/ ctx[2].key === "rotate") return create_if_block$5;
			if (/*elementStyle*/ ctx[2].key === "borderRadius") return create_if_block_1$3;
			return create_else_block$3;
		}

		let current_block_type = select_block_type(ctx);
		let if_block = current_block_type(ctx);

		numberunitinput = new NumberUnitInput({
				props: {
					elementStyle: /*elementStyle*/ ctx[2],
					updateElementStyle: /*updateElementStyle*/ ctx[1]
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				div1 = element("div");
				div0 = element("div");
				if_block.c();
				t0 = space();
				create_component(numberunitinput.$$.fragment);
				t1 = space();
				attr_dev(div0, "class", "w-24");
				add_location(div0, file$9, 13, 6, 398);
				attr_dev(div1, "class", "flex flex-row items-center pb-2");
				add_location(div1, file$9, 12, 4, 346);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div1, anchor);
				append_dev(div1, div0);
				if_block.m(div0, null);
				append_dev(div1, t0);
				mount_component(numberunitinput, div1, null);
				append_dev(div1, t1);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block.d(1);
					if_block = current_block_type(ctx);

					if (if_block) {
						if_block.c();
						if_block.m(div0, null);
					}
				}

				const numberunitinput_changes = {};
				if (dirty & /*elementStyles*/ 1) numberunitinput_changes.elementStyle = /*elementStyle*/ ctx[2];
				if (dirty & /*updateElementStyle*/ 2) numberunitinput_changes.updateElementStyle = /*updateElementStyle*/ ctx[1];
				numberunitinput.$set(numberunitinput_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(numberunitinput.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(numberunitinput.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div1);
				}

				if_block.d();
				destroy_component(numberunitinput);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_each_block$2.name,
			type: "each",
			source: "(9:2) {#each elementStyles as elementStyle}",
			ctx
		});

		return block;
	}

	function create_fragment$b(ctx) {
		let div;
		let h20;
		let t1;
		let h21;
		let t3;
		let current;
		let each_value = ensure_array_like_dev(/*elementStyles*/ ctx[0]);
		let each_blocks = [];

		for (let i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
		}

		const out = i => transition_out(each_blocks[i], 1, 1, () => {
			each_blocks[i] = null;
		});

		const block = {
			c: function create() {
				div = element("div");
				h20 = element("h2");
				h20.textContent = "Fixed Width";
				t1 = space();
				h21 = element("h2");
				h21.textContent = "Fixed Height";
				t3 = space();

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				attr_dev(h20, "class", "pb-2 text-xs");
				add_location(h20, file$9, 9, 2, 215);
				attr_dev(h21, "class", "pb-2 text-xs");
				add_location(h21, file$9, 10, 2, 259);
				attr_dev(div, "class", "mt-4 grid grid-cols-2 gap-x-4");
				add_location(div, file$9, 8, 0, 169);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
				append_dev(div, h20);
				append_dev(div, t1);
				append_dev(div, h21);
				append_dev(div, t3);

				for (let i = 0; i < each_blocks.length; i += 1) {
					if (each_blocks[i]) {
						each_blocks[i].m(div, null);
					}
				}

				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (dirty & /*elementStyles, updateElementStyle*/ 3) {
					each_value = ensure_array_like_dev(/*elementStyles*/ ctx[0]);
					let i;

					for (i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context$2(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(child_ctx, dirty);
							transition_in(each_blocks[i], 1);
						} else {
							each_blocks[i] = create_each_block$2(child_ctx);
							each_blocks[i].c();
							transition_in(each_blocks[i], 1);
							each_blocks[i].m(div, null);
						}
					}

					group_outros();

					for (i = each_value.length; i < each_blocks.length; i += 1) {
						out(i);
					}

					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;

				for (let i = 0; i < each_value.length; i += 1) {
					transition_in(each_blocks[i]);
				}

				current = true;
			},
			o: function outro(local) {
				each_blocks = each_blocks.filter(Boolean);

				for (let i = 0; i < each_blocks.length; i += 1) {
					transition_out(each_blocks[i]);
				}

				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				destroy_each(each_blocks, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$b.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$b($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('SizeSection', slots, []);
		let { elementStyles = [] } = $$props;

		let { updateElementStyle = (key, value) => {
			
		} } = $$props;

		const writable_props = ['elementStyles', 'updateElementStyle'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SizeSection> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('elementStyles' in $$props) $$invalidate(0, elementStyles = $$props.elementStyles);
			if ('updateElementStyle' in $$props) $$invalidate(1, updateElementStyle = $$props.updateElementStyle);
		};

		$$self.$capture_state = () => ({
			NumberUnitInput,
			elementStyles,
			updateElementStyle
		});

		$$self.$inject_state = $$props => {
			if ('elementStyles' in $$props) $$invalidate(0, elementStyles = $$props.elementStyles);
			if ('updateElementStyle' in $$props) $$invalidate(1, updateElementStyle = $$props.updateElementStyle);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [elementStyles, updateElementStyle];
	}

	class SizeSection extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$b, create_fragment$b, safe_not_equal, { elementStyles: 0, updateElementStyle: 1 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "SizeSection",
				options,
				id: create_fragment$b.name
			});
		}

		get elementStyles() {
			throw new Error("<SizeSection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set elementStyles(value) {
			throw new Error("<SizeSection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get updateElementStyle() {
			throw new Error("<SizeSection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set updateElementStyle(value) {
			throw new Error("<SizeSection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/lib/components/editor/inputs/SpacingInput.svelte generated by Svelte v4.2.10 */
	const file$8 = "src/lib/components/editor/inputs/SpacingInput.svelte";

	function create_fragment$a(ctx) {
		let div7;
		let div0;
		let t0;
		let div6;
		let div1;
		let numberunitinput0;
		let t1;
		let div2;
		let numberunitinput1;
		let t2;
		let div3;
		let numberunitinput2;
		let t3;
		let numberunitinput3;
		let t4;
		let numberunitinput4;
		let t5;
		let numberunitinput5;
		let t6;
		let div4;
		let numberunitinput6;
		let t7;
		let div5;
		let numberunitinput7;
		let current;

		numberunitinput0 = new NumberUnitInput({
				props: {
					updateElementStyle: /*updateElementStyle*/ ctx[0],
					elementStyle: /*elementStyleMap*/ ctx[1]["marginTop"]
				},
				$$inline: true
			});

		numberunitinput1 = new NumberUnitInput({
				props: {
					updateElementStyle: /*updateElementStyle*/ ctx[0],
					elementStyle: /*elementStyleMap*/ ctx[1]["paddingTop"]
				},
				$$inline: true
			});

		numberunitinput2 = new NumberUnitInput({
				props: {
					inputWidth: "w-6",
					unitWidth: "w-6",
					updateElementStyle: /*updateElementStyle*/ ctx[0],
					elementStyle: /*elementStyleMap*/ ctx[1]["marginLeft"]
				},
				$$inline: true
			});

		numberunitinput3 = new NumberUnitInput({
				props: {
					inputWidth: "w-6",
					unitWidth: "w-6",
					updateElementStyle: /*updateElementStyle*/ ctx[0],
					elementStyle: /*elementStyleMap*/ ctx[1]["paddingLeft"]
				},
				$$inline: true
			});

		numberunitinput4 = new NumberUnitInput({
				props: {
					inputWidth: "w-6",
					unitWidth: "w-6",
					updateElementStyle: /*updateElementStyle*/ ctx[0],
					elementStyle: /*elementStyleMap*/ ctx[1]["paddingRight"]
				},
				$$inline: true
			});

		numberunitinput5 = new NumberUnitInput({
				props: {
					inputWidth: "w-6",
					unitWidth: "w-6",
					updateElementStyle: /*updateElementStyle*/ ctx[0],
					elementStyle: /*elementStyleMap*/ ctx[1]["marginRight"]
				},
				$$inline: true
			});

		numberunitinput6 = new NumberUnitInput({
				props: {
					updateElementStyle: /*updateElementStyle*/ ctx[0],
					elementStyle: /*elementStyleMap*/ ctx[1]["paddingBottom"]
				},
				$$inline: true
			});

		numberunitinput7 = new NumberUnitInput({
				props: {
					updateElementStyle: /*updateElementStyle*/ ctx[0],
					elementStyle: /*elementStyleMap*/ ctx[1]["marginBottom"]
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				div7 = element("div");
				div0 = element("div");
				t0 = space();
				div6 = element("div");
				div1 = element("div");
				create_component(numberunitinput0.$$.fragment);
				t1 = space();
				div2 = element("div");
				create_component(numberunitinput1.$$.fragment);
				t2 = space();
				div3 = element("div");
				create_component(numberunitinput2.$$.fragment);
				t3 = space();
				create_component(numberunitinput3.$$.fragment);
				t4 = space();
				create_component(numberunitinput4.$$.fragment);
				t5 = space();
				create_component(numberunitinput5.$$.fragment);
				t6 = space();
				div4 = element("div");
				create_component(numberunitinput6.$$.fragment);
				t7 = space();
				div5 = element("div");
				create_component(numberunitinput7.$$.fragment);
				attr_dev(div0, "class", "absolute rounded bg-stone-300/50 opacity-10 w-[100px] h-[90px] top-1/2 left-1/2 -translate-x-1/2 -translate-y-[40px] pointer-events-none");
				add_location(div0, file$8, 15, 2, 305);
				attr_dev(div1, "class", "col-start-1 col-end-6 flex justify-center");
				add_location(div1, file$8, 22, 4, 611);
				attr_dev(div2, "class", "col-start-1 col-end-6 flex justify-center");
				add_location(div2, file$8, 28, 4, 795);
				attr_dev(div3, "class", "col-start-1 col-end-6 flex justify-center");
				add_location(div3, file$8, 34, 4, 980);
				attr_dev(div4, "class", "col-start-1 col-end-6 flex justify-center");
				add_location(div4, file$8, 60, 4, 1707);
				attr_dev(div5, "class", "col-start-1 col-end-6 flex justify-center");
				add_location(div5, file$8, 66, 4, 1895);
				attr_dev(div6, "class", "w-[198px] h-fit grid grid-cols-5 grid-rows-5 space-y-3 py-2 text-xs bg-background/50 border border-border rounded");
				add_location(div6, file$8, 19, 2, 472);
				attr_dev(div7, "class", "relative");
				add_location(div7, file$8, 14, 0, 280);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div7, anchor);
				append_dev(div7, div0);
				append_dev(div7, t0);
				append_dev(div7, div6);
				append_dev(div6, div1);
				mount_component(numberunitinput0, div1, null);
				append_dev(div6, t1);
				append_dev(div6, div2);
				mount_component(numberunitinput1, div2, null);
				append_dev(div6, t2);
				append_dev(div6, div3);
				mount_component(numberunitinput2, div3, null);
				append_dev(div3, t3);
				mount_component(numberunitinput3, div3, null);
				append_dev(div3, t4);
				mount_component(numberunitinput4, div3, null);
				append_dev(div3, t5);
				mount_component(numberunitinput5, div3, null);
				append_dev(div6, t6);
				append_dev(div6, div4);
				mount_component(numberunitinput6, div4, null);
				append_dev(div6, t7);
				append_dev(div6, div5);
				mount_component(numberunitinput7, div5, null);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const numberunitinput0_changes = {};
				if (dirty & /*updateElementStyle*/ 1) numberunitinput0_changes.updateElementStyle = /*updateElementStyle*/ ctx[0];
				if (dirty & /*elementStyleMap*/ 2) numberunitinput0_changes.elementStyle = /*elementStyleMap*/ ctx[1]["marginTop"];
				numberunitinput0.$set(numberunitinput0_changes);
				const numberunitinput1_changes = {};
				if (dirty & /*updateElementStyle*/ 1) numberunitinput1_changes.updateElementStyle = /*updateElementStyle*/ ctx[0];
				if (dirty & /*elementStyleMap*/ 2) numberunitinput1_changes.elementStyle = /*elementStyleMap*/ ctx[1]["paddingTop"];
				numberunitinput1.$set(numberunitinput1_changes);
				const numberunitinput2_changes = {};
				if (dirty & /*updateElementStyle*/ 1) numberunitinput2_changes.updateElementStyle = /*updateElementStyle*/ ctx[0];
				if (dirty & /*elementStyleMap*/ 2) numberunitinput2_changes.elementStyle = /*elementStyleMap*/ ctx[1]["marginLeft"];
				numberunitinput2.$set(numberunitinput2_changes);
				const numberunitinput3_changes = {};
				if (dirty & /*updateElementStyle*/ 1) numberunitinput3_changes.updateElementStyle = /*updateElementStyle*/ ctx[0];
				if (dirty & /*elementStyleMap*/ 2) numberunitinput3_changes.elementStyle = /*elementStyleMap*/ ctx[1]["paddingLeft"];
				numberunitinput3.$set(numberunitinput3_changes);
				const numberunitinput4_changes = {};
				if (dirty & /*updateElementStyle*/ 1) numberunitinput4_changes.updateElementStyle = /*updateElementStyle*/ ctx[0];
				if (dirty & /*elementStyleMap*/ 2) numberunitinput4_changes.elementStyle = /*elementStyleMap*/ ctx[1]["paddingRight"];
				numberunitinput4.$set(numberunitinput4_changes);
				const numberunitinput5_changes = {};
				if (dirty & /*updateElementStyle*/ 1) numberunitinput5_changes.updateElementStyle = /*updateElementStyle*/ ctx[0];
				if (dirty & /*elementStyleMap*/ 2) numberunitinput5_changes.elementStyle = /*elementStyleMap*/ ctx[1]["marginRight"];
				numberunitinput5.$set(numberunitinput5_changes);
				const numberunitinput6_changes = {};
				if (dirty & /*updateElementStyle*/ 1) numberunitinput6_changes.updateElementStyle = /*updateElementStyle*/ ctx[0];
				if (dirty & /*elementStyleMap*/ 2) numberunitinput6_changes.elementStyle = /*elementStyleMap*/ ctx[1]["paddingBottom"];
				numberunitinput6.$set(numberunitinput6_changes);
				const numberunitinput7_changes = {};
				if (dirty & /*updateElementStyle*/ 1) numberunitinput7_changes.updateElementStyle = /*updateElementStyle*/ ctx[0];
				if (dirty & /*elementStyleMap*/ 2) numberunitinput7_changes.elementStyle = /*elementStyleMap*/ ctx[1]["marginBottom"];
				numberunitinput7.$set(numberunitinput7_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(numberunitinput0.$$.fragment, local);
				transition_in(numberunitinput1.$$.fragment, local);
				transition_in(numberunitinput2.$$.fragment, local);
				transition_in(numberunitinput3.$$.fragment, local);
				transition_in(numberunitinput4.$$.fragment, local);
				transition_in(numberunitinput5.$$.fragment, local);
				transition_in(numberunitinput6.$$.fragment, local);
				transition_in(numberunitinput7.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(numberunitinput0.$$.fragment, local);
				transition_out(numberunitinput1.$$.fragment, local);
				transition_out(numberunitinput2.$$.fragment, local);
				transition_out(numberunitinput3.$$.fragment, local);
				transition_out(numberunitinput4.$$.fragment, local);
				transition_out(numberunitinput5.$$.fragment, local);
				transition_out(numberunitinput6.$$.fragment, local);
				transition_out(numberunitinput7.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div7);
				}

				destroy_component(numberunitinput0);
				destroy_component(numberunitinput1);
				destroy_component(numberunitinput2);
				destroy_component(numberunitinput3);
				destroy_component(numberunitinput4);
				destroy_component(numberunitinput5);
				destroy_component(numberunitinput6);
				destroy_component(numberunitinput7);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$a.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$a($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('SpacingInput', slots, []);
		let { elementStyles = [] } = $$props;
		let { updateElementStyle } = $$props;
		let elementStyleMap;

		$$self.$$.on_mount.push(function () {
			if (updateElementStyle === undefined && !('updateElementStyle' in $$props || $$self.$$.bound[$$self.$$.props['updateElementStyle']])) {
				console.warn("<SpacingInput> was created without expected prop 'updateElementStyle'");
			}
		});

		const writable_props = ['elementStyles', 'updateElementStyle'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SpacingInput> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('elementStyles' in $$props) $$invalidate(2, elementStyles = $$props.elementStyles);
			if ('updateElementStyle' in $$props) $$invalidate(0, updateElementStyle = $$props.updateElementStyle);
		};

		$$self.$capture_state = () => ({
			NumberUnitInput,
			elementStyles,
			updateElementStyle,
			elementStyleMap
		});

		$$self.$inject_state = $$props => {
			if ('elementStyles' in $$props) $$invalidate(2, elementStyles = $$props.elementStyles);
			if ('updateElementStyle' in $$props) $$invalidate(0, updateElementStyle = $$props.updateElementStyle);
			if ('elementStyleMap' in $$props) $$invalidate(1, elementStyleMap = $$props.elementStyleMap);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*elementStyles*/ 4) {
				$$invalidate(1, elementStyleMap = elementStyles.reduce(
					(acc, style) => {
						acc[style.key] = style;
						return acc;
					},
					{}
				));
			}
		};

		return [updateElementStyle, elementStyleMap, elementStyles];
	}

	class SpacingInput extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$a, create_fragment$a, safe_not_equal, { elementStyles: 2, updateElementStyle: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "SpacingInput",
				options,
				id: create_fragment$a.name
			});
		}

		get elementStyles() {
			throw new Error("<SpacingInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set elementStyles(value) {
			throw new Error("<SpacingInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get updateElementStyle() {
			throw new Error("<SpacingInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set updateElementStyle(value) {
			throw new Error("<SpacingInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/lib/components/editor/CssTab.svelte generated by Svelte v4.2.10 */

	const { Object: Object_1 } = globals;
	const file$7 = "src/lib/components/editor/CssTab.svelte";

	function get_each_context$1(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[7] = list[i][0];
		child_ctx[8] = list[i][1];
		return child_ctx;
	}

	function get_each_context_1(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[11] = list[i];
		child_ctx[13] = i;
		return child_ctx;
	}

	// (41:0) {#if el}
	function create_if_block$4(ctx) {
		let accordion_root;
		let current;

		accordion_root = new Root({
				props: {
					class: "w-full",
					multiple: true,
					value: Object.keys(/*groupedStyles*/ ctx[1]),
					$$slots: { default: [create_default_slot$4] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(accordion_root.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(accordion_root, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const accordion_root_changes = {};
				if (dirty & /*groupedStyles*/ 2) accordion_root_changes.value = Object.keys(/*groupedStyles*/ ctx[1]);

				if (dirty & /*$$scope, groupedStyles, el*/ 16387) {
					accordion_root_changes.$$scope = { dirty, ctx };
				}

				accordion_root.$set(accordion_root_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(accordion_root.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(accordion_root.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(accordion_root, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$4.name,
			type: "if",
			source: "(41:0) {#if el}",
			ctx
		});

		return block;
	}

	// (58:6) {:else}
	function create_else_block$2(ctx) {
		let accordion_item;
		let current;

		accordion_item = new Accordion_item({
				props: {
					"data-state": "open",
					value: /*groupKey*/ ctx[7],
					$$slots: { default: [create_default_slot_4$2] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(accordion_item.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(accordion_item, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const accordion_item_changes = {};
				if (dirty & /*groupedStyles*/ 2) accordion_item_changes.value = /*groupKey*/ ctx[7];

				if (dirty & /*$$scope, groupedStyles, el*/ 16387) {
					accordion_item_changes.$$scope = { dirty, ctx };
				}

				accordion_item.$set(accordion_item_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(accordion_item.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(accordion_item.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(accordion_item, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block$2.name,
			type: "else",
			source: "(58:6) {:else}",
			ctx
		});

		return block;
	}

	// (47:54) 
	function create_if_block_2$1(ctx) {
		let accordion_item;
		let current;

		accordion_item = new Accordion_item({
				props: {
					"data-state": "open",
					value: /*groupKey*/ ctx[7],
					$$slots: { default: [create_default_slot_1$3] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(accordion_item.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(accordion_item, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const accordion_item_changes = {};
				if (dirty & /*groupedStyles*/ 2) accordion_item_changes.value = /*groupKey*/ ctx[7];

				if (dirty & /*$$scope, groupedStyles*/ 16386) {
					accordion_item_changes.$$scope = { dirty, ctx };
				}

				accordion_item.$set(accordion_item_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(accordion_item.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(accordion_item.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(accordion_item, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_2$1.name,
			type: "if",
			source: "(47:54) ",
			ctx
		});

		return block;
	}

	// (44:6) {#if groupKey == ElementStyleGroup.Size}
	function create_if_block_1$2(ctx) {
		let sizesection;
		let t;
		let separator;
		let current;

		sizesection = new SizeSection({
				props: {
					elementStyles: /*elementStyles*/ ctx[8],
					updateElementStyle: /*updateElementStyle*/ ctx[2]
				},
				$$inline: true
			});

		separator = new Separator({ props: { class: "mt-4" }, $$inline: true });

		const block = {
			c: function create() {
				create_component(sizesection.$$.fragment);
				t = space();
				create_component(separator.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(sizesection, target, anchor);
				insert_dev(target, t, anchor);
				mount_component(separator, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const sizesection_changes = {};
				if (dirty & /*groupedStyles*/ 2) sizesection_changes.elementStyles = /*elementStyles*/ ctx[8];
				sizesection.$set(sizesection_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(sizesection.$$.fragment, local);
				transition_in(separator.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(sizesection.$$.fragment, local);
				transition_out(separator.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}

				destroy_component(sizesection, detaching);
				destroy_component(separator, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_1$2.name,
			type: "if",
			source: "(44:6) {#if groupKey == ElementStyleGroup.Size}",
			ctx
		});

		return block;
	}

	// (60:10) <Accordion.Trigger             >
	function create_default_slot_6$1(ctx) {
		let h2;
		let t_value = /*groupKey*/ ctx[7] + "";
		let t;

		const block = {
			c: function create() {
				h2 = element("h2");
				t = text(t_value);
				attr_dev(h2, "class", "text-xs font-semibold");
				add_location(h2, file$7, 73, 13, 2470);
			},
			m: function mount(target, anchor) {
				insert_dev(target, h2, anchor);
				append_dev(h2, t);
			},
			p: function update(ctx, dirty) {
				if (dirty & /*groupedStyles*/ 2 && t_value !== (t_value = /*groupKey*/ ctx[7] + "")) set_data_dev(t, t_value);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(h2);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_6$1.name,
			type: "slot",
			source: "(60:10) <Accordion.Trigger             >",
			ctx
		});

		return block;
	}

	// (66:12) {#if groupKey == ElementStyleGroup.Text}
	function create_if_block_6(ctx) {
		let taginfo;
		let current;

		taginfo = new TagInfo({
				props: { el: /*el*/ ctx[0] },
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(taginfo.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(taginfo, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const taginfo_changes = {};
				if (dirty & /*el*/ 1) taginfo_changes.el = /*el*/ ctx[0];
				taginfo.$set(taginfo_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(taginfo.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(taginfo.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(taginfo, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_6.name,
			type: "if",
			source: "(66:12) {#if groupKey == ElementStyleGroup.Text}",
			ctx
		});

		return block;
	}

	// (87:18) {:else}
	function create_else_block_1(ctx) {
		let input;
		let current;

		function input_handler(...args) {
			return /*input_handler*/ ctx[4](/*elementStyle*/ ctx[11], ...args);
		}

		input = new Input({
				props: {
					type: "text",
					placeholder: /*elementStyle*/ ctx[11].type,
					class: "w-24 text-xs",
					value: /*elementStyle*/ ctx[11].value
				},
				$$inline: true
			});

		input.$on("input", input_handler);

		const block = {
			c: function create() {
				create_component(input.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(input, target, anchor);
				current = true;
			},
			p: function update(new_ctx, dirty) {
				ctx = new_ctx;
				const input_changes = {};
				if (dirty & /*groupedStyles*/ 2) input_changes.placeholder = /*elementStyle*/ ctx[11].type;
				if (dirty & /*groupedStyles*/ 2) input_changes.value = /*elementStyle*/ ctx[11].value;
				input.$set(input_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(input.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(input.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(input, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block_1.name,
			type: "else",
			source: "(87:18) {:else}",
			ctx
		});

		return block;
	}

	// (79:74) 
	function create_if_block_5(ctx) {
		let numberunitinput;
		let current;

		numberunitinput = new NumberUnitInput({
				props: {
					inputWidth: "w-12",
					unitWidth: "w-6",
					unitEnd: true,
					elementStyle: /*elementStyle*/ ctx[11],
					updateElementStyle: /*updateElementStyle*/ ctx[2]
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(numberunitinput.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(numberunitinput, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const numberunitinput_changes = {};
				if (dirty & /*groupedStyles*/ 2) numberunitinput_changes.elementStyle = /*elementStyle*/ ctx[11];
				numberunitinput.$set(numberunitinput_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(numberunitinput.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(numberunitinput.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(numberunitinput, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_5.name,
			type: "if",
			source: "(79:74) ",
			ctx
		});

		return block;
	}

	// (77:73) 
	function create_if_block_4$1(ctx) {
		let colorinput;
		let current;

		colorinput = new ColorInput({
				props: {
					elementStyle: /*elementStyle*/ ctx[11],
					updateElementStyle: /*updateElementStyle*/ ctx[2]
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(colorinput.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(colorinput, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const colorinput_changes = {};
				if (dirty & /*groupedStyles*/ 2) colorinput_changes.elementStyle = /*elementStyle*/ ctx[11];
				colorinput.$set(colorinput_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(colorinput.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(colorinput.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(colorinput, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_4$1.name,
			type: "if",
			source: "(77:73) ",
			ctx
		});

		return block;
	}

	// (75:18) {#if elementStyle.type === ElementStyleType.Select}
	function create_if_block_3$1(ctx) {
		let selectinput;
		let current;

		selectinput = new SelectInput({
				props: {
					elementStyle: /*elementStyle*/ ctx[11],
					updateElementStyle: /*updateElementStyle*/ ctx[2]
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(selectinput.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(selectinput, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const selectinput_changes = {};
				if (dirty & /*groupedStyles*/ 2) selectinput_changes.elementStyle = /*elementStyle*/ ctx[11];
				selectinput.$set(selectinput_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(selectinput.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(selectinput.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(selectinput, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_3$1.name,
			type: "if",
			source: "(75:18) {#if elementStyle.type === ElementStyleType.Select}",
			ctx
		});

		return block;
	}

	// (69:12) {#each elementStyles as elementStyle, i}
	function create_each_block_1(ctx) {
		let div1;
		let p;
		let t0_value = /*elementStyle*/ ctx[11].displayName + "";
		let t0;
		let t1;
		let div0;
		let current_block_type_index;
		let if_block;
		let t2;
		let current;
		const if_block_creators = [create_if_block_3$1, create_if_block_4$1, create_if_block_5, create_else_block_1];
		const if_blocks = [];

		function select_block_type_1(ctx, dirty) {
			if (/*elementStyle*/ ctx[11].type === ElementStyleType.Select) return 0;
			if (/*elementStyle*/ ctx[11].type === ElementStyleType.Color) return 1;
			if (/*elementStyle*/ ctx[11].type === ElementStyleType.Number) return 2;
			return 3;
		}

		current_block_type_index = select_block_type_1(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		const block = {
			c: function create() {
				div1 = element("div");
				p = element("p");
				t0 = text(t0_value);
				t1 = space();
				div0 = element("div");
				if_block.c();
				t2 = space();
				attr_dev(p, "class", "text-xs w-24 mr-2 text-start opacity-60");
				add_location(p, file$7, 83, 16, 2859);
				attr_dev(div0, "class", "text-end ml-auto");
				add_location(div0, file$7, 86, 16, 2993);
				attr_dev(div1, "class", "flex flex-row items-center " + (/*i*/ ctx[13] === 0 ? '' : 'mt-4'));
				add_location(div1, file$7, 82, 14, 2778);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div1, anchor);
				append_dev(div1, p);
				append_dev(p, t0);
				append_dev(div1, t1);
				append_dev(div1, div0);
				if_blocks[current_block_type_index].m(div0, null);
				append_dev(div1, t2);
				current = true;
			},
			p: function update(ctx, dirty) {
				if ((!current || dirty & /*groupedStyles*/ 2) && t0_value !== (t0_value = /*elementStyle*/ ctx[11].displayName + "")) set_data_dev(t0, t0_value);
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type_1(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(div0, null);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div1);
				}

				if_blocks[current_block_type_index].d();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_each_block_1.name,
			type: "each",
			source: "(69:12) {#each elementStyles as elementStyle, i}",
			ctx
		});

		return block;
	}

	// (65:10) <Accordion.Content>
	function create_default_slot_5$2(ctx) {
		let t;
		let each_1_anchor;
		let current;
		let if_block = /*groupKey*/ ctx[7] == ElementStyleGroup.Text && create_if_block_6(ctx);
		let each_value_1 = ensure_array_like_dev(/*elementStyles*/ ctx[8]);
		let each_blocks = [];

		for (let i = 0; i < each_value_1.length; i += 1) {
			each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
		}

		const out = i => transition_out(each_blocks[i], 1, 1, () => {
			each_blocks[i] = null;
		});

		const block = {
			c: function create() {
				if (if_block) if_block.c();
				t = space();

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_1_anchor = empty();
			},
			m: function mount(target, anchor) {
				if (if_block) if_block.m(target, anchor);
				insert_dev(target, t, anchor);

				for (let i = 0; i < each_blocks.length; i += 1) {
					if (each_blocks[i]) {
						each_blocks[i].m(target, anchor);
					}
				}

				insert_dev(target, each_1_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (/*groupKey*/ ctx[7] == ElementStyleGroup.Text) {
					if (if_block) {
						if_block.p(ctx, dirty);

						if (dirty & /*groupedStyles*/ 2) {
							transition_in(if_block, 1);
						}
					} else {
						if_block = create_if_block_6(ctx);
						if_block.c();
						transition_in(if_block, 1);
						if_block.m(t.parentNode, t);
					}
				} else if (if_block) {
					group_outros();

					transition_out(if_block, 1, 1, () => {
						if_block = null;
					});

					check_outros();
				}

				if (dirty & /*Object, groupedStyles, updateElementStyle*/ 6) {
					each_value_1 = ensure_array_like_dev(/*elementStyles*/ ctx[8]);
					let i;

					for (i = 0; i < each_value_1.length; i += 1) {
						const child_ctx = get_each_context_1(ctx, each_value_1, i);

						if (each_blocks[i]) {
							each_blocks[i].p(child_ctx, dirty);
							transition_in(each_blocks[i], 1);
						} else {
							each_blocks[i] = create_each_block_1(child_ctx);
							each_blocks[i].c();
							transition_in(each_blocks[i], 1);
							each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
						}
					}

					group_outros();

					for (i = each_value_1.length; i < each_blocks.length; i += 1) {
						out(i);
					}

					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);

				for (let i = 0; i < each_value_1.length; i += 1) {
					transition_in(each_blocks[i]);
				}

				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				each_blocks = each_blocks.filter(Boolean);

				for (let i = 0; i < each_blocks.length; i += 1) {
					transition_out(each_blocks[i]);
				}

				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
					detach_dev(each_1_anchor);
				}

				if (if_block) if_block.d(detaching);
				destroy_each(each_blocks, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_5$2.name,
			type: "slot",
			source: "(65:10) <Accordion.Content>",
			ctx
		});

		return block;
	}

	// (59:8) <Accordion.Item data-state="open" value={groupKey}>
	function create_default_slot_4$2(ctx) {
		let accordion_trigger;
		let t0;
		let accordion_content;
		let t1;
		let current;

		accordion_trigger = new Accordion_trigger({
				props: {
					$$slots: { default: [create_default_slot_6$1] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		accordion_content = new Accordion_content({
				props: {
					$$slots: { default: [create_default_slot_5$2] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(accordion_trigger.$$.fragment);
				t0 = space();
				create_component(accordion_content.$$.fragment);
				t1 = space();
			},
			m: function mount(target, anchor) {
				mount_component(accordion_trigger, target, anchor);
				insert_dev(target, t0, anchor);
				mount_component(accordion_content, target, anchor);
				insert_dev(target, t1, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const accordion_trigger_changes = {};

				if (dirty & /*$$scope, groupedStyles*/ 16386) {
					accordion_trigger_changes.$$scope = { dirty, ctx };
				}

				accordion_trigger.$set(accordion_trigger_changes);
				const accordion_content_changes = {};

				if (dirty & /*$$scope, groupedStyles, el*/ 16387) {
					accordion_content_changes.$$scope = { dirty, ctx };
				}

				accordion_content.$set(accordion_content_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(accordion_trigger.$$.fragment, local);
				transition_in(accordion_content.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(accordion_trigger.$$.fragment, local);
				transition_out(accordion_content.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t0);
					detach_dev(t1);
				}

				destroy_component(accordion_trigger, detaching);
				destroy_component(accordion_content, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_4$2.name,
			type: "slot",
			source: "(59:8) <Accordion.Item data-state=\\\"open\\\" value={groupKey}>",
			ctx
		});

		return block;
	}

	// (49:10) <Accordion.Trigger             >
	function create_default_slot_3$3(ctx) {
		let h2;
		let t_value = /*groupKey*/ ctx[7] + "";
		let t;

		const block = {
			c: function create() {
				h2 = element("h2");
				t = text(t_value);
				attr_dev(h2, "class", "text-xs");
				add_location(h2, file$7, 62, 13, 2106);
			},
			m: function mount(target, anchor) {
				insert_dev(target, h2, anchor);
				append_dev(h2, t);
			},
			p: function update(ctx, dirty) {
				if (dirty & /*groupedStyles*/ 2 && t_value !== (t_value = /*groupKey*/ ctx[7] + "")) set_data_dev(t, t_value);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(h2);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_3$3.name,
			type: "slot",
			source: "(49:10) <Accordion.Trigger             >",
			ctx
		});

		return block;
	}

	// (54:10) <Accordion.Content>
	function create_default_slot_2$3(ctx) {
		let spacinginput;
		let current;

		spacinginput = new SpacingInput({
				props: {
					elementStyles: /*elementStyles*/ ctx[8],
					updateElementStyle: /*updateElementStyle*/ ctx[2]
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(spacinginput.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(spacinginput, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const spacinginput_changes = {};
				if (dirty & /*groupedStyles*/ 2) spacinginput_changes.elementStyles = /*elementStyles*/ ctx[8];
				spacinginput.$set(spacinginput_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(spacinginput.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(spacinginput.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(spacinginput, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_2$3.name,
			type: "slot",
			source: "(54:10) <Accordion.Content>",
			ctx
		});

		return block;
	}

	// (48:8) <Accordion.Item data-state="open" value={groupKey}>
	function create_default_slot_1$3(ctx) {
		let accordion_trigger;
		let t0;
		let accordion_content;
		let t1;
		let current;

		accordion_trigger = new Accordion_trigger({
				props: {
					$$slots: { default: [create_default_slot_3$3] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		accordion_content = new Accordion_content({
				props: {
					$$slots: { default: [create_default_slot_2$3] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(accordion_trigger.$$.fragment);
				t0 = space();
				create_component(accordion_content.$$.fragment);
				t1 = space();
			},
			m: function mount(target, anchor) {
				mount_component(accordion_trigger, target, anchor);
				insert_dev(target, t0, anchor);
				mount_component(accordion_content, target, anchor);
				insert_dev(target, t1, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const accordion_trigger_changes = {};

				if (dirty & /*$$scope, groupedStyles*/ 16386) {
					accordion_trigger_changes.$$scope = { dirty, ctx };
				}

				accordion_trigger.$set(accordion_trigger_changes);
				const accordion_content_changes = {};

				if (dirty & /*$$scope, groupedStyles*/ 16386) {
					accordion_content_changes.$$scope = { dirty, ctx };
				}

				accordion_content.$set(accordion_content_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(accordion_trigger.$$.fragment, local);
				transition_in(accordion_content.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(accordion_trigger.$$.fragment, local);
				transition_out(accordion_content.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t0);
					detach_dev(t1);
				}

				destroy_component(accordion_trigger, detaching);
				destroy_component(accordion_content, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_1$3.name,
			type: "slot",
			source: "(48:8) <Accordion.Item data-state=\\\"open\\\" value={groupKey}>",
			ctx
		});

		return block;
	}

	// (43:4) {#each Object.entries(groupedStyles) as [groupKey, elementStyles]}
	function create_each_block$1(ctx) {
		let current_block_type_index;
		let if_block;
		let if_block_anchor;
		let current;
		const if_block_creators = [create_if_block_1$2, create_if_block_2$1, create_else_block$2];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*groupKey*/ ctx[7] == ElementStyleGroup.Size) return 0;
			if (/*groupKey*/ ctx[7] == ElementStyleGroup.Spacing) return 1;
			return 2;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		const block = {
			c: function create() {
				if_block.c();
				if_block_anchor = empty();
			},
			m: function mount(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if_blocks[current_block_type_index].d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_each_block$1.name,
			type: "each",
			source: "(43:4) {#each Object.entries(groupedStyles) as [groupKey, elementStyles]}",
			ctx
		});

		return block;
	}

	// (42:2) <Accordion.Root class="w-full" multiple value={Object.keys(groupedStyles)}>
	function create_default_slot$4(ctx) {
		let each_1_anchor;
		let current;
		let each_value = ensure_array_like_dev(Object.entries(/*groupedStyles*/ ctx[1]));
		let each_blocks = [];

		for (let i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
		}

		const out = i => transition_out(each_blocks[i], 1, 1, () => {
			each_blocks[i] = null;
		});

		const block = {
			c: function create() {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_1_anchor = empty();
			},
			m: function mount(target, anchor) {
				for (let i = 0; i < each_blocks.length; i += 1) {
					if (each_blocks[i]) {
						each_blocks[i].m(target, anchor);
					}
				}

				insert_dev(target, each_1_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (dirty & /*Object, groupedStyles, updateElementStyle, el*/ 7) {
					each_value = ensure_array_like_dev(Object.entries(/*groupedStyles*/ ctx[1]));
					let i;

					for (i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context$1(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(child_ctx, dirty);
							transition_in(each_blocks[i], 1);
						} else {
							each_blocks[i] = create_each_block$1(child_ctx);
							each_blocks[i].c();
							transition_in(each_blocks[i], 1);
							each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
						}
					}

					group_outros();

					for (i = each_value.length; i < each_blocks.length; i += 1) {
						out(i);
					}

					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;

				for (let i = 0; i < each_value.length; i += 1) {
					transition_in(each_blocks[i]);
				}

				current = true;
			},
			o: function outro(local) {
				each_blocks = each_blocks.filter(Boolean);

				for (let i = 0; i < each_blocks.length; i += 1) {
					transition_out(each_blocks[i]);
				}

				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(each_1_anchor);
				}

				destroy_each(each_blocks, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$4.name,
			type: "slot",
			source: "(42:2) <Accordion.Root class=\\\"w-full\\\" multiple value={Object.keys(groupedStyles)}>",
			ctx
		});

		return block;
	}

	function create_fragment$9(ctx) {
		let if_block_anchor;
		let current;
		let if_block = /*el*/ ctx[0] && create_if_block$4(ctx);

		const block = {
			c: function create() {
				if (if_block) if_block.c();
				if_block_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (if_block) if_block.m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (/*el*/ ctx[0]) {
					if (if_block) {
						if_block.p(ctx, dirty);

						if (dirty & /*el*/ 1) {
							transition_in(if_block, 1);
						}
					} else {
						if_block = create_if_block$4(ctx);
						if_block.c();
						transition_in(if_block, 1);
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					group_outros();

					transition_out(if_block, 1, 1, () => {
						if_block = null;
					});

					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if (if_block) if_block.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$9.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$9($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('CssTab', slots, []);
		let { editTool } = $$props;
		let el = undefined;
		let groupedStyles;
		let unsubs = [];

		onMount(() => {
			unsubs.push(editTool.selectorEngine.selectedStore.subscribe(selectedElementsChanged));
		});

		onDestroy(() => {
			unsubs.forEach(unsub => unsub());
		});

		function selectedElementsChanged(selected) {
			// TODO: Handle multiple elements. Show similar values and leave non-similar ones blank
			$$invalidate(0, el = selected[0]);

			if (el) {
				const computedStyles = getElementComputedStylesData(el);
				$$invalidate(1, groupedStyles = groupElementStylesByGroup(computedStyles));
			}
		}

		function updateElementStyle(key, value) {
			editTool.selectorEngine.selected.forEach(element => {
				const oldStyle = element.style[key];
				element.style[key] = value;

				// Emit event
				emitStyleChangeEvent(element, key, { [key]: value }, { [key]: oldStyle });
			});
		}

		$$self.$$.on_mount.push(function () {
			if (editTool === undefined && !('editTool' in $$props || $$self.$$.bound[$$self.$$.props['editTool']])) {
				console.warn("<CssTab> was created without expected prop 'editTool'");
			}
		});

		const writable_props = ['editTool'];

		Object_1.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CssTab> was created with unknown prop '${key}'`);
		});

		const input_handler = (elementStyle, event) => {
			updateElementStyle(elementStyle.key, event.target.value);
		};

		$$self.$$set = $$props => {
			if ('editTool' in $$props) $$invalidate(3, editTool = $$props.editTool);
		};

		$$self.$capture_state = () => ({
			ElementStyle,
			ElementStyleGroup,
			ElementStyleType,
			getElementComputedStylesData,
			groupElementStylesByGroup,
			emitStyleChangeEvent,
			Accordion,
			Input,
			Separator,
			SelectInput,
			ColorInput,
			NumberUnitInput,
			TagInfo,
			SizeSection,
			SpacingInput,
			onDestroy,
			onMount,
			editTool,
			el,
			groupedStyles,
			unsubs,
			selectedElementsChanged,
			updateElementStyle
		});

		$$self.$inject_state = $$props => {
			if ('editTool' in $$props) $$invalidate(3, editTool = $$props.editTool);
			if ('el' in $$props) $$invalidate(0, el = $$props.el);
			if ('groupedStyles' in $$props) $$invalidate(1, groupedStyles = $$props.groupedStyles);
			if ('unsubs' in $$props) unsubs = $$props.unsubs;
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [el, groupedStyles, updateElementStyle, editTool, input_handler];
	}

	class CssTab extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$9, create_fragment$9, safe_not_equal, { editTool: 3 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "CssTab",
				options,
				id: create_fragment$9.name
			});
		}

		get editTool() {
			throw new Error("<CssTab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set editTool(value) {
			throw new Error("<CssTab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/lib/components/editor/History.svelte generated by Svelte v4.2.10 */

	const { console: console_1 } = globals;
	const file$6 = "src/lib/components/editor/History.svelte";

	function create_fragment$8(ctx) {
		let div;
		let h2;
		let t1;
		let t2;

		const block = {
			c: function create() {
				div = element("div");
				h2 = element("h2");
				h2.textContent = "History";
				t1 = space();
				t2 = text(historyStore);
				add_location(h2, file$6, 6, 2, 137);
				add_location(div, file$6, 5, 0, 129);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
				append_dev(div, h2);
				append_dev(div, t1);
				append_dev(div, t2);
			},
			p: noop$3,
			i: noop$3,
			o: noop$3,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$8.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$8($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('History', slots, []);
		console.log("historyStore:", historyStore);
		const writable_props = [];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<History> was created with unknown prop '${key}'`);
		});

		$$self.$capture_state = () => ({ historyStore });
		return [];
	}

	class History extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$8, create_fragment$8, safe_not_equal, {});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "History",
				options,
				id: create_fragment$8.name
			});
		}
	}

	/* src/lib/components/editor/EditorPanel.svelte generated by Svelte v4.2.10 */
	const file$5 = "src/lib/components/editor/EditorPanel.svelte";

	// (26:10) <Tabs.Trigger class="bg-transparent p-0 text-xs" value={TabValue.CSS}>
	function create_default_slot_7(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text("Element Appearance");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_7.name,
			type: "slot",
			source: "(26:10) <Tabs.Trigger class=\\\"bg-transparent p-0 text-xs\\\" value={TabValue.CSS}>",
			ctx
		});

		return block;
	}

	// (27:10) <Tabs.Trigger class="bg-transparent p-0 text-xs" value={TabValue.OTHER}>
	function create_default_slot_6(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text("Changes");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_6.name,
			type: "slot",
			source: "(27:10) <Tabs.Trigger class=\\\"bg-transparent p-0 text-xs\\\" value={TabValue.OTHER}>",
			ctx
		});

		return block;
	}

	// (25:8) <Tabs.List class="bg-transparent p-0 gap-4">
	function create_default_slot_5$1(ctx) {
		let tabs_trigger0;
		let t;
		let tabs_trigger1;
		let current;

		tabs_trigger0 = new Tabs_trigger({
				props: {
					class: "bg-transparent p-0 text-xs",
					value: /*TabValue*/ ctx[1].CSS,
					$$slots: { default: [create_default_slot_7] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		tabs_trigger1 = new Tabs_trigger({
				props: {
					class: "bg-transparent p-0 text-xs",
					value: /*TabValue*/ ctx[1].OTHER,
					$$slots: { default: [create_default_slot_6] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(tabs_trigger0.$$.fragment);
				t = space();
				create_component(tabs_trigger1.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(tabs_trigger0, target, anchor);
				insert_dev(target, t, anchor);
				mount_component(tabs_trigger1, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const tabs_trigger0_changes = {};
				if (dirty & /*TabValue*/ 2) tabs_trigger0_changes.value = /*TabValue*/ ctx[1].CSS;

				if (dirty & /*$$scope*/ 8) {
					tabs_trigger0_changes.$$scope = { dirty, ctx };
				}

				tabs_trigger0.$set(tabs_trigger0_changes);
				const tabs_trigger1_changes = {};
				if (dirty & /*TabValue*/ 2) tabs_trigger1_changes.value = /*TabValue*/ ctx[1].OTHER;

				if (dirty & /*$$scope*/ 8) {
					tabs_trigger1_changes.$$scope = { dirty, ctx };
				}

				tabs_trigger1.$set(tabs_trigger1_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(tabs_trigger0.$$.fragment, local);
				transition_in(tabs_trigger1.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(tabs_trigger0.$$.fragment, local);
				transition_out(tabs_trigger1.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}

				destroy_component(tabs_trigger0, detaching);
				destroy_component(tabs_trigger1, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_5$1.name,
			type: "slot",
			source: "(25:8) <Tabs.List class=\\\"bg-transparent p-0 gap-4\\\">",
			ctx
		});

		return block;
	}

	// (31:10) <Tabs.Content value={TabValue.CSS}>
	function create_default_slot_4$1(ctx) {
		let csstab;
		let current;

		csstab = new CssTab({
				props: { editTool: /*editTool*/ ctx[0] },
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(csstab.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(csstab, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const csstab_changes = {};
				if (dirty & /*editTool*/ 1) csstab_changes.editTool = /*editTool*/ ctx[0];
				csstab.$set(csstab_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(csstab.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(csstab.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(csstab, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_4$1.name,
			type: "slot",
			source: "(31:10) <Tabs.Content value={TabValue.CSS}>",
			ctx
		});

		return block;
	}

	// (32:10) <Tabs.Content value={TabValue.OTHER}>
	function create_default_slot_3$2(ctx) {
		let history;
		let current;
		history = new History({ $$inline: true });

		const block = {
			c: function create() {
				create_component(history.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(history, target, anchor);
				current = true;
			},
			i: function intro(local) {
				if (current) return;
				transition_in(history.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(history.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(history, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_3$2.name,
			type: "slot",
			source: "(32:10) <Tabs.Content value={TabValue.OTHER}>",
			ctx
		});

		return block;
	}

	// (24:6) <Tabs.Root value={TabValue.CSS} class="w-full h-full">
	function create_default_slot_2$2(ctx) {
		let tabs_list;
		let t0;
		let separator;
		let t1;
		let div;
		let tabs_content0;
		let t2;
		let tabs_content1;
		let t3;
		let card_footer;
		let current;

		tabs_list = new Tabs_list({
				props: {
					class: "bg-transparent p-0 gap-4",
					$$slots: { default: [create_default_slot_5$1] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		separator = new Separator({ props: { class: "mt-1" }, $$inline: true });

		tabs_content0 = new Tabs_content({
				props: {
					value: /*TabValue*/ ctx[1].CSS,
					$$slots: { default: [create_default_slot_4$1] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		tabs_content1 = new Tabs_content({
				props: {
					value: /*TabValue*/ ctx[1].OTHER,
					$$slots: { default: [create_default_slot_3$2] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		card_footer = new Card_footer({
				props: { class: "flex justify-between" },
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(tabs_list.$$.fragment);
				t0 = space();
				create_component(separator.$$.fragment);
				t1 = space();
				div = element("div");
				create_component(tabs_content0.$$.fragment);
				t2 = space();
				create_component(tabs_content1.$$.fragment);
				t3 = space();
				create_component(card_footer.$$.fragment);
				attr_dev(div, "class", "h-[74vh] overflow-auto overflow-y-hidden hover:overflow-y-auto");
				add_location(div, file$5, 32, 8, 1186);
			},
			m: function mount(target, anchor) {
				mount_component(tabs_list, target, anchor);
				insert_dev(target, t0, anchor);
				mount_component(separator, target, anchor);
				insert_dev(target, t1, anchor);
				insert_dev(target, div, anchor);
				mount_component(tabs_content0, div, null);
				append_dev(div, t2);
				mount_component(tabs_content1, div, null);
				insert_dev(target, t3, anchor);
				mount_component(card_footer, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const tabs_list_changes = {};

				if (dirty & /*$$scope, TabValue*/ 10) {
					tabs_list_changes.$$scope = { dirty, ctx };
				}

				tabs_list.$set(tabs_list_changes);
				const tabs_content0_changes = {};
				if (dirty & /*TabValue*/ 2) tabs_content0_changes.value = /*TabValue*/ ctx[1].CSS;

				if (dirty & /*$$scope, editTool*/ 9) {
					tabs_content0_changes.$$scope = { dirty, ctx };
				}

				tabs_content0.$set(tabs_content0_changes);
				const tabs_content1_changes = {};
				if (dirty & /*TabValue*/ 2) tabs_content1_changes.value = /*TabValue*/ ctx[1].OTHER;

				if (dirty & /*$$scope*/ 8) {
					tabs_content1_changes.$$scope = { dirty, ctx };
				}

				tabs_content1.$set(tabs_content1_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(tabs_list.$$.fragment, local);
				transition_in(separator.$$.fragment, local);
				transition_in(tabs_content0.$$.fragment, local);
				transition_in(tabs_content1.$$.fragment, local);
				transition_in(card_footer.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(tabs_list.$$.fragment, local);
				transition_out(separator.$$.fragment, local);
				transition_out(tabs_content0.$$.fragment, local);
				transition_out(tabs_content1.$$.fragment, local);
				transition_out(card_footer.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t0);
					detach_dev(t1);
					detach_dev(div);
					detach_dev(t3);
				}

				destroy_component(tabs_list, detaching);
				destroy_component(separator, detaching);
				destroy_component(tabs_content0);
				destroy_component(tabs_content1);
				destroy_component(card_footer, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_2$2.name,
			type: "slot",
			source: "(24:6) <Tabs.Root value={TabValue.CSS} class=\\\"w-full h-full\\\">",
			ctx
		});

		return block;
	}

	// (23:4) <Card.Content>
	function create_default_slot_1$2(ctx) {
		let tabs_root;
		let current;

		tabs_root = new Root$1({
				props: {
					value: /*TabValue*/ ctx[1].CSS,
					class: "w-full h-full",
					$$slots: { default: [create_default_slot_2$2] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(tabs_root.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(tabs_root, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const tabs_root_changes = {};
				if (dirty & /*TabValue*/ 2) tabs_root_changes.value = /*TabValue*/ ctx[1].CSS;

				if (dirty & /*$$scope, TabValue, editTool*/ 11) {
					tabs_root_changes.$$scope = { dirty, ctx };
				}

				tabs_root.$set(tabs_root_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(tabs_root.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(tabs_root.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(tabs_root, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_1$2.name,
			type: "slot",
			source: "(23:4) <Card.Content>",
			ctx
		});

		return block;
	}

	// (22:2) <Card.Root class="w-[232px] h-[80vh] backdrop-blur bg-background/90 pt-2">
	function create_default_slot$3(ctx) {
		let card_content;
		let current;

		card_content = new Card_content({
				props: {
					$$slots: { default: [create_default_slot_1$2] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(card_content.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(card_content, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const card_content_changes = {};

				if (dirty & /*$$scope, TabValue, editTool*/ 11) {
					card_content_changes.$$scope = { dirty, ctx };
				}

				card_content.$set(card_content_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(card_content.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(card_content.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(card_content, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$3.name,
			type: "slot",
			source: "(22:2) <Card.Root class=\\\"w-[232px] h-[80vh] backdrop-blur bg-background/90 pt-2\\\">",
			ctx
		});

		return block;
	}

	function create_fragment$7(ctx) {
		let div;
		let card_root;
		let div_class_value;
		let current;
		let mounted;
		let dispose;

		card_root = new Card$1({
				props: {
					class: "w-[232px] h-[80vh] backdrop-blur bg-background/90 pt-2",
					$$slots: { default: [create_default_slot$3] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				div = element("div");
				create_component(card_root.$$.fragment);
				attr_dev(div, "class", div_class_value = "fixed top-10 right-2 transform -translate-y-1/2 -translate-x-1/2 " + (/*$editorPanelVisible*/ ctx[2] ? 'visible' : 'invisible'));
				add_location(div, file$5, 18, 0, 518);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
				mount_component(card_root, div, null);
				current = true;

				if (!mounted) {
					dispose = action_destroyer(d$1.call(null, div, { bounds: "body" }));
					mounted = true;
				}
			},
			p: function update(ctx, [dirty]) {
				const card_root_changes = {};

				if (dirty & /*$$scope, TabValue, editTool*/ 11) {
					card_root_changes.$$scope = { dirty, ctx };
				}

				card_root.$set(card_root_changes);

				if (!current || dirty & /*$editorPanelVisible*/ 4 && div_class_value !== (div_class_value = "fixed top-10 right-2 transform -translate-y-1/2 -translate-x-1/2 " + (/*$editorPanelVisible*/ ctx[2] ? 'visible' : 'invisible'))) {
					attr_dev(div, "class", div_class_value);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(card_root.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(card_root.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				destroy_component(card_root);
				mounted = false;
				dispose();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$7.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$7($$self, $$props, $$invalidate) {
		let $editorPanelVisible;
		validate_store(editorPanelVisible, 'editorPanelVisible');
		component_subscribe($$self, editorPanelVisible, $$value => $$invalidate(2, $editorPanelVisible = $$value));
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('EditorPanel', slots, []);
		let { editTool } = $$props;
		var TabValue;

		(function (TabValue) {
			TabValue["CSS"] = "css";
			TabValue["OTHER"] = "other";
		})(TabValue || (TabValue = {}));

		$$self.$$.on_mount.push(function () {
			if (editTool === undefined && !('editTool' in $$props || $$self.$$.bound[$$self.$$.props['editTool']])) {
				console.warn("<EditorPanel> was created without expected prop 'editTool'");
			}
		});

		const writable_props = ['editTool'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EditorPanel> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('editTool' in $$props) $$invalidate(0, editTool = $$props.editTool);
		};

		$$self.$capture_state = () => ({
			draggable: d$1,
			Card,
			Tabs,
			CssTab,
			Separator,
			editorPanelVisible,
			History,
			editTool,
			TabValue,
			$editorPanelVisible
		});

		$$self.$inject_state = $$props => {
			if ('editTool' in $$props) $$invalidate(0, editTool = $$props.editTool);
			if ('TabValue' in $$props) $$invalidate(1, TabValue = $$props.TabValue);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [editTool, TabValue, $editorPanelVisible];
	}

	class EditorPanel extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$7, create_fragment$7, safe_not_equal, { editTool: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "EditorPanel",
				options,
				id: create_fragment$7.name
			});
		}

		get editTool() {
			throw new Error("<EditorPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set editTool(value) {
			throw new Error("<EditorPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	const buttonVariants = ie({
	    base: "inline-flex items-center justify-center rounded-md text-sm font-medium whitespace-nowrap transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
	    variants: {
	        variant: {
	            default: "bg-primary text-primary-foreground shadow hover:bg-primary/90",
	            destructive: "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
	            outline: "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
	            secondary: "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
	            ghost: "hover:bg-accent hover:text-accent-foreground",
	            link: "text-primary underline-offset-4 hover:underline",
	        },
	        size: {
	            default: "h-9 px-4 py-2",
	            sm: "h-8 rounded-md px-3 text-xs",
	            lg: "h-10 rounded-md px-8",
	            icon: "h-9 w-9",
	        },
	    },
	    defaultVariants: {
	        variant: "default",
	        size: "default",
	    },
	});

	/* src/lib/components/ui/button/button.svelte generated by Svelte v4.2.10 */

	// (11:0) <ButtonPrimitive.Root  {builders}  class={cn(buttonVariants({ variant, size, className }))}  type="button"  {...$$restProps}  on:click  on:keydown >
	function create_default_slot$2(ctx) {
		let current;
		const default_slot_template = /*#slots*/ ctx[5].default;
		const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

		const block = {
			c: function create() {
				if (default_slot) default_slot.c();
			},
			m: function mount(target, anchor) {
				if (default_slot) {
					default_slot.m(target, anchor);
				}

				current = true;
			},
			p: function update(ctx, dirty) {
				if (default_slot) {
					if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
						update_slot_base(
							default_slot,
							default_slot_template,
							ctx,
							/*$$scope*/ ctx[8],
							!current
							? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
							: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
							null
						);
					}
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(default_slot, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(default_slot, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (default_slot) default_slot.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$2.name,
			type: "slot",
			source: "(11:0) <ButtonPrimitive.Root  {builders}  class={cn(buttonVariants({ variant, size, className }))}  type=\\\"button\\\"  {...$$restProps}  on:click  on:keydown >",
			ctx
		});

		return block;
	}

	function create_fragment$6(ctx) {
		let buttonprimitive_root;
		let current;

		const buttonprimitive_root_spread_levels = [
			{ builders: /*builders*/ ctx[3] },
			{
				class: cn(buttonVariants({
					variant: /*variant*/ ctx[1],
					size: /*size*/ ctx[2],
					className: /*className*/ ctx[0]
				}))
			},
			{ type: "button" },
			/*$$restProps*/ ctx[4]
		];

		let buttonprimitive_root_props = {
			$$slots: { default: [create_default_slot$2] },
			$$scope: { ctx }
		};

		for (let i = 0; i < buttonprimitive_root_spread_levels.length; i += 1) {
			buttonprimitive_root_props = assign(buttonprimitive_root_props, buttonprimitive_root_spread_levels[i]);
		}

		buttonprimitive_root = new Button$1({
				props: buttonprimitive_root_props,
				$$inline: true
			});

		buttonprimitive_root.$on("click", /*click_handler*/ ctx[6]);
		buttonprimitive_root.$on("keydown", /*keydown_handler*/ ctx[7]);

		const block = {
			c: function create() {
				create_component(buttonprimitive_root.$$.fragment);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				mount_component(buttonprimitive_root, target, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const buttonprimitive_root_changes = (dirty & /*builders, variant, size, className, $$restProps*/ 31)
				? get_spread_update(buttonprimitive_root_spread_levels, [
						dirty & /*builders*/ 8 && { builders: /*builders*/ ctx[3] },
						dirty & /*variant, size, className*/ 7 && {
							class: cn(buttonVariants({
								variant: /*variant*/ ctx[1],
								size: /*size*/ ctx[2],
								className: /*className*/ ctx[0]
							}))
						},
						buttonprimitive_root_spread_levels[2],
						dirty & /*$$restProps*/ 16 && get_spread_object(/*$$restProps*/ ctx[4])
					])
				: {};

				if (dirty & /*$$scope*/ 256) {
					buttonprimitive_root_changes.$$scope = { dirty, ctx };
				}

				buttonprimitive_root.$set(buttonprimitive_root_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(buttonprimitive_root.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(buttonprimitive_root.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(buttonprimitive_root, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$6.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$6($$self, $$props, $$invalidate) {
		const omit_props_names = ["class","variant","size","builders"];
		let $$restProps = compute_rest_props($$props, omit_props_names);
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Button', slots, ['default']);
		let { class: className = undefined } = $$props;
		let { variant = "default" } = $$props;
		let { size = "default" } = $$props;
		let { builders = [] } = $$props;

		function click_handler(event) {
			bubble.call(this, $$self, event);
		}

		function keydown_handler(event) {
			bubble.call(this, $$self, event);
		}

		$$self.$$set = $$new_props => {
			$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
			$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
			if ('class' in $$new_props) $$invalidate(0, className = $$new_props.class);
			if ('variant' in $$new_props) $$invalidate(1, variant = $$new_props.variant);
			if ('size' in $$new_props) $$invalidate(2, size = $$new_props.size);
			if ('builders' in $$new_props) $$invalidate(3, builders = $$new_props.builders);
			if ('$$scope' in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
		};

		$$self.$capture_state = () => ({
			ButtonPrimitive,
			cn,
			buttonVariants,
			className,
			variant,
			size,
			builders
		});

		$$self.$inject_state = $$new_props => {
			if ('className' in $$props) $$invalidate(0, className = $$new_props.className);
			if ('variant' in $$props) $$invalidate(1, variant = $$new_props.variant);
			if ('size' in $$props) $$invalidate(2, size = $$new_props.size);
			if ('builders' in $$props) $$invalidate(3, builders = $$new_props.builders);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			className,
			variant,
			size,
			builders,
			$$restProps,
			slots,
			click_handler,
			keydown_handler,
			$$scope
		];
	}

	class Button extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$6, create_fragment$6, safe_not_equal, {
				class: 0,
				variant: 1,
				size: 2,
				builders: 3
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Button",
				options,
				id: create_fragment$6.name
			});
		}

		get class() {
			throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set class(value) {
			throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get variant() {
			throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set variant(value) {
			throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get size() {
			throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set size(value) {
			throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get builders() {
			throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set builders(value) {
			throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	const IGNORE_TAGS = ['SCRIPT', 'STYLE', ONLOOK_TOOLBAR.toUpperCase()]; // Example tags to ignore
	class LayersManager {
	    constructor() {
	        this.cloneDOMWithReferences = (originalNode) => {
	            // Base case for recursion: if the node is null or not a node, return it directly
	            if (!originalNode || !(originalNode instanceof Node)) {
	                return originalNode;
	            }
	            // Skip non-element nodes (like text or comment nodes) and specific tags
	            if (originalNode.nodeType !== Node.ELEMENT_NODE || IGNORE_TAGS.includes(originalNode.nodeName) || originalNode.hasAttribute(DATA_ONLOOK_IGNORE)) {
	                return null;
	            }
	            if (originalNode.hasAttribute && originalNode.hasAttribute(DATA_ONLOOK_IGNORE)) {
	                return null;
	            }
	            // Check if this node has already been cloned to avoid circular references
	            if (this.originalToCloneMap.has(originalNode)) {
	                return this.originalToCloneMap.get(originalNode);
	            }
	            // Create a shallow clone of the node
	            const clonedNode = originalNode.cloneNode(false);
	            // Save the reference in both maps
	            this.originalToCloneMap.set(originalNode, clonedNode);
	            this.cloneToOriginalMap.set(clonedNode, originalNode);
	            // Recursively clone and append child nodes
	            originalNode.childNodes.forEach((childNode) => {
	                const clonedChildNode = this.cloneDOMWithReferences(childNode);
	                if (clonedChildNode) {
	                    clonedNode.appendChild(clonedChildNode);
	                }
	            });
	            return clonedNode;
	        };
	        this.getDomTree = () => {
	            this.originalToCloneMap = new WeakMap();
	            this.cloneToOriginalMap = new WeakMap();
	            const clonedRoot = this.cloneDOMWithReferences(document.body);
	            this.clonedDocument = document.implementation.createHTMLDocument("New Document");
	            this.clonedDocument.body = clonedRoot;
	        };
	        this.getSanitizedNode = (node) => this.originalToCloneMap.get(node);
	        this.getOriginalNode = (node) => this.cloneToOriginalMap.get(node);
	        this.originalToCloneMap = new WeakMap();
	        this.cloneToOriginalMap = new WeakMap();
	        this.getDomTree();
	    }
	}

	/* src/lib/components/layers/dom/TreeNode.svelte generated by Svelte v4.2.10 */
	const file$4 = "src/lib/components/layers/dom/TreeNode.svelte";

	function get_each_context(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[36] = list[i];
		return child_ctx;
	}

	// (99:2) {:else}
	function create_else_block$1(ctx) {
		let details;
		let summary;
		let chevrondown;
		let t0;
		let boxmodel;
		let t1;
		let p;
		let t3;
		let div;
		let details_class_value;
		let current;
		let mounted;
		let dispose;

		chevrondown = new ChevronDown$1({
				props: {
					class: "w-3 h-3 " + (/*isOpen*/ ctx[9]
					? 'transform rotate-0'
					: 'transform -rotate-90') + " " + (/*internalHover*/ ctx[4] ? 'visible' : 'invisible')
				},
				$$inline: true
			});

		boxmodel = new BoxModel$1({
				props: { class: /*iconClass*/ ctx[10] },
				$$inline: true
			});

		let if_block = /*isOpen*/ ctx[9] && create_if_block_4(ctx);

		const block = {
			c: function create() {
				details = element("details");
				summary = element("summary");
				create_component(chevrondown.$$.fragment);
				t0 = space();
				create_component(boxmodel.$$.fragment);
				t1 = space();
				p = element("p");
				p.textContent = `${/*name*/ ctx[18]}`;
				t3 = space();
				div = element("div");
				if (if_block) if_block.c();
				attr_dev(p, "class", "flex-grow");
				add_location(p, file$4, 130, 8, 4227);
				attr_dev(summary, "class", "list-none cursor-pointer flex flex-row items-center " + paddingY);
				attr_dev(summary, "tabindex", "-1");
				add_location(summary, file$4, 118, 6, 3751);
				attr_dev(div, "class", /*childrenSelectedClass*/ ctx[11]);
				add_location(div, file$4, 140, 6, 4440);
				attr_dev(details, "class", details_class_value = "" + (/*hoverClass*/ ctx[12] + " " + /*selectedClass*/ ctx[13]));
				add_location(details, file$4, 109, 4, 3516);
			},
			m: function mount(target, anchor) {
				insert_dev(target, details, anchor);
				append_dev(details, summary);
				mount_component(chevrondown, summary, null);
				append_dev(summary, t0);
				mount_component(boxmodel, summary, null);
				append_dev(summary, t1);
				append_dev(summary, p);
				append_dev(details, t3);
				append_dev(details, div);
				if (if_block) if_block.m(div, null);
				details.open = /*isOpen*/ ctx[9];
				current = true;

				if (!mounted) {
					dispose = [
						listen_dev(p, "click", prevent_default(/*click_handler_3*/ ctx[27]), false, true, false, false),
						listen_dev(summary, "mouseover", /*mouseover_handler_3*/ ctx[28], false, false, false, false),
						listen_dev(details, "toggle", /*details_toggle_handler*/ ctx[29]),
						listen_dev(details, "click", self(/*click_handler_4*/ ctx[30]), false, false, false, false),
						listen_dev(details, "mouseover", self(/*mouseover_handler_4*/ ctx[31]), false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				const chevrondown_changes = {};

				if (dirty[0] & /*isOpen, internalHover*/ 528) chevrondown_changes.class = "w-3 h-3 " + (/*isOpen*/ ctx[9]
				? 'transform rotate-0'
				: 'transform -rotate-90') + " " + (/*internalHover*/ ctx[4] ? 'visible' : 'invisible');

				chevrondown.$set(chevrondown_changes);
				const boxmodel_changes = {};
				if (dirty[0] & /*iconClass*/ 1024) boxmodel_changes.class = /*iconClass*/ ctx[10];
				boxmodel.$set(boxmodel_changes);

				if (/*isOpen*/ ctx[9]) {
					if (if_block) {
						if_block.p(ctx, dirty);

						if (dirty[0] & /*isOpen*/ 512) {
							transition_in(if_block, 1);
						}
					} else {
						if_block = create_if_block_4(ctx);
						if_block.c();
						transition_in(if_block, 1);
						if_block.m(div, null);
					}
				} else if (if_block) {
					group_outros();

					transition_out(if_block, 1, 1, () => {
						if_block = null;
					});

					check_outros();
				}

				if (!current || dirty[0] & /*childrenSelectedClass*/ 2048) {
					attr_dev(div, "class", /*childrenSelectedClass*/ ctx[11]);
				}

				if (!current || dirty[0] & /*hoverClass, selectedClass*/ 12288 && details_class_value !== (details_class_value = "" + (/*hoverClass*/ ctx[12] + " " + /*selectedClass*/ ctx[13]))) {
					attr_dev(details, "class", details_class_value);
				}

				if (dirty[0] & /*isOpen*/ 512) {
					details.open = /*isOpen*/ ctx[9];
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(chevrondown.$$.fragment, local);
				transition_in(boxmodel.$$.fragment, local);
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(chevrondown.$$.fragment, local);
				transition_out(boxmodel.$$.fragment, local);
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(details);
				}

				destroy_component(chevrondown);
				destroy_component(boxmodel);
				if (if_block) if_block.d();
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block$1.name,
			type: "else",
			source: "(99:2) {:else}",
			ctx
		});

		return block;
	}

	// (85:25) 
	function create_if_block_3(ctx) {
		let div;
		let text_1;
		let t0;
		let t1_value = (/*node*/ ctx[0].firstChild.nodeValue || /*name*/ ctx[18]) + "";
		let t1;
		let div_class_value;
		let current;
		let mounted;
		let dispose;

		text_1 = new Text$1({
				props: { class: /*iconClass*/ ctx[10] },
				$$inline: true
			});

		const block = {
			c: function create() {
				div = element("div");
				create_component(text_1.$$.fragment);
				t0 = space();
				t1 = text(t1_value);
				attr_dev(div, "class", div_class_value = "" + (/*hoverClass*/ ctx[12] + " " + /*selectedClass*/ ctx[13] + " " + paddingY + " flex flex-row items-center pl-3"));
				add_location(div, file$4, 95, 4, 3051);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
				mount_component(text_1, div, null);
				append_dev(div, t0);
				append_dev(div, t1);
				current = true;

				if (!mounted) {
					dispose = [
						listen_dev(div, "click", /*click_handler_2*/ ctx[25], false, false, false, false),
						listen_dev(div, "mouseover", /*mouseover_handler_2*/ ctx[26], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				const text_1_changes = {};
				if (dirty[0] & /*iconClass*/ 1024) text_1_changes.class = /*iconClass*/ ctx[10];
				text_1.$set(text_1_changes);
				if ((!current || dirty[0] & /*node*/ 1) && t1_value !== (t1_value = (/*node*/ ctx[0].firstChild.nodeValue || /*name*/ ctx[18]) + "")) set_data_dev(t1, t1_value);

				if (!current || dirty[0] & /*hoverClass, selectedClass*/ 12288 && div_class_value !== (div_class_value = "" + (/*hoverClass*/ ctx[12] + " " + /*selectedClass*/ ctx[13] + " " + paddingY + " flex flex-row items-center pl-3"))) {
					attr_dev(div, "class", div_class_value);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(text_1.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(text_1.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				destroy_component(text_1);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_3.name,
			type: "if",
			source: "(85:25) ",
			ctx
		});

		return block;
	}

	// (71:20) 
	function create_if_block_2(ctx) {
		let div;
		let component1;
		let t0;
		let t1;
		let div_class_value;
		let current;
		let mounted;
		let dispose;

		component1 = new Component1$1({
				props: { class: /*iconClass*/ ctx[10] },
				$$inline: true
			});

		const block = {
			c: function create() {
				div = element("div");
				create_component(component1.$$.fragment);
				t0 = space();
				t1 = text(/*name*/ ctx[18]);
				attr_dev(div, "class", div_class_value = "" + (/*hoverClass*/ ctx[12] + " " + /*selectedClass*/ ctx[13] + " " + paddingY + " flex flex-row items-center pl-3"));
				add_location(div, file$4, 81, 4, 2601);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
				mount_component(component1, div, null);
				append_dev(div, t0);
				append_dev(div, t1);
				current = true;

				if (!mounted) {
					dispose = [
						listen_dev(div, "click", /*click_handler_1*/ ctx[23], false, false, false, false),
						listen_dev(div, "mouseover", /*mouseover_handler_1*/ ctx[24], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				const component1_changes = {};
				if (dirty[0] & /*iconClass*/ 1024) component1_changes.class = /*iconClass*/ ctx[10];
				component1.$set(component1_changes);

				if (!current || dirty[0] & /*hoverClass, selectedClass*/ 12288 && div_class_value !== (div_class_value = "" + (/*hoverClass*/ ctx[12] + " " + /*selectedClass*/ ctx[13] + " " + paddingY + " flex flex-row items-center pl-3"))) {
					attr_dev(div, "class", div_class_value);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(component1.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(component1.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				destroy_component(component1);
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_2.name,
			type: "if",
			source: "(71:20) ",
			ctx
		});

		return block;
	}

	// (57:19) 
	function create_if_block_1$1(ctx) {
		let div;
		let t_value = '"' + /*node*/ ctx[0].nodeValue + '"' + "";
		let t;
		let div_class_value;
		let mounted;
		let dispose;

		const block = {
			c: function create() {
				div = element("div");
				t = text(t_value);
				attr_dev(div, "class", div_class_value = "" + (/*hoverClass*/ ctx[12] + " " + /*selectedClass*/ ctx[13] + " " + paddingY));
				add_location(div, file$4, 68, 4, 2205);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
				append_dev(div, t);

				if (!mounted) {
					dispose = [
						listen_dev(div, "click", /*click_handler*/ ctx[21], false, false, false, false),
						listen_dev(div, "mouseover", /*mouseover_handler*/ ctx[22], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, dirty) {
				if (dirty[0] & /*node*/ 1 && t_value !== (t_value = '"' + /*node*/ ctx[0].nodeValue + '"' + "")) set_data_dev(t, t_value);

				if (dirty[0] & /*hoverClass, selectedClass*/ 12288 && div_class_value !== (div_class_value = "" + (/*hoverClass*/ ctx[12] + " " + /*selectedClass*/ ctx[13] + " " + paddingY))) {
					attr_dev(div, "class", div_class_value);
				}
			},
			i: noop$3,
			o: noop$3,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_1$1.name,
			type: "if",
			source: "(57:19) ",
			ctx
		});

		return block;
	}

	// (55:2) {#if isEmptyText}
	function create_if_block$3(ctx) {
		const block = {
			c: noop$3,
			m: noop$3,
			p: noop$3,
			i: noop$3,
			o: noop$3,
			d: noop$3
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$3.name,
			type: "if",
			source: "(55:2) {#if isEmptyText}",
			ctx
		});

		return block;
	}

	// (134:8) {#if isOpen}
	function create_if_block_4(ctx) {
		let each_1_anchor;
		let current;
		let each_value = ensure_array_like_dev(/*node*/ ctx[0].childNodes);
		let each_blocks = [];

		for (let i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
		}

		const out = i => transition_out(each_blocks[i], 1, 1, () => {
			each_blocks[i] = null;
		});

		const block = {
			c: function create() {
				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_1_anchor = empty();
			},
			m: function mount(target, anchor) {
				for (let i = 0; i < each_blocks.length; i += 1) {
					if (each_blocks[i]) {
						each_blocks[i].m(target, anchor);
					}
				}

				insert_dev(target, each_1_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				if (dirty[0] & /*node, depth, selected, hovered, select, mouseEnter, internalHover*/ 127) {
					each_value = ensure_array_like_dev(/*node*/ ctx[0].childNodes);
					let i;

					for (i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(child_ctx, dirty);
							transition_in(each_blocks[i], 1);
						} else {
							each_blocks[i] = create_each_block(child_ctx);
							each_blocks[i].c();
							transition_in(each_blocks[i], 1);
							each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
						}
					}

					group_outros();

					for (i = each_value.length; i < each_blocks.length; i += 1) {
						out(i);
					}

					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;

				for (let i = 0; i < each_value.length; i += 1) {
					transition_in(each_blocks[i]);
				}

				current = true;
			},
			o: function outro(local) {
				each_blocks = each_blocks.filter(Boolean);

				for (let i = 0; i < each_blocks.length; i += 1) {
					transition_out(each_blocks[i]);
				}

				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(each_1_anchor);
				}

				destroy_each(each_blocks, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_4.name,
			type: "if",
			source: "(134:8) {#if isOpen}",
			ctx
		});

		return block;
	}

	// (135:10) {#each node.childNodes as child}
	function create_each_block(ctx) {
		let treenode;
		let current;

		treenode = new TreeNode({
				props: {
					node: /*child*/ ctx[36],
					depth: /*depth*/ ctx[3] + 1,
					selected: /*selected*/ ctx[1],
					hovered: /*hovered*/ ctx[2],
					select: /*select*/ ctx[5],
					mouseEnter: /*mouseEnter*/ ctx[6],
					internalHover: /*internalHover*/ ctx[4]
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(treenode.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(treenode, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const treenode_changes = {};
				if (dirty[0] & /*node*/ 1) treenode_changes.node = /*child*/ ctx[36];
				if (dirty[0] & /*depth*/ 8) treenode_changes.depth = /*depth*/ ctx[3] + 1;
				if (dirty[0] & /*selected*/ 2) treenode_changes.selected = /*selected*/ ctx[1];
				if (dirty[0] & /*hovered*/ 4) treenode_changes.hovered = /*hovered*/ ctx[2];
				if (dirty[0] & /*select*/ 32) treenode_changes.select = /*select*/ ctx[5];
				if (dirty[0] & /*mouseEnter*/ 64) treenode_changes.mouseEnter = /*mouseEnter*/ ctx[6];
				if (dirty[0] & /*internalHover*/ 16) treenode_changes.internalHover = /*internalHover*/ ctx[4];
				treenode.$set(treenode_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(treenode.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(treenode.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(treenode, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_each_block.name,
			type: "each",
			source: "(135:10) {#each node.childNodes as child}",
			ctx
		});

		return block;
	}

	function create_fragment$5(ctx) {
		let div;
		let current_block_type_index;
		let if_block;
		let div_class_value;
		let current;

		const if_block_creators = [
			create_if_block$3,
			create_if_block_1$1,
			create_if_block_2,
			create_if_block_3,
			create_else_block$1
		];

		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*isEmptyText*/ ctx[16]) return 0;
			if (/*isText*/ ctx[14]) return 1;
			if (/*isEmpty*/ ctx[15]) return 2;
			if (/*hasOnlyChild*/ ctx[17]) return 3;
			return 4;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		const block = {
			c: function create() {
				div = element("div");
				if_block.c();
				attr_dev(div, "class", div_class_value = /*depth*/ ctx[3] > 0 ? "pl-2" : "");
				add_location(div, file$4, 61, 0, 1935);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
				if_blocks[current_block_type_index].m(div, null);
				/*div_binding*/ ctx[32](div);
				current = true;
			},
			p: function update(ctx, dirty) {
				if_block.p(ctx, dirty);

				if (!current || dirty[0] & /*depth*/ 8 && div_class_value !== (div_class_value = /*depth*/ ctx[3] > 0 ? "pl-2" : "")) {
					attr_dev(div, "class", div_class_value);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if_blocks[current_block_type_index].d();
				/*div_binding*/ ctx[32](null);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$5.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	const paddingY = "py-1";

	function capitalizeFirstLetter(string) {
		return string.charAt(0).toUpperCase() + string.slice(1);
	}

	function instance$5($$self, $$props, $$invalidate) {
		let isSelected;
		let isHovered;
		let selectedClass;
		let hoverClass;
		let childrenSelectedClass;
		let iconClass;
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('TreeNode', slots, []);
		var _a, _b, _c;
		let { node } = $$props;
		let { selected } = $$props;
		let { hovered } = $$props;
		let { depth = 0 } = $$props;
		let { internalHover = false } = $$props;
		let { select } = $$props;
		let { mouseEnter } = $$props;
		let nodeRef;
		let isText = node && node.nodeType == Node.TEXT_NODE;
		let isEmpty = node && node.childNodes.length == 0;

		let isEmptyText = isText && ((_a = node === null || node === void 0
		? void 0
		: node.nodeValue) === null || _a === void 0
		? void 0
		: _a.trim()) == "";

		let hasOnlyChild = node && node.childNodes.length == 1 && ((_b = node === null || node === void 0
		? void 0
		: node.firstChild) === null || _b === void 0
		? void 0
		: _b.nodeType) == Node.TEXT_NODE;

		let name = node && node.tagName && (((_c = TagMap[node.tagName.toLowerCase()]) === null || _c === void 0
		? void 0
		: _c.title) || capitalizeFirstLetter(node.tagName.toLowerCase()));

		let isOpen = true;
		let selfSelected = false;

		$$self.$$.on_mount.push(function () {
			if (node === undefined && !('node' in $$props || $$self.$$.bound[$$self.$$.props['node']])) {
				console.warn("<TreeNode> was created without expected prop 'node'");
			}

			if (selected === undefined && !('selected' in $$props || $$self.$$.bound[$$self.$$.props['selected']])) {
				console.warn("<TreeNode> was created without expected prop 'selected'");
			}

			if (hovered === undefined && !('hovered' in $$props || $$self.$$.bound[$$self.$$.props['hovered']])) {
				console.warn("<TreeNode> was created without expected prop 'hovered'");
			}

			if (select === undefined && !('select' in $$props || $$self.$$.bound[$$self.$$.props['select']])) {
				console.warn("<TreeNode> was created without expected prop 'select'");
			}

			if (mouseEnter === undefined && !('mouseEnter' in $$props || $$self.$$.bound[$$self.$$.props['mouseEnter']])) {
				console.warn("<TreeNode> was created without expected prop 'mouseEnter'");
			}
		});

		const writable_props = [
			'node',
			'selected',
			'hovered',
			'depth',
			'internalHover',
			'select',
			'mouseEnter'
		];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TreeNode> was created with unknown prop '${key}'`);
		});

		const click_handler = e => {
			select(e, node);
			$$invalidate(8, selfSelected = true);
		};

		const mouseover_handler = e => mouseEnter(e, node);

		const click_handler_1 = e => {
			select(e, node);
			$$invalidate(8, selfSelected = true);
		};

		const mouseover_handler_1 = e => mouseEnter(e, node);

		const click_handler_2 = e => {
			select(e, node);
			$$invalidate(8, selfSelected = true);
		};

		const mouseover_handler_2 = e => mouseEnter(e, node);

		const click_handler_3 = e => {
			select(e, node);
			$$invalidate(8, selfSelected = true);
		};

		const mouseover_handler_3 = e => mouseEnter(e, node);

		function details_toggle_handler() {
			isOpen = this.open;
			$$invalidate(9, isOpen);
		}

		const click_handler_4 = e => {
			select(e, node);
			$$invalidate(8, selfSelected = true);
		};

		const mouseover_handler_4 = e => mouseEnter(e, node);

		function div_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				nodeRef = $$value;
				$$invalidate(7, nodeRef);
			});
		}

		$$self.$$set = $$props => {
			if ('node' in $$props) $$invalidate(0, node = $$props.node);
			if ('selected' in $$props) $$invalidate(1, selected = $$props.selected);
			if ('hovered' in $$props) $$invalidate(2, hovered = $$props.hovered);
			if ('depth' in $$props) $$invalidate(3, depth = $$props.depth);
			if ('internalHover' in $$props) $$invalidate(4, internalHover = $$props.internalHover);
			if ('select' in $$props) $$invalidate(5, select = $$props.select);
			if ('mouseEnter' in $$props) $$invalidate(6, mouseEnter = $$props.mouseEnter);
		};

		$$self.$capture_state = () => ({
			_a,
			_b,
			_c,
			TagMap,
			ChevronDown: ChevronDown$1,
			Component1: Component1$1,
			Text: Text$1,
			BoxModel: BoxModel$1,
			node,
			selected,
			hovered,
			depth,
			internalHover,
			select,
			mouseEnter,
			nodeRef,
			isText,
			isEmpty,
			isEmptyText,
			hasOnlyChild,
			name,
			isOpen,
			selfSelected,
			capitalizeFirstLetter,
			paddingY,
			isSelected,
			iconClass,
			childrenSelectedClass,
			isHovered,
			hoverClass,
			selectedClass
		});

		$$self.$inject_state = $$props => {
			if ('_a' in $$props) _a = $$props._a;
			if ('_b' in $$props) _b = $$props._b;
			if ('_c' in $$props) _c = $$props._c;
			if ('node' in $$props) $$invalidate(0, node = $$props.node);
			if ('selected' in $$props) $$invalidate(1, selected = $$props.selected);
			if ('hovered' in $$props) $$invalidate(2, hovered = $$props.hovered);
			if ('depth' in $$props) $$invalidate(3, depth = $$props.depth);
			if ('internalHover' in $$props) $$invalidate(4, internalHover = $$props.internalHover);
			if ('select' in $$props) $$invalidate(5, select = $$props.select);
			if ('mouseEnter' in $$props) $$invalidate(6, mouseEnter = $$props.mouseEnter);
			if ('nodeRef' in $$props) $$invalidate(7, nodeRef = $$props.nodeRef);
			if ('isText' in $$props) $$invalidate(14, isText = $$props.isText);
			if ('isEmpty' in $$props) $$invalidate(15, isEmpty = $$props.isEmpty);
			if ('isEmptyText' in $$props) $$invalidate(16, isEmptyText = $$props.isEmptyText);
			if ('hasOnlyChild' in $$props) $$invalidate(17, hasOnlyChild = $$props.hasOnlyChild);
			if ('name' in $$props) $$invalidate(18, name = $$props.name);
			if ('isOpen' in $$props) $$invalidate(9, isOpen = $$props.isOpen);
			if ('selfSelected' in $$props) $$invalidate(8, selfSelected = $$props.selfSelected);
			if ('isSelected' in $$props) $$invalidate(19, isSelected = $$props.isSelected);
			if ('iconClass' in $$props) $$invalidate(10, iconClass = $$props.iconClass);
			if ('childrenSelectedClass' in $$props) $$invalidate(11, childrenSelectedClass = $$props.childrenSelectedClass);
			if ('isHovered' in $$props) $$invalidate(20, isHovered = $$props.isHovered);
			if ('hoverClass' in $$props) $$invalidate(12, hoverClass = $$props.hoverClass);
			if ('selectedClass' in $$props) $$invalidate(13, selectedClass = $$props.selectedClass);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty[0] & /*node, selected*/ 3) {
				$$invalidate(19, isSelected = node == selected);
			}

			if ($$self.$$.dirty[0] & /*node, hovered*/ 5) {
				$$invalidate(20, isHovered = node == hovered);
			}

			if ($$self.$$.dirty[0] & /*isSelected*/ 524288) {
				$$invalidate(13, selectedClass = isSelected
				? "bg-red rounded text-white font-semibold"
				: "");
			}

			if ($$self.$$.dirty[0] & /*isHovered*/ 1048576) {
				$$invalidate(12, hoverClass = isHovered ? "bg-red/20 rounded" : "");
			}

			if ($$self.$$.dirty[0] & /*isSelected*/ 524288) {
				$$invalidate(11, childrenSelectedClass = isSelected
				? "bg-[#38040c] rounded-b rounded-t-none font-normal text-white/60"
				: "");
			}

			if ($$self.$$.dirty[0] & /*isSelected*/ 524288) {
				$$invalidate(10, iconClass = `h-3 w-3 ml-1 mr-2 ${isSelected ? "text-white" : "text-red"}`);
			}

			if ($$self.$$.dirty[0] & /*isSelected, selfSelected, nodeRef*/ 524672) {
				{
					if (isSelected) {
						if (!selfSelected) {
							nodeRef.scrollIntoView({
								behavior: "smooth",
								block: "center",
								inline: "start"
							});

							$$invalidate(8, selfSelected = false);
						}
					}
				}
			}
		};

		return [
			node,
			selected,
			hovered,
			depth,
			internalHover,
			select,
			mouseEnter,
			nodeRef,
			selfSelected,
			isOpen,
			iconClass,
			childrenSelectedClass,
			hoverClass,
			selectedClass,
			isText,
			isEmpty,
			isEmptyText,
			hasOnlyChild,
			name,
			isSelected,
			isHovered,
			click_handler,
			mouseover_handler,
			click_handler_1,
			mouseover_handler_1,
			click_handler_2,
			mouseover_handler_2,
			click_handler_3,
			mouseover_handler_3,
			details_toggle_handler,
			click_handler_4,
			mouseover_handler_4,
			div_binding
		];
	}

	class TreeNode extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(
				this,
				options,
				instance$5,
				create_fragment$5,
				safe_not_equal,
				{
					node: 0,
					selected: 1,
					hovered: 2,
					depth: 3,
					internalHover: 4,
					select: 5,
					mouseEnter: 6
				},
				null,
				[-1, -1]
			);

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "TreeNode",
				options,
				id: create_fragment$5.name
			});
		}

		get node() {
			throw new Error("<TreeNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set node(value) {
			throw new Error("<TreeNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get selected() {
			throw new Error("<TreeNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set selected(value) {
			throw new Error("<TreeNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get hovered() {
			throw new Error("<TreeNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set hovered(value) {
			throw new Error("<TreeNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get depth() {
			throw new Error("<TreeNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set depth(value) {
			throw new Error("<TreeNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get internalHover() {
			throw new Error("<TreeNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set internalHover(value) {
			throw new Error("<TreeNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get select() {
			throw new Error("<TreeNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set select(value) {
			throw new Error("<TreeNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get mouseEnter() {
			throw new Error("<TreeNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set mouseEnter(value) {
			throw new Error("<TreeNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/lib/components/layers/dom/TreeRoot.svelte generated by Svelte v4.2.10 */
	const file$3 = "src/lib/components/layers/dom/TreeRoot.svelte";

	// (21:2) {#if node}
	function create_if_block$2(ctx) {
		let domtreenode;
		let updating_node;
		let current;

		function domtreenode_node_binding(value) {
			/*domtreenode_node_binding*/ ctx[7](value);
		}

		let domtreenode_props = {
			selected: /*selected*/ ctx[1],
			hovered: /*hovered*/ ctx[2],
			select: /*select*/ ctx[3],
			mouseEnter: /*mouseEnter*/ ctx[4],
			internalHover: /*internalHover*/ ctx[6]
		};

		if (/*node*/ ctx[0] !== void 0) {
			domtreenode_props.node = /*node*/ ctx[0];
		}

		domtreenode = new TreeNode({ props: domtreenode_props, $$inline: true });
		binding_callbacks.push(() => bind(domtreenode, 'node', domtreenode_node_binding));

		const block = {
			c: function create() {
				create_component(domtreenode.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(domtreenode, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const domtreenode_changes = {};
				if (dirty & /*selected*/ 2) domtreenode_changes.selected = /*selected*/ ctx[1];
				if (dirty & /*hovered*/ 4) domtreenode_changes.hovered = /*hovered*/ ctx[2];
				if (dirty & /*select*/ 8) domtreenode_changes.select = /*select*/ ctx[3];
				if (dirty & /*mouseEnter*/ 16) domtreenode_changes.mouseEnter = /*mouseEnter*/ ctx[4];
				if (dirty & /*internalHover*/ 64) domtreenode_changes.internalHover = /*internalHover*/ ctx[6];

				if (!updating_node && dirty & /*node*/ 1) {
					updating_node = true;
					domtreenode_changes.node = /*node*/ ctx[0];
					add_flush_callback(() => updating_node = false);
				}

				domtreenode.$set(domtreenode_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(domtreenode.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(domtreenode.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(domtreenode, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$2.name,
			type: "if",
			source: "(21:2) {#if node}",
			ctx
		});

		return block;
	}

	function create_fragment$4(ctx) {
		let div;
		let current;
		let mounted;
		let dispose;
		let if_block = /*node*/ ctx[0] && create_if_block$2(ctx);

		const block = {
			c: function create() {
				div = element("div");
				if (if_block) if_block.c();
				attr_dev(div, "class", "select-none text-xs text-white/60");
				add_location(div, file$3, 16, 0, 317);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
				if (if_block) if_block.m(div, null);
				current = true;

				if (!mounted) {
					dispose = [
						listen_dev(div, "mouseleave", prevent_default(/*mouseleave_handler*/ ctx[8]), false, true, false, false),
						listen_dev(div, "mouseenter", /*mouseenter_handler*/ ctx[9], false, false, false, false)
					];

					mounted = true;
				}
			},
			p: function update(ctx, [dirty]) {
				if (/*node*/ ctx[0]) {
					if (if_block) {
						if_block.p(ctx, dirty);

						if (dirty & /*node*/ 1) {
							transition_in(if_block, 1);
						}
					} else {
						if_block = create_if_block$2(ctx);
						if_block.c();
						transition_in(if_block, 1);
						if_block.m(div, null);
					}
				} else if (if_block) {
					group_outros();

					transition_out(if_block, 1, 1, () => {
						if_block = null;
					});

					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				if (if_block) if_block.d();
				mounted = false;
				run_all(dispose);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$4.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$4($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('TreeRoot', slots, []);
		let { node } = $$props;
		let { selected } = $$props;
		let { hovered } = $$props;
		let { select } = $$props;
		let { mouseEnter } = $$props;
		let { mouseLeave } = $$props;
		let internalHover = false;

		$$self.$$.on_mount.push(function () {
			if (node === undefined && !('node' in $$props || $$self.$$.bound[$$self.$$.props['node']])) {
				console.warn("<TreeRoot> was created without expected prop 'node'");
			}

			if (selected === undefined && !('selected' in $$props || $$self.$$.bound[$$self.$$.props['selected']])) {
				console.warn("<TreeRoot> was created without expected prop 'selected'");
			}

			if (hovered === undefined && !('hovered' in $$props || $$self.$$.bound[$$self.$$.props['hovered']])) {
				console.warn("<TreeRoot> was created without expected prop 'hovered'");
			}

			if (select === undefined && !('select' in $$props || $$self.$$.bound[$$self.$$.props['select']])) {
				console.warn("<TreeRoot> was created without expected prop 'select'");
			}

			if (mouseEnter === undefined && !('mouseEnter' in $$props || $$self.$$.bound[$$self.$$.props['mouseEnter']])) {
				console.warn("<TreeRoot> was created without expected prop 'mouseEnter'");
			}

			if (mouseLeave === undefined && !('mouseLeave' in $$props || $$self.$$.bound[$$self.$$.props['mouseLeave']])) {
				console.warn("<TreeRoot> was created without expected prop 'mouseLeave'");
			}
		});

		const writable_props = ['node', 'selected', 'hovered', 'select', 'mouseEnter', 'mouseLeave'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TreeRoot> was created with unknown prop '${key}'`);
		});

		function domtreenode_node_binding(value) {
			node = value;
			$$invalidate(0, node);
		}

		const mouseleave_handler = e => {
			$$invalidate(6, internalHover = false);
			mouseLeave(e);
		};

		const mouseenter_handler = () => $$invalidate(6, internalHover = true);

		$$self.$$set = $$props => {
			if ('node' in $$props) $$invalidate(0, node = $$props.node);
			if ('selected' in $$props) $$invalidate(1, selected = $$props.selected);
			if ('hovered' in $$props) $$invalidate(2, hovered = $$props.hovered);
			if ('select' in $$props) $$invalidate(3, select = $$props.select);
			if ('mouseEnter' in $$props) $$invalidate(4, mouseEnter = $$props.mouseEnter);
			if ('mouseLeave' in $$props) $$invalidate(5, mouseLeave = $$props.mouseLeave);
		};

		$$self.$capture_state = () => ({
			onMount,
			DOMTreeNode: TreeNode,
			node,
			selected,
			hovered,
			select,
			mouseEnter,
			mouseLeave,
			internalHover
		});

		$$self.$inject_state = $$props => {
			if ('node' in $$props) $$invalidate(0, node = $$props.node);
			if ('selected' in $$props) $$invalidate(1, selected = $$props.selected);
			if ('hovered' in $$props) $$invalidate(2, hovered = $$props.hovered);
			if ('select' in $$props) $$invalidate(3, select = $$props.select);
			if ('mouseEnter' in $$props) $$invalidate(4, mouseEnter = $$props.mouseEnter);
			if ('mouseLeave' in $$props) $$invalidate(5, mouseLeave = $$props.mouseLeave);
			if ('internalHover' in $$props) $$invalidate(6, internalHover = $$props.internalHover);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [
			node,
			selected,
			hovered,
			select,
			mouseEnter,
			mouseLeave,
			internalHover,
			domtreenode_node_binding,
			mouseleave_handler,
			mouseenter_handler
		];
	}

	class TreeRoot extends SvelteComponentDev {
		constructor(options) {
			super(options);

			init(this, options, instance$4, create_fragment$4, safe_not_equal, {
				node: 0,
				selected: 1,
				hovered: 2,
				select: 3,
				mouseEnter: 4,
				mouseLeave: 5
			});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "TreeRoot",
				options,
				id: create_fragment$4.name
			});
		}

		get node() {
			throw new Error("<TreeRoot>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set node(value) {
			throw new Error("<TreeRoot>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get selected() {
			throw new Error("<TreeRoot>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set selected(value) {
			throw new Error("<TreeRoot>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get hovered() {
			throw new Error("<TreeRoot>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set hovered(value) {
			throw new Error("<TreeRoot>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get select() {
			throw new Error("<TreeRoot>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set select(value) {
			throw new Error("<TreeRoot>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get mouseEnter() {
			throw new Error("<TreeRoot>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set mouseEnter(value) {
			throw new Error("<TreeRoot>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		get mouseLeave() {
			throw new Error("<TreeRoot>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set mouseLeave(value) {
			throw new Error("<TreeRoot>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/lib/components/layers/LayersTab.svelte generated by Svelte v4.2.10 */

	// (59:0) {#if tree}
	function create_if_block$1(ctx) {
		let treeroot;
		let current;

		treeroot = new TreeRoot({
				props: {
					node: /*tree*/ ctx[2],
					hovered: /*hovered*/ ctx[0],
					selected: /*selected*/ ctx[1],
					select: /*select*/ ctx[3],
					mouseEnter: /*mouseEnter*/ ctx[4],
					mouseLeave: /*mouseLeave*/ ctx[5]
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(treeroot.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(treeroot, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const treeroot_changes = {};
				if (dirty & /*tree*/ 4) treeroot_changes.node = /*tree*/ ctx[2];
				if (dirty & /*hovered*/ 1) treeroot_changes.hovered = /*hovered*/ ctx[0];
				if (dirty & /*selected*/ 2) treeroot_changes.selected = /*selected*/ ctx[1];
				treeroot.$set(treeroot_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(treeroot.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(treeroot.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(treeroot, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block$1.name,
			type: "if",
			source: "(59:0) {#if tree}",
			ctx
		});

		return block;
	}

	function create_fragment$3(ctx) {
		let if_block_anchor;
		let current;
		let if_block = /*tree*/ ctx[2] && create_if_block$1(ctx);

		const block = {
			c: function create() {
				if (if_block) if_block.c();
				if_block_anchor = empty();
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				if (if_block) if_block.m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				if (/*tree*/ ctx[2]) {
					if (if_block) {
						if_block.p(ctx, dirty);

						if (dirty & /*tree*/ 4) {
							transition_in(if_block, 1);
						}
					} else {
						if_block = create_if_block$1(ctx);
						if_block.c();
						transition_in(if_block, 1);
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					group_outros();

					transition_out(if_block, 1, 1, () => {
						if_block = null;
					});

					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if (if_block) if_block.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$3.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$3($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('LayersTab', slots, []);
		let { editTool } = $$props;
		let layersManager;
		let hovered;
		let selected;
		let parser;
		let htmlDoc;
		let tree;

		onMount(() => {
			layersManager = new LayersManager();
			parser = new DOMParser();
			htmlDoc = layersManager.clonedDocument;
			$$invalidate(2, tree = htmlDoc.body);
			editTool.selectorEngine.selectedStore.subscribe(handleNewSelections);
			editTool.selectorEngine.hoveredStore.subscribe(handleNewHover);
		});

		function select(e, node) {
			if (selected == node) return;

			$$invalidate(1, selected = layersManager === null || layersManager === void 0
			? void 0
			: layersManager.getOriginalNode(node));

			editTool.simulateClick(selected);
		}

		function mouseEnter(e, node) {
			if (hovered == node) return;

			$$invalidate(0, hovered = layersManager === null || layersManager === void 0
			? void 0
			: layersManager.getOriginalNode(node));

			editTool.simulateHover(hovered);
		}

		function mouseLeave(e) {
			$$invalidate(0, hovered = undefined);
			editTool.simulateOut();
		}

		function handleNewHover(el) {
			if (!el) {
				$$invalidate(0, hovered = undefined);
				return;
			}

			const hoveredEl = layersManager === null || layersManager === void 0
			? void 0
			: layersManager.getSanitizedNode(el);

			if (hoveredEl) {
				$$invalidate(0, hovered = hoveredEl);
			}
		}

		function handleNewSelections(els) {
			if (els.length == 0) {
				$$invalidate(1, selected = undefined);
				return;
			}

			const selectedEl = layersManager === null || layersManager === void 0
			? void 0
			: layersManager.getSanitizedNode(els[0]);

			if (selectedEl) {
				$$invalidate(1, selected = selectedEl);
			}
		}

		$$self.$$.on_mount.push(function () {
			if (editTool === undefined && !('editTool' in $$props || $$self.$$.bound[$$self.$$.props['editTool']])) {
				console.warn("<LayersTab> was created without expected prop 'editTool'");
			}
		});

		const writable_props = ['editTool'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<LayersTab> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('editTool' in $$props) $$invalidate(6, editTool = $$props.editTool);
		};

		$$self.$capture_state = () => ({
			LayersManager,
			onMount,
			TreeRoot,
			getUniqueSelector,
			DATA_ONLOOK_SELECTOR,
			editTool,
			layersManager,
			hovered,
			selected,
			parser,
			htmlDoc,
			tree,
			select,
			mouseEnter,
			mouseLeave,
			handleNewHover,
			handleNewSelections
		});

		$$self.$inject_state = $$props => {
			if ('editTool' in $$props) $$invalidate(6, editTool = $$props.editTool);
			if ('layersManager' in $$props) layersManager = $$props.layersManager;
			if ('hovered' in $$props) $$invalidate(0, hovered = $$props.hovered);
			if ('selected' in $$props) $$invalidate(1, selected = $$props.selected);
			if ('parser' in $$props) parser = $$props.parser;
			if ('htmlDoc' in $$props) htmlDoc = $$props.htmlDoc;
			if ('tree' in $$props) $$invalidate(2, tree = $$props.tree);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [hovered, selected, tree, select, mouseEnter, mouseLeave, editTool];
	}

	class LayersTab extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$3, create_fragment$3, safe_not_equal, { editTool: 6 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "LayersTab",
				options,
				id: create_fragment$3.name
			});
		}

		get editTool() {
			throw new Error("<LayersTab>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set editTool(value) {
			throw new Error("<LayersTab>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/lib/components/layers/LayersPanel.svelte generated by Svelte v4.2.10 */
	const file$2 = "src/lib/components/layers/LayersPanel.svelte";

	// (25:10) <Tabs.Trigger             class="bg-transparent p-0 text-xs"             value={TabValue.LAYERS}>
	function create_default_slot_5(ctx) {
		let t;

		const block = {
			c: function create() {
				t = text("Layers");
			},
			m: function mount(target, anchor) {
				insert_dev(target, t, anchor);
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_5.name,
			type: "slot",
			source: "(25:10) <Tabs.Trigger             class=\\\"bg-transparent p-0 text-xs\\\"             value={TabValue.LAYERS}>",
			ctx
		});

		return block;
	}

	// (24:8) <Tabs.List class="bg-transparent p-0 gap-4">
	function create_default_slot_4(ctx) {
		let tabs_trigger;
		let current;

		tabs_trigger = new Tabs_trigger({
				props: {
					class: "bg-transparent p-0 text-xs",
					value: /*TabValue*/ ctx[1].LAYERS,
					$$slots: { default: [create_default_slot_5] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(tabs_trigger.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(tabs_trigger, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const tabs_trigger_changes = {};
				if (dirty & /*TabValue*/ 2) tabs_trigger_changes.value = /*TabValue*/ ctx[1].LAYERS;

				if (dirty & /*$$scope*/ 8) {
					tabs_trigger_changes.$$scope = { dirty, ctx };
				}

				tabs_trigger.$set(tabs_trigger_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(tabs_trigger.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(tabs_trigger.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(tabs_trigger, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_4.name,
			type: "slot",
			source: "(24:8) <Tabs.List class=\\\"bg-transparent p-0 gap-4\\\">",
			ctx
		});

		return block;
	}

	// (32:10) <Tabs.Content value={TabValue.LAYERS}             >
	function create_default_slot_3$1(ctx) {
		let layerstab;
		let current;

		layerstab = new LayersTab({
				props: { editTool: /*editTool*/ ctx[0] },
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(layerstab.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(layerstab, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const layerstab_changes = {};
				if (dirty & /*editTool*/ 1) layerstab_changes.editTool = /*editTool*/ ctx[0];
				layerstab.$set(layerstab_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(layerstab.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(layerstab.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(layerstab, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_3$1.name,
			type: "slot",
			source: "(32:10) <Tabs.Content value={TabValue.LAYERS}             >",
			ctx
		});

		return block;
	}

	// (23:6) <Tabs.Root value={TabValue.LAYERS} class="w-full h-full">
	function create_default_slot_2$1(ctx) {
		let tabs_list;
		let t0;
		let separator;
		let t1;
		let div;
		let tabs_content;
		let t2;
		let card_footer;
		let current;

		tabs_list = new Tabs_list({
				props: {
					class: "bg-transparent p-0 gap-4",
					$$slots: { default: [create_default_slot_4] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		separator = new Separator({ props: { class: "mt-1" }, $$inline: true });

		tabs_content = new Tabs_content({
				props: {
					value: /*TabValue*/ ctx[1].LAYERS,
					$$slots: { default: [create_default_slot_3$1] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		card_footer = new Card_footer({
				props: { class: "flex justify-between" },
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(tabs_list.$$.fragment);
				t0 = space();
				create_component(separator.$$.fragment);
				t1 = space();
				div = element("div");
				create_component(tabs_content.$$.fragment);
				t2 = space();
				create_component(card_footer.$$.fragment);
				attr_dev(div, "class", "h-[54vh] overflow-auto");
				add_location(div, file$2, 33, 8, 1098);
			},
			m: function mount(target, anchor) {
				mount_component(tabs_list, target, anchor);
				insert_dev(target, t0, anchor);
				mount_component(separator, target, anchor);
				insert_dev(target, t1, anchor);
				insert_dev(target, div, anchor);
				mount_component(tabs_content, div, null);
				insert_dev(target, t2, anchor);
				mount_component(card_footer, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const tabs_list_changes = {};

				if (dirty & /*$$scope, TabValue*/ 10) {
					tabs_list_changes.$$scope = { dirty, ctx };
				}

				tabs_list.$set(tabs_list_changes);
				const tabs_content_changes = {};
				if (dirty & /*TabValue*/ 2) tabs_content_changes.value = /*TabValue*/ ctx[1].LAYERS;

				if (dirty & /*$$scope, editTool*/ 9) {
					tabs_content_changes.$$scope = { dirty, ctx };
				}

				tabs_content.$set(tabs_content_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(tabs_list.$$.fragment, local);
				transition_in(separator.$$.fragment, local);
				transition_in(tabs_content.$$.fragment, local);
				transition_in(card_footer.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(tabs_list.$$.fragment, local);
				transition_out(separator.$$.fragment, local);
				transition_out(tabs_content.$$.fragment, local);
				transition_out(card_footer.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t0);
					detach_dev(t1);
					detach_dev(div);
					detach_dev(t2);
				}

				destroy_component(tabs_list, detaching);
				destroy_component(separator, detaching);
				destroy_component(tabs_content);
				destroy_component(card_footer, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_2$1.name,
			type: "slot",
			source: "(23:6) <Tabs.Root value={TabValue.LAYERS} class=\\\"w-full h-full\\\">",
			ctx
		});

		return block;
	}

	// (22:4) <Card.Content>
	function create_default_slot_1$1(ctx) {
		let tabs_root;
		let current;

		tabs_root = new Root$1({
				props: {
					value: /*TabValue*/ ctx[1].LAYERS,
					class: "w-full h-full",
					$$slots: { default: [create_default_slot_2$1] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(tabs_root.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(tabs_root, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const tabs_root_changes = {};
				if (dirty & /*TabValue*/ 2) tabs_root_changes.value = /*TabValue*/ ctx[1].LAYERS;

				if (dirty & /*$$scope, TabValue, editTool*/ 11) {
					tabs_root_changes.$$scope = { dirty, ctx };
				}

				tabs_root.$set(tabs_root_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(tabs_root.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(tabs_root.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(tabs_root, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_1$1.name,
			type: "slot",
			source: "(22:4) <Card.Content>",
			ctx
		});

		return block;
	}

	// (21:2) <Card.Root class="w-[260px] h-[60vh] backdrop-blur bg-background/90 pt-2">
	function create_default_slot$1(ctx) {
		let card_content;
		let current;

		card_content = new Card_content({
				props: {
					$$slots: { default: [create_default_slot_1$1] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(card_content.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(card_content, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const card_content_changes = {};

				if (dirty & /*$$scope, TabValue, editTool*/ 11) {
					card_content_changes.$$scope = { dirty, ctx };
				}

				card_content.$set(card_content_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(card_content.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(card_content.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(card_content, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot$1.name,
			type: "slot",
			source: "(21:2) <Card.Root class=\\\"w-[260px] h-[60vh] backdrop-blur bg-background/90 pt-2\\\">",
			ctx
		});

		return block;
	}

	function create_fragment$2(ctx) {
		let div;
		let card_root;
		let div_class_value;
		let current;
		let mounted;
		let dispose;

		card_root = new Card$1({
				props: {
					class: "w-[260px] h-[60vh] backdrop-blur bg-background/90 pt-2",
					$$slots: { default: [create_default_slot$1] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				div = element("div");
				create_component(card_root.$$.fragment);
				attr_dev(div, "class", div_class_value = "fixed top-10 left-2 transform -translate-y-1/2 -translate-x-1/2 " + (/*$editorPanelVisible*/ ctx[2] ? 'visible' : 'invisible'));
				add_location(div, file$2, 17, 0, 507);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
				mount_component(card_root, div, null);
				current = true;

				if (!mounted) {
					dispose = action_destroyer(d$1.call(null, div, { bounds: "body" }));
					mounted = true;
				}
			},
			p: function update(ctx, [dirty]) {
				const card_root_changes = {};

				if (dirty & /*$$scope, TabValue, editTool*/ 11) {
					card_root_changes.$$scope = { dirty, ctx };
				}

				card_root.$set(card_root_changes);

				if (!current || dirty & /*$editorPanelVisible*/ 4 && div_class_value !== (div_class_value = "fixed top-10 left-2 transform -translate-y-1/2 -translate-x-1/2 " + (/*$editorPanelVisible*/ ctx[2] ? 'visible' : 'invisible'))) {
					attr_dev(div, "class", div_class_value);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(card_root.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(card_root.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				destroy_component(card_root);
				mounted = false;
				dispose();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$2.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$2($$self, $$props, $$invalidate) {
		let $editorPanelVisible;
		validate_store(editorPanelVisible, 'editorPanelVisible');
		component_subscribe($$self, editorPanelVisible, $$value => $$invalidate(2, $editorPanelVisible = $$value));
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('LayersPanel', slots, []);
		let { editTool } = $$props;
		var TabValue;

		(function (TabValue) {
			TabValue["LAYERS"] = "css";
			TabValue["OTHER"] = "other";
		})(TabValue || (TabValue = {}));

		$$self.$$.on_mount.push(function () {
			if (editTool === undefined && !('editTool' in $$props || $$self.$$.bound[$$self.$$.props['editTool']])) {
				console.warn("<LayersPanel> was created without expected prop 'editTool'");
			}
		});

		const writable_props = ['editTool'];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<LayersPanel> was created with unknown prop '${key}'`);
		});

		$$self.$$set = $$props => {
			if ('editTool' in $$props) $$invalidate(0, editTool = $$props.editTool);
		};

		$$self.$capture_state = () => ({
			draggable: d$1,
			Card,
			Tabs,
			Separator,
			editorPanelVisible,
			layersPanelVisible,
			LayersTab,
			editTool,
			TabValue,
			$editorPanelVisible
		});

		$$self.$inject_state = $$props => {
			if ('editTool' in $$props) $$invalidate(0, editTool = $$props.editTool);
			if ('TabValue' in $$props) $$invalidate(1, TabValue = $$props.TabValue);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		return [editTool, TabValue, $editorPanelVisible];
	}

	class LayersPanel extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$2, create_fragment$2, safe_not_equal, { editTool: 0 });

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "LayersPanel",
				options,
				id: create_fragment$2.name
			});
		}

		get editTool() {
			throw new Error("<LayersPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}

		set editTool(value) {
			throw new Error("<LayersPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
		}
	}

	/* src/lib/components/toolbar/Toolbar.svelte generated by Svelte v4.2.10 */
	const file$1 = "src/lib/components/toolbar/Toolbar.svelte";

	// (63:8) {:else}
	function create_else_block(ctx) {
		let pencil1;
		let t;
		let current;

		pencil1 = new Pencil1$1({
				props: { class: "h-4 w-4 mr-2" },
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(pencil1.$$.fragment);
				t = text("\n          Start Editing");
			},
			m: function mount(target, anchor) {
				mount_component(pencil1, target, anchor);
				insert_dev(target, t, anchor);
				current = true;
			},
			i: function intro(local) {
				if (current) return;
				transition_in(pencil1.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(pencil1.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}

				destroy_component(pencil1, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_else_block.name,
			type: "else",
			source: "(63:8) {:else}",
			ctx
		});

		return block;
	}

	// (33:8) {#if activeToolName === ToolName.EDIT}
	function create_if_block_1(ctx) {
		let svg;
		let g;
		let path;
		let defs;
		let clipPath;
		let rect;
		let t;

		const block = {
			c: function create() {
				svg = svg_element("svg");
				g = svg_element("g");
				path = svg_element("path");
				defs = svg_element("defs");
				clipPath = svg_element("clipPath");
				rect = svg_element("rect");
				t = text("\n\n          Stop Editing");
				attr_dev(path, "fill-rule", "evenodd");
				attr_dev(path, "clip-rule", "evenodd");
				attr_dev(path, "d", "M7 13H13V7H7V13ZM10 2.5C5.86 2.5 2.5 5.86 2.5 10C2.5 14.14 5.86 17.5 10 17.5C14.14 17.5 17.5 14.14 17.5 10C17.5 5.86 14.14 2.5 10 2.5Z");
				attr_dev(path, "fill", "white");
				add_location(path, file$1, 45, 14, 1690);
				attr_dev(g, "clip-path", "url(#clip0_148_23526)");
				add_location(g, file$1, 44, 12, 1638);
				attr_dev(rect, "width", "18");
				attr_dev(rect, "height", "18");
				attr_dev(rect, "fill", "white");
				attr_dev(rect, "transform", "translate(1 1)");
				add_location(rect, file$1, 54, 16, 2067);
				attr_dev(clipPath, "id", "clip0_148_23526");
				add_location(clipPath, file$1, 53, 14, 2019);
				add_location(defs, file$1, 52, 12, 1998);
				attr_dev(svg, "class", "mr-2");
				attr_dev(svg, "width", "20");
				attr_dev(svg, "height", "20");
				attr_dev(svg, "viewBox", "0 0 20 20");
				attr_dev(svg, "fill", "none");
				attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
				add_location(svg, file$1, 36, 10, 1434);
			},
			m: function mount(target, anchor) {
				insert_dev(target, svg, anchor);
				append_dev(svg, g);
				append_dev(g, path);
				append_dev(svg, defs);
				append_dev(defs, clipPath);
				append_dev(clipPath, rect);
				insert_dev(target, t, anchor);
			},
			i: noop$3,
			o: noop$3,
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(svg);
					detach_dev(t);
				}
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block_1.name,
			type: "if",
			source: "(33:8) {#if activeToolName === ToolName.EDIT}",
			ctx
		});

		return block;
	}

	// (24:6) <Button         class="rounded-full border-none  {activeToolName === ToolName.EDIT           ? 'bg-red hover:bg-red'           : ''}"         variant={activeToolName === ToolName.EDIT ? "destructive" : "outline"}         on:click={() =>           (activeToolName =             activeToolName === ToolName.EDIT ? undefined : ToolName.EDIT)}       >
	function create_default_slot_3(ctx) {
		let current_block_type_index;
		let if_block;
		let if_block_anchor;
		let current;
		const if_block_creators = [create_if_block_1, create_else_block];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*activeToolName*/ ctx[0] === ToolName.EDIT) return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		const block = {
			c: function create() {
				if_block.c();
				if_block_anchor = empty();
			},
			m: function mount(target, anchor) {
				if_blocks[current_block_type_index].m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index !== previous_block_index) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(if_block_anchor);
				}

				if_blocks[current_block_type_index].d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_3.name,
			type: "slot",
			source: "(24:6) <Button         class=\\\"rounded-full border-none  {activeToolName === ToolName.EDIT           ? 'bg-red hover:bg-red'           : ''}\\\"         variant={activeToolName === ToolName.EDIT ? \\\"destructive\\\" : \\\"outline\\\"}         on:click={() =>           (activeToolName =             activeToolName === ToolName.EDIT ? undefined : ToolName.EDIT)}       >",
			ctx
		});

		return block;
	}

	// (69:6) {#if activeToolName !== ToolName.EDIT}
	function create_if_block(ctx) {
		let div;
		let button;
		let div_transition;
		let current;

		button = new Button({
				props: {
					class: "rounded-full border-none",
					variant: "outline",
					$$slots: { default: [create_default_slot_2] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		button.$on("click", emitOpenProjectMessage);

		const block = {
			c: function create() {
				div = element("div");
				create_component(button.$$.fragment);
				add_location(div, file$1, 72, 8, 2481);
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
				mount_component(button, div, null);
				current = true;
			},
			i: function intro(local) {
				if (current) return;
				transition_in(button.$$.fragment, local);

				if (local) {
					add_render_callback(() => {
						if (!current) return;
						if (!div_transition) div_transition = create_bidirectional_transition(div, slide, { axis: "x" }, true);
						div_transition.run(1);
					});
				}

				current = true;
			},
			o: function outro(local) {
				transition_out(button.$$.fragment, local);

				if (local) {
					if (!div_transition) div_transition = create_bidirectional_transition(div, slide, { axis: "x" }, false);
					div_transition.run(0);
				}

				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				destroy_component(button);
				if (detaching && div_transition) div_transition.end();
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_if_block.name,
			type: "if",
			source: "(69:6) {#if activeToolName !== ToolName.EDIT}",
			ctx
		});

		return block;
	}

	// (71:10) <Button             class="rounded-full border-none"             variant="outline"             on:click={emitOpenProjectMessage}             >
	function create_default_slot_2(ctx) {
		let externallink;
		let t;
		let current;

		externallink = new ExternalLink$1({
				props: { class: "h-4 w-4 mr-2" },
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(externallink.$$.fragment);
				t = text("\n            Open Project");
			},
			m: function mount(target, anchor) {
				mount_component(externallink, target, anchor);
				insert_dev(target, t, anchor);
				current = true;
			},
			p: noop$3,
			i: function intro(local) {
				if (current) return;
				transition_in(externallink.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(externallink.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
				}

				destroy_component(externallink, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_2.name,
			type: "slot",
			source: "(71:10) <Button             class=\\\"rounded-full border-none\\\"             variant=\\\"outline\\\"             on:click={emitOpenProjectMessage}             >",
			ctx
		});

		return block;
	}

	// (18:4) <Card.Root       class="bg-background opacity-[98%] border p-1 space-x-2 rounded-full flex flex-row {activeToolName ===       ToolName.EDIT         ? 'bg-red border-red'         : ''}"     >
	function create_default_slot_1(ctx) {
		let button;
		let t;
		let if_block_anchor;
		let current;

		button = new Button({
				props: {
					class: "rounded-full border-none  " + (/*activeToolName*/ ctx[0] === ToolName.EDIT
					? 'bg-red hover:bg-red'
					: ''),
					variant: /*activeToolName*/ ctx[0] === ToolName.EDIT
					? "destructive"
					: "outline",
					$$slots: { default: [create_default_slot_3] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		button.$on("click", /*click_handler*/ ctx[2]);
		let if_block = /*activeToolName*/ ctx[0] !== ToolName.EDIT && create_if_block(ctx);

		const block = {
			c: function create() {
				create_component(button.$$.fragment);
				t = space();
				if (if_block) if_block.c();
				if_block_anchor = empty();
			},
			m: function mount(target, anchor) {
				mount_component(button, target, anchor);
				insert_dev(target, t, anchor);
				if (if_block) if_block.m(target, anchor);
				insert_dev(target, if_block_anchor, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const button_changes = {};

				if (dirty & /*activeToolName*/ 1) button_changes.class = "rounded-full border-none  " + (/*activeToolName*/ ctx[0] === ToolName.EDIT
				? 'bg-red hover:bg-red'
				: '');

				if (dirty & /*activeToolName*/ 1) button_changes.variant = /*activeToolName*/ ctx[0] === ToolName.EDIT
				? "destructive"
				: "outline";

				if (dirty & /*$$scope, activeToolName*/ 9) {
					button_changes.$$scope = { dirty, ctx };
				}

				button.$set(button_changes);

				if (/*activeToolName*/ ctx[0] !== ToolName.EDIT) {
					if (if_block) {
						if (dirty & /*activeToolName*/ 1) {
							transition_in(if_block, 1);
						}
					} else {
						if_block = create_if_block(ctx);
						if_block.c();
						transition_in(if_block, 1);
						if_block.m(if_block_anchor.parentNode, if_block_anchor);
					}
				} else if (if_block) {
					group_outros();

					transition_out(if_block, 1, 1, () => {
						if_block = null;
					});

					check_outros();
				}
			},
			i: function intro(local) {
				if (current) return;
				transition_in(button.$$.fragment, local);
				transition_in(if_block);
				current = true;
			},
			o: function outro(local) {
				transition_out(button.$$.fragment, local);
				transition_out(if_block);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(t);
					detach_dev(if_block_anchor);
				}

				destroy_component(button, detaching);
				if (if_block) if_block.d(detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot_1.name,
			type: "slot",
			source: "(18:4) <Card.Root       class=\\\"bg-background opacity-[98%] border p-1 space-x-2 rounded-full flex flex-row {activeToolName ===       ToolName.EDIT         ? 'bg-red border-red'         : ''}\\\"     >",
			ctx
		});

		return block;
	}

	// (17:2) <ToolBarAnimation>
	function create_default_slot(ctx) {
		let card_root;
		let current;

		card_root = new Card$1({
				props: {
					class: "bg-background opacity-[98%] border p-1 space-x-2 rounded-full flex flex-row " + (/*activeToolName*/ ctx[0] === ToolName.EDIT
					? 'bg-red border-red'
					: ''),
					$$slots: { default: [create_default_slot_1] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				create_component(card_root.$$.fragment);
			},
			m: function mount(target, anchor) {
				mount_component(card_root, target, anchor);
				current = true;
			},
			p: function update(ctx, dirty) {
				const card_root_changes = {};

				if (dirty & /*activeToolName*/ 1) card_root_changes.class = "bg-background opacity-[98%] border p-1 space-x-2 rounded-full flex flex-row " + (/*activeToolName*/ ctx[0] === ToolName.EDIT
				? 'bg-red border-red'
				: '');

				if (dirty & /*$$scope, activeToolName*/ 9) {
					card_root_changes.$$scope = { dirty, ctx };
				}

				card_root.$set(card_root_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(card_root.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(card_root.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				destroy_component(card_root, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_default_slot.name,
			type: "slot",
			source: "(17:2) <ToolBarAnimation>",
			ctx
		});

		return block;
	}

	function create_fragment$1(ctx) {
		let div;
		let toolbaranimation;
		let t0;
		let editorpanel;
		let t1;
		let layerspanel;
		let current;

		toolbaranimation = new ToolbarAnimation({
				props: {
					$$slots: { default: [create_default_slot] },
					$$scope: { ctx }
				},
				$$inline: true
			});

		editorpanel = new EditorPanel({
				props: {
					editTool: /*toolManager*/ ctx[1]?.editTool
				},
				$$inline: true
			});

		layerspanel = new LayersPanel({
				props: {
					editTool: /*toolManager*/ ctx[1]?.editTool
				},
				$$inline: true
			});

		const block = {
			c: function create() {
				div = element("div");
				create_component(toolbaranimation.$$.fragment);
				t0 = space();
				create_component(editorpanel.$$.fragment);
				t1 = space();
				create_component(layerspanel.$$.fragment);
				attr_dev(div, "class", "fixed bottom-3 left-0 right-0 flex justify-center");
				add_location(div, file$1, 18, 0, 743);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
				mount_component(toolbaranimation, div, null);
				insert_dev(target, t0, anchor);
				mount_component(editorpanel, target, anchor);
				insert_dev(target, t1, anchor);
				mount_component(layerspanel, target, anchor);
				current = true;
			},
			p: function update(ctx, [dirty]) {
				const toolbaranimation_changes = {};

				if (dirty & /*$$scope, activeToolName*/ 9) {
					toolbaranimation_changes.$$scope = { dirty, ctx };
				}

				toolbaranimation.$set(toolbaranimation_changes);
			},
			i: function intro(local) {
				if (current) return;
				transition_in(toolbaranimation.$$.fragment, local);
				transition_in(editorpanel.$$.fragment, local);
				transition_in(layerspanel.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(toolbaranimation.$$.fragment, local);
				transition_out(editorpanel.$$.fragment, local);
				transition_out(layerspanel.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
					detach_dev(t0);
					detach_dev(t1);
				}

				destroy_component(toolbaranimation);
				destroy_component(editorpanel, detaching);
				destroy_component(layerspanel, detaching);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment$1.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance$1($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('Toolbar', slots, []);
		let activeToolName = ToolName.EDIT;
		let toolManager = new ToolManager(activeToolName);
		const writable_props = [];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Toolbar> was created with unknown prop '${key}'`);
		});

		const click_handler = () => $$invalidate(0, activeToolName = activeToolName === ToolName.EDIT
		? undefined
		: ToolName.EDIT);

		$$self.$capture_state = () => ({
			Card,
			ExternalLink: ExternalLink$1,
			Pencil1: Pencil1$1,
			Stop: Stop$1,
			ToolBarAnimation: ToolbarAnimation,
			onMount,
			ToolManager,
			ToolName,
			EditorPanel,
			Button,
			slide,
			emitOpenProjectMessage,
			LayersPanel,
			activeToolName,
			toolManager
		});

		$$self.$inject_state = $$props => {
			if ('activeToolName' in $$props) $$invalidate(0, activeToolName = $$props.activeToolName);
			if ('toolManager' in $$props) $$invalidate(1, toolManager = $$props.toolManager);
		};

		if ($$props && "$$inject" in $$props) {
			$$self.$inject_state($$props.$$inject);
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*activeToolName*/ 1) {
				toolManager === null || toolManager === void 0
				? void 0
				: toolManager.selectTool(activeToolName);
			}
		};

		return [activeToolName, toolManager, click_handler];
	}

	class Toolbar extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "Toolbar",
				options,
				id: create_fragment$1.name
			});
		}
	}

	/* src/App.svelte generated by Svelte v4.2.10 */
	const file = "src/App.svelte";

	function create_fragment(ctx) {
		let div;
		let toolbar;
		let current;
		toolbar = new Toolbar({ $$inline: true });

		const block = {
			c: function create() {
				div = element("div");
				create_component(toolbar.$$.fragment);
				attr_dev(div, "id", ONLOOK_TOOLBAR);
				add_location(div, file, 6, 0, 163);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				insert_dev(target, div, anchor);
				mount_component(toolbar, div, null);
				current = true;
			},
			p: noop$3,
			i: function intro(local) {
				if (current) return;
				transition_in(toolbar.$$.fragment, local);
				current = true;
			},
			o: function outro(local) {
				transition_out(toolbar.$$.fragment, local);
				current = false;
			},
			d: function destroy(detaching) {
				if (detaching) {
					detach_dev(div);
				}

				destroy_component(toolbar);
			}
		};

		dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance($$self, $$props, $$invalidate) {
		let { $$slots: slots = {}, $$scope } = $$props;
		validate_slots('App', slots, []);
		const writable_props = [];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
		});

		$$self.$capture_state = () => ({ Toolbar, ONLOOK_TOOLBAR });
		return [];
	}

	class App extends SvelteComponentDev {
		constructor(options) {
			super(options);
			init(this, options, instance, create_fragment, safe_not_equal, {});

			dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "App",
				options,
				id: create_fragment.name
			});
		}
	}

	let active;
	function toClassName(rule) {
	    return [
	        ...rule.v,
	        (rule.i ? '!' : '') + rule.n
	    ].join(':');
	}
	function format(rules, seperator = ',') {
	    return rules.map(toClassName).join(seperator);
	}
	/**
	 * @internal
	 */ let escape = 'undefined' != typeof CSS && CSS.escape || // Simplified: escaping only special characters
	// Needed for NodeJS and Edge <79 (https://caniuse.com/mdn-api_css_escape)
	((className)=>className.// Simplifed escape testing only for chars that we know happen to be in tailwind directives
	    replace(/[!"'`*+.,;:\\/<=>?@#$%&^|~()[\]{}]/g, '\\$&').// If the character is the first character and is in the range [0-9] (2xl, ...)
	    // https://drafts.csswg.org/cssom/#escape-a-character-as-code-point
	    replace(/^\d/, '\\3$& '));
	// Based on https://stackoverflow.com/a/52171480
	/**
	 * @group Configuration
	 * @param value
	 * @returns
	 */ function hash(value) {
	    // eslint-disable-next-line no-var
	    for(var h = 9, index = value.length; index--;)h = Math.imul(h ^ value.charCodeAt(index), 0x5f356495);
	    return '#' + ((h ^ h >>> 9) >>> 0).toString(36);
	}
	/**
	 * @internal
	 * @param screen
	 * @param prefix
	 * @returns
	 */ function mql(screen, prefix = '@media ') {
	    return prefix + asArray(screen).map((screen)=>{
	        return 'string' == typeof screen && (screen = {
	            min: screen
	        }), screen.raw || Object.keys(screen).map((feature)=>`(${feature}-width:${screen[feature]})`).join(' and ');
	    }).join(',');
	}
	/**
	 * @internal
	 * @param value
	 * @returns
	 */ function asArray(value = []) {
	    return Array.isArray(value) ? value : null == value ? [] : [
	        value
	    ];
	}
	/**
	 * @internal
	 * @param value
	 * @returns
	 */ function identity(value) {
	    return value;
	}
	/**
	 * @internal
	 */ function noop() {}
	// no-op
	// Based on https://github.com/kripod/otion
	// License MIT
	// export const enum Shifts {
	//   darkMode = 30,
	//   layer = 27,
	//   screens = 26,
	//   responsive = 22,
	//   atRules = 18,
	//   variants = 0,
	// }
	let Layer = {
	    /**
	   * 1. `default` (public)
	   */ d: /* efaults */ 0,
	    /* Shifts.layer */ /**
	   * 2. `base` (public) — for things like reset rules or default styles applied to plain HTML elements.
	   */ b: /* ase */ 134217728,
	    /* Shifts.layer */ /**
	   * 3. `components` (public, used by `style()`) — is for class-based styles that you want to be able to override with utilities.
	   */ c: /* omponents */ 268435456,
	    /* Shifts.layer */ // reserved for style():
	    // - props: 0b011
	    // - when: 0b100
	    /**
	   * 6. `aliases` (public, used by `apply()`) — `~(...)`
	   */ a: /* liases */ 671088640,
	    /* Shifts.layer */ /**
	   * 6. `utilities` (public) — for small, single-purpose classes
	   */ u: /* tilities */ 805306368,
	    /* Shifts.layer */ /**
	   * 7. `overrides` (public, used by `css()`)
	   */ o: /* verrides */ 939524096
	};
	/*
	To set a bit: n |= mask;
	To clear a bit: n &= ~mask;
	To test if a bit is set: (n & mask)

	Bit shifts for the primary bits:

	| bits | trait                                                   | shift |
	| ---- | ------------------------------------------------------- | ----- |
	| 1    | dark mode                                               | 30    |
	| 3    | layer: preflight, global, components, utilities, css    | 27    |
	| 1    | screens: is this a responsive variation of a rule       | 26    |
	| 4    | responsive based on min-width, max-width or width       | 22    |
	| 4    | at-rules                                                | 18    |
	| 18   | pseudo and group variants                               | 0     |

	Layer: 0 - 7: 3 bits
	  - defaults: 0 << 27
	  - base: 1 << 27
	  - components: 2 << 27
	  - variants: 3 << 27
	  - joints: 4 << 27
	  - aliases: 5 << 27
	  - utilities: 6 << 27
	  - overrides: 7 << 27

	These are calculated by serialize and added afterwards:

	| bits | trait                               |
	| ---- | ----------------------------------- |
	| 4    | number of selectors (descending)    |
	| 4    | number of declarations (descending) |
	| 4    | greatest precedence of properties   |

	These are added by shifting the primary bits using multiplication as js only
	supports bit shift up to 32 bits.
	*/ // Colon and dash count of string (ascending)
	function seperatorPrecedence(string) {
	    return string.match(/[-=:;]/g)?.length || 0;
	}
	function atRulePrecedence(css) {
	    // 0 - 15: 4 bits (max 144rem or 2304px)
	    // rem -> bit
	    // <20 ->  0 (<320px)
	    //  20 ->  1 (320px)
	    //  24 ->  2 (384px)
	    //  28 ->  3 (448px)
	    //  32 ->  4 (512px)
	    //  36 ->  5 (576px)
	    //  42 ->  6 (672px)
	    //  48 ->  7 (768px)
	    //  56 ->  8 (896px)
	    //  64 ->  9 (1024px)
	    //  72 -> 10 (1152px)
	    //  80 -> 11 (1280px)
	    //  96 -> 12 (1536px)
	    // 112 -> 13 (1792px)
	    // 128 -> 14 (2048px)
	    // 144 -> 15 (2304px)
	    // https://www.dcode.fr/function-equation-finder
	    return Math.min(/(?:^|width[^\d]+)(\d+(?:.\d+)?)(p)?/.test(css) ? Math.max(0, 29.63 * (+RegExp.$1 / (RegExp.$2 ? 15 : 1)) ** 0.137 - 43) : 0, 15) << 22 | /* Shifts.responsive */ Math.min(seperatorPrecedence(css), 15) << 18;
	}
	/* Shifts.atRules */ // Pesudo variant presedence
	// Chars 3 - 8: Uniquely identifies a pseudo selector
	// represented as a bit set for each relevant value
	// 18 bits: one for each variant plus one for unknown variants
	//
	// ':group-*' variants are normalized to their native pseudo class (':group-hover' -> ':hover')
	// as they already have a higher selector presedence due to the add '.group' ('.group:hover .group-hover:...')
	// Sources:
	// - https://bitsofco.de/when-do-the-hover-focus-and-active-pseudo-classes-apply/#orderofstyleshoverthenfocusthenactive
	// - https://developer.mozilla.org/docs/Web/CSS/:active#Active_links
	// - https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/defaultConfig.stub.js#L931
	let PRECEDENCES_BY_PSEUDO_CLASS = [
	    /* fi */ 'rst-c',
	    /* hild: 0 */ /* la */ 'st-ch',
	    /* ild: 1 */ // even and odd use: nth-child
	    /* nt */ 'h-chi',
	    /* ld: 2 */ /* an */ 'y-lin',
	    /* k: 3 */ /* li */ 'nk',
	    /* : 4 */ /* vi */ 'sited',
	    /* : 5 */ /* ch */ 'ecked',
	    /* : 6 */ /* em */ 'pty',
	    /* : 7 */ /* re */ 'ad-on',
	    /* ly: 8 */ /* fo */ 'cus-w',
	    /* ithin : 9 */ /* ho */ 'ver',
	    /* : 10 */ /* fo */ 'cus',
	    /* : 11 */ /* fo */ 'cus-v',
	    /* isible : 12 */ /* ac */ 'tive',
	    /* : 13 */ /* di */ 'sable',
	    /* d : 14 */ /* op */ 'tiona',
	    /* l: 15 */ /* re */ 'quire'
	];
	/** The name to use for `&` expansion in selectors. Maybe empty for at-rules like `@import`, `@font-face`, `@media`, ... */ /** The calculated precedence taking all variants into account. */ /** The rulesets (selectors and at-rules). expanded variants `@media ...`, `@supports ...`, `&:focus`, `.dark &` */ /** Is this rule `!important` eg something like `!underline` or `!bg-red-500` or `!red-500` */ function convert({ n: name , i: important , v: variants = []  }, context, precedence, conditions) {
	    name && (name = toClassName({
	        n: name,
	        i: important,
	        v: variants
	    }));
	    conditions = [
	        ...asArray(conditions)
	    ];
	    for (let variant of variants){
	        let screen = context.theme('screens', variant);
	        for (let condition of asArray(screen && mql(screen) || context.v(variant))){
	            var /* d: 16 */ selector;
	            conditions.push(condition);
	            precedence |= screen ? 67108864 | /* Shifts.screens */ atRulePrecedence(condition) : 'dark' == variant ? 1073741824 : /* Shifts.darkMode */ '@' == condition[0] ? atRulePrecedence(condition) : (selector = condition, // use first found pseudo-class
	            1 << ~(/:([a-z-]+)/.test(selector) && ~PRECEDENCES_BY_PSEUDO_CLASS.indexOf(RegExp.$1.slice(2, 7)) || -18));
	        }
	    }
	    return {
	        n: name,
	        p: precedence,
	        r: conditions,
	        i: important
	    };
	}
	let registry = new Map();
	function stringify$1(rule) {
	    if (rule.d) {
	        let groups = [], selector = replaceEach(// merge all conditions into a selector string
	        rule.r.reduce((selector, condition)=>{
	            return '@' == condition[0] ? (groups.push(condition), selector) : // Go over the selector and replace the matching multiple selectors if any
	            condition ? replaceEach(selector, (selectorPart)=>replaceEach(condition, // If the current condition has a nested selector replace it
	                (conditionPart)=>{
	                    let mergeMatch = /(:merge\(.+?\))(:[a-z-]+|\\[.+])/.exec(conditionPart);
	                    if (mergeMatch) {
	                        let selectorIndex = selectorPart.indexOf(mergeMatch[1]);
	                        return ~selectorIndex ? // [':merge(.group):hover .rule', ':merge(.group):focus &'] -> ':merge(.group):focus:hover .rule'
	                        // ':merge(.group)' + ':focus' + ':hover .rule'
	                        selectorPart.slice(0, selectorIndex) + mergeMatch[0] + selectorPart.slice(selectorIndex + mergeMatch[1].length) : // [':merge(.peer):focus~&', ':merge(.group):hover &'] -> ':merge(.peer):focus~:merge(.group):hover &'
	                        replaceReference(selectorPart, conditionPart);
	                    }
	                    // Return the current selector with the key matching multiple selectors if any
	                    return replaceReference(conditionPart, selectorPart);
	                })) : selector;
	        }, '&'), // replace '&' with rule name or an empty string
	        (selectorPart)=>replaceReference(selectorPart, rule.n ? '.' + escape(rule.n) : ''));
	        return selector && groups.push(selector.replace(/:merge\((.+?)\)/g, '$1')), groups.reduceRight((body, grouping)=>grouping + '{' + body + '}', rule.d);
	    }
	}
	function replaceEach(selector, iteratee) {
	    return selector.replace(/ *((?:\(.+?\)|\[.+?\]|[^,])+) *(,|$)/g, (_, selectorPart, comma)=>iteratee(selectorPart) + comma);
	}
	function replaceReference(selector, reference) {
	    return selector.replace(/&/g, reference);
	}
	let collator = new Intl.Collator('en', {
	    numeric: true
	});
	/** The calculated precedence taking all variants into account. */ /* The precedence of the properties within {@link d}. */ /** The name to use for `&` expansion in selectors. Maybe empty for at-rules like `@import`, `@font-face`, `@media`, ... */ /**
	 * Find the array index of where to add an element to keep it sorted.
	 *
	 * @returns The insertion index
	 */ function sortedInsertionIndex(array, element) {
	    // Find position using binary search
	    // eslint-disable-next-line no-var
	    for(var low = 0, high = array.length; low < high;){
	        let pivot = high + low >> 1;
	        0 >= compareTwindRules(array[pivot], element) ? low = pivot + 1 : high = pivot;
	    }
	    return high;
	}
	function compareTwindRules(a, b) {
	    // base and overrides (css) layers are kept in order they are declared
	    let layer = a.p & Layer.o;
	    return layer == (b.p & Layer.o) && (layer == Layer.b || layer == Layer.o) ? 0 : a.p - b.p || a.o - b.o || collator.compare(byModifier(a.n), byModifier(b.n)) || collator.compare(byName(a.n), byName(b.n));
	}
	function byModifier(s) {
	    return (s || '').split(/:/).pop().split('/').pop() || '\x00';
	}
	function byName(s) {
	    return (s || '').replace(/\W/g, (c)=>String.fromCharCode(127 + c.charCodeAt(0))) + '\x00';
	}
	function parseColorComponent(chars, factor) {
	    return Math.round(parseInt(chars, 16) * factor);
	}
	/**
	 * @internal
	 * @param color
	 * @param options
	 * @returns
	 */ function toColorValue(color, options = {}) {
	    if ('function' == typeof color) return color(options);
	    let { opacityValue ='1' , opacityVariable  } = options, opacity = opacityVariable ? `var(${opacityVariable})` : opacityValue;
	    if (color.includes('<alpha-value>')) return color.replace('<alpha-value>', opacity);
	    // rgb hex: #0123 and #001122
	    if ('#' == color[0] && (4 == color.length || 7 == color.length)) {
	        let size = (color.length - 1) / 3, factor = [
	            17,
	            1,
	            0.062272
	        ][size - 1];
	        return `rgba(${[
            parseColorComponent(color.substr(1, size), factor),
            parseColorComponent(color.substr(1 + size, size), factor),
            parseColorComponent(color.substr(1 + 2 * size, size), factor),
            opacity
        ]})`;
	    }
	    return '1' == opacity ? color : '0' == opacity ? '#0000' : // convert rgb and hsl to alpha variant
	    color.replace(/^(rgb|hsl)(\([^)]+)\)$/, `$1a$2,${opacity})`);
	}
	function serialize(style, rule, context, precedence, conditions = []) {
	    return function serialize$(style, { n: name , p: precedence , r: conditions = [] , i: important  }, context) {
	        let rules = [], // The generated declaration block eg body of the css rule
	        declarations = '', // This ensures that 'border-top-width' has a higher precedence than 'border-top'
	        maxPropertyPrecedence = 0, // More specific utilities have less declarations and a higher precedence
	        numberOfDeclarations = 0;
	        for(let key in style || {}){
	            var layer, // https://github.com/kripod/otion/blob/main/packages/otion/src/propertyMatchers.ts
	            // "+1": [
	            // 	/* ^border-.*(w|c|sty) */
	            // 	"border-.*(width,color,style)",
	            // 	/* ^[tlbr].{2,4}m?$ */
	            // 	"top",
	            // 	"left",
	            // 	"bottom",
	            // 	"right",
	            // 	/* ^c.{7}$ */
	            // 	"continue",
	            // 	/* ^c.{8}$ */
	            // 	"container",
	            // ],
	            // "-1": [
	            // 	/* ^[fl].{5}l */
	            // 	"flex-flow",
	            // 	"line-clamp",
	            // 	/* ^g.{8}$ */
	            // 	"grid-area",
	            // 	/* ^pl */
	            // 	"place-content",
	            // 	"place-items",
	            // 	"place-self",
	            // ],
	            // group: 1 => +1
	            // group: 2 => -1
	            // 0 - 15 => 4 bits
	            // Ignore vendor prefixed and custom properties
	            property;
	            let value = style[key];
	            if ('@' == key[0]) {
	                // at rules: https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule
	                if (!value) continue;
	                // @apply ...;
	                if ('a' == key[1]) {
	                    rules.push(...translateWith(name, precedence, parse('' + value), context, precedence, conditions, important, true));
	                    continue;
	                }
	                // @layer <layer>
	                if ('l' == key[1]) {
	                    for (let css of asArray(value))rules.push(...serialize$(css, {
	                        n: name,
	                        p: (layer = Layer[key[7]], // Set layer (first reset, than set)
	                        precedence & ~Layer.o | layer),
	                        r: 'd' == key[7] ? [] : conditions,
	                        i: important
	                    }, context));
	                    continue;
	                }
	                // @import
	                if ('i' == key[1]) {
	                    rules.push(...asArray(value).map((value)=>({
	                            // before all layers
	                            p: -1,
	                            o: 0,
	                            r: [],
	                            d: key + ' ' + value
	                        })));
	                    continue;
	                }
	                // @keyframes
	                if ('k' == key[1]) {
	                    // Use defaults layer
	                    rules.push({
	                        p: Layer.d,
	                        o: 0,
	                        r: [
	                            key
	                        ],
	                        d: serialize$(value, {
	                            p: Layer.d
	                        }, context).map(stringify$1).join('')
	                    });
	                    continue;
	                }
	                // @font-face
	                // TODO @font-feature-values
	                if ('f' == key[1]) {
	                    // Use defaults layer
	                    rules.push(...asArray(value).map((value)=>({
	                            p: Layer.d,
	                            o: 0,
	                            r: [
	                                key
	                            ],
	                            d: serialize$(value, {
	                                p: Layer.d
	                            }, context).map(stringify$1).join('')
	                        })));
	                    continue;
	                }
	            }
	            // -> All other are handled below; same as selector
	            // @media
	            // @supports
	            // selector
	            if ('object' != typeof value || Array.isArray(value)) {
	                if ('label' == key && value) name = value + hash(JSON.stringify([
	                    precedence,
	                    important,
	                    style
	                ]));
	                else if (value || 0 === value) {
	                    // property -> hyphenate
	                    key = key.replace(/[A-Z]/g, (_)=>'-' + _.toLowerCase());
	                    // Update precedence
	                    numberOfDeclarations += 1;
	                    maxPropertyPrecedence = Math.max(maxPropertyPrecedence, '-' == (property = key)[0] ? 0 : seperatorPrecedence(property) + (/^(?:(border-(?!w|c|sty)|[tlbr].{2,4}m?$|c.{7,8}$)|([fl].{5}l|g.{8}$|pl))/.test(property) ? +!!RegExp.$1 || /* +1 */ -!!RegExp.$2 : /* -1 */ 0) + 1);
	                    declarations += (declarations ? ';' : '') + asArray(value).map((value)=>context.s(key, // support theme(...) function in values
	                        // calc(100vh - theme('spacing.12'))
	                        resolveThemeFunction('' + value, context.theme) + (important ? ' !important' : ''))).join(';');
	                }
	            } else // at-rule or non-global selector
	            if ('@' == key[0] || key.includes('&')) {
	                let rulePrecedence = precedence;
	                if ('@' == key[0]) {
	                    // Handle `@media screen(sm)` and `@media (screen(sm) or ...)`
	                    key = key.replace(/\bscreen\(([^)]+)\)/g, (_, screenKey)=>{
	                        let screen = context.theme('screens', screenKey);
	                        return screen ? (rulePrecedence |= 67108864, /* Shifts.screens */ mql(screen, '')) : _;
	                    });
	                    rulePrecedence |= atRulePrecedence(key);
	                }
	                rules.push(...serialize$(value, {
	                    n: name,
	                    p: rulePrecedence,
	                    r: [
	                        ...conditions,
	                        key
	                    ],
	                    i: important
	                }, context));
	            } else // global selector
	            rules.push(...serialize$(value, {
	                p: precedence,
	                r: [
	                    ...conditions,
	                    key
	                ]
	            }, context));
	        }
	        return(// PERF: prevent unshift using `rules = [{}]` above and then `rules[0] = {...}`
	        rules.unshift({
	            n: name,
	            p: precedence,
	            o: // number of declarations (descending)
	            Math.max(0, 15 - numberOfDeclarations) + // greatest precedence of properties
	            // if there is no property precedence this is most likely a custom property only declaration
	            // these have the highest precedence
	            1.5 * Math.min(maxPropertyPrecedence || 15, 15),
	            r: conditions,
	            // stringified declarations
	            d: declarations
	        }), rules.sort(compareTwindRules));
	    }(style, convert(rule, context, precedence, conditions), context);
	}
	function resolveThemeFunction(value, theme) {
	    // support theme(...) function in values
	    // calc(100vh - theme('spacing.12'))
	    // theme('borderColor.DEFAULT', 'currentColor')
	    // PERF: check for theme before running the regexp
	    // if (value.includes('theme')) {
	    return value.replace(/theme\((["'`])?(.+?)\1(?:\s*,\s*(["'`])?(.+?)\3)?\)/g, (_, __, key, ___, defaultValue = '')=>{
	        let value = theme(key, defaultValue);
	        return 'function' == typeof value && /color|fill|stroke/i.test(key) ? toColorValue(value) : '' + asArray(value).filter((v)=>Object(v) !== v);
	    });
	}
	// }
	// return value
	function merge(rules, name) {
	    let current;
	    // merge:
	    // - same conditions
	    // - replace name with hash of name + condititions + declarations
	    // - precedence:
	    //   - combine bits or use max precendence
	    //   - set layer bit to merged
	    let result = [];
	    for (let rule of rules)// only merge rules with declarations and names (eg no global rules)
	    if (rule.d && rule.n) {
	        if (current?.p == rule.p && '' + current.r == '' + rule.r) {
	            current.c = [
	                current.c,
	                rule.c
	            ].filter(Boolean).join(' ');
	            current.d = current.d + ';' + rule.d;
	        } else // only set name for named rules eg not for global or className propagation rules
	        result.push(current = {
	            ...rule,
	            n: rule.n && name
	        });
	    } else result.push({
	        ...rule,
	        n: rule.n && name
	    });
	    return result;
	}
	function translate(rules, context, precedence = Layer.u, conditions, important) {
	    // Sorted by precedence
	    let result = [];
	    for (let rule of rules)for (let cssRule of function(rule, context, precedence, conditions, important) {
	        rule = {
	            ...rule,
	            i: rule.i || important
	        };
	        let resolved = function(rule, context) {
	            let factory = registry.get(rule.n);
	            return factory ? factory(rule, context) : context.r(rule.n, 'dark' == rule.v[0]);
	        }(rule, context);
	        return resolved ? // a list of class names
	        'string' == typeof resolved ? ({ r: conditions , p: precedence  } = convert(rule, context, precedence, conditions), merge(translate(parse(resolved), context, precedence, conditions, rule.i), rule.n)) : Array.isArray(resolved) ? resolved.map((rule)=>{
	            var /* Shifts.layer */ /*
	To have a predictable styling the styles must be ordered.

	This order is represented by a precedence number. The lower values
	are inserted before higher values. Meaning higher precedence styles
	overwrite lower precedence styles.

	Each rule has some traits that are put into a bit set which form
	the precedence:

	| bits | trait                                                |
	| ---- | ---------------------------------------------------- |
	| 1    | dark mode                                            |
	| 2    | layer: preflight, global, components, utilities, css |
	| 1    | screens: is this a responsive variation of a rule    |
	| 5    | responsive based on min-width                        |
	| 4    | at-rules                                             |
	| 18   | pseudo and group variants                            |
	| 4    | number of declarations (descending)                  |
	| 4    | greatest precedence of properties                    |

	**Dark Mode: 1 bit**

	Flag for dark mode rules.

	**Layer: 3 bits**

	- defaults = 0: The preflight styles and any base styles registered by plugins.
	- base = 1: The global styles registered by plugins.
	- components = 2
	- variants = 3
	- compounds = 4
	- aliases = 5
	- utilities = 6: Utility classes and any utility classes registered by plugins.
	- css = 7: Styles generated by css

	**Screens: 1 bit**

	Flag for screen variants. They may not always have a `min-width` to be detected by _Responsive_ below.

	**Responsive: 4 bits**

	Based on extracted `min-width` value:

	- 576px -> 3
	- 1536px -> 10
	- 36rem -> 3
	- 96rem -> 9

	**At-Rules: 4 bits**

	Based on the count of special chars (`-:,`) within the at-rule.

	**Pseudo and group variants: 18 bits**

	Ensures predictable order of pseudo classes.

	- https://bitsofco.de/when-do-the-hover-focus-and-active-pseudo-classes-apply/#orderofstyleshoverthenfocusthenactive
	- https://developer.mozilla.org/docs/Web/CSS/:active#Active_links
	- https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/defaultConfig.stub.js#L718

	**Number of declarations (descending): 4 bits**

	Allows single declaration styles to overwrite styles from multi declaration styles.

	**Greatest precedence of properties: 4 bits**

	Ensure shorthand properties are inserted before longhand properties; eg longhand override shorthand
	*/ precedence1, layer;
	            return {
	                o: 0,
	                ...rule,
	                r: [
	                    ...asArray(conditions),
	                    ...asArray(rule.r)
	                ],
	                p: (precedence1 = precedence, layer = rule.p ?? precedence, precedence1 & ~Layer.o | layer)
	            };
	        }) : serialize(resolved, rule, context, precedence, conditions) : // propagate className as is
	        [
	            {
	                c: toClassName(rule),
	                p: 0,
	                o: 0,
	                r: []
	            }
	        ];
	    }(rule, context, precedence, conditions, important))result.splice(sortedInsertionIndex(result, cssRule), 0, cssRule);
	    return result;
	}
	function translateWith(name, layer, rules, context, precedence, conditions, important, useOrderOfRules) {
	    return merge((useOrderOfRules ? rules.flatMap((rule)=>translate([
	            rule
	        ], context, precedence, conditions, important)) : translate(rules, context, precedence, conditions, important)).map((rule)=>{
	        return(// do not move defaults
	        // move only rules with a name unless they are in the base layer
	        rule.p & Layer.o && (rule.n || layer == Layer.b) ? {
	            ...rule,
	            p: rule.p & ~Layer.o | layer,
	            o: 0
	        } : rule);
	    }), name);
	}
	function define(className, layer, rules, useOrderOfRules) {
	    var factory;
	    return factory = (rule, context)=>{
	        let { n: name , p: precedence , r: conditions , i: important  } = convert(rule, context, layer);
	        return rules && translateWith(name, layer, rules, context, precedence, conditions, important, useOrderOfRules);
	    }, registry.set(className, factory), className;
	}
	/**
	   * The utility name including `-` if set, but without `!` and variants
	   */ /**
	   * All variants without trailing colon: `hover`, `after:`, `[...]`
	   */ /**
	   * Something like `!underline` or `!bg-red-500` or `!red-500`
	   */ function createRule(active, current, loc) {
	    if ('(' != active[active.length - 1]) {
	        let variants = [], important = false, negated = false, name = '';
	        for (let value of active)if (!('(' == value || /[~@]$/.test(value))) {
	            if ('!' == value[0]) {
	                value = value.slice(1);
	                important = !important;
	            }
	            if (value.endsWith(':')) {
	                variants['dark:' == value ? 'unshift' : 'push'](value.slice(0, -1));
	                continue;
	            }
	            if ('-' == value[0]) {
	                value = value.slice(1);
	                negated = !negated;
	            }
	            value.endsWith('-') && (value = value.slice(0, -1));
	            value && '&' != value && (name += (name && '-') + value);
	        }
	        if (name) {
	            negated && (name = '-' + name);
	            current[0].push({
	                n: name,
	                v: variants.filter(uniq),
	                i: important
	            });
	        }
	    }
	}
	function uniq(value, index, values) {
	    return values.indexOf(value) == index;
	}
	let cache = new Map();
	/**
	 * @internal
	 * @param token
	 * @returns
	 */ function parse(token) {
	    let parsed = cache.get(token);
	    if (!parsed) {
	        // Stack of active groupings (`(`), variants, or nested (`~` or `@`)
	        let active = [], // Stack of current rule list to put new rules in
	        // the first `0` element is the current list
	        current = [
	            []
	        ], startIndex = 0, skip = 0, comment = null, position = 0, // eslint-disable-next-line no-inner-declarations
	        commit = (isRule, endOffset = 0)=>{
	            if (startIndex != position) {
	                active.push(token.slice(startIndex, position + endOffset));
	                isRule && createRule(active, current);
	            }
	            startIndex = position + 1;
	        };
	        for(; position < token.length; position++){
	            let char = token[position];
	            if (skip) '\\' != token[position - 1] && (skip += +('[' == char) || -(']' == char));
	            else if ('[' == char) // start to skip
	            skip += 1;
	            else if (comment) {
	                if ('\\' != token[position - 1] && comment.test(token.slice(position))) {
	                    comment = null;
	                    startIndex = position + RegExp.lastMatch.length;
	                }
	            } else if ('/' == char && '\\' != token[position - 1] && ('*' == token[position + 1] || '/' == token[position + 1])) // multiline or single line comment
	            comment = '*' == token[position + 1] ? /^\*\// : /^[\r\n]/;
	            else if ('(' == char) {
	                // hover:(...) or utilitity-(...)
	                commit();
	                active.push(char);
	            } else if (':' == char) ':' != token[position + 1] && commit(false, 1);
	            else if (/[\s,)]/.test(char)) {
	                // whitespace, comma or closing brace
	                commit(true);
	                let lastGroup = active.lastIndexOf('(');
	                if (')' == char) {
	                    // Close nested block
	                    let nested = active[lastGroup - 1];
	                    if (/[~@]$/.test(nested)) {
	                        let rules = current.shift();
	                        active.length = lastGroup;
	                        // remove variants that are already applied through active
	                        createRule([
	                            ...active,
	                            '#'
	                        ], current);
	                        let { v  } = current[0].pop();
	                        for (let rule of rules)// if a rule has dark we need to splice after the first entry eg dark
	                        rule.v.splice(+('dark' == rule.v[0]) - +('dark' == v[0]), v.length);
	                        createRule([
	                            ...active,
	                            define(// named nested
	                            nested.length > 1 ? nested.slice(0, -1) + hash(JSON.stringify([
	                                nested,
	                                rules
	                            ])) : nested + '(' + format(rules) + ')', Layer.a, rules, /@$/.test(nested))
	                        ], current);
	                    }
	                    lastGroup = active.lastIndexOf('(', lastGroup - 1);
	                }
	                active.length = lastGroup + 1;
	            } else /[~@]/.test(char) && '(' == token[position + 1] && // start nested block
	            // ~(...) or button~(...)
	            // @(...) or button@(...)
	            current.unshift([]);
	        }
	        // Consume remaining stack
	        commit(true);
	        cache.set(token, parsed = current[0]);
	    }
	    return parsed;
	}
	/** The found theme value */ // indirection wrapper to remove autocomplete functions from production bundles
	/**
	 * @group Configuration
	 * @param pattern
	 */ /**
	 * @group Configuration
	 * @param pattern
	 * @param resolver
	 */ /**
	 * @group Configuration
	 * @param pattern
	 * @param resolve
	 */ // eslint-disable-next-line @typescript-eslint/ban-types
	/**
	 * @group Configuration
	 * @param pattern
	 * @param resolve
	 * @param convert
	 */ function match(pattern, // eslint-disable-next-line @typescript-eslint/ban-types
	resolve, convert) {
	    return [
	        pattern,
	        fromMatch(resolve, convert)
	    ];
	}
	/**
	 * @group Configuration
	 * @internal
	 * @deprecated Use {@link match} instead.
	 */ /**
	 * @group Configuration
	 * @internal
	 * @deprecated Use {@link match} instead.
	 */ /**
	 * @group Configuration
	 * @internal
	 * @deprecated Use {@link match} instead.
	 */ /**
	 * @group Configuration
	 * @internal
	 * @deprecated Use {@link match} instead.
	 */ function fromMatch(resolve, convert) {
	    return 'function' == typeof resolve ? resolve : 'string' == typeof resolve && /^[\w-]+$/.test(resolve) ? // a CSS property alias
	    (match, context)=>({
	            [resolve]: convert ? convert(match, context) : maybeNegate(match, 1)
	        }) : (match)=>// CSSObject, shortcut or apply
	        resolve || {
	            [match[1]]: maybeNegate(match, 2)
	        };
	}
	function maybeNegate(match, offset, value = match.slice(offset).find(Boolean) || match.$$ || match.input) {
	    return '-' == match.input[0] ? `calc(${value} * -1)` : value;
	}
	/**
	 * @group Configuration
	 * @param pattern
	 * @param section
	 * @param resolve
	 * @param convert
	 * @returns
	 */ function matchTheme(pattern, /** Theme section to use (default: `$1` — The first matched group) */ section, /** The css property (default: value of {@link section}) */ resolve, convert) {
	    return [
	        pattern,
	        fromTheme(section, resolve, convert)
	    ];
	}
	/**
	 * @group Configuration
	 * @internal
	 * @deprecated Use {@link matchTheme} instead.
	 * @param section
	 * @param resolve
	 * @param convert
	 * @returns
	 */ function fromTheme(/** Theme section to use (default: `$1` — The first matched group) */ section, /** The css property (default: value of {@link section}) */ resolve, convert) {
	    let factory = 'string' == typeof resolve ? (match, context)=>({
	            [resolve]: convert ? convert(match, context) : match._
	        }) : resolve || (({ 1: $1 , _  }, context, section)=>({
	            [$1 || section]: _
	        }));
	    return (match, context)=>{
	        let themeSection = camelize(section || match[1]), value = context.theme(themeSection, match.$$) ?? arbitrary(match.$$, themeSection, context);
	        if (null != value) return match._ = maybeNegate(match, 0, value), factory(match, context, themeSection);
	    };
	}
	/** Theme section to use (default: `$0.replace('-', 'Color')` — The matched string with `Color` appended) */ /** The css property (default: value of {@link section}) */ /** `--tw-${$0}opacity` -> '--tw-text-opacity' */ /** `section.replace('Color', 'Opacity')` -> 'textOpacity' */ /**
	 * @group Configuration
	 * @param pattern
	 * @param options
	 * @param resolve
	 * @returns
	 */ function matchColor(pattern, options = {}, resolve) {
	    return [
	        pattern,
	        colorFromTheme(options, resolve)
	    ];
	}
	/**
	 * @group Configuration
	 * @internal
	 * @deprecated Use {@link matchColor} instead.
	 * @param options
	 * @param resolve
	 * @returns
	 */ function colorFromTheme(options = {}, resolve) {
	    return (match, context)=>{
	        // text- -> textColor
	        // ring-offset(?:-|$) -> ringOffsetColor
	        let { section =camelize(match[0]).replace('-', '') + 'Color'  } = options, // extract color and opacity
	        // rose-500                  -> ['rose-500']
	        // [hsl(0_100%_/_50%)]       -> ['[hsl(0_100%_/_50%)]']
	        // indigo-500/100            -> ['indigo-500', '100']
	        // [hsl(0_100%_/_50%)]/[.25] -> ['[hsl(0_100%_/_50%)]', '[.25]']
	        [colorMatch, opacityMatch] = parseValue(match.$$);
	        if (!colorMatch) return;
	        let colorValue = context.theme(section, colorMatch) || arbitrary(colorMatch, section, context);
	        if (!colorValue || 'object' == typeof colorValue) return;
	        let { // text- -> --tw-text-opacity
	        // ring-offset(?:-|$) -> --tw-ring-offset-opacity
	        // TODO move this default into preset-tailwind?
	        opacityVariable =`--tw-${match[0].replace(/-$/, '')}-opacity` , opacitySection =section.replace('Color', 'Opacity') , property =section , selector  } = options, opacityValue = context.theme(opacitySection, opacityMatch || 'DEFAULT') || opacityMatch && arbitrary(opacityMatch, opacitySection, context), // if (typeof color != 'string') {
	        //   console.warn(`Invalid color ${colorMatch} (from ${match.input}):`, color)
	        //   return
	        // }
	        create = resolve || (({ _  })=>{
	            let properties = toCSS(property, _);
	            return selector ? {
	                [selector]: properties
	            } : properties;
	        });
	        match._ = {
	            value: toColorValue(colorValue, {
	                opacityVariable: opacityVariable || void 0,
	                opacityValue: opacityValue || void 0
	            }),
	            color: (options)=>toColorValue(colorValue, options),
	            opacityVariable: opacityVariable || void 0,
	            opacityValue: opacityValue || void 0
	        };
	        let properties = create(match, context);
	        // auto support dark mode colors
	        if (!match.dark) {
	            let darkColorValue = context.d(section, colorMatch, colorValue);
	            if (darkColorValue && darkColorValue !== colorValue) {
	                match._ = {
	                    value: toColorValue(darkColorValue, {
	                        opacityVariable: opacityVariable || void 0,
	                        opacityValue: opacityValue || '1'
	                    }),
	                    color: (options)=>toColorValue(darkColorValue, options),
	                    opacityVariable: opacityVariable || void 0,
	                    opacityValue: opacityValue || void 0
	                };
	                properties = {
	                    '&': properties,
	                    [context.v('dark')]: create(match, context)
	                };
	            }
	        }
	        return properties;
	    };
	}
	/**
	 * @internal
	 * @param input
	 */ function parseValue(input) {
	    // extract color and opacity
	    // rose-500                  -> ['rose-500']
	    // [hsl(0_100%_/_50%)]       -> ['[hsl(0_100%_/_50%)]']
	    // indigo-500/100            -> ['indigo-500', '100']
	    // [hsl(0_100%_/_50%)]/[.25] -> ['[hsl(0_100%_/_50%)]', '[.25]']
	    return (input.match(/^(\[[^\]]+]|[^/]+?)(?:\/(.+))?$/) || []).slice(1);
	}
	/**
	 * @internal
	 * @param property
	 * @param value
	 * @returns
	 */ function toCSS(property, value) {
	    let properties = {};
	    if ('string' == typeof value) properties[property] = value;
	    else {
	        value.opacityVariable && value.value.includes(value.opacityVariable) && (properties[value.opacityVariable] = value.opacityValue || '1');
	        properties[property] = value.value;
	    }
	    return properties;
	}
	/**
	 * @internal
	 * @param value
	 * @param section
	 * @param context
	 * @returns
	 */ function arbitrary(value, section, context) {
	    if ('[' == value[0] && ']' == value.slice(-1)) {
	        value = normalize(resolveThemeFunction(value.slice(1, -1), context.theme));
	        if (!section) return value;
	        if (// Respect type hints from the user on ambiguous arbitrary values - https://tailwindcss.com/docs/adding-custom-styles#resolving-ambiguities
	        !// If this is a color section and the value is a hex color, color function or color name
	        (/color|fill|stroke/i.test(section) && !(/^color:/.test(value) || /^(#|((hsl|rgb)a?|hwb|lab|lch|color)\(|[a-z]+$)/.test(value)) || // url(, [a-z]-gradient(, image(, cross-fade(, image-set(
	        /image/i.test(section) && !(/^image:/.test(value) || /^[a-z-]+\(/.test(value)) || // font-*
	        // - fontWeight (type: ['lookup', 'number', 'any'])
	        // - fontFamily (type: ['lookup', 'generic-name', 'family-name'])
	        /weight/i.test(section) && !(/^(number|any):/.test(value) || /^\d+$/.test(value)) || // bg-*
	        // - backgroundPosition (type: ['lookup', ['position', { preferOnConflict: true }]])
	        // - backgroundSize (type: ['lookup', 'length', 'percentage', 'size'])
	        /position/i.test(section) && /^(length|size):/.test(value))) // remove arbitrary type prefix — we do not need it but user may use it
	        // https://github.com/tailwindlabs/tailwindcss/blob/master/src/util/dataTypes.js
	        // url, number, percentage, length, line-width, shadow, color, image, gradient, position, family-name, lookup, any, generic-name, absolute-size, relative-size
	        return value.replace(/^[a-z-]+:/, '');
	    }
	}
	function camelize(value) {
	    return value.replace(/-./g, (x)=>x[1].toUpperCase());
	}
	/**
	 * @internal
	 * @param value
	 * @returns
	 */ function normalize(value) {
	    return(// Keep raw strings if it starts with `url(`
	    value.includes('url(') ? value.replace(/(.*?)(url\(.*?\))(.*?)/g, (_, before = '', url, after = '')=>normalize(before) + url + normalize(after)) : value.// Convert `_` to ` `, except for escaped underscores `\_`
	    replace(/(^|[^\\])_+/g, (fullMatch, characterBefore)=>characterBefore + ' '.repeat(fullMatch.length - characterBefore.length)).replace(/\\_/g, '_').// Add spaces around operators inside math functions like calc() that do not follow an operator
	    // or '('.
	    replace(/(calc|min|max|clamp)\(.+\)/g, (match)=>match.replace(/(-?\d*\.?\d(?!\b-.+[,)](?![^+\-/*])\D)(?:%|[a-z]+)?|\))([+\-/*])/g, '$1 $2 ')));
	}
	/**
	 * @group Configuration
	 * @param param0
	 * @returns
	 */ function defineConfig({ presets =[] , ...userConfig }) {
	    // most user config values go first to have precendence over preset config
	    // only `preflight` and `theme` are applied as last preset to override all presets
	    let config = {
	        darkMode: void 0,
	        darkColor: void 0,
	        preflight: false !== userConfig.preflight && [],
	        theme: {},
	        variants: asArray(userConfig.variants),
	        rules: asArray(userConfig.rules),
	        ignorelist: asArray(userConfig.ignorelist),
	        hash: void 0,
	        stringify: (property, value)=>property + ':' + value,
	        finalize: []
	    };
	    for (let preset of asArray([
	        ...presets,
	        {
	            darkMode: userConfig.darkMode,
	            darkColor: userConfig.darkColor,
	            preflight: false !== userConfig.preflight && asArray(userConfig.preflight),
	            theme: userConfig.theme,
	            hash: userConfig.hash,
	            stringify: userConfig.stringify,
	            finalize: userConfig.finalize
	        }
	    ])){
	        let { preflight , darkMode =config.darkMode , darkColor =config.darkColor , theme , variants , rules , ignorelist , hash =config.hash , stringify =config.stringify , finalize  } = 'function' == typeof preset ? preset(config) : preset;
	        config = {
	            // values defined by user or previous presets take precedence
	            preflight: false !== config.preflight && false !== preflight && [
	                ...config.preflight,
	                ...asArray(preflight)
	            ],
	            darkMode,
	            darkColor,
	            theme: {
	                ...config.theme,
	                ...theme,
	                extend: {
	                    ...config.theme.extend,
	                    ...theme?.extend
	                }
	            },
	            variants: [
	                ...config.variants,
	                ...asArray(variants)
	            ],
	            rules: [
	                ...config.rules,
	                ...asArray(rules)
	            ],
	            ignorelist: [
	                ...config.ignorelist,
	                ...asArray(ignorelist)
	            ],
	            hash,
	            stringify,
	            finalize: [
	                ...config.finalize,
	                ...asArray(finalize)
	            ]
	        };
	    }
	    return config;
	}
	function find(value, list, cache, getResolver, context, isDark) {
	    for (let item of list){
	        let resolver = cache.get(item);
	        resolver || cache.set(item, resolver = getResolver(item));
	        let resolved = resolver(value, context, isDark);
	        if (resolved) return resolved;
	    }
	}
	function getVariantResolver(variant) {
	    var resolve;
	    return createResolve(variant[0], 'function' == typeof (resolve = variant[1]) ? resolve : ()=>resolve);
	}
	function getRuleResolver(rule) {
	    var resolve, convert;
	    return Array.isArray(rule) ? createResolve(rule[0], fromMatch(rule[1], rule[2])) : createResolve(rule, fromMatch(resolve, convert));
	}
	function createResolve(patterns, resolve) {
	    return createRegExpExecutor(patterns, (value, condition, context, isDark)=>{
	        let match = condition.exec(value);
	        if (match) return(// MATCH.$_ = value
	        match.$$ = value.slice(match[0].length), match.dark = isDark, resolve(match, context));
	    });
	}
	function createRegExpExecutor(patterns, run) {
	    let conditions = asArray(patterns).map(toCondition);
	    return (value, context, isDark)=>{
	        for (let condition of conditions){
	            let result = run(value, condition, context, isDark);
	            if (result) return result;
	        }
	    };
	}
	function toCondition(value) {
	    // "visible" -> /^visible$/
	    // "(float)-(left|right|none)" -> /^(float)-(left|right|none)$/
	    // "auto-rows-" -> /^auto-rows-/
	    // "gap(-|$)" -> /^gap(-|$)/
	    return 'string' == typeof value ? RegExp('^' + value + (value.includes('$') || '-' == value.slice(-1) ? '' : '$')) : value;
	}
	/**
	 * @group Runtime
	 * @param config
	 * @param sheet
	 */ function twind(userConfig, sheet) {
	    let config = defineConfig(userConfig), context = function({ theme , darkMode , darkColor =noop , variants , rules , hash: hash$1 , stringify , ignorelist , finalize  }) {
	        // Used to cache resolved rule values
	        let variantCache = new Map(), // lazy created resolve functions
	        variantResolvers = new Map(), // Used to cache resolved rule values
	        ruleCache = new Map(), // lazy created resolve functions
	        ruleResolvers = new Map(), ignored = createRegExpExecutor(ignorelist, (value, condition)=>condition.test(value));
	        // add dark as last variant to allow user to override it
	        // we can modify variants as it has been passed through defineConfig which already made a copy
	        variants.push([
	            'dark',
	            Array.isArray(darkMode) || 'class' == darkMode ? `${asArray(darkMode)[1] || '.dark'} &` : 'string' == typeof darkMode && 'media' != darkMode ? darkMode : // a custom selector
	            '@media (prefers-color-scheme:dark)'
	        ]);
	        let h = 'function' == typeof hash$1 ? (value)=>hash$1(value, hash) : hash$1 ? hash : identity;
	        h !== identity && finalize.push((rule)=>({
	                ...rule,
	                n: rule.n && h(rule.n),
	                d: rule.d?.replace(/--(tw(?:-[\w-]+)?)\b/g, (_, property)=>'--' + h(property).replace('#', ''))
	            }));
	        let ctx = {
	            theme: function({ extend ={} , ...base }) {
	                let resolved = {}, resolveContext = {
	                    get colors () {
	                        return theme('colors');
	                    },
	                    theme,
	                    // Stub implementation as negated values are automatically infered and do _not_ need to be in the theme
	                    negative () {
	                        return {};
	                    },
	                    breakpoints (screens) {
	                        let breakpoints = {};
	                        for(let key in screens)'string' == typeof screens[key] && (breakpoints['screen-' + key] = screens[key]);
	                        return breakpoints;
	                    }
	                };
	                return theme;
	                function theme(sectionKey, key, defaultValue, opacityValue) {
	                    if (sectionKey) {
	                        ({ 1: sectionKey , 2: opacityValue  } = // eslint-disable-next-line no-sparse-arrays
	                        /^(\S+?)(?:\s*\/\s*([^/]+))?$/.exec(sectionKey) || [
	                            ,
	                            sectionKey
	                        ]);
	                        if (/[.[]/.test(sectionKey)) {
	                            let path = [];
	                            // dotted deep access: colors.gray.500 or spacing[2.5]
	                            sectionKey.replace(/\[([^\]]+)\]|([^.[]+)/g, (_, $1, $2 = $1)=>path.push($2));
	                            sectionKey = path.shift();
	                            defaultValue = key;
	                            key = path.join('-');
	                        }
	                        let section = resolved[sectionKey] || // two-step deref to allow extend section to reference base section
	                        Object.assign(Object.assign(// Make sure to not get into recursive calls
	                        resolved[sectionKey] = {}, deref(base, sectionKey)), deref(extend, sectionKey));
	                        if (null == key) return section;
	                        key || (key = 'DEFAULT');
	                        let value = section[key] ?? key.split('-').reduce((obj, prop)=>obj?.[prop], section) ?? defaultValue;
	                        return opacityValue ? toColorValue(value, {
	                            opacityValue: resolveThemeFunction(opacityValue, theme)
	                        }) : value;
	                    }
	                    // Collect the whole theme
	                    let result = {};
	                    for (let section1 of [
	                        ...Object.keys(base),
	                        ...Object.keys(extend)
	                    ])result[section1] = theme(section1);
	                    return result;
	                }
	                function deref(source, section) {
	                    let value = source[section];
	                    return ('function' == typeof value && (value = value(resolveContext)), value && /color|fill|stroke/i.test(section)) ? function flattenColorPalette(colors, path = []) {
	                        let flattend = {};
	                        for(let key in colors){
	                            let value = colors[key], keyPath = [
	                                ...path,
	                                key
	                            ];
	                            flattend[keyPath.join('-')] = value;
	                            if ('DEFAULT' == key) {
	                                keyPath = path;
	                                flattend[path.join('-')] = value;
	                            }
	                            'object' == typeof value && Object.assign(flattend, flattenColorPalette(value, keyPath));
	                        }
	                        return flattend;
	                    }(value) : value;
	                }
	            }(theme),
	            e: escape,
	            h,
	            s (property, value) {
	                return stringify(property, value, ctx);
	            },
	            d (section, key, color) {
	                return darkColor(section, key, ctx, color);
	            },
	            v (value) {
	                return variantCache.has(value) || variantCache.set(value, find(value, variants, variantResolvers, getVariantResolver, ctx) || '&:' + value), variantCache.get(value);
	            },
	            r (className, isDark) {
	                let key = JSON.stringify([
	                    className,
	                    isDark
	                ]);
	                return ruleCache.has(key) || ruleCache.set(key, !ignored(className, ctx) && find(className, rules, ruleResolvers, getRuleResolver, ctx, isDark)), ruleCache.get(key);
	            },
	            f (rule) {
	                return finalize.reduce((rule, p)=>p(rule, ctx), rule);
	            }
	        };
	        return ctx;
	    }(config), // Map of tokens to generated className
	    cache = new Map(), // An array of precedence by index within the sheet
	    // always sorted
	    sortedPrecedences = [], // Cache for already inserted css rules
	    // to prevent double insertions
	    insertedRules = new Set();
	    sheet.resume((className)=>cache.set(className, className), (cssText, rule)=>{
	        sheet.insert(cssText, sortedPrecedences.length, rule);
	        sortedPrecedences.push(rule);
	        insertedRules.add(cssText);
	    });
	    function insert(rule) {
	        let finalRule = context.f(rule), cssText = stringify$1(finalRule);
	        // If not already inserted
	        if (cssText && !insertedRules.has(cssText)) {
	            // Mark rule as inserted
	            insertedRules.add(cssText);
	            // Find the correct position
	            let index = sortedInsertionIndex(sortedPrecedences, rule);
	            // Insert
	            sheet.insert(cssText, index, rule);
	            // Update sorted index
	            sortedPrecedences.splice(index, 0, rule);
	        }
	        return finalRule.n;
	    }
	    return Object.defineProperties(function tw(tokens) {
	        if (!cache.size) for (let preflight of asArray(config.preflight)){
	            'function' == typeof preflight && (preflight = preflight(context));
	            preflight && ('string' == typeof preflight ? translateWith('', Layer.b, parse(preflight), context, Layer.b, [], false, true) : serialize(preflight, {}, context, Layer.b)).forEach(insert);
	        }
	        tokens = '' + tokens;
	        let className = cache.get(tokens);
	        if (!className) {
	            let classNames = new Set();
	            for (let rule of translate(parse(tokens), context))classNames.add(rule.c).add(insert(rule));
	            className = [
	                ...classNames
	            ].filter(Boolean).join(' ');
	            // Remember the generated class name
	            cache.set(tokens, className).set(className, className);
	        }
	        return className;
	    }, Object.getOwnPropertyDescriptors({
	        get target () {
	            return sheet.target;
	        },
	        theme: context.theme,
	        config,
	        snapshot () {
	            let restoreSheet = sheet.snapshot(), insertedRules$ = new Set(insertedRules), cache$ = new Map(cache), sortedPrecedences$ = [
	                ...sortedPrecedences
	            ];
	            return ()=>{
	                restoreSheet();
	                insertedRules = insertedRules$;
	                cache = cache$;
	                sortedPrecedences = sortedPrecedences$;
	            };
	        },
	        clear () {
	            sheet.clear();
	            insertedRules = new Set();
	            cache = new Map();
	            sortedPrecedences = [];
	        },
	        destroy () {
	            this.clear();
	            sheet.destroy();
	        }
	    }));
	}
	/**
	 * Determines if two class name strings contain the same classes.
	 *
	 * @param a first class names
	 * @param b second class names
	 * @returns are they different
	 */ function changed(a, b) {
	    return a != b && '' + a.split(' ').sort() != '' + b.split(' ').sort();
	}
	/**
	 * @group Runtime
	 * @param tw
	 * @param target
	 * @returns
	 * @internal
	 */ function mo(tw) {
	    let observer = new MutationObserver(handleMutationRecords);
	    return {
	        observe (target) {
	            observer.observe(target, {
	                attributeFilter: [
	                    'class'
	                ],
	                subtree: true,
	                childList: true
	            });
	            // handle class attribute on target
	            handleClassAttributeChange(target);
	            // handle children of target
	            handleMutationRecords([
	                {
	                    target,
	                    type: ''
	                }
	            ]);
	        },
	        disconnect () {
	            observer.disconnect();
	        }
	    };
	    function handleMutationRecords(records) {
	        for (let { type , target  } of records)if ('a' == type[0]) /* attribute */ // class attribute has been changed
	        handleClassAttributeChange(target);
	        else /* childList */ // some nodes have been added — find all with a class attribute
	        for (let el of target.querySelectorAll('[class]'))handleClassAttributeChange(el);
	        // remove pending mutations — these are triggered by updating the class attributes
	        observer.takeRecords();
	    }
	    // XXX maybe we need to handle all pending mutations
	    // observer.takeRecords().forEach(handleMutation)
	    function handleClassAttributeChange(target) {
	        let className;
	        // Not using target.classList.value (not supported in all browsers) or target.class (this is an SVGAnimatedString for svg)
	        // safe guard access to getAttribute because ShadowRoot does not have attribute but child nodes
	        let tokens = target.getAttribute?.('class');
	        tokens && changed(tokens, className = tw(tokens)) && // Not using `target.className = ...` as that is read-only for SVGElements
	        target.setAttribute('class', className);
	    }
	}
	/**
	 * @group Runtime
	 * @param tw
	 * @param target
	 * @returns
	 */ function observe(tw$1 = tw, target = 'undefined' != typeof document && document.documentElement) {
	    if (target) {
	        let observer = mo(tw$1);
	        observer.observe(target);
	        // monkey patch tw.destroy to disconnect this observer
	        // eslint-disable-next-line @typescript-eslint/unbound-method
	        let { destroy  } = tw$1;
	        tw$1.destroy = ()=>{
	            observer.disconnect();
	            destroy.call(tw$1);
	        };
	    }
	    return tw$1;
	}
	/**
	 * Simplified MutationRecord which allows us to pass an
	 * ArrayLike (compatible with Array and NodeList) `addedNodes` and
	 * omit other properties we are not interested in.
	 */ function getStyleElement(selector) {
	    let style = document.querySelector(selector || 'style[data-twind=""]');
	    if (!style || 'STYLE' != style.tagName) {
	        style = document.createElement('style');
	        document.head.prepend(style);
	    }
	    return style.dataset.twind = 'claimed', style;
	}
	/**
	 * @group Sheets
	 * @param element
	 * @returns
	 */ function cssom(element) {
	    let target = element?.cssRules ? element : (element && 'string' != typeof element ? element : getStyleElement(element)).sheet;
	    return {
	        target,
	        snapshot () {
	            // collect current rules
	            let rules = Array.from(target.cssRules, (rule)=>rule.cssText);
	            return ()=>{
	                // remove all existing rules
	                this.clear();
	                // add all snapshot rules back
	                // eslint-disable-next-line @typescript-eslint/unbound-method
	                rules.forEach(this.insert);
	            };
	        },
	        clear () {
	            // remove all added rules
	            for(let index = target.cssRules.length; index--;)target.deleteRule(index);
	        },
	        destroy () {
	            target.ownerNode?.remove();
	        },
	        insert (cssText, index) {
	            try {
	                // Insert
	                target.insertRule(cssText, index);
	            } catch (error) {
	                // Empty rule to keep index valid — not using `*{}` as that would show up in all rules (DX)
	                target.insertRule(':root{}', index);
	            }
	        },
	        resume: noop
	    };
	}
	/**
	 * A proxy to the currently active Twind instance.
	 * @group Style Injectors
	 */ let tw = /* #__PURE__ */ new Proxy(// just exposing the active as tw should work with most bundlers
	// as ES module export can be re-assigned BUT some bundlers to not honor this
	// -> using a delegation proxy here
	noop, {
	    apply (_target, _thisArg, args) {
	        return active(args[0]);
	    },
	    get (target, property) {
	        let value = active[property];
	        return 'function' == typeof value ? function() {
	            // eslint-disable-next-line prefer-rest-params
	            return value.apply(active, arguments);
	        } : value;
	    }
	});

	/**
	 * @module @twind/preset-tailwind/baseTheme
	 */ /**
	 * @experimental
	 */ let theme = {
	    screens: {
	        sm: '640px',
	        md: '768px',
	        lg: '1024px',
	        xl: '1280px',
	        '2xl': '1536px'
	    },
	    columns: {
	        auto: 'auto',
	        // Handled by plugin,
	        // 1: '1',
	        // 2: '2',
	        // 3: '3',
	        // 4: '4',
	        // 5: '5',
	        // 6: '6',
	        // 7: '7',
	        // 8: '8',
	        // 9: '9',
	        // 10: '10',
	        // 11: '11',
	        // 12: '12',
	        '3xs': '16rem',
	        '2xs': '18rem',
	        xs: '20rem',
	        sm: '24rem',
	        md: '28rem',
	        lg: '32rem',
	        xl: '36rem',
	        '2xl': '42rem',
	        '3xl': '48rem',
	        '4xl': '56rem',
	        '5xl': '64rem',
	        '6xl': '72rem',
	        '7xl': '80rem'
	    },
	    spacing: {
	        px: '1px',
	        0: '0px',
	        .../* #__PURE__ */ linear(4, 'rem', 4, 0.5, 0.5),
	        // 0.5: '0.125rem',
	        // 1: '0.25rem',
	        // 1.5: '0.375rem',
	        // 2: '0.5rem',
	        // 2.5: '0.625rem',
	        // 3: '0.75rem',
	        // 3.5: '0.875rem',
	        // 4: '1rem',
	        .../* #__PURE__ */ linear(12, 'rem', 4, 5),
	        // 5: '1.25rem',
	        // 6: '1.5rem',
	        // 7: '1.75rem',
	        // 8: '2rem',
	        // 9: '2.25rem',
	        // 10: '2.5rem',
	        // 11: '2.75rem',
	        // 12: '3rem',
	        14: '3.5rem',
	        .../* #__PURE__ */ linear(64, 'rem', 4, 16, 4),
	        // 16: '4rem',
	        // 20: '5rem',
	        // 24: '6rem',
	        // 28: '7rem',
	        // 32: '8rem',
	        // 36: '9rem',
	        // 40: '10rem',
	        // 44: '11rem',
	        // 48: '12rem',
	        // 52: '13rem',
	        // 56: '14rem',
	        // 60: '15rem',
	        // 64: '16rem',
	        72: '18rem',
	        80: '20rem',
	        96: '24rem'
	    },
	    durations: {
	        75: '75ms',
	        100: '100ms',
	        150: '150ms',
	        200: '200ms',
	        300: '300ms',
	        500: '500ms',
	        700: '700ms',
	        1000: '1000ms'
	    },
	    animation: {
	        none: 'none',
	        spin: 'spin 1s linear infinite',
	        ping: 'ping 1s cubic-bezier(0,0,0.2,1) infinite',
	        pulse: 'pulse 2s cubic-bezier(0.4,0,0.6,1) infinite',
	        bounce: 'bounce 1s infinite'
	    },
	    aspectRatio: {
	        auto: 'auto',
	        square: '1/1',
	        video: '16/9'
	    },
	    backdropBlur: /* #__PURE__ */ alias('blur'),
	    backdropBrightness: /* #__PURE__ */ alias('brightness'),
	    backdropContrast: /* #__PURE__ */ alias('contrast'),
	    backdropGrayscale: /* #__PURE__ */ alias('grayscale'),
	    backdropHueRotate: /* #__PURE__ */ alias('hueRotate'),
	    backdropInvert: /* #__PURE__ */ alias('invert'),
	    backdropOpacity: /* #__PURE__ */ alias('opacity'),
	    backdropSaturate: /* #__PURE__ */ alias('saturate'),
	    backdropSepia: /* #__PURE__ */ alias('sepia'),
	    backgroundColor: /* #__PURE__ */ alias('colors'),
	    backgroundImage: {
	        none: 'none'
	    },
	    // These are built-in
	    // 'gradient-to-t': 'linear-gradient(to top, var(--tw-gradient-stops))',
	    // 'gradient-to-tr': 'linear-gradient(to top right, var(--tw-gradient-stops))',
	    // 'gradient-to-r': 'linear-gradient(to right, var(--tw-gradient-stops))',
	    // 'gradient-to-br': 'linear-gradient(to bottom right, var(--tw-gradient-stops))',
	    // 'gradient-to-b': 'linear-gradient(to bottom, var(--tw-gradient-stops))',
	    // 'gradient-to-bl': 'linear-gradient(to bottom left, var(--tw-gradient-stops))',
	    // 'gradient-to-l': 'linear-gradient(to left, var(--tw-gradient-stops))',
	    // 'gradient-to-tl': 'linear-gradient(to top left, var(--tw-gradient-stops))',
	    backgroundOpacity: /* #__PURE__ */ alias('opacity'),
	    // backgroundPosition: {
	    //   // The following are already handled by the plugin:
	    //   // center, right, left, bottom, top
	    //   // 'bottom-10px-right-20px' -> bottom 10px right 20px
	    // },
	    backgroundSize: {
	        auto: 'auto',
	        cover: 'cover',
	        contain: 'contain'
	    },
	    blur: {
	        none: 'none',
	        0: '0',
	        sm: '4px',
	        DEFAULT: '8px',
	        md: '12px',
	        lg: '16px',
	        xl: '24px',
	        '2xl': '40px',
	        '3xl': '64px'
	    },
	    brightness: {
	        .../* #__PURE__ */ linear(200, '', 100, 0, 50),
	        // 0: '0',
	        // 50: '.5',
	        // 150: '1.5',
	        // 200: '2',
	        .../* #__PURE__ */ linear(110, '', 100, 90, 5),
	        // 90: '.9',
	        // 95: '.95',
	        // 100: '1',
	        // 105: '1.05',
	        // 110: '1.1',
	        75: '0.75',
	        125: '1.25'
	    },
	    borderColor: ({ theme  })=>({
	            DEFAULT: theme('colors.gray.200', 'currentColor'),
	            ...theme('colors')
	        }),
	    borderOpacity: /* #__PURE__ */ alias('opacity'),
	    borderRadius: {
	        none: '0px',
	        sm: '0.125rem',
	        DEFAULT: '0.25rem',
	        md: '0.375rem',
	        lg: '0.5rem',
	        xl: '0.75rem',
	        '2xl': '1rem',
	        '3xl': '1.5rem',
	        '1/2': '50%',
	        full: '9999px'
	    },
	    borderSpacing: /* #__PURE__ */ alias('spacing'),
	    borderWidth: {
	        DEFAULT: '1px',
	        .../* #__PURE__ */ exponential(8, 'px')
	    },
	    // 0: '0px',
	    // 2: '2px',
	    // 4: '4px',
	    // 8: '8px',
	    boxShadow: {
	        sm: '0 1px 2px 0 rgba(0,0,0,0.05)',
	        DEFAULT: '0 1px 3px 0 rgba(0,0,0,0.1), 0 1px 2px -1px rgba(0,0,0,0.1)',
	        md: '0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -2px rgba(0,0,0,0.1)',
	        lg: '0 10px 15px -3px rgba(0,0,0,0.1), 0 4px 6px -4px rgba(0,0,0,0.1)',
	        xl: '0 20px 25px -5px rgba(0,0,0,0.1), 0 8px 10px -6px rgba(0,0,0,0.1)',
	        '2xl': '0 25px 50px -12px rgba(0,0,0,0.25)',
	        inner: 'inset 0 2px 4px 0 rgba(0,0,0,0.05)',
	        none: '0 0 #0000'
	    },
	    boxShadowColor: alias('colors'),
	    // container: {},
	    // cursor: {
	    //   // Default values are handled by plugin
	    // },
	    caretColor: /* #__PURE__ */ alias('colors'),
	    accentColor: ({ theme  })=>({
	            auto: 'auto',
	            ...theme('colors')
	        }),
	    contrast: {
	        .../* #__PURE__ */ linear(200, '', 100, 0, 50),
	        // 0: '0',
	        // 50: '.5',
	        // 150: '1.5',
	        // 200: '2',
	        75: '0.75',
	        125: '1.25'
	    },
	    content: {
	        none: 'none'
	    },
	    divideColor: /* #__PURE__ */ alias('borderColor'),
	    divideOpacity: /* #__PURE__ */ alias('borderOpacity'),
	    divideWidth: /* #__PURE__ */ alias('borderWidth'),
	    dropShadow: {
	        sm: '0 1px 1px rgba(0,0,0,0.05)',
	        DEFAULT: [
	            '0 1px 2px rgba(0,0,0,0.1)',
	            '0 1px 1px rgba(0,0,0,0.06)'
	        ],
	        md: [
	            '0 4px 3px rgba(0,0,0,0.07)',
	            '0 2px 2px rgba(0,0,0,0.06)'
	        ],
	        lg: [
	            '0 10px 8px rgba(0,0,0,0.04)',
	            '0 4px 3px rgba(0,0,0,0.1)'
	        ],
	        xl: [
	            '0 20px 13px rgba(0,0,0,0.03)',
	            '0 8px 5px rgba(0,0,0,0.08)'
	        ],
	        '2xl': '0 25px 25px rgba(0,0,0,0.15)',
	        none: '0 0 #0000'
	    },
	    fill: ({ theme  })=>({
	            ...theme('colors'),
	            none: 'none'
	        }),
	    grayscale: {
	        DEFAULT: '100%',
	        0: '0'
	    },
	    hueRotate: {
	        0: '0deg',
	        15: '15deg',
	        30: '30deg',
	        60: '60deg',
	        90: '90deg',
	        180: '180deg'
	    },
	    invert: {
	        DEFAULT: '100%',
	        0: '0'
	    },
	    flex: {
	        1: '1 1 0%',
	        auto: '1 1 auto',
	        initial: '0 1 auto',
	        none: 'none'
	    },
	    flexBasis: ({ theme  })=>({
	            ...theme('spacing'),
	            ...ratios(2, 6),
	            // '1/2': '50%',
	            // '1/3': '33.333333%',
	            // '2/3': '66.666667%',
	            // '1/4': '25%',
	            // '2/4': '50%',
	            // '3/4': '75%',
	            // '1/5': '20%',
	            // '2/5': '40%',
	            // '3/5': '60%',
	            // '4/5': '80%',
	            // '1/6': '16.666667%',
	            // '2/6': '33.333333%',
	            // '3/6': '50%',
	            // '4/6': '66.666667%',
	            // '5/6': '83.333333%',
	            ...ratios(12, 12),
	            // '1/12': '8.333333%',
	            // '2/12': '16.666667%',
	            // '3/12': '25%',
	            // '4/12': '33.333333%',
	            // '5/12': '41.666667%',
	            // '6/12': '50%',
	            // '7/12': '58.333333%',
	            // '8/12': '66.666667%',
	            // '9/12': '75%',
	            // '10/12': '83.333333%',
	            // '11/12': '91.666667%',
	            auto: 'auto',
	            full: '100%'
	        }),
	    flexGrow: {
	        DEFAULT: 1,
	        0: 0
	    },
	    flexShrink: {
	        DEFAULT: 1,
	        0: 0
	    },
	    fontFamily: {
	        sans: 'ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans",sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji"'.split(','),
	        serif: 'ui-serif,Georgia,Cambria,"Times New Roman",Times,serif'.split(','),
	        mono: 'ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace'.split(',')
	    },
	    fontSize: {
	        xs: [
	            '0.75rem',
	            '1rem'
	        ],
	        sm: [
	            '0.875rem',
	            '1.25rem'
	        ],
	        base: [
	            '1rem',
	            '1.5rem'
	        ],
	        lg: [
	            '1.125rem',
	            '1.75rem'
	        ],
	        xl: [
	            '1.25rem',
	            '1.75rem'
	        ],
	        '2xl': [
	            '1.5rem',
	            '2rem'
	        ],
	        '3xl': [
	            '1.875rem',
	            '2.25rem'
	        ],
	        '4xl': [
	            '2.25rem',
	            '2.5rem'
	        ],
	        '5xl': [
	            '3rem',
	            '1'
	        ],
	        '6xl': [
	            '3.75rem',
	            '1'
	        ],
	        '7xl': [
	            '4.5rem',
	            '1'
	        ],
	        '8xl': [
	            '6rem',
	            '1'
	        ],
	        '9xl': [
	            '8rem',
	            '1'
	        ]
	    },
	    fontWeight: {
	        thin: '100',
	        extralight: '200',
	        light: '300',
	        normal: '400',
	        medium: '500',
	        semibold: '600',
	        bold: '700',
	        extrabold: '800',
	        black: '900'
	    },
	    gap: /* #__PURE__ */ alias('spacing'),
	    gradientColorStops: /* #__PURE__ */ alias('colors'),
	    gridAutoColumns: {
	        auto: 'auto',
	        min: 'min-content',
	        max: 'max-content',
	        fr: 'minmax(0,1fr)'
	    },
	    gridAutoRows: {
	        auto: 'auto',
	        min: 'min-content',
	        max: 'max-content',
	        fr: 'minmax(0,1fr)'
	    },
	    gridColumn: {
	        // span-X is handled by the plugin: span-1 -> span 1 / span 1
	        auto: 'auto',
	        'span-full': '1 / -1'
	    },
	    // gridColumnEnd: {
	    //   // Defaults handled by plugin
	    // },
	    // gridColumnStart: {
	    //   // Defaults handled by plugin
	    // },
	    gridRow: {
	        // span-X is handled by the plugin: span-1 -> span 1 / span 1
	        auto: 'auto',
	        'span-full': '1 / -1'
	    },
	    // gridRowStart: {
	    //   // Defaults handled by plugin
	    // },
	    // gridRowEnd: {
	    //   // Defaults handled by plugin
	    // },
	    gridTemplateColumns: {
	        // numbers are handled by the plugin: 1 -> repeat(1, minmax(0, 1fr))
	        none: 'none'
	    },
	    gridTemplateRows: {
	        // numbers are handled by the plugin: 1 -> repeat(1, minmax(0, 1fr))
	        none: 'none'
	    },
	    height: ({ theme  })=>({
	            ...theme('spacing'),
	            ...ratios(2, 6),
	            // '1/2': '50%',
	            // '1/3': '33.333333%',
	            // '2/3': '66.666667%',
	            // '1/4': '25%',
	            // '2/4': '50%',
	            // '3/4': '75%',
	            // '1/5': '20%',
	            // '2/5': '40%',
	            // '3/5': '60%',
	            // '4/5': '80%',
	            // '1/6': '16.666667%',
	            // '2/6': '33.333333%',
	            // '3/6': '50%',
	            // '4/6': '66.666667%',
	            // '5/6': '83.333333%',
	            min: 'min-content',
	            max: 'max-content',
	            fit: 'fit-content',
	            auto: 'auto',
	            full: '100%',
	            screen: '100vh'
	        }),
	    inset: ({ theme  })=>({
	            ...theme('spacing'),
	            ...ratios(2, 4),
	            // '1/2': '50%',
	            // '1/3': '33.333333%',
	            // '2/3': '66.666667%',
	            // '1/4': '25%',
	            // '2/4': '50%',
	            // '3/4': '75%',
	            auto: 'auto',
	            full: '100%'
	        }),
	    keyframes: {
	        spin: {
	            from: {
	                transform: 'rotate(0deg)'
	            },
	            to: {
	                transform: 'rotate(360deg)'
	            }
	        },
	        ping: {
	            '0%': {
	                transform: 'scale(1)',
	                opacity: '1'
	            },
	            '75%,100%': {
	                transform: 'scale(2)',
	                opacity: '0'
	            }
	        },
	        pulse: {
	            '0%,100%': {
	                opacity: '1'
	            },
	            '50%': {
	                opacity: '.5'
	            }
	        },
	        bounce: {
	            '0%, 100%': {
	                transform: 'translateY(-25%)',
	                animationTimingFunction: 'cubic-bezier(0.8,0,1,1)'
	            },
	            '50%': {
	                transform: 'none',
	                animationTimingFunction: 'cubic-bezier(0,0,0.2,1)'
	            }
	        }
	    },
	    letterSpacing: {
	        tighter: '-0.05em',
	        tight: '-0.025em',
	        normal: '0em',
	        wide: '0.025em',
	        wider: '0.05em',
	        widest: '0.1em'
	    },
	    lineHeight: {
	        .../* #__PURE__ */ linear(10, 'rem', 4, 3),
	        // 3: '.75rem',
	        // 4: '1rem',
	        // 5: '1.25rem',
	        // 6: '1.5rem',
	        // 7: '1.75rem',
	        // 8: '2rem',
	        // 9: '2.25rem',
	        // 10: '2.5rem',
	        none: '1',
	        tight: '1.25',
	        snug: '1.375',
	        normal: '1.5',
	        relaxed: '1.625',
	        loose: '2'
	    },
	    // listStyleType: {
	    //   // Defaults handled by plugin
	    // },
	    margin: ({ theme  })=>({
	            auto: 'auto',
	            ...theme('spacing')
	        }),
	    maxHeight: ({ theme  })=>({
	            full: '100%',
	            min: 'min-content',
	            max: 'max-content',
	            fit: 'fit-content',
	            screen: '100vh',
	            ...theme('spacing')
	        }),
	    maxWidth: ({ theme , breakpoints  })=>({
	            ...breakpoints(theme('screens')),
	            none: 'none',
	            0: '0rem',
	            xs: '20rem',
	            sm: '24rem',
	            md: '28rem',
	            lg: '32rem',
	            xl: '36rem',
	            '2xl': '42rem',
	            '3xl': '48rem',
	            '4xl': '56rem',
	            '5xl': '64rem',
	            '6xl': '72rem',
	            '7xl': '80rem',
	            full: '100%',
	            min: 'min-content',
	            max: 'max-content',
	            fit: 'fit-content',
	            prose: '65ch'
	        }),
	    minHeight: {
	        0: '0px',
	        full: '100%',
	        min: 'min-content',
	        max: 'max-content',
	        fit: 'fit-content',
	        screen: '100vh'
	    },
	    minWidth: {
	        0: '0px',
	        full: '100%',
	        min: 'min-content',
	        max: 'max-content',
	        fit: 'fit-content'
	    },
	    // objectPosition: {
	    //   // The plugins joins all arguments by default
	    // },
	    opacity: {
	        .../* #__PURE__ */ linear(100, '', 100, 0, 10),
	        // 0: '0',
	        // 10: '0.1',
	        // 20: '0.2',
	        // 30: '0.3',
	        // 40: '0.4',
	        // 60: '0.6',
	        // 70: '0.7',
	        // 80: '0.8',
	        // 90: '0.9',
	        // 100: '1',
	        5: '0.05',
	        25: '0.25',
	        75: '0.75',
	        95: '0.95'
	    },
	    order: {
	        // Handled by plugin
	        // 1: '1',
	        // 2: '2',
	        // 3: '3',
	        // 4: '4',
	        // 5: '5',
	        // 6: '6',
	        // 7: '7',
	        // 8: '8',
	        // 9: '9',
	        // 10: '10',
	        // 11: '11',
	        // 12: '12',
	        first: '-9999',
	        last: '9999',
	        none: '0'
	    },
	    padding: /* #__PURE__ */ alias('spacing'),
	    placeholderColor: /* #__PURE__ */ alias('colors'),
	    placeholderOpacity: /* #__PURE__ */ alias('opacity'),
	    outlineColor: /* #__PURE__ */ alias('colors'),
	    outlineOffset: /* #__PURE__ */ exponential(8, 'px'),
	    // 0: '0px',
	    // 1: '1px',
	    // 2: '2px',
	    // 4: '4px',
	    // 8: '8px',,
	    outlineWidth: /* #__PURE__ */ exponential(8, 'px'),
	    // 0: '0px',
	    // 1: '1px',
	    // 2: '2px',
	    // 4: '4px',
	    // 8: '8px',,
	    ringColor: ({ theme  })=>({
	            ...theme('colors'),
	            DEFAULT: '#3b82f6'
	        }),
	    ringOffsetColor: /* #__PURE__ */ alias('colors'),
	    ringOffsetWidth: /* #__PURE__ */ exponential(8, 'px'),
	    // 0: '0px',
	    // 1: '1px',
	    // 2: '2px',
	    // 4: '4px',
	    // 8: '8px',,
	    ringOpacity: ({ theme  })=>({
	            ...theme('opacity'),
	            DEFAULT: '0.5'
	        }),
	    ringWidth: {
	        DEFAULT: '3px',
	        .../* #__PURE__ */ exponential(8, 'px')
	    },
	    // 0: '0px',
	    // 1: '1px',
	    // 2: '2px',
	    // 4: '4px',
	    // 8: '8px',
	    rotate: {
	        .../* #__PURE__ */ exponential(2, 'deg'),
	        // 0: '0deg',
	        // 1: '1deg',
	        // 2: '2deg',
	        .../* #__PURE__ */ exponential(12, 'deg', 3),
	        // 3: '3deg',
	        // 6: '6deg',
	        // 12: '12deg',
	        .../* #__PURE__ */ exponential(180, 'deg', 45)
	    },
	    // 45: '45deg',
	    // 90: '90deg',
	    // 180: '180deg',
	    saturate: /* #__PURE__ */ linear(200, '', 100, 0, 50),
	    // 0: '0',
	    // 50: '.5',
	    // 100: '1',
	    // 150: '1.5',
	    // 200: '2',
	    scale: {
	        .../* #__PURE__ */ linear(150, '', 100, 0, 50),
	        // 0: '0',
	        // 50: '.5',
	        // 150: '1.5',
	        .../* #__PURE__ */ linear(110, '', 100, 90, 5),
	        // 90: '.9',
	        // 95: '.95',
	        // 100: '1',
	        // 105: '1.05',
	        // 110: '1.1',
	        75: '0.75',
	        125: '1.25'
	    },
	    scrollMargin: /* #__PURE__ */ alias('spacing'),
	    scrollPadding: /* #__PURE__ */ alias('spacing'),
	    sepia: {
	        0: '0',
	        DEFAULT: '100%'
	    },
	    skew: {
	        .../* #__PURE__ */ exponential(2, 'deg'),
	        // 0: '0deg',
	        // 1: '1deg',
	        // 2: '2deg',
	        .../* #__PURE__ */ exponential(12, 'deg', 3)
	    },
	    // 3: '3deg',
	    // 6: '6deg',
	    // 12: '12deg',
	    space: /* #__PURE__ */ alias('spacing'),
	    stroke: ({ theme  })=>({
	            ...theme('colors'),
	            none: 'none'
	        }),
	    strokeWidth: /* #__PURE__ */ linear(2),
	    // 0: '0',
	    // 1: '1',
	    // 2: '2',,
	    textColor: /* #__PURE__ */ alias('colors'),
	    textDecorationColor: /* #__PURE__ */ alias('colors'),
	    textDecorationThickness: {
	        'from-font': 'from-font',
	        auto: 'auto',
	        .../* #__PURE__ */ exponential(8, 'px')
	    },
	    // 0: '0px',
	    // 1: '1px',
	    // 2: '2px',
	    // 4: '4px',
	    // 8: '8px',
	    textUnderlineOffset: {
	        auto: 'auto',
	        .../* #__PURE__ */ exponential(8, 'px')
	    },
	    // 0: '0px',
	    // 1: '1px',
	    // 2: '2px',
	    // 4: '4px',
	    // 8: '8px',
	    textIndent: /* #__PURE__ */ alias('spacing'),
	    textOpacity: /* #__PURE__ */ alias('opacity'),
	    // transformOrigin: {
	    //   // The following are already handled by the plugin:
	    //   // center, right, left, bottom, top
	    //   // 'bottom-10px-right-20px' -> bottom 10px right 20px
	    // },
	    transitionDuration: ({ theme  })=>({
	            ...theme('durations'),
	            DEFAULT: '150ms'
	        }),
	    transitionDelay: /* #__PURE__ */ alias('durations'),
	    transitionProperty: {
	        none: 'none',
	        all: 'all',
	        DEFAULT: 'color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter',
	        colors: 'color,background-color,border-color,text-decoration-color,fill,stroke',
	        opacity: 'opacity',
	        shadow: 'box-shadow',
	        transform: 'transform'
	    },
	    transitionTimingFunction: {
	        DEFAULT: 'cubic-bezier(0.4,0,0.2,1)',
	        linear: 'linear',
	        in: 'cubic-bezier(0.4,0,1,1)',
	        out: 'cubic-bezier(0,0,0.2,1)',
	        'in-out': 'cubic-bezier(0.4,0,0.2,1)'
	    },
	    translate: ({ theme  })=>({
	            ...theme('spacing'),
	            ...ratios(2, 4),
	            // '1/2': '50%',
	            // '1/3': '33.333333%',
	            // '2/3': '66.666667%',
	            // '1/4': '25%',
	            // '2/4': '50%',
	            // '3/4': '75%',
	            full: '100%'
	        }),
	    width: ({ theme  })=>({
	            min: 'min-content',
	            max: 'max-content',
	            fit: 'fit-content',
	            screen: '100vw',
	            ...theme('flexBasis')
	        }),
	    willChange: {
	        scroll: 'scroll-position'
	    },
	    // other options handled by rules
	    // auto: 'auto',
	    // contents: 'contents',
	    // transform: 'transform',
	    zIndex: {
	        .../* #__PURE__ */ linear(50, '', 1, 0, 10),
	        // 0: '0',
	        // 10: '10',
	        // 20: '20',
	        // 30: '30',
	        // 40: '40',
	        // 50: '50',
	        auto: 'auto'
	    }
	};
	// '1/2': '50%',
	// '1/3': '33.333333%',
	// '2/3': '66.666667%',
	// '1/4': '25%',
	// '2/4': '50%',
	// '3/4': '75%',
	// '1/5': '20%',
	// '2/5': '40%',
	// '3/5': '60%',
	// '4/5': '80%',
	// '1/6': '16.666667%',
	// '2/6': '33.333333%',
	// '3/6': '50%',
	// '4/6': '66.666667%',
	// '5/6': '83.333333%',
	function ratios(start, end) {
	    let result = {};
	    do // XXX: using var to avoid strange bug when generating cjs where `= 1` is removed
	    // eslint-disable-next-line no-var
	    for(var dividend = 1; dividend < start; dividend++)result[`${dividend}/${start}`] = Number((dividend / start * 100).toFixed(6)) + '%';
	    while (++start <= end)
	    return result;
	}
	// 0: '0px',
	// 2: '2px',
	// 4: '4px',
	// 8: '8px',
	function exponential(stop, unit, start = 0) {
	    let result = {};
	    for(; start <= stop; start = 2 * start || 1)result[start] = start + unit;
	    return result;
	}
	// 3: '.75rem',
	// 4: '1rem',
	// 5: '1.25rem',
	// 6: '1.5rem',
	// 7: '1.75rem',
	// 8: '2rem',
	// 9: '2.25rem',
	// 10: '2.5rem',
	function linear(stop, unit = '', divideBy = 1, start = 0, step = 1, result = {}) // eslint-disable-next-line max-params
	{
	    for(; start <= stop; start += step)result[start] = start / divideBy + unit;
	    return result;
	}
	function alias(section) {
	    return ({ theme  })=>theme(section);
	}

	let preflight = {
	    /*
	    1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)
	    2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)
	    */ '*,::before,::after': {
	        boxSizing: 'border-box',
	        /* 1 */ borderWidth: '0',
	        /* 2 */ borderStyle: 'solid',
	        /* 2 */ borderColor: 'theme(borderColor.DEFAULT, currentColor)'
	    },
	    /* 2 */ '::before,::after': {
	        '--tw-content': "''"
	    },
	    /*
	    1. Use a consistent sensible line-height in all browsers.
	    2. Prevent adjustments of font size after orientation changes in iOS.
	    3. Use a more readable tab size.
	    4. Use the user's configured `sans` font-family by default.
	    5. Use the user's configured `sans` font-feature-settings by default.
	    */ html: {
	        lineHeight: 1.5,
	        /* 1 */ WebkitTextSizeAdjust: '100%',
	        /* 2 */ MozTabSize: '4',
	        /* 3 */ tabSize: 4,
	        /* 3 */ fontFamily: `theme(fontFamily.sans, ${theme.fontFamily.sans})`,
	        /* 4 */ fontFeatureSettings: 'theme(fontFamily.sans[1].fontFeatureSettings, normal)'
	    },
	    /* 5 */ /*
	    1. Remove the margin in all browsers.
	    2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.
	    */ body: {
	        margin: '0',
	        /* 1 */ lineHeight: 'inherit'
	    },
	    /* 2 */ /*
	    1. Add the correct height in Firefox.
	    2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)
	    3. Ensure horizontal rules are visible by default.
	    */ hr: {
	        height: '0',
	        /* 1 */ color: 'inherit',
	        /* 2 */ borderTopWidth: '1px'
	    },
	    /* 3 */ /*
	    Add the correct text decoration in Chrome, Edge, and Safari.
	    */ 'abbr:where([title])': {
	        textDecoration: 'underline dotted'
	    },
	    /*
	    Remove the default font size and weight for headings.
	    */ 'h1,h2,h3,h4,h5,h6': {
	        fontSize: 'inherit',
	        fontWeight: 'inherit'
	    },
	    /*
	    Reset links to optimize for opt-in styling instead of opt-out.
	    */ a: {
	        color: 'inherit',
	        textDecoration: 'inherit'
	    },
	    /*
	    Add the correct font weight in Edge and Safari.
	    */ 'b,strong': {
	        fontWeight: 'bolder'
	    },
	    /*
	    1. Use the user's configured `mono` font family by default.
	    2. Use the user's configured `mono` font-feature-settings by default.
	    3. Correct the odd `em` font sizing in all browsers.
	    */ 'code,kbd,samp,pre': {
	        fontFamily: `theme(fontFamily.mono, ${theme.fontFamily.mono})`,
	        fontFeatureSettings: 'theme(fontFamily.mono[1].fontFeatureSettings, normal)',
	        fontSize: '1em'
	    },
	    /*
	    Add the correct font size in all browsers.
	    */ small: {
	        fontSize: '80%'
	    },
	    /*
	    Prevent `sub` and `sup` elements from affecting the line height in all browsers.
	    */ 'sub,sup': {
	        fontSize: '75%',
	        lineHeight: 0,
	        position: 'relative',
	        verticalAlign: 'baseline'
	    },
	    sub: {
	        bottom: '-0.25em'
	    },
	    sup: {
	        top: '-0.5em'
	    },
	    /*
	    1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)
	    2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)
	    3. Remove gaps between table borders by default.
	    */ table: {
	        textIndent: '0',
	        /* 1 */ borderColor: 'inherit',
	        /* 2 */ borderCollapse: 'collapse'
	    },
	    /* 3 */ /*
	    1. Change the font styles in all browsers.
	    2. Remove the margin in Firefox and Safari.
	    3. Remove default padding in all browsers.
	    */ 'button,input,optgroup,select,textarea': {
	        fontFamily: 'inherit',
	        /* 1 */ fontSize: '100%',
	        /* 1 */ lineHeight: 'inherit',
	        /* 1 */ color: 'inherit',
	        /* 1 */ margin: '0',
	        /* 2 */ padding: '0'
	    },
	    /* 3 */ /*
	    Remove the inheritance of text transform in Edge and Firefox.
	    */ 'button,select': {
	        textTransform: 'none'
	    },
	    /*
	    1. Correct the inability to style clickable types in iOS and Safari.
	    2. Remove default button styles.
	    */ "button,[type='button'],[type='reset'],[type='submit']": {
	        WebkitAppearance: 'button',
	        /* 1 */ backgroundColor: 'transparent',
	        /* 2 */ backgroundImage: 'none'
	    },
	    /* 4 */ /*
	    Use the modern Firefox focus style for all focusable elements.
	    */ ':-moz-focusring': {
	        outline: 'auto'
	    },
	    /*
	    Remove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)
	    */ ':-moz-ui-invalid': {
	        boxShadow: 'none'
	    },
	    /*
	    Add the correct vertical alignment in Chrome and Firefox.
	    */ progress: {
	        verticalAlign: 'baseline'
	    },
	    /*
	    Correct the cursor style of increment and decrement buttons in Safari.
	    */ '::-webkit-inner-spin-button,::-webkit-outer-spin-button': {
	        height: 'auto'
	    },
	    /*
	    1. Correct the odd appearance in Chrome and Safari.
	    2. Correct the outline style in Safari.
	    */ "[type='search']": {
	        WebkitAppearance: 'textfield',
	        /* 1 */ outlineOffset: '-2px'
	    },
	    /* 2 */ /*
	    Remove the inner padding in Chrome and Safari on macOS.
	    */ '::-webkit-search-decoration': {
	        WebkitAppearance: 'none'
	    },
	    /*
	    1. Correct the inability to style clickable types in iOS and Safari.
	    2. Change font properties to `inherit` in Safari.
	    */ '::-webkit-file-upload-button': {
	        WebkitAppearance: 'button',
	        /* 1 */ font: 'inherit'
	    },
	    /* 2 */ /*
	    Add the correct display in Chrome and Safari.
	    */ summary: {
	        display: 'list-item'
	    },
	    /*
	    Removes the default spacing and border for appropriate elements.
	    */ 'blockquote,dl,dd,h1,h2,h3,h4,h5,h6,hr,figure,p,pre': {
	        margin: '0'
	    },
	    fieldset: {
	        margin: '0',
	        padding: '0'
	    },
	    legend: {
	        padding: '0'
	    },
	    'ol,ul,menu': {
	        listStyle: 'none',
	        margin: '0',
	        padding: '0'
	    },
	    /*
	    Prevent resizing textareas horizontally by default.
	    */ textarea: {
	        resize: 'vertical'
	    },
	    /*
	    1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)
	    2. Set the default placeholder color to the user's configured gray 400 color.
	    */ 'input::placeholder,textarea::placeholder': {
	        opacity: 1,
	        /* 1 */ color: 'theme(colors.gray.400, #9ca3af)'
	    },
	    /* 2 */ /*
	    Set the default cursor for buttons.
	    */ 'button,[role="button"]': {
	        cursor: 'pointer'
	    },
	    /*
	    Make sure disabled buttons don't get the pointer cursor.
	    */ ':disabled': {
	        cursor: 'default'
	    },
	    /*
	    1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)
	    2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)
	      This can trigger a poorly considered lint error in some tools but is included by design.
	    */ 'img,svg,video,canvas,audio,iframe,embed,object': {
	        display: 'block',
	        /* 1 */ verticalAlign: 'middle'
	    },
	    /* 2 */ /*
	    Constrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)
	    */ 'img,video': {
	        maxWidth: '100%',
	        height: 'auto'
	    },
	    /* Make elements with the HTML hidden attribute stay hidden by default */ '[hidden]': {
	        display: 'none'
	    }
	};

	// indirection wrapper to remove autocomplete functions from production bundles
	let rules = [
	    /* arbitrary properties: [paint-order:markers] */ match('\\[([-\\w]+):(.+)]', ({ 1: $1 , 2: $2  }, context)=>({
	            '@layer overrides': {
	                '&': {
	                    [$1]: arbitrary(`[${$2}]`, '', context)
	                }
	            }
	        })),
	    /* Styling based on parent and peer state */ match('(group|peer)([~/][^-[]+)?', ({ input  }, { h  })=>[
	            {
	                c: h(input)
	            }
	        ]),
	    /* LAYOUT */ matchTheme('aspect-', 'aspectRatio'),
	    match('container', (_, { theme  })=>{
	        let { screens =theme('screens') , center , padding  } = theme('container'), rules = {
	            width: '100%',
	            marginRight: center && 'auto',
	            marginLeft: center && 'auto',
	            ...paddingFor('xs')
	        };
	        for(let screen in screens){
	            let value = screens[screen];
	            'string' == typeof value && (rules[mql(value)] = {
	                '&': {
	                    maxWidth: value,
	                    ...paddingFor(screen)
	                }
	            });
	        }
	        return rules;
	        function paddingFor(screen) {
	            let value = padding && ('string' == typeof padding ? padding : padding[screen] || padding.DEFAULT);
	            if (value) return {
	                paddingRight: value,
	                paddingLeft: value
	            };
	        }
	    }),
	    // Content
	    matchTheme('content-', 'content', ({ _  })=>({
	            '--tw-content': _,
	            content: 'var(--tw-content)'
	        })),
	    // Box Decoration Break
	    match('(?:box-)?decoration-(slice|clone)', 'boxDecorationBreak'),
	    // Box Sizing
	    match('box-(border|content)', 'boxSizing', ({ 1: $1  })=>$1 + '-box'),
	    // Display
	    match('hidden', {
	        display: 'none'
	    }),
	    // Table Layout
	    match('table-(auto|fixed)', 'tableLayout'),
	    match([
	        '(block|flex|table|grid|inline|contents|flow-root|list-item)',
	        '(inline-(block|flex|table|grid))',
	        '(table-(caption|cell|column|row|(column|row|footer|header)-group))'
	    ], 'display'),
	    // Floats
	    '(float)-(left|right|none)',
	    // Clear
	    '(clear)-(left|right|none|both)',
	    // Overflow
	    '(overflow(?:-[xy])?)-(auto|hidden|clip|visible|scroll)',
	    // Isolation
	    '(isolation)-(auto)',
	    // Isolation
	    match('isolate', 'isolation'),
	    // Object Fit
	    match('object-(contain|cover|fill|none|scale-down)', 'objectFit'),
	    // Object Position
	    matchTheme('object-', 'objectPosition'),
	    match('object-(top|bottom|center|(left|right)(-(top|bottom))?)', 'objectPosition', spacify),
	    // Overscroll Behavior
	    match('overscroll(-[xy])?-(auto|contain|none)', ({ 1: $1 = '' , 2: $2  })=>({
	            ['overscroll-behavior' + $1]: $2
	        })),
	    // Position
	    match('(static|fixed|absolute|relative|sticky)', 'position'),
	    // Top / Right / Bottom / Left
	    matchTheme('-?inset(-[xy])?(?:$|-)', 'inset', ({ 1: $1 , _  })=>({
	            top: '-x' != $1 && _,
	            right: '-y' != $1 && _,
	            bottom: '-x' != $1 && _,
	            left: '-y' != $1 && _
	        })),
	    matchTheme('-?(top|bottom|left|right)(?:$|-)', 'inset'),
	    // Visibility
	    match('(visible|collapse)', 'visibility'),
	    match('invisible', {
	        visibility: 'hidden'
	    }),
	    // Z-Index
	    matchTheme('-?z-', 'zIndex'),
	    /* FLEXBOX */ // Flex Direction
	    match('flex-((row|col)(-reverse)?)', 'flexDirection', columnify),
	    match('flex-(wrap|wrap-reverse|nowrap)', 'flexWrap'),
	    matchTheme('(flex-(?:grow|shrink))(?:$|-)'),
	    /*, 'flex-grow' | flex-shrink */ matchTheme('(flex)-'),
	    /*, 'flex' */ matchTheme('grow(?:$|-)', 'flexGrow'),
	    matchTheme('shrink(?:$|-)', 'flexShrink'),
	    matchTheme('basis-', 'flexBasis'),
	    matchTheme('-?(order)-'),
	    /*, 'order' */ '-?(order)-(\\d+)',
	    /* GRID */ // Grid Template Columns
	    matchTheme('grid-cols-', 'gridTemplateColumns'),
	    match('grid-cols-(\\d+)', 'gridTemplateColumns', gridTemplate),
	    // Grid Column Start / End
	    matchTheme('col-', 'gridColumn'),
	    match('col-(span)-(\\d+)', 'gridColumn', span),
	    matchTheme('col-start-', 'gridColumnStart'),
	    match('col-start-(auto|\\d+)', 'gridColumnStart'),
	    matchTheme('col-end-', 'gridColumnEnd'),
	    match('col-end-(auto|\\d+)', 'gridColumnEnd'),
	    // Grid Template Rows
	    matchTheme('grid-rows-', 'gridTemplateRows'),
	    match('grid-rows-(\\d+)', 'gridTemplateRows', gridTemplate),
	    // Grid Row Start / End
	    matchTheme('row-', 'gridRow'),
	    match('row-(span)-(\\d+)', 'gridRow', span),
	    matchTheme('row-start-', 'gridRowStart'),
	    match('row-start-(auto|\\d+)', 'gridRowStart'),
	    matchTheme('row-end-', 'gridRowEnd'),
	    match('row-end-(auto|\\d+)', 'gridRowEnd'),
	    // Grid Auto Flow
	    match('grid-flow-((row|col)(-dense)?)', 'gridAutoFlow', (match)=>spacify(columnify(match))),
	    match('grid-flow-(dense)', 'gridAutoFlow'),
	    // Grid Auto Columns
	    matchTheme('auto-cols-', 'gridAutoColumns'),
	    // Grid Auto Rows
	    matchTheme('auto-rows-', 'gridAutoRows'),
	    // Gap
	    matchTheme('gap-x(?:$|-)', 'gap', 'columnGap'),
	    matchTheme('gap-y(?:$|-)', 'gap', 'rowGap'),
	    matchTheme('gap(?:$|-)', 'gap'),
	    /* BOX ALIGNMENT */ // Justify Items
	    // Justify Self
	    '(justify-(?:items|self))-',
	    // Justify Content
	    match('justify-', 'justifyContent', convertContentValue),
	    // Align Content
	    // Align Items
	    // Align Self
	    match('(content|items|self)-', (match)=>({
	            ['align-' + match[1]]: convertContentValue(match)
	        })),
	    // Place Content
	    // Place Items
	    // Place Self
	    match('(place-(content|items|self))-', ({ 1: $1 , $$  })=>({
	            [$1]: ('wun'.includes($$[3]) ? 'space-' : '') + $$
	        })),
	    /* SPACING */ // Padding
	    matchTheme('p([xytrbl])?(?:$|-)', 'padding', edge('padding')),
	    // Margin
	    matchTheme('-?m([xytrbl])?(?:$|-)', 'margin', edge('margin')),
	    // Space Between
	    matchTheme('-?space-(x|y)(?:$|-)', 'space', ({ 1: $1 , _  })=>({
	            '&>:not([hidden])~:not([hidden])': {
	                [`--tw-space-${$1}-reverse`]: '0',
	                ['margin-' + ({
	                    y: 'top',
	                    x: 'left'
	                })[$1]]: `calc(${_} * calc(1 - var(--tw-space-${$1}-reverse)))`,
	                ['margin-' + ({
	                    y: 'bottom',
	                    x: 'right'
	                })[$1]]: `calc(${_} * var(--tw-space-${$1}-reverse))`
	            }
	        })),
	    match('space-(x|y)-reverse', ({ 1: $1  })=>({
	            '&>:not([hidden])~:not([hidden])': {
	                [`--tw-space-${$1}-reverse`]: '1'
	            }
	        })),
	    /* SIZING */ // Width
	    matchTheme('w-', 'width'),
	    // Min-Width
	    matchTheme('min-w-', 'minWidth'),
	    // Max-Width
	    matchTheme('max-w-', 'maxWidth'),
	    // Height
	    matchTheme('h-', 'height'),
	    // Min-Height
	    matchTheme('min-h-', 'minHeight'),
	    // Max-Height
	    matchTheme('max-h-', 'maxHeight'),
	    /* TYPOGRAPHY */ // Font Weight
	    matchTheme('font-', 'fontWeight'),
	    // Font Family
	    matchTheme('font-', 'fontFamily', ({ _  })=>{
	        return 'string' == typeof (_ = asArray(_))[1] ? {
	            fontFamily: join(_)
	        } : {
	            fontFamily: join(_[0]),
	            ..._[1]
	        };
	    }),
	    // Font Smoothing
	    match('antialiased', {
	        WebkitFontSmoothing: 'antialiased',
	        MozOsxFontSmoothing: 'grayscale'
	    }),
	    match('subpixel-antialiased', {
	        WebkitFontSmoothing: 'auto',
	        MozOsxFontSmoothing: 'auto'
	    }),
	    // Font Style
	    match('italic', 'fontStyle'),
	    match('not-italic', {
	        fontStyle: 'normal'
	    }),
	    // Font Variant Numeric
	    match('(ordinal|slashed-zero|(normal|lining|oldstyle|proportional|tabular)-nums|(diagonal|stacked)-fractions)', ({ 1: $1 , 2: $2 = '' , 3: $3  })=>// normal-nums
	        'normal' == $2 ? {
	            fontVariantNumeric: 'normal'
	        } : {
	            ['--tw-' + ($3 ? // diagonal-fractions, stacked-fractions
	            'numeric-fraction' : 'pt'.includes($2[0]) ? // proportional-nums, tabular-nums
	            'numeric-spacing' : $2 ? // lining-nums, oldstyle-nums
	            'numeric-figure' : // ordinal, slashed-zero
	            $1)]: $1,
	            fontVariantNumeric: 'var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction)',
	            ...asDefaults({
	                '--tw-ordinal': 'var(--tw-empty,/*!*/ /*!*/)',
	                '--tw-slashed-zero': 'var(--tw-empty,/*!*/ /*!*/)',
	                '--tw-numeric-figure': 'var(--tw-empty,/*!*/ /*!*/)',
	                '--tw-numeric-spacing': 'var(--tw-empty,/*!*/ /*!*/)',
	                '--tw-numeric-fraction': 'var(--tw-empty,/*!*/ /*!*/)'
	            })
	        }),
	    // Letter Spacing
	    matchTheme('tracking-', 'letterSpacing'),
	    // Line Height
	    matchTheme('leading-', 'lineHeight'),
	    // List Style Position
	    match('list-(inside|outside)', 'listStylePosition'),
	    // List Style Type
	    matchTheme('list-', 'listStyleType'),
	    match('list-', 'listStyleType'),
	    // Placeholder Opacity
	    matchTheme('placeholder-opacity-', 'placeholderOpacity', ({ _  })=>({
	            '&::placeholder': {
	                '--tw-placeholder-opacity': _
	            }
	        })),
	    // Placeholder Color
	    matchColor('placeholder-', {
	        property: 'color',
	        selector: '&::placeholder'
	    }),
	    // Text Alignment
	    match('text-(left|center|right|justify|start|end)', 'textAlign'),
	    match('text-(ellipsis|clip)', 'textOverflow'),
	    // Text Opacity
	    matchTheme('text-opacity-', 'textOpacity', '--tw-text-opacity'),
	    // Text Color
	    matchColor('text-', {
	        property: 'color'
	    }),
	    // Font Size
	    matchTheme('text-', 'fontSize', ({ _  })=>'string' == typeof _ ? {
	            fontSize: _
	        } : {
	            fontSize: _[0],
	            ...'string' == typeof _[1] ? {
	                lineHeight: _[1]
	            } : _[1]
	        }),
	    // Text Indent
	    matchTheme('indent-', 'textIndent'),
	    // Text Decoration
	    match('(overline|underline|line-through)', 'textDecorationLine'),
	    match('no-underline', {
	        textDecorationLine: 'none'
	    }),
	    // Text Underline offset
	    matchTheme('underline-offset-', 'textUnderlineOffset'),
	    // Text Decoration Color
	    matchColor('decoration-', {
	        section: 'textDecorationColor',
	        opacityVariable: false,
	        opacitySection: 'opacity'
	    }),
	    // Text Decoration Thickness
	    matchTheme('decoration-', 'textDecorationThickness'),
	    // Text Decoration Style
	    match('decoration-', 'textDecorationStyle'),
	    // Text Transform
	    match('(uppercase|lowercase|capitalize)', 'textTransform'),
	    match('normal-case', {
	        textTransform: 'none'
	    }),
	    // Text Overflow
	    match('truncate', {
	        overflow: 'hidden',
	        whiteSpace: 'nowrap',
	        textOverflow: 'ellipsis'
	    }),
	    // Vertical Alignment
	    match('align-', 'verticalAlign'),
	    // Whitespace
	    match('whitespace-', 'whiteSpace'),
	    // Word Break
	    match('break-normal', {
	        wordBreak: 'normal',
	        overflowWrap: 'normal'
	    }),
	    match('break-words', {
	        overflowWrap: 'break-word'
	    }),
	    match('break-all', {
	        wordBreak: 'break-all'
	    }),
	    match('break-keep', {
	        wordBreak: 'keep-all'
	    }),
	    // Caret Color
	    matchColor('caret-', {
	        // section: 'caretColor',
	        opacityVariable: false,
	        opacitySection: 'opacity'
	    }),
	    // Accent Color
	    matchColor('accent-', {
	        // section: 'accentColor',
	        opacityVariable: false,
	        opacitySection: 'opacity'
	    }),
	    // Gradient Color Stops
	    match('bg-gradient-to-([trbl]|[tb][rl])', 'backgroundImage', ({ 1: $1  })=>`linear-gradient(to ${position($1, ' ')},var(--tw-gradient-stops))`),
	    matchColor('from-', {
	        section: 'gradientColorStops',
	        opacityVariable: false,
	        opacitySection: 'opacity'
	    }, ({ _  })=>({
	            '--tw-gradient-from': _.value,
	            '--tw-gradient-to': _.color({
	                opacityValue: '0'
	            }),
	            '--tw-gradient-stops': "var(--tw-gradient-from),var(--tw-gradient-to)"
	        })),
	    matchColor('via-', {
	        section: 'gradientColorStops',
	        opacityVariable: false,
	        opacitySection: 'opacity'
	    }, ({ _  })=>({
	            '--tw-gradient-to': _.color({
	                opacityValue: '0'
	            }),
	            '--tw-gradient-stops': `var(--tw-gradient-from),${_.value},var(--tw-gradient-to)`
	        })),
	    matchColor('to-', {
	        section: 'gradientColorStops',
	        property: '--tw-gradient-to',
	        opacityVariable: false,
	        opacitySection: 'opacity'
	    }),
	    /* BACKGROUNDS */ // Background Attachment
	    match('bg-(fixed|local|scroll)', 'backgroundAttachment'),
	    // Background Origin
	    match('bg-origin-(border|padding|content)', 'backgroundOrigin', ({ 1: $1  })=>$1 + '-box'),
	    // Background Repeat
	    match([
	        'bg-(no-repeat|repeat(-[xy])?)',
	        'bg-repeat-(round|space)'
	    ], 'backgroundRepeat'),
	    // Background Blend Mode
	    match('bg-blend-', 'backgroundBlendMode'),
	    // Background Clip
	    match('bg-clip-(border|padding|content|text)', 'backgroundClip', ({ 1: $1  })=>$1 + ('text' == $1 ? '' : '-box')),
	    // Background Opacity
	    matchTheme('bg-opacity-', 'backgroundOpacity', '--tw-bg-opacity'),
	    // Background Color
	    // bg-${backgroundColor}/${backgroundOpacity}
	    matchColor('bg-', {
	        section: 'backgroundColor'
	    }),
	    // Background Image
	    // supported arbitrary types are: length, color, angle, list
	    matchTheme('bg-', 'backgroundImage'),
	    // Background Position
	    matchTheme('bg-', 'backgroundPosition'),
	    match('bg-(top|bottom|center|(left|right)(-(top|bottom))?)', 'backgroundPosition', spacify),
	    // Background Size
	    matchTheme('bg-', 'backgroundSize'),
	    /* BORDERS */ // Border Radius
	    matchTheme('rounded(?:$|-)', 'borderRadius'),
	    matchTheme('rounded-([trbl]|[tb][rl])(?:$|-)', 'borderRadius', ({ 1: $1 , _  })=>{
	        let corners = {
	            t: [
	                'tl',
	                'tr'
	            ],
	            r: [
	                'tr',
	                'br'
	            ],
	            b: [
	                'bl',
	                'br'
	            ],
	            l: [
	                'bl',
	                'tl'
	            ]
	        }[$1] || [
	            $1,
	            $1
	        ];
	        return {
	            [`border-${position(corners[0])}-radius`]: _,
	            [`border-${position(corners[1])}-radius`]: _
	        };
	    }),
	    // Border Collapse
	    match('border-(collapse|separate)', 'borderCollapse'),
	    // Border Opacity
	    matchTheme('border-opacity(?:$|-)', 'borderOpacity', '--tw-border-opacity'),
	    // Border Style
	    match('border-(solid|dashed|dotted|double|none)', 'borderStyle'),
	    // Border Spacing
	    matchTheme('border-spacing(-[xy])?(?:$|-)', 'borderSpacing', ({ 1: $1 , _  })=>({
	            ...asDefaults({
	                '--tw-border-spacing-x': '0',
	                '--tw-border-spacing-y': '0'
	            }),
	            ['--tw-border-spacing' + ($1 || '-x')]: _,
	            ['--tw-border-spacing' + ($1 || '-y')]: _,
	            'border-spacing': 'var(--tw-border-spacing-x) var(--tw-border-spacing-y)'
	        })),
	    // Border Color
	    matchColor('border-([xytrbl])-', {
	        section: 'borderColor'
	    }, edge('border', 'Color')),
	    matchColor('border-'),
	    // Border Width
	    matchTheme('border-([xytrbl])(?:$|-)', 'borderWidth', edge('border', 'Width')),
	    matchTheme('border(?:$|-)', 'borderWidth'),
	    // Divide Opacity
	    matchTheme('divide-opacity(?:$|-)', 'divideOpacity', ({ _  })=>({
	            '&>:not([hidden])~:not([hidden])': {
	                '--tw-divide-opacity': _
	            }
	        })),
	    // Divide Style
	    match('divide-(solid|dashed|dotted|double|none)', ({ 1: $1  })=>({
	            '&>:not([hidden])~:not([hidden])': {
	                borderStyle: $1
	            }
	        })),
	    // Divide Width
	    match('divide-([xy]-reverse)', ({ 1: $1  })=>({
	            '&>:not([hidden])~:not([hidden])': {
	                ['--tw-divide-' + $1]: '1'
	            }
	        })),
	    matchTheme('divide-([xy])(?:$|-)', 'divideWidth', ({ 1: $1 , _  })=>{
	        let edges = {
	            x: 'lr',
	            y: 'tb'
	        }[$1];
	        return {
	            '&>:not([hidden])~:not([hidden])': {
	                [`--tw-divide-${$1}-reverse`]: '0',
	                [`border-${position(edges[0])}Width`]: `calc(${_} * calc(1 - var(--tw-divide-${$1}-reverse)))`,
	                [`border-${position(edges[1])}Width`]: `calc(${_} * var(--tw-divide-${$1}-reverse))`
	            }
	        };
	    }),
	    // Divide Color
	    matchColor('divide-', {
	        // section: $0.replace('-', 'Color') -> 'divideColor'
	        property: 'borderColor',
	        // opacityVariable: '--tw-border-opacity',
	        // opacitySection: section.replace('Color', 'Opacity') -> 'divideOpacity'
	        selector: '&>:not([hidden])~:not([hidden])'
	    }),
	    // Ring Offset Opacity
	    matchTheme('ring-opacity(?:$|-)', 'ringOpacity', '--tw-ring-opacity'),
	    // Ring Offset Color
	    matchColor('ring-offset-', {
	        // section: 'ringOffsetColor',
	        property: '--tw-ring-offset-color',
	        opacityVariable: false
	    }),
	    // opacitySection: section.replace('Color', 'Opacity') -> 'ringOffsetOpacity'
	    // Ring Offset Width
	    matchTheme('ring-offset(?:$|-)', 'ringOffsetWidth', '--tw-ring-offset-width'),
	    // Ring Inset
	    match('ring-inset', {
	        '--tw-ring-inset': 'inset'
	    }),
	    // Ring Color
	    matchColor('ring-', {
	        // section: 'ringColor',
	        property: '--tw-ring-color'
	    }),
	    // opacityVariable: '--tw-ring-opacity',
	    // opacitySection: section.replace('Color', 'Opacity') -> 'ringOpacity'
	    // Ring Width
	    matchTheme('ring(?:$|-)', 'ringWidth', ({ _  }, { theme  })=>({
	            ...asDefaults({
	                '--tw-ring-offset-shadow': '0 0 #0000',
	                '--tw-ring-shadow': '0 0 #0000',
	                '--tw-shadow': '0 0 #0000',
	                '--tw-shadow-colored': '0 0 #0000',
	                // Within own declaration to have the defaults above to be merged with defaults from shadow
	                '&': {
	                    '--tw-ring-inset': 'var(--tw-empty,/*!*/ /*!*/)',
	                    '--tw-ring-offset-width': theme('ringOffsetWidth', '', '0px'),
	                    '--tw-ring-offset-color': toColorValue(theme('ringOffsetColor', '', '#fff')),
	                    '--tw-ring-color': toColorValue(theme('ringColor', '', '#93c5fd'), {
	                        opacityVariable: '--tw-ring-opacity'
	                    }),
	                    '--tw-ring-opacity': theme('ringOpacity', '', '0.5')
	                }
	            }),
	            '--tw-ring-offset-shadow': "var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color)",
	            '--tw-ring-shadow': `var(--tw-ring-inset) 0 0 0 calc(${_} + var(--tw-ring-offset-width)) var(--tw-ring-color)`,
	            boxShadow: "var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)"
	        })),
	    /* EFFECTS */ // Box Shadow Color
	    matchColor('shadow-', {
	        section: 'boxShadowColor',
	        opacityVariable: false,
	        opacitySection: 'opacity'
	    }, ({ _  })=>({
	            '--tw-shadow-color': _.value,
	            '--tw-shadow': 'var(--tw-shadow-colored)'
	        })),
	    // Box Shadow
	    matchTheme('shadow(?:$|-)', 'boxShadow', ({ _  })=>({
	            ...asDefaults({
	                '--tw-ring-offset-shadow': '0 0 #0000',
	                '--tw-ring-shadow': '0 0 #0000',
	                '--tw-shadow': '0 0 #0000',
	                '--tw-shadow-colored': '0 0 #0000'
	            }),
	            '--tw-shadow': join(_),
	            // replace all colors with reference to --tw-shadow-colored
	            // this matches colors after non-comma char (keyword, offset) before comma or the end
	            '--tw-shadow-colored': join(_).replace(/([^,]\s+)(?:#[a-f\d]+|(?:(?:hsl|rgb)a?|hwb|lab|lch|color|var)\(.+?\)|[a-z]+)(,|$)/g, '$1var(--tw-shadow-color)$2'),
	            boxShadow: "var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)"
	        })),
	    // Opacity
	    matchTheme('(opacity)-'),
	    /*, 'opacity' */ // Mix Blend Mode
	    match('mix-blend-', 'mixBlendMode'),
	    /* FILTERS */ ...filter(),
	    ...filter('backdrop-'),
	    /* TRANSITIONS AND ANIMATION */ // Transition Property
	    matchTheme('transition(?:$|-)', 'transitionProperty', (match, { theme  })=>({
	            transitionProperty: join(match),
	            transitionTimingFunction: 'none' == match._ ? void 0 : join(theme('transitionTimingFunction', '')),
	            transitionDuration: 'none' == match._ ? void 0 : join(theme('transitionDuration', ''))
	        })),
	    // Transition Duration
	    matchTheme('duration(?:$|-)', 'transitionDuration', 'transitionDuration', join),
	    // Transition Timing Function
	    matchTheme('ease(?:$|-)', 'transitionTimingFunction', 'transitionTimingFunction', join),
	    // Transition Delay
	    matchTheme('delay(?:$|-)', 'transitionDelay', 'transitionDelay', join),
	    matchTheme('animate(?:$|-)', 'animation', (match, { theme , h , e  })=>{
	        let animation = join(match), // Try to auto inject keyframes
	        parts = animation.split(' '), keyframeValues = theme('keyframes', parts[0]);
	        return keyframeValues ? {
	            ['@keyframes ' + (parts[0] = e(h(parts[0])))]: keyframeValues,
	            animation: parts.join(' ')
	        } : {
	            animation
	        };
	    }),
	    /* TRANSFORMS */ // Transform
	    '(transform)-(none)',
	    match('transform', tranformDefaults),
	    match('transform-(cpu|gpu)', ({ 1: $1  })=>({
	            '--tw-transform': transformValue('gpu' == $1)
	        })),
	    // Scale
	    matchTheme('scale(-[xy])?-', 'scale', ({ 1: $1 , _  })=>({
	            ['--tw-scale' + ($1 || '-x')]: _,
	            ['--tw-scale' + ($1 || '-y')]: _,
	            ...tranformDefaults()
	        })),
	    // Rotate
	    matchTheme('-?(rotate)-', 'rotate', transform),
	    // Translate
	    matchTheme('-?(translate-[xy])-', 'translate', transform),
	    // Skew
	    matchTheme('-?(skew-[xy])-', 'skew', transform),
	    // Transform Origin
	    match('origin-(center|((top|bottom)(-(left|right))?)|left|right)', 'transformOrigin', spacify),
	    /* INTERACTIVITY */ // Appearance
	    '(appearance)-',
	    // Columns
	    matchTheme('(columns)-'),
	    /*, 'columns' */ '(columns)-(\\d+)',
	    // Break Before, After and Inside
	    '(break-(?:before|after|inside))-',
	    // Cursor
	    matchTheme('(cursor)-'),
	    /*, 'cursor' */ '(cursor)-',
	    // Scroll Snap Type
	    match('snap-(none)', 'scroll-snap-type'),
	    match('snap-(x|y|both)', ({ 1: $1  })=>({
	            ...asDefaults({
	                '--tw-scroll-snap-strictness': 'proximity'
	            }),
	            'scroll-snap-type': $1 + ' var(--tw-scroll-snap-strictness)'
	        })),
	    match('snap-(mandatory|proximity)', '--tw-scroll-snap-strictness'),
	    // Scroll Snap Align
	    match('snap-(?:(start|end|center)|align-(none))', 'scroll-snap-align'),
	    // Scroll Snap Stop
	    match('snap-(normal|always)', 'scroll-snap-stop'),
	    match('scroll-(auto|smooth)', 'scroll-behavior'),
	    // Scroll Margin
	    // Padding
	    matchTheme('scroll-p([xytrbl])?(?:$|-)', 'padding', edge('scroll-padding')),
	    // Margin
	    matchTheme('-?scroll-m([xytrbl])?(?:$|-)', 'scroll-margin', edge('scroll-margin')),
	    // Touch Action
	    match('touch-(auto|none|manipulation)', 'touch-action'),
	    match('touch-(pinch-zoom|pan-(?:(x|left|right)|(y|up|down)))', ({ 1: $1 , 2: $2 , 3: $3  })=>({
	            ...asDefaults({
	                '--tw-pan-x': 'var(--tw-empty,/*!*/ /*!*/)',
	                '--tw-pan-y': 'var(--tw-empty,/*!*/ /*!*/)',
	                '--tw-pinch-zoom': 'var(--tw-empty,/*!*/ /*!*/)',
	                '--tw-touch-action': 'var(--tw-pan-x) var(--tw-pan-y) var(--tw-pinch-zoom)'
	            }),
	            // x, left, right -> pan-x
	            // y, up, down -> pan-y
	            // -> pinch-zoom
	            [`--tw-${$2 ? 'pan-x' : $3 ? 'pan-y' : $1}`]: $1,
	            'touch-action': 'var(--tw-touch-action)'
	        })),
	    // Outline Style
	    match('outline-none', {
	        outline: '2px solid transparent',
	        'outline-offset': '2px'
	    }),
	    match('outline', {
	        outlineStyle: 'solid'
	    }),
	    match('outline-(dashed|dotted|double)', 'outlineStyle'),
	    // Outline Offset
	    matchTheme('-?(outline-offset)-'),
	    /*, 'outlineOffset'*/ // Outline Color
	    matchColor('outline-', {
	        opacityVariable: false,
	        opacitySection: 'opacity'
	    }),
	    // Outline Width
	    matchTheme('outline-', 'outlineWidth'),
	    // Pointer Events
	    '(pointer-events)-',
	    // Will Change
	    matchTheme('(will-change)-'),
	    /*, 'willChange' */ '(will-change)-',
	    // Resize
	    [
	        'resize(?:-(none|x|y))?',
	        'resize',
	        ({ 1: $1  })=>({
	                x: 'horizontal',
	                y: 'vertical'
	            })[$1] || $1 || 'both'
	    ],
	    // User Select
	    match('select-(none|text|all|auto)', 'userSelect'),
	    /* SVG */ // Fill, Stroke
	    matchColor('fill-', {
	        section: 'fill',
	        opacityVariable: false,
	        opacitySection: 'opacity'
	    }),
	    matchColor('stroke-', {
	        section: 'stroke',
	        opacityVariable: false,
	        opacitySection: 'opacity'
	    }),
	    // Stroke Width
	    matchTheme('stroke-', 'strokeWidth'),
	    /* ACCESSIBILITY */ // Screen Readers
	    match('sr-only', {
	        position: 'absolute',
	        width: '1px',
	        height: '1px',
	        padding: '0',
	        margin: '-1px',
	        overflow: 'hidden',
	        whiteSpace: 'nowrap',
	        clip: 'rect(0,0,0,0)',
	        borderWidth: '0'
	    }),
	    match('not-sr-only', {
	        position: 'static',
	        width: 'auto',
	        height: 'auto',
	        padding: '0',
	        margin: '0',
	        overflow: 'visible',
	        whiteSpace: 'normal',
	        clip: 'auto'
	    })
	];
	function spacify(value) {
	    return ('string' == typeof value ? value : value[1]).replace(/-/g, ' ').trim();
	}
	function columnify(value) {
	    return ('string' == typeof value ? value : value[1]).replace('col', 'column');
	}
	function position(shorthand, separator = '-') {
	    let longhand = [];
	    for (let short of shorthand)longhand.push({
	        t: 'top',
	        r: 'right',
	        b: 'bottom',
	        l: 'left'
	    }[short]);
	    return longhand.join(separator);
	}
	function join(value) {
	    return value && '' + (value._ || value);
	}
	function convertContentValue({ $$  }) {
	    return (({
	        // /* aut*/ o: '',
	        /* sta*/ r: /*t*/ 'flex-',
	        /* end*/ '': 'flex-',
	        // /* cen*/ t /*er*/: '',
	        /* bet*/ w: /*een*/ 'space-',
	        /* aro*/ u: /*nd*/ 'space-',
	        /* eve*/ n: /*ly*/ 'space-'
	    })[$$[3] || ''] || '') + $$;
	}
	function edge(propertyPrefix, propertySuffix = '') {
	    return ({ 1: $1 , _  })=>{
	        let edges = {
	            x: 'lr',
	            y: 'tb'
	        }[$1] || $1 + $1;
	        return edges ? {
	            ...toCSS(propertyPrefix + '-' + position(edges[0]) + propertySuffix, _),
	            ...toCSS(propertyPrefix + '-' + position(edges[1]) + propertySuffix, _)
	        } : toCSS(propertyPrefix + propertySuffix, _);
	    };
	}
	function filter(prefix = '') {
	    let filters = [
	        'blur',
	        'brightness',
	        'contrast',
	        'grayscale',
	        'hue-rotate',
	        'invert',
	        prefix && 'opacity',
	        'saturate',
	        'sepia',
	        !prefix && 'drop-shadow'
	    ].filter(Boolean), defaults = {};
	    // first create properties defaults
	    for (let key of filters)defaults[`--tw-${prefix}${key}`] = 'var(--tw-empty,/*!*/ /*!*/)';
	    return defaults = {
	        // move defaults
	        ...asDefaults(defaults),
	        // add default filter which allows standalone usage
	        [`${prefix}filter`]: filters.map((key)=>`var(--tw-${prefix}${key})`).join(' ')
	    }, [
	        `(${prefix}filter)-(none)`,
	        match(`${prefix}filter`, defaults),
	        ...filters.map((key)=>matchTheme(// hue-rotate can be negated
	            `${'h' == key[0] ? '-?' : ''}(${prefix}${key})(?:$|-)`, key, ({ 1: $1 , _  })=>({
	                    [`--tw-${$1}`]: asArray(_).map((value)=>`${key}(${value})`).join(' '),
	                    ...defaults
	                })))
	    ];
	}
	function transform({ 1: $1 , _  }) {
	    return {
	        ['--tw-' + $1]: _,
	        ...tranformDefaults()
	    };
	}
	function tranformDefaults() {
	    return {
	        ...asDefaults({
	            '--tw-translate-x': '0',
	            '--tw-translate-y': '0',
	            '--tw-rotate': '0',
	            '--tw-skew-x': '0',
	            '--tw-skew-y': '0',
	            '--tw-scale-x': '1',
	            '--tw-scale-y': '1',
	            '--tw-transform': transformValue()
	        }),
	        transform: 'var(--tw-transform)'
	    };
	}
	function transformValue(gpu) {
	    return [
	        gpu ? // -gpu
	        'translate3d(var(--tw-translate-x),var(--tw-translate-y),0)' : 'translateX(var(--tw-translate-x)) translateY(var(--tw-translate-y))',
	        'rotate(var(--tw-rotate))',
	        'skewX(var(--tw-skew-x))',
	        'skewY(var(--tw-skew-y))',
	        'scaleX(var(--tw-scale-x))',
	        'scaleY(var(--tw-scale-y))'
	    ].join(' ');
	}
	function span({ 1: $1 , 2: $2  }) {
	    return `${$1} ${$2} / ${$1} ${$2}`;
	}
	function gridTemplate({ 1: $1  }) {
	    return `repeat(${$1},minmax(0,1fr))`;
	}
	function asDefaults(props) {
	    return {
	        '@layer defaults': {
	            '*,::before,::after': props,
	            '::backdrop': props
	        }
	    };
	}

	// indirection wrapper to remove autocomplete functions from production bundles
	let variants = [
	    [
	        'sticky',
	        '@supports ((position: -webkit-sticky) or (position:sticky))'
	    ],
	    [
	        'motion-reduce',
	        '@media (prefers-reduced-motion:reduce)'
	    ],
	    [
	        'motion-safe',
	        '@media (prefers-reduced-motion:no-preference)'
	    ],
	    [
	        'print',
	        '@media print'
	    ],
	    [
	        '(portrait|landscape)',
	        ({ 1: $1  })=>`@media (orientation:${$1})`
	    ],
	    [
	        'contrast-(more|less)',
	        ({ 1: $1  })=>`@media (prefers-contrast:${$1})`
	    ],
	    [
	        '(first-(letter|line)|placeholder|backdrop|before|after)',
	        ({ 1: $1  })=>`&::${$1}`
	    ],
	    [
	        '(marker|selection)',
	        ({ 1: $1  })=>`& *::${$1},&::${$1}`
	    ],
	    [
	        'file',
	        '&::file-selector-button'
	    ],
	    [
	        '(first|last|only)',
	        ({ 1: $1  })=>`&:${$1}-child`
	    ],
	    [
	        'even',
	        '&:nth-child(2n)'
	    ],
	    [
	        'odd',
	        '&:nth-child(odd)'
	    ],
	    [
	        'open',
	        '&[open]'
	    ],
	    // All other pseudo classes are already supported by twind
	    [
	        '(aria|data)-',
	        ({ 1: $1 , /* aria or data */ $$  }, /* everything after the dash */ context)=>$$ && `&[${$1}-${// aria-asc or data-checked -> from theme
            context.theme($1, $$) || // aria-[...] or data-[...]
            arbitrary($$, '', context) || // default handling
            `${$$}="true"`}]`
	    ],
	    /* Styling based on parent and peer state */ // Groups classes like: group-focus and group-hover
	    // these need to add a marker selector with the pseudo class
	    // => '.group:focus .group-focus:selector'
	    [
	        '((group|peer)(~[^-[]+)?)(-\\[(.+)]|[-[].+?)(\\/.+)?',
	        ({ 2: type , 3: name = '' , 4: $4 , 5: $5 = '' , 6: label = name  }, { e , h , v  })=>{
	            let selector = normalize($5) || ('[' == $4[0] ? $4 : v($4.slice(1)));
	            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
	            return `${(selector.includes('&') ? selector : '&' + selector).replace(/&/g, `:merge(.${e(h(type + label))})`)}${'p' == type[0] ? '~' : ' '}&`;
	        }
	    ],
	    // direction variants
	    [
	        '(ltr|rtl)',
	        ({ 1: $1  })=>`[dir="${$1}"] &`
	    ],
	    [
	        'supports-',
	        ({ $$  }, /* everything after the dash */ context)=>{
	            $$ && ($$ = context.theme('supports', $$) || arbitrary($$, '', context));
	            if ($$) return $$.includes(':') || ($$ += ':var(--tw)'), /^\w*\s*\(/.test($$) || ($$ = `(${$$})`), // Chrome has a bug where `(condtion1)or(condition2)` is not valid
	            // But `(condition1) or (condition2)` is supported.
	            `@supports ${$$.replace(/\b(and|or|not)\b/g, ' $1 ').trim()}`;
	        }
	    ],
	    [
	        'max-',
	        ({ $$  }, context)=>{
	            $$ && ($$ = context.theme('screens', $$) || arbitrary($$, '', context));
	            if ('string' == typeof $$) return `@media not all and (min-width:${$$})`;
	        }
	    ],
	    [
	        'min-',
	        ({ $$  }, context)=>{
	            return $$ && ($$ = arbitrary($$, '', context)), $$ && `@media (min-width:${$$})`;
	        }
	    ],
	    // Arbitrary variants
	    [
	        /^\[(.+)]$/,
	        ({ 1: $1  })=>/[&@]/.test($1) && normalize($1).replace(/[}]+$/, '').split('{')
	    ]
	];

	/** Allows to disable to tailwind preflight (default: `false` eg include the tailwind preflight ) */ /**
	 * @experimental
	 */ function presetTailwindBase({ colors , disablePreflight  } = {}) {
	    return {
	        // allow other preflight to run
	        preflight: disablePreflight ? void 0 : preflight,
	        theme: {
	            ...theme,
	            colors: {
	                inherit: 'inherit',
	                current: 'currentColor',
	                transparent: 'transparent',
	                black: '#000',
	                white: '#fff',
	                ...colors
	            }
	        },
	        variants,
	        rules,
	        finalize (rule) {
	            return(// automatically add `content: ''` to before and after so you don’t have to specify it unless you want a different value
	            // ignore global, preflight, and auto added rules
	            rule.n && // only if there are declarations
	            rule.d && // and it has a ::before or ::after selector
	            rule.r.some((r)=>/^&::(before|after)$/.test(r)) && // there is no content property yet
	            !/(^|;)content:/.test(rule.d) ? {
	                ...rule,
	                d: 'content:var(--tw-content);' + rule.d
	            } : rule);
	        }
	    };
	}

	// Source from https://github.com/tailwindlabs/tailwindcss/blob/master/src/public/colors.js
	/**
	 * @module @twind/preset-tailwind/colors
	 */ let slate = {
	    50: '#f8fafc',
	    100: '#f1f5f9',
	    200: '#e2e8f0',
	    300: '#cbd5e1',
	    400: '#94a3b8',
	    500: '#64748b',
	    600: '#475569',
	    700: '#334155',
	    800: '#1e293b',
	    900: '#0f172a'
	}, gray = {
	    50: '#f9fafb',
	    100: '#f3f4f6',
	    200: '#e5e7eb',
	    300: '#d1d5db',
	    400: '#9ca3af',
	    500: '#6b7280',
	    600: '#4b5563',
	    700: '#374151',
	    800: '#1f2937',
	    900: '#111827'
	}, zinc = {
	    50: '#fafafa',
	    100: '#f4f4f5',
	    200: '#e4e4e7',
	    300: '#d4d4d8',
	    400: '#a1a1aa',
	    500: '#71717a',
	    600: '#52525b',
	    700: '#3f3f46',
	    800: '#27272a',
	    900: '#18181b'
	}, neutral = {
	    50: '#fafafa',
	    100: '#f5f5f5',
	    200: '#e5e5e5',
	    300: '#d4d4d4',
	    400: '#a3a3a3',
	    500: '#737373',
	    600: '#525252',
	    700: '#404040',
	    800: '#262626',
	    900: '#171717'
	}, stone = {
	    50: '#fafaf9',
	    100: '#f5f5f4',
	    200: '#e7e5e4',
	    300: '#d6d3d1',
	    400: '#a8a29e',
	    500: '#78716c',
	    600: '#57534e',
	    700: '#44403c',
	    800: '#292524',
	    900: '#1c1917'
	}, red = {
	    50: '#fef2f2',
	    100: '#fee2e2',
	    200: '#fecaca',
	    300: '#fca5a5',
	    400: '#f87171',
	    500: '#ef4444',
	    600: '#dc2626',
	    700: '#b91c1c',
	    800: '#991b1b',
	    900: '#7f1d1d'
	}, orange = {
	    50: '#fff7ed',
	    100: '#ffedd5',
	    200: '#fed7aa',
	    300: '#fdba74',
	    400: '#fb923c',
	    500: '#f97316',
	    600: '#ea580c',
	    700: '#c2410c',
	    800: '#9a3412',
	    900: '#7c2d12'
	}, amber = {
	    50: '#fffbeb',
	    100: '#fef3c7',
	    200: '#fde68a',
	    300: '#fcd34d',
	    400: '#fbbf24',
	    500: '#f59e0b',
	    600: '#d97706',
	    700: '#b45309',
	    800: '#92400e',
	    900: '#78350f'
	}, yellow = {
	    50: '#fefce8',
	    100: '#fef9c3',
	    200: '#fef08a',
	    300: '#fde047',
	    400: '#facc15',
	    500: '#eab308',
	    600: '#ca8a04',
	    700: '#a16207',
	    800: '#854d0e',
	    900: '#713f12'
	}, lime = {
	    50: '#f7fee7',
	    100: '#ecfccb',
	    200: '#d9f99d',
	    300: '#bef264',
	    400: '#a3e635',
	    500: '#84cc16',
	    600: '#65a30d',
	    700: '#4d7c0f',
	    800: '#3f6212',
	    900: '#365314'
	}, green = {
	    50: '#f0fdf4',
	    100: '#dcfce7',
	    200: '#bbf7d0',
	    300: '#86efac',
	    400: '#4ade80',
	    500: '#22c55e',
	    600: '#16a34a',
	    700: '#15803d',
	    800: '#166534',
	    900: '#14532d'
	}, emerald = {
	    50: '#ecfdf5',
	    100: '#d1fae5',
	    200: '#a7f3d0',
	    300: '#6ee7b7',
	    400: '#34d399',
	    500: '#10b981',
	    600: '#059669',
	    700: '#047857',
	    800: '#065f46',
	    900: '#064e3b'
	}, teal = {
	    50: '#f0fdfa',
	    100: '#ccfbf1',
	    200: '#99f6e4',
	    300: '#5eead4',
	    400: '#2dd4bf',
	    500: '#14b8a6',
	    600: '#0d9488',
	    700: '#0f766e',
	    800: '#115e59',
	    900: '#134e4a'
	}, cyan = {
	    50: '#ecfeff',
	    100: '#cffafe',
	    200: '#a5f3fc',
	    300: '#67e8f9',
	    400: '#22d3ee',
	    500: '#06b6d4',
	    600: '#0891b2',
	    700: '#0e7490',
	    800: '#155e75',
	    900: '#164e63'
	}, sky = {
	    50: '#f0f9ff',
	    100: '#e0f2fe',
	    200: '#bae6fd',
	    300: '#7dd3fc',
	    400: '#38bdf8',
	    500: '#0ea5e9',
	    600: '#0284c7',
	    700: '#0369a1',
	    800: '#075985',
	    900: '#0c4a6e'
	}, blue = {
	    50: '#eff6ff',
	    100: '#dbeafe',
	    200: '#bfdbfe',
	    300: '#93c5fd',
	    400: '#60a5fa',
	    500: '#3b82f6',
	    600: '#2563eb',
	    700: '#1d4ed8',
	    800: '#1e40af',
	    900: '#1e3a8a'
	}, indigo = {
	    50: '#eef2ff',
	    100: '#e0e7ff',
	    200: '#c7d2fe',
	    300: '#a5b4fc',
	    400: '#818cf8',
	    500: '#6366f1',
	    600: '#4f46e5',
	    700: '#4338ca',
	    800: '#3730a3',
	    900: '#312e81'
	}, violet = {
	    50: '#f5f3ff',
	    100: '#ede9fe',
	    200: '#ddd6fe',
	    300: '#c4b5fd',
	    400: '#a78bfa',
	    500: '#8b5cf6',
	    600: '#7c3aed',
	    700: '#6d28d9',
	    800: '#5b21b6',
	    900: '#4c1d95'
	}, purple = {
	    50: '#faf5ff',
	    100: '#f3e8ff',
	    200: '#e9d5ff',
	    300: '#d8b4fe',
	    400: '#c084fc',
	    500: '#a855f7',
	    600: '#9333ea',
	    700: '#7e22ce',
	    800: '#6b21a8',
	    900: '#581c87'
	}, fuchsia = {
	    50: '#fdf4ff',
	    100: '#fae8ff',
	    200: '#f5d0fe',
	    300: '#f0abfc',
	    400: '#e879f9',
	    500: '#d946ef',
	    600: '#c026d3',
	    700: '#a21caf',
	    800: '#86198f',
	    900: '#701a75'
	}, pink = {
	    50: '#fdf2f8',
	    100: '#fce7f3',
	    200: '#fbcfe8',
	    300: '#f9a8d4',
	    400: '#f472b6',
	    500: '#ec4899',
	    600: '#db2777',
	    700: '#be185d',
	    800: '#9d174d',
	    900: '#831843'
	}, rose = {
	    50: '#fff1f2',
	    100: '#ffe4e6',
	    200: '#fecdd3',
	    300: '#fda4af',
	    400: '#fb7185',
	    500: '#f43f5e',
	    600: '#e11d48',
	    700: '#be123c',
	    800: '#9f1239',
	    900: '#881337'
	}, // get lightBlue() {
	//   warn({ version: 'v2.2', from: 'lightBlue', to: 'sky' })
	//   return this.sky
	// }
	// get warmGray() {
	//   warn({ version: 'v3.0', from: 'warmGray', to: 'stone' })
	//   return this.stone
	// }
	// get trueGray() {
	//   warn({ version: 'v3.0', from: 'trueGray', to: 'neutral' })
	//   return this.neutral
	// }
	// get coolGray() {
	//   warn({ version: 'v3.0', from: 'coolGray', to: 'gray' })
	//   return this.gray
	// }
	// get blueGray() {
	//   warn({ version: 'v3.0', from: 'blueGray', to: 'slate' })
	//   return this.slate
	// }
	colors = {
	    __proto__: null,
	    slate,
	    gray,
	    zinc,
	    neutral,
	    stone,
	    red,
	    orange,
	    amber,
	    yellow,
	    lime,
	    green,
	    emerald,
	    teal,
	    cyan,
	    sky,
	    blue,
	    indigo,
	    violet,
	    purple,
	    fuchsia,
	    pink,
	    rose
	};

	/** Allows to disable to tailwind preflight (default: `false` eg include the tailwind preflight ) */ function presetTailwind({ disablePreflight  } = {}) {
	    return presetTailwindBase({
	        colors,
	        disablePreflight
	    });
	}

	var defaultTheme$1 = {};

	var cloneDeep = {};

	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "cloneDeep", {
		    enumerable: true,
		    get: function() {
		        return cloneDeep;
		    }
		});
		function cloneDeep(value) {
		    if (Array.isArray(value)) {
		        return value.map((child)=>cloneDeep(child));
		    }
		    if (typeof value === "object" && value !== null) {
		        return Object.fromEntries(Object.entries(value).map(([k, v])=>[
		                k,
		                cloneDeep(v)
		            ]));
		    }
		    return value;
		} 
	} (cloneDeep));

	var config_full = {
	  content: [],
	  presets: [],
	  darkMode: 'media', // or 'class'
	  theme: {
	    accentColor: ({ theme }) => ({
	      ...theme('colors'),
	      auto: 'auto',
	    }),
	    animation: {
	      none: 'none',
	      spin: 'spin 1s linear infinite',
	      ping: 'ping 1s cubic-bezier(0, 0, 0.2, 1) infinite',
	      pulse: 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',
	      bounce: 'bounce 1s infinite',
	    },
	    aria: {
	      busy: 'busy="true"',
	      checked: 'checked="true"',
	      disabled: 'disabled="true"',
	      expanded: 'expanded="true"',
	      hidden: 'hidden="true"',
	      pressed: 'pressed="true"',
	      readonly: 'readonly="true"',
	      required: 'required="true"',
	      selected: 'selected="true"',
	    },
	    aspectRatio: {
	      auto: 'auto',
	      square: '1 / 1',
	      video: '16 / 9',
	    },
	    backdropBlur: ({ theme }) => theme('blur'),
	    backdropBrightness: ({ theme }) => theme('brightness'),
	    backdropContrast: ({ theme }) => theme('contrast'),
	    backdropGrayscale: ({ theme }) => theme('grayscale'),
	    backdropHueRotate: ({ theme }) => theme('hueRotate'),
	    backdropInvert: ({ theme }) => theme('invert'),
	    backdropOpacity: ({ theme }) => theme('opacity'),
	    backdropSaturate: ({ theme }) => theme('saturate'),
	    backdropSepia: ({ theme }) => theme('sepia'),
	    backgroundColor: ({ theme }) => theme('colors'),
	    backgroundImage: {
	      none: 'none',
	      'gradient-to-t': 'linear-gradient(to top, var(--tw-gradient-stops))',
	      'gradient-to-tr': 'linear-gradient(to top right, var(--tw-gradient-stops))',
	      'gradient-to-r': 'linear-gradient(to right, var(--tw-gradient-stops))',
	      'gradient-to-br': 'linear-gradient(to bottom right, var(--tw-gradient-stops))',
	      'gradient-to-b': 'linear-gradient(to bottom, var(--tw-gradient-stops))',
	      'gradient-to-bl': 'linear-gradient(to bottom left, var(--tw-gradient-stops))',
	      'gradient-to-l': 'linear-gradient(to left, var(--tw-gradient-stops))',
	      'gradient-to-tl': 'linear-gradient(to top left, var(--tw-gradient-stops))',
	    },
	    backgroundOpacity: ({ theme }) => theme('opacity'),
	    backgroundPosition: {
	      bottom: 'bottom',
	      center: 'center',
	      left: 'left',
	      'left-bottom': 'left bottom',
	      'left-top': 'left top',
	      right: 'right',
	      'right-bottom': 'right bottom',
	      'right-top': 'right top',
	      top: 'top',
	    },
	    backgroundSize: {
	      auto: 'auto',
	      cover: 'cover',
	      contain: 'contain',
	    },
	    blur: {
	      0: '0',
	      none: '0',
	      sm: '4px',
	      DEFAULT: '8px',
	      md: '12px',
	      lg: '16px',
	      xl: '24px',
	      '2xl': '40px',
	      '3xl': '64px',
	    },
	    borderColor: ({ theme }) => ({
	      ...theme('colors'),
	      DEFAULT: theme('colors.gray.200', 'currentColor'),
	    }),
	    borderOpacity: ({ theme }) => theme('opacity'),
	    borderRadius: {
	      none: '0px',
	      sm: '0.125rem',
	      DEFAULT: '0.25rem',
	      md: '0.375rem',
	      lg: '0.5rem',
	      xl: '0.75rem',
	      '2xl': '1rem',
	      '3xl': '1.5rem',
	      full: '9999px',
	    },
	    borderSpacing: ({ theme }) => ({
	      ...theme('spacing'),
	    }),
	    borderWidth: {
	      DEFAULT: '1px',
	      0: '0px',
	      2: '2px',
	      4: '4px',
	      8: '8px',
	    },
	    boxShadow: {
	      sm: '0 1px 2px 0 rgb(0 0 0 / 0.05)',
	      DEFAULT: '0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)',
	      md: '0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)',
	      lg: '0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)',
	      xl: '0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)',
	      '2xl': '0 25px 50px -12px rgb(0 0 0 / 0.25)',
	      inner: 'inset 0 2px 4px 0 rgb(0 0 0 / 0.05)',
	      none: 'none',
	    },
	    boxShadowColor: ({ theme }) => theme('colors'),
	    brightness: {
	      0: '0',
	      50: '.5',
	      75: '.75',
	      90: '.9',
	      95: '.95',
	      100: '1',
	      105: '1.05',
	      110: '1.1',
	      125: '1.25',
	      150: '1.5',
	      200: '2',
	    },
	    caretColor: ({ theme }) => theme('colors'),
	    colors: ({ colors }) => ({
	      inherit: colors.inherit,
	      current: colors.current,
	      transparent: colors.transparent,
	      black: colors.black,
	      white: colors.white,
	      slate: colors.slate,
	      gray: colors.gray,
	      zinc: colors.zinc,
	      neutral: colors.neutral,
	      stone: colors.stone,
	      red: colors.red,
	      orange: colors.orange,
	      amber: colors.amber,
	      yellow: colors.yellow,
	      lime: colors.lime,
	      green: colors.green,
	      emerald: colors.emerald,
	      teal: colors.teal,
	      cyan: colors.cyan,
	      sky: colors.sky,
	      blue: colors.blue,
	      indigo: colors.indigo,
	      violet: colors.violet,
	      purple: colors.purple,
	      fuchsia: colors.fuchsia,
	      pink: colors.pink,
	      rose: colors.rose,
	    }),
	    columns: {
	      auto: 'auto',
	      1: '1',
	      2: '2',
	      3: '3',
	      4: '4',
	      5: '5',
	      6: '6',
	      7: '7',
	      8: '8',
	      9: '9',
	      10: '10',
	      11: '11',
	      12: '12',
	      '3xs': '16rem',
	      '2xs': '18rem',
	      xs: '20rem',
	      sm: '24rem',
	      md: '28rem',
	      lg: '32rem',
	      xl: '36rem',
	      '2xl': '42rem',
	      '3xl': '48rem',
	      '4xl': '56rem',
	      '5xl': '64rem',
	      '6xl': '72rem',
	      '7xl': '80rem',
	    },
	    container: {},
	    content: {
	      none: 'none',
	    },
	    contrast: {
	      0: '0',
	      50: '.5',
	      75: '.75',
	      100: '1',
	      125: '1.25',
	      150: '1.5',
	      200: '2',
	    },
	    cursor: {
	      auto: 'auto',
	      default: 'default',
	      pointer: 'pointer',
	      wait: 'wait',
	      text: 'text',
	      move: 'move',
	      help: 'help',
	      'not-allowed': 'not-allowed',
	      none: 'none',
	      'context-menu': 'context-menu',
	      progress: 'progress',
	      cell: 'cell',
	      crosshair: 'crosshair',
	      'vertical-text': 'vertical-text',
	      alias: 'alias',
	      copy: 'copy',
	      'no-drop': 'no-drop',
	      grab: 'grab',
	      grabbing: 'grabbing',
	      'all-scroll': 'all-scroll',
	      'col-resize': 'col-resize',
	      'row-resize': 'row-resize',
	      'n-resize': 'n-resize',
	      'e-resize': 'e-resize',
	      's-resize': 's-resize',
	      'w-resize': 'w-resize',
	      'ne-resize': 'ne-resize',
	      'nw-resize': 'nw-resize',
	      'se-resize': 'se-resize',
	      'sw-resize': 'sw-resize',
	      'ew-resize': 'ew-resize',
	      'ns-resize': 'ns-resize',
	      'nesw-resize': 'nesw-resize',
	      'nwse-resize': 'nwse-resize',
	      'zoom-in': 'zoom-in',
	      'zoom-out': 'zoom-out',
	    },
	    divideColor: ({ theme }) => theme('borderColor'),
	    divideOpacity: ({ theme }) => theme('borderOpacity'),
	    divideWidth: ({ theme }) => theme('borderWidth'),
	    dropShadow: {
	      sm: '0 1px 1px rgb(0 0 0 / 0.05)',
	      DEFAULT: ['0 1px 2px rgb(0 0 0 / 0.1)', '0 1px 1px rgb(0 0 0 / 0.06)'],
	      md: ['0 4px 3px rgb(0 0 0 / 0.07)', '0 2px 2px rgb(0 0 0 / 0.06)'],
	      lg: ['0 10px 8px rgb(0 0 0 / 0.04)', '0 4px 3px rgb(0 0 0 / 0.1)'],
	      xl: ['0 20px 13px rgb(0 0 0 / 0.03)', '0 8px 5px rgb(0 0 0 / 0.08)'],
	      '2xl': '0 25px 25px rgb(0 0 0 / 0.15)',
	      none: '0 0 #0000',
	    },
	    fill: ({ theme }) => ({
	      none: 'none',
	      ...theme('colors'),
	    }),
	    flex: {
	      1: '1 1 0%',
	      auto: '1 1 auto',
	      initial: '0 1 auto',
	      none: 'none',
	    },
	    flexBasis: ({ theme }) => ({
	      auto: 'auto',
	      ...theme('spacing'),
	      '1/2': '50%',
	      '1/3': '33.333333%',
	      '2/3': '66.666667%',
	      '1/4': '25%',
	      '2/4': '50%',
	      '3/4': '75%',
	      '1/5': '20%',
	      '2/5': '40%',
	      '3/5': '60%',
	      '4/5': '80%',
	      '1/6': '16.666667%',
	      '2/6': '33.333333%',
	      '3/6': '50%',
	      '4/6': '66.666667%',
	      '5/6': '83.333333%',
	      '1/12': '8.333333%',
	      '2/12': '16.666667%',
	      '3/12': '25%',
	      '4/12': '33.333333%',
	      '5/12': '41.666667%',
	      '6/12': '50%',
	      '7/12': '58.333333%',
	      '8/12': '66.666667%',
	      '9/12': '75%',
	      '10/12': '83.333333%',
	      '11/12': '91.666667%',
	      full: '100%',
	    }),
	    flexGrow: {
	      0: '0',
	      DEFAULT: '1',
	    },
	    flexShrink: {
	      0: '0',
	      DEFAULT: '1',
	    },
	    fontFamily: {
	      sans: [
	        'ui-sans-serif',
	        'system-ui',
	        'sans-serif',
	        '"Apple Color Emoji"',
	        '"Segoe UI Emoji"',
	        '"Segoe UI Symbol"',
	        '"Noto Color Emoji"',
	      ],
	      serif: ['ui-serif', 'Georgia', 'Cambria', '"Times New Roman"', 'Times', 'serif'],
	      mono: [
	        'ui-monospace',
	        'SFMono-Regular',
	        'Menlo',
	        'Monaco',
	        'Consolas',
	        '"Liberation Mono"',
	        '"Courier New"',
	        'monospace',
	      ],
	    },
	    fontSize: {
	      xs: ['0.75rem', { lineHeight: '1rem' }],
	      sm: ['0.875rem', { lineHeight: '1.25rem' }],
	      base: ['1rem', { lineHeight: '1.5rem' }],
	      lg: ['1.125rem', { lineHeight: '1.75rem' }],
	      xl: ['1.25rem', { lineHeight: '1.75rem' }],
	      '2xl': ['1.5rem', { lineHeight: '2rem' }],
	      '3xl': ['1.875rem', { lineHeight: '2.25rem' }],
	      '4xl': ['2.25rem', { lineHeight: '2.5rem' }],
	      '5xl': ['3rem', { lineHeight: '1' }],
	      '6xl': ['3.75rem', { lineHeight: '1' }],
	      '7xl': ['4.5rem', { lineHeight: '1' }],
	      '8xl': ['6rem', { lineHeight: '1' }],
	      '9xl': ['8rem', { lineHeight: '1' }],
	    },
	    fontWeight: {
	      thin: '100',
	      extralight: '200',
	      light: '300',
	      normal: '400',
	      medium: '500',
	      semibold: '600',
	      bold: '700',
	      extrabold: '800',
	      black: '900',
	    },
	    gap: ({ theme }) => theme('spacing'),
	    gradientColorStops: ({ theme }) => theme('colors'),
	    gradientColorStopPositions: {
	      '0%': '0%',
	      '5%': '5%',
	      '10%': '10%',
	      '15%': '15%',
	      '20%': '20%',
	      '25%': '25%',
	      '30%': '30%',
	      '35%': '35%',
	      '40%': '40%',
	      '45%': '45%',
	      '50%': '50%',
	      '55%': '55%',
	      '60%': '60%',
	      '65%': '65%',
	      '70%': '70%',
	      '75%': '75%',
	      '80%': '80%',
	      '85%': '85%',
	      '90%': '90%',
	      '95%': '95%',
	      '100%': '100%',
	    },
	    grayscale: {
	      0: '0',
	      DEFAULT: '100%',
	    },
	    gridAutoColumns: {
	      auto: 'auto',
	      min: 'min-content',
	      max: 'max-content',
	      fr: 'minmax(0, 1fr)',
	    },
	    gridAutoRows: {
	      auto: 'auto',
	      min: 'min-content',
	      max: 'max-content',
	      fr: 'minmax(0, 1fr)',
	    },
	    gridColumn: {
	      auto: 'auto',
	      'span-1': 'span 1 / span 1',
	      'span-2': 'span 2 / span 2',
	      'span-3': 'span 3 / span 3',
	      'span-4': 'span 4 / span 4',
	      'span-5': 'span 5 / span 5',
	      'span-6': 'span 6 / span 6',
	      'span-7': 'span 7 / span 7',
	      'span-8': 'span 8 / span 8',
	      'span-9': 'span 9 / span 9',
	      'span-10': 'span 10 / span 10',
	      'span-11': 'span 11 / span 11',
	      'span-12': 'span 12 / span 12',
	      'span-full': '1 / -1',
	    },
	    gridColumnEnd: {
	      auto: 'auto',
	      1: '1',
	      2: '2',
	      3: '3',
	      4: '4',
	      5: '5',
	      6: '6',
	      7: '7',
	      8: '8',
	      9: '9',
	      10: '10',
	      11: '11',
	      12: '12',
	      13: '13',
	    },
	    gridColumnStart: {
	      auto: 'auto',
	      1: '1',
	      2: '2',
	      3: '3',
	      4: '4',
	      5: '5',
	      6: '6',
	      7: '7',
	      8: '8',
	      9: '9',
	      10: '10',
	      11: '11',
	      12: '12',
	      13: '13',
	    },
	    gridRow: {
	      auto: 'auto',
	      'span-1': 'span 1 / span 1',
	      'span-2': 'span 2 / span 2',
	      'span-3': 'span 3 / span 3',
	      'span-4': 'span 4 / span 4',
	      'span-5': 'span 5 / span 5',
	      'span-6': 'span 6 / span 6',
	      'span-7': 'span 7 / span 7',
	      'span-8': 'span 8 / span 8',
	      'span-9': 'span 9 / span 9',
	      'span-10': 'span 10 / span 10',
	      'span-11': 'span 11 / span 11',
	      'span-12': 'span 12 / span 12',
	      'span-full': '1 / -1',
	    },
	    gridRowEnd: {
	      auto: 'auto',
	      1: '1',
	      2: '2',
	      3: '3',
	      4: '4',
	      5: '5',
	      6: '6',
	      7: '7',
	      8: '8',
	      9: '9',
	      10: '10',
	      11: '11',
	      12: '12',
	      13: '13',
	    },
	    gridRowStart: {
	      auto: 'auto',
	      1: '1',
	      2: '2',
	      3: '3',
	      4: '4',
	      5: '5',
	      6: '6',
	      7: '7',
	      8: '8',
	      9: '9',
	      10: '10',
	      11: '11',
	      12: '12',
	      13: '13',
	    },
	    gridTemplateColumns: {
	      none: 'none',
	      subgrid: 'subgrid',
	      1: 'repeat(1, minmax(0, 1fr))',
	      2: 'repeat(2, minmax(0, 1fr))',
	      3: 'repeat(3, minmax(0, 1fr))',
	      4: 'repeat(4, minmax(0, 1fr))',
	      5: 'repeat(5, minmax(0, 1fr))',
	      6: 'repeat(6, minmax(0, 1fr))',
	      7: 'repeat(7, minmax(0, 1fr))',
	      8: 'repeat(8, minmax(0, 1fr))',
	      9: 'repeat(9, minmax(0, 1fr))',
	      10: 'repeat(10, minmax(0, 1fr))',
	      11: 'repeat(11, minmax(0, 1fr))',
	      12: 'repeat(12, minmax(0, 1fr))',
	    },
	    gridTemplateRows: {
	      none: 'none',
	      subgrid: 'subgrid',
	      1: 'repeat(1, minmax(0, 1fr))',
	      2: 'repeat(2, minmax(0, 1fr))',
	      3: 'repeat(3, minmax(0, 1fr))',
	      4: 'repeat(4, minmax(0, 1fr))',
	      5: 'repeat(5, minmax(0, 1fr))',
	      6: 'repeat(6, minmax(0, 1fr))',
	      7: 'repeat(7, minmax(0, 1fr))',
	      8: 'repeat(8, minmax(0, 1fr))',
	      9: 'repeat(9, minmax(0, 1fr))',
	      10: 'repeat(10, minmax(0, 1fr))',
	      11: 'repeat(11, minmax(0, 1fr))',
	      12: 'repeat(12, minmax(0, 1fr))',
	    },
	    height: ({ theme }) => ({
	      auto: 'auto',
	      ...theme('spacing'),
	      '1/2': '50%',
	      '1/3': '33.333333%',
	      '2/3': '66.666667%',
	      '1/4': '25%',
	      '2/4': '50%',
	      '3/4': '75%',
	      '1/5': '20%',
	      '2/5': '40%',
	      '3/5': '60%',
	      '4/5': '80%',
	      '1/6': '16.666667%',
	      '2/6': '33.333333%',
	      '3/6': '50%',
	      '4/6': '66.666667%',
	      '5/6': '83.333333%',
	      full: '100%',
	      screen: '100vh',
	      svh: '100svh',
	      lvh: '100lvh',
	      dvh: '100dvh',
	      min: 'min-content',
	      max: 'max-content',
	      fit: 'fit-content',
	    }),
	    hueRotate: {
	      0: '0deg',
	      15: '15deg',
	      30: '30deg',
	      60: '60deg',
	      90: '90deg',
	      180: '180deg',
	    },
	    inset: ({ theme }) => ({
	      auto: 'auto',
	      ...theme('spacing'),
	      '1/2': '50%',
	      '1/3': '33.333333%',
	      '2/3': '66.666667%',
	      '1/4': '25%',
	      '2/4': '50%',
	      '3/4': '75%',
	      full: '100%',
	    }),
	    invert: {
	      0: '0',
	      DEFAULT: '100%',
	    },
	    keyframes: {
	      spin: {
	        to: {
	          transform: 'rotate(360deg)',
	        },
	      },
	      ping: {
	        '75%, 100%': {
	          transform: 'scale(2)',
	          opacity: '0',
	        },
	      },
	      pulse: {
	        '50%': {
	          opacity: '.5',
	        },
	      },
	      bounce: {
	        '0%, 100%': {
	          transform: 'translateY(-25%)',
	          animationTimingFunction: 'cubic-bezier(0.8,0,1,1)',
	        },
	        '50%': {
	          transform: 'none',
	          animationTimingFunction: 'cubic-bezier(0,0,0.2,1)',
	        },
	      },
	    },
	    letterSpacing: {
	      tighter: '-0.05em',
	      tight: '-0.025em',
	      normal: '0em',
	      wide: '0.025em',
	      wider: '0.05em',
	      widest: '0.1em',
	    },
	    lineHeight: {
	      none: '1',
	      tight: '1.25',
	      snug: '1.375',
	      normal: '1.5',
	      relaxed: '1.625',
	      loose: '2',
	      3: '.75rem',
	      4: '1rem',
	      5: '1.25rem',
	      6: '1.5rem',
	      7: '1.75rem',
	      8: '2rem',
	      9: '2.25rem',
	      10: '2.5rem',
	    },
	    listStyleType: {
	      none: 'none',
	      disc: 'disc',
	      decimal: 'decimal',
	    },
	    listStyleImage: {
	      none: 'none',
	    },
	    margin: ({ theme }) => ({
	      auto: 'auto',
	      ...theme('spacing'),
	    }),
	    lineClamp: {
	      1: '1',
	      2: '2',
	      3: '3',
	      4: '4',
	      5: '5',
	      6: '6',
	    },
	    maxHeight: ({ theme }) => ({
	      ...theme('spacing'),
	      none: 'none',
	      full: '100%',
	      screen: '100vh',
	      svh: '100svh',
	      lvh: '100lvh',
	      dvh: '100dvh',
	      min: 'min-content',
	      max: 'max-content',
	      fit: 'fit-content',
	    }),
	    maxWidth: ({ theme, breakpoints }) => ({
	      ...theme('spacing'),
	      none: 'none',
	      xs: '20rem',
	      sm: '24rem',
	      md: '28rem',
	      lg: '32rem',
	      xl: '36rem',
	      '2xl': '42rem',
	      '3xl': '48rem',
	      '4xl': '56rem',
	      '5xl': '64rem',
	      '6xl': '72rem',
	      '7xl': '80rem',
	      full: '100%',
	      min: 'min-content',
	      max: 'max-content',
	      fit: 'fit-content',
	      prose: '65ch',
	      ...breakpoints(theme('screens')),
	    }),
	    minHeight: ({ theme }) => ({
	      ...theme('spacing'),
	      full: '100%',
	      screen: '100vh',
	      svh: '100svh',
	      lvh: '100lvh',
	      dvh: '100dvh',
	      min: 'min-content',
	      max: 'max-content',
	      fit: 'fit-content',
	    }),
	    minWidth: ({ theme }) => ({
	      ...theme('spacing'),
	      full: '100%',
	      min: 'min-content',
	      max: 'max-content',
	      fit: 'fit-content',
	    }),
	    objectPosition: {
	      bottom: 'bottom',
	      center: 'center',
	      left: 'left',
	      'left-bottom': 'left bottom',
	      'left-top': 'left top',
	      right: 'right',
	      'right-bottom': 'right bottom',
	      'right-top': 'right top',
	      top: 'top',
	    },
	    opacity: {
	      0: '0',
	      5: '0.05',
	      10: '0.1',
	      15: '0.15',
	      20: '0.2',
	      25: '0.25',
	      30: '0.3',
	      35: '0.35',
	      40: '0.4',
	      45: '0.45',
	      50: '0.5',
	      55: '0.55',
	      60: '0.6',
	      65: '0.65',
	      70: '0.7',
	      75: '0.75',
	      80: '0.8',
	      85: '0.85',
	      90: '0.9',
	      95: '0.95',
	      100: '1',
	    },
	    order: {
	      first: '-9999',
	      last: '9999',
	      none: '0',
	      1: '1',
	      2: '2',
	      3: '3',
	      4: '4',
	      5: '5',
	      6: '6',
	      7: '7',
	      8: '8',
	      9: '9',
	      10: '10',
	      11: '11',
	      12: '12',
	    },
	    outlineColor: ({ theme }) => theme('colors'),
	    outlineOffset: {
	      0: '0px',
	      1: '1px',
	      2: '2px',
	      4: '4px',
	      8: '8px',
	    },
	    outlineWidth: {
	      0: '0px',
	      1: '1px',
	      2: '2px',
	      4: '4px',
	      8: '8px',
	    },
	    padding: ({ theme }) => theme('spacing'),
	    placeholderColor: ({ theme }) => theme('colors'),
	    placeholderOpacity: ({ theme }) => theme('opacity'),
	    ringColor: ({ theme }) => ({
	      DEFAULT: theme('colors.blue.500', '#3b82f6'),
	      ...theme('colors'),
	    }),
	    ringOffsetColor: ({ theme }) => theme('colors'),
	    ringOffsetWidth: {
	      0: '0px',
	      1: '1px',
	      2: '2px',
	      4: '4px',
	      8: '8px',
	    },
	    ringOpacity: ({ theme }) => ({
	      DEFAULT: '0.5',
	      ...theme('opacity'),
	    }),
	    ringWidth: {
	      DEFAULT: '3px',
	      0: '0px',
	      1: '1px',
	      2: '2px',
	      4: '4px',
	      8: '8px',
	    },
	    rotate: {
	      0: '0deg',
	      1: '1deg',
	      2: '2deg',
	      3: '3deg',
	      6: '6deg',
	      12: '12deg',
	      45: '45deg',
	      90: '90deg',
	      180: '180deg',
	    },
	    saturate: {
	      0: '0',
	      50: '.5',
	      100: '1',
	      150: '1.5',
	      200: '2',
	    },
	    scale: {
	      0: '0',
	      50: '.5',
	      75: '.75',
	      90: '.9',
	      95: '.95',
	      100: '1',
	      105: '1.05',
	      110: '1.1',
	      125: '1.25',
	      150: '1.5',
	    },
	    screens: {
	      sm: '640px',
	      md: '768px',
	      lg: '1024px',
	      xl: '1280px',
	      '2xl': '1536px',
	    },
	    scrollMargin: ({ theme }) => ({
	      ...theme('spacing'),
	    }),
	    scrollPadding: ({ theme }) => theme('spacing'),
	    sepia: {
	      0: '0',
	      DEFAULT: '100%',
	    },
	    skew: {
	      0: '0deg',
	      1: '1deg',
	      2: '2deg',
	      3: '3deg',
	      6: '6deg',
	      12: '12deg',
	    },
	    space: ({ theme }) => ({
	      ...theme('spacing'),
	    }),
	    spacing: {
	      px: '1px',
	      0: '0px',
	      0.5: '0.125rem',
	      1: '0.25rem',
	      1.5: '0.375rem',
	      2: '0.5rem',
	      2.5: '0.625rem',
	      3: '0.75rem',
	      3.5: '0.875rem',
	      4: '1rem',
	      5: '1.25rem',
	      6: '1.5rem',
	      7: '1.75rem',
	      8: '2rem',
	      9: '2.25rem',
	      10: '2.5rem',
	      11: '2.75rem',
	      12: '3rem',
	      14: '3.5rem',
	      16: '4rem',
	      20: '5rem',
	      24: '6rem',
	      28: '7rem',
	      32: '8rem',
	      36: '9rem',
	      40: '10rem',
	      44: '11rem',
	      48: '12rem',
	      52: '13rem',
	      56: '14rem',
	      60: '15rem',
	      64: '16rem',
	      72: '18rem',
	      80: '20rem',
	      96: '24rem',
	    },
	    stroke: ({ theme }) => ({
	      none: 'none',
	      ...theme('colors'),
	    }),
	    strokeWidth: {
	      0: '0',
	      1: '1',
	      2: '2',
	    },
	    supports: {},
	    data: {},
	    textColor: ({ theme }) => theme('colors'),
	    textDecorationColor: ({ theme }) => theme('colors'),
	    textDecorationThickness: {
	      auto: 'auto',
	      'from-font': 'from-font',
	      0: '0px',
	      1: '1px',
	      2: '2px',
	      4: '4px',
	      8: '8px',
	    },
	    textIndent: ({ theme }) => ({
	      ...theme('spacing'),
	    }),
	    textOpacity: ({ theme }) => theme('opacity'),
	    textUnderlineOffset: {
	      auto: 'auto',
	      0: '0px',
	      1: '1px',
	      2: '2px',
	      4: '4px',
	      8: '8px',
	    },
	    transformOrigin: {
	      center: 'center',
	      top: 'top',
	      'top-right': 'top right',
	      right: 'right',
	      'bottom-right': 'bottom right',
	      bottom: 'bottom',
	      'bottom-left': 'bottom left',
	      left: 'left',
	      'top-left': 'top left',
	    },
	    transitionDelay: {
	      0: '0s',
	      75: '75ms',
	      100: '100ms',
	      150: '150ms',
	      200: '200ms',
	      300: '300ms',
	      500: '500ms',
	      700: '700ms',
	      1000: '1000ms',
	    },
	    transitionDuration: {
	      DEFAULT: '150ms',
	      0: '0s',
	      75: '75ms',
	      100: '100ms',
	      150: '150ms',
	      200: '200ms',
	      300: '300ms',
	      500: '500ms',
	      700: '700ms',
	      1000: '1000ms',
	    },
	    transitionProperty: {
	      none: 'none',
	      all: 'all',
	      DEFAULT:
	        'color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter',
	      colors: 'color, background-color, border-color, text-decoration-color, fill, stroke',
	      opacity: 'opacity',
	      shadow: 'box-shadow',
	      transform: 'transform',
	    },
	    transitionTimingFunction: {
	      DEFAULT: 'cubic-bezier(0.4, 0, 0.2, 1)',
	      linear: 'linear',
	      in: 'cubic-bezier(0.4, 0, 1, 1)',
	      out: 'cubic-bezier(0, 0, 0.2, 1)',
	      'in-out': 'cubic-bezier(0.4, 0, 0.2, 1)',
	    },
	    translate: ({ theme }) => ({
	      ...theme('spacing'),
	      '1/2': '50%',
	      '1/3': '33.333333%',
	      '2/3': '66.666667%',
	      '1/4': '25%',
	      '2/4': '50%',
	      '3/4': '75%',
	      full: '100%',
	    }),
	    size: ({ theme }) => ({
	      auto: 'auto',
	      ...theme('spacing'),
	      '1/2': '50%',
	      '1/3': '33.333333%',
	      '2/3': '66.666667%',
	      '1/4': '25%',
	      '2/4': '50%',
	      '3/4': '75%',
	      '1/5': '20%',
	      '2/5': '40%',
	      '3/5': '60%',
	      '4/5': '80%',
	      '1/6': '16.666667%',
	      '2/6': '33.333333%',
	      '3/6': '50%',
	      '4/6': '66.666667%',
	      '5/6': '83.333333%',
	      '1/12': '8.333333%',
	      '2/12': '16.666667%',
	      '3/12': '25%',
	      '4/12': '33.333333%',
	      '5/12': '41.666667%',
	      '6/12': '50%',
	      '7/12': '58.333333%',
	      '8/12': '66.666667%',
	      '9/12': '75%',
	      '10/12': '83.333333%',
	      '11/12': '91.666667%',
	      full: '100%',
	      min: 'min-content',
	      max: 'max-content',
	      fit: 'fit-content',
	    }),
	    width: ({ theme }) => ({
	      auto: 'auto',
	      ...theme('spacing'),
	      '1/2': '50%',
	      '1/3': '33.333333%',
	      '2/3': '66.666667%',
	      '1/4': '25%',
	      '2/4': '50%',
	      '3/4': '75%',
	      '1/5': '20%',
	      '2/5': '40%',
	      '3/5': '60%',
	      '4/5': '80%',
	      '1/6': '16.666667%',
	      '2/6': '33.333333%',
	      '3/6': '50%',
	      '4/6': '66.666667%',
	      '5/6': '83.333333%',
	      '1/12': '8.333333%',
	      '2/12': '16.666667%',
	      '3/12': '25%',
	      '4/12': '33.333333%',
	      '5/12': '41.666667%',
	      '6/12': '50%',
	      '7/12': '58.333333%',
	      '8/12': '66.666667%',
	      '9/12': '75%',
	      '10/12': '83.333333%',
	      '11/12': '91.666667%',
	      full: '100%',
	      screen: '100vw',
	      svw: '100svw',
	      lvw: '100lvw',
	      dvw: '100dvw',
	      min: 'min-content',
	      max: 'max-content',
	      fit: 'fit-content',
	    }),
	    willChange: {
	      auto: 'auto',
	      scroll: 'scroll-position',
	      contents: 'contents',
	      transform: 'transform',
	    },
	    zIndex: {
	      auto: 'auto',
	      0: '0',
	      10: '10',
	      20: '20',
	      30: '30',
	      40: '40',
	      50: '50',
	    },
	  },
	  plugins: [],
	};

	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: function() {
		        return _default;
		    }
		});
		const _cloneDeep = cloneDeep;
		const _configfull = /*#__PURE__*/ _interop_require_default(config_full);
		function _interop_require_default(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		const _default = (0, _cloneDeep.cloneDeep)(_configfull.default.theme); 
	} (defaultTheme$1));

	let defaultTheme = defaultTheme$1;
	var defaultTheme_1 = (defaultTheme.__esModule ? defaultTheme : { default: defaultTheme }).default;

	const config$1 = {
	  darkMode: ["class"],
	  content: ["./src/**/*.{html,js,svelte,ts}"],
	  safelist: ["dark"],
	  theme: {
	    container: {
	      center: true,
	      padding: "2rem",
	      screens: {
	        "2xl": "1400px",
	      },
	    },
	    extend: {
	      colors: {
	        red: "hsl(var(--red) / <alpha-value>)",
	        border: "hsl(var(--border) / <alpha-value>)",
	        input: "hsl(var(--input) / <alpha-value>)",
	        ring: "hsl(var(--ring) / <alpha-value>)",
	        background: "hsl(var(--background) / <alpha-value>)",
	        foreground: "hsl(var(--foreground) / <alpha-value>)",
	        primary: {
	          DEFAULT: "hsl(var(--primary) / <alpha-value>)",
	          foreground: "hsl(var(--primary-foreground) / <alpha-value>)",
	        },
	        secondary: {
	          DEFAULT: "hsl(var(--secondary) / <alpha-value>)",
	          foreground: "hsl(var(--secondary-foreground) / <alpha-value>)",
	        },
	        destructive: {
	          DEFAULT: "hsl(var(--destructive) / <alpha-value>)",
	          foreground: "hsl(var(--destructive-foreground) / <alpha-value>)",
	        },
	        muted: {
	          DEFAULT: "hsl(var(--muted) / <alpha-value>)",
	          foreground: "hsl(var(--muted-foreground) / <alpha-value>)",
	        },
	        accent: {
	          DEFAULT: "hsl(var(--accent) / <alpha-value>)",
	          foreground: "hsl(var(--accent-foreground) / <alpha-value>)",
	        },
	        popover: {
	          DEFAULT: "hsl(var(--popover) / <alpha-value>)",
	          foreground: "hsl(var(--popover-foreground) / <alpha-value>)",
	        },
	        card: {
	          DEFAULT: "hsl(var(--card) / <alpha-value>)",
	          foreground: "hsl(var(--card-foreground) / <alpha-value>)",
	        },
	      },
	      borderRadius: {
	        lg: "var(--radius)",
	        md: "calc(var(--radius) - 2px)",
	        sm: "calc(var(--radius) - 4px)",
	      },
	      preflight: {
	        // Import Inter font
	        '@import': `url('https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap')`,
	      },
	      fontFamily: {
	        sans: ["Inter", "InterVariable", ...defaultTheme_1.fontFamily.sans],
	      },
	    },
	  },
	};

	const twPreset = presetTailwind();

	// Add specific apply from app.pcss and tailwind.config.js since that's not working
	twPreset.preflight["*"] = {
	  borderColor: "hsl(240 3.7% 15.9% / 1)",
	};

	var config = defineConfig({
	  presets: [twPreset],
	  darkMode: "class",
	  ...config$1,
	});

	(function () {

	    if (typeof document === 'undefined' || 'adoptedStyleSheets' in document) { return; }

	    var hasShadyCss = 'ShadyCSS' in window && !ShadyCSS.nativeShadow;
	    var bootstrapper = document.implementation.createHTMLDocument('');
	    var closedShadowRootRegistry = new WeakMap();
	    var _DOMException = typeof DOMException === 'object' ? Error : DOMException;
	    var defineProperty = Object.defineProperty;
	    var forEach = Array.prototype.forEach;

	    var importPattern = /@import.+?;?$/gm;
	    function rejectImports(contents) {
	        var _contents = contents.replace(importPattern, '');
	        if (_contents !== contents) {
	            console.warn('@import rules are not allowed here. See https://github.com/WICG/construct-stylesheets/issues/119#issuecomment-588352418');
	        }
	        return _contents.trim();
	    }
	    function isElementConnected(element) {
	        return 'isConnected' in element
	            ? element.isConnected
	            : document.contains(element);
	    }
	    function unique(arr) {
	        return arr.filter(function (value, index) { return arr.indexOf(value) === index; });
	    }
	    function diff(arr1, arr2) {
	        return arr1.filter(function (value) { return arr2.indexOf(value) === -1; });
	    }
	    function removeNode(node) {
	        node.parentNode.removeChild(node);
	    }
	    function getShadowRoot(element) {
	        return element.shadowRoot || closedShadowRootRegistry.get(element);
	    }

	    var cssStyleSheetMethods = [
	        'addRule',
	        'deleteRule',
	        'insertRule',
	        'removeRule',
	    ];
	    var NonConstructedStyleSheet = CSSStyleSheet;
	    var nonConstructedProto = NonConstructedStyleSheet.prototype;
	    nonConstructedProto.replace = function () {
	        return Promise.reject(new _DOMException("Can't call replace on non-constructed CSSStyleSheets."));
	    };
	    nonConstructedProto.replaceSync = function () {
	        throw new _DOMException("Failed to execute 'replaceSync' on 'CSSStyleSheet': Can't call replaceSync on non-constructed CSSStyleSheets.");
	    };
	    function isCSSStyleSheetInstance(instance) {
	        return typeof instance === 'object'
	            ? proto$1.isPrototypeOf(instance) ||
	                nonConstructedProto.isPrototypeOf(instance)
	            : false;
	    }
	    function isNonConstructedStyleSheetInstance(instance) {
	        return typeof instance === 'object'
	            ? nonConstructedProto.isPrototypeOf(instance)
	            : false;
	    }
	    var $basicStyleElement = new WeakMap();
	    var $locations = new WeakMap();
	    var $adoptersByLocation = new WeakMap();
	    var $appliedMethods = new WeakMap();
	    function addAdopterLocation(sheet, location) {
	        var adopter = document.createElement('style');
	        $adoptersByLocation.get(sheet).set(location, adopter);
	        $locations.get(sheet).push(location);
	        return adopter;
	    }
	    function getAdopterByLocation(sheet, location) {
	        return $adoptersByLocation.get(sheet).get(location);
	    }
	    function removeAdopterLocation(sheet, location) {
	        $adoptersByLocation.get(sheet).delete(location);
	        $locations.set(sheet, $locations.get(sheet).filter(function (_location) { return _location !== location; }));
	    }
	    function restyleAdopter(sheet, adopter) {
	        requestAnimationFrame(function () {
	            adopter.textContent = $basicStyleElement.get(sheet).textContent;
	            $appliedMethods
	                .get(sheet)
	                .forEach(function (command) {
	                return adopter.sheet[command.method].apply(adopter.sheet, command.args);
	            });
	        });
	    }
	    function checkInvocationCorrectness(self) {
	        if (!$basicStyleElement.has(self)) {
	            throw new TypeError('Illegal invocation');
	        }
	    }
	    function ConstructedStyleSheet() {
	        var self = this;
	        var style = document.createElement('style');
	        bootstrapper.body.appendChild(style);
	        $basicStyleElement.set(self, style);
	        $locations.set(self, []);
	        $adoptersByLocation.set(self, new WeakMap());
	        $appliedMethods.set(self, []);
	    }
	    var proto$1 = ConstructedStyleSheet.prototype;
	    proto$1.replace = function replace(contents) {
	        try {
	            this.replaceSync(contents);
	            return Promise.resolve(this);
	        }
	        catch (e) {
	            return Promise.reject(e);
	        }
	    };
	    proto$1.replaceSync = function replaceSync(contents) {
	        checkInvocationCorrectness(this);
	        if (typeof contents === 'string') {
	            var self_1 = this;
	            $basicStyleElement.get(self_1).textContent = rejectImports(contents);
	            $appliedMethods.set(self_1, []);
	            $locations.get(self_1).forEach(function (location) {
	                if (location.isConnected()) {
	                    restyleAdopter(self_1, getAdopterByLocation(self_1, location));
	                }
	            });
	        }
	    };
	    defineProperty(proto$1, 'cssRules', {
	        configurable: true,
	        enumerable: true,
	        get: function cssRules() {
	            checkInvocationCorrectness(this);
	            return $basicStyleElement.get(this).sheet.cssRules;
	        },
	    });
	    defineProperty(proto$1, 'media', {
	        configurable: true,
	        enumerable: true,
	        get: function media() {
	            checkInvocationCorrectness(this);
	            return $basicStyleElement.get(this).sheet.media;
	        },
	    });
	    cssStyleSheetMethods.forEach(function (method) {
	        proto$1[method] = function () {
	            var self = this;
	            checkInvocationCorrectness(self);
	            var args = arguments;
	            $appliedMethods.get(self).push({ method: method, args: args });
	            $locations.get(self).forEach(function (location) {
	                if (location.isConnected()) {
	                    var sheet = getAdopterByLocation(self, location).sheet;
	                    sheet[method].apply(sheet, args);
	                }
	            });
	            var basicSheet = $basicStyleElement.get(self).sheet;
	            return basicSheet[method].apply(basicSheet, args);
	        };
	    });
	    defineProperty(ConstructedStyleSheet, Symbol.hasInstance, {
	        configurable: true,
	        value: isCSSStyleSheetInstance,
	    });

	    var defaultObserverOptions = {
	        childList: true,
	        subtree: true,
	    };
	    var locations = new WeakMap();
	    function getAssociatedLocation(element) {
	        var location = locations.get(element);
	        if (!location) {
	            location = new Location(element);
	            locations.set(element, location);
	        }
	        return location;
	    }
	    function attachAdoptedStyleSheetProperty(constructor) {
	        defineProperty(constructor.prototype, 'adoptedStyleSheets', {
	            configurable: true,
	            enumerable: true,
	            get: function () {
	                return getAssociatedLocation(this).sheets;
	            },
	            set: function (sheets) {
	                getAssociatedLocation(this).update(sheets);
	            },
	        });
	    }
	    function traverseWebComponents(node, callback) {
	        var iter = document.createNodeIterator(node, NodeFilter.SHOW_ELEMENT, function (foundNode) {
	            return getShadowRoot(foundNode)
	                ? NodeFilter.FILTER_ACCEPT
	                : NodeFilter.FILTER_REJECT;
	        },
	        null, false);
	        for (var next = void 0; (next = iter.nextNode());) {
	            callback(getShadowRoot(next));
	        }
	    }
	    var $element = new WeakMap();
	    var $uniqueSheets = new WeakMap();
	    var $observer = new WeakMap();
	    function isExistingAdopter(self, element) {
	        return (element instanceof HTMLStyleElement &&
	            $uniqueSheets.get(self).some(function (sheet) { return getAdopterByLocation(sheet, self); }));
	    }
	    function getAdopterContainer(self) {
	        var element = $element.get(self);
	        return element instanceof Document ? element.body : element;
	    }
	    function adopt(self) {
	        var styleList = document.createDocumentFragment();
	        var sheets = $uniqueSheets.get(self);
	        var observer = $observer.get(self);
	        var container = getAdopterContainer(self);
	        observer.disconnect();
	        sheets.forEach(function (sheet) {
	            styleList.appendChild(getAdopterByLocation(sheet, self) || addAdopterLocation(sheet, self));
	        });
	        container.insertBefore(styleList, null);
	        observer.observe(container, defaultObserverOptions);
	        sheets.forEach(function (sheet) {
	            restyleAdopter(sheet, getAdopterByLocation(sheet, self));
	        });
	    }
	    function Location(element) {
	        var self = this;
	        self.sheets = [];
	        $element.set(self, element);
	        $uniqueSheets.set(self, []);
	        $observer.set(self, new MutationObserver(function (mutations, observer) {
	            if (!document) {
	                observer.disconnect();
	                return;
	            }
	            mutations.forEach(function (mutation) {
	                if (!hasShadyCss) {
	                    forEach.call(mutation.addedNodes, function (node) {
	                        if (!(node instanceof Element)) {
	                            return;
	                        }
	                        traverseWebComponents(node, function (root) {
	                            getAssociatedLocation(root).connect();
	                        });
	                    });
	                }
	                forEach.call(mutation.removedNodes, function (node) {
	                    if (!(node instanceof Element)) {
	                        return;
	                    }
	                    if (isExistingAdopter(self, node)) {
	                        adopt(self);
	                    }
	                    if (!hasShadyCss) {
	                        traverseWebComponents(node, function (root) {
	                            getAssociatedLocation(root).disconnect();
	                        });
	                    }
	                });
	            });
	        }));
	    }
	    Location.prototype = {
	        isConnected: function () {
	            var element = $element.get(this);
	            return element instanceof Document
	                ? element.readyState !== 'loading'
	                : isElementConnected(element.host);
	        },
	        connect: function () {
	            var container = getAdopterContainer(this);
	            $observer.get(this).observe(container, defaultObserverOptions);
	            if ($uniqueSheets.get(this).length > 0) {
	                adopt(this);
	            }
	            traverseWebComponents(container, function (root) {
	                getAssociatedLocation(root).connect();
	            });
	        },
	        disconnect: function () {
	            $observer.get(this).disconnect();
	        },
	        update: function (sheets) {
	            var self = this;
	            var locationType = $element.get(self) === document ? 'Document' : 'ShadowRoot';
	            if (!Array.isArray(sheets)) {
	                throw new TypeError("Failed to set the 'adoptedStyleSheets' property on " + locationType + ": Iterator getter is not callable.");
	            }
	            if (!sheets.every(isCSSStyleSheetInstance)) {
	                throw new TypeError("Failed to set the 'adoptedStyleSheets' property on " + locationType + ": Failed to convert value to 'CSSStyleSheet'");
	            }
	            if (sheets.some(isNonConstructedStyleSheetInstance)) {
	                throw new TypeError("Failed to set the 'adoptedStyleSheets' property on " + locationType + ": Can't adopt non-constructed stylesheets");
	            }
	            self.sheets = sheets;
	            var oldUniqueSheets = $uniqueSheets.get(self);
	            var uniqueSheets = unique(sheets);
	            var removedSheets = diff(oldUniqueSheets, uniqueSheets);
	            removedSheets.forEach(function (sheet) {
	                removeNode(getAdopterByLocation(sheet, self));
	                removeAdopterLocation(sheet, self);
	            });
	            $uniqueSheets.set(self, uniqueSheets);
	            if (self.isConnected() && uniqueSheets.length > 0) {
	                adopt(self);
	            }
	        },
	    };

	    window.CSSStyleSheet = ConstructedStyleSheet;
	    attachAdoptedStyleSheetProperty(Document);
	    if ('ShadowRoot' in window) {
	        attachAdoptedStyleSheetProperty(ShadowRoot);
	        var proto = Element.prototype;
	        var attach_1 = proto.attachShadow;
	        proto.attachShadow = function attachShadow(init) {
	            var root = attach_1.call(this, init);
	            if (init.mode === 'closed') {
	                closedShadowRootRegistry.set(this, root);
	            }
	            return root;
	        };
	    }
	    var documentLocation = getAssociatedLocation(document);
	    if (documentLocation.isConnected()) {
	        documentLocation.connect();
	    }
	    else {
	        document.addEventListener('DOMContentLoaded', documentLocation.connect.bind(documentLocation));
	    }

	}());

	class OnlookToolbar extends HTMLElement {
	    constructor() {
	        super();
	        this.style.position = 'fixed';
	        this.style.zIndex = '9999';
	        this.setAttribute(DATA_ONLOOK_IGNORE, 'true');
	        // Attaches a shadow DOM
	        const shadowRoot = this.attachShadow({ mode: 'open' });
	        // Add twind styles
	        const sheet = cssom(new CSSStyleSheet());
	        shadowRoot.adoptedStyleSheets = [sheet.target];
	        observe(twind(config, sheet), shadowRoot);
	        // Initialize Svelte app in the shadow root
	        new App({
	            target: shadowRoot
	        });
	    }
	    connectedCallback() { }
	}
	// Define the new element
	customElements.define(ONLOOK_TOOLBAR, OnlookToolbar);

})();
=======
	 */const rp="undefined"!=typeof navigator&&navigator.userAgent.toLowerCase().indexOf("firefox")>0;function op(e,t,n,r){e.addEventListener?e.addEventListener(t,n,r):e.attachEvent&&e.attachEvent("on".concat(t),n)}function ip(e,t,n,r){e.removeEventListener?e.removeEventListener(t,n,r):e.detachEvent&&e.detachEvent("on".concat(t),n)}function ap(e,t){const n=t.slice(0,t.length-1);for(let t=0;t<n.length;t++)n[t]=e[n[t].toLowerCase()];return n}function sp(e){"string"!=typeof e&&(e="");const t=(e=e.replace(/\s/g,"")).split(",");let n=t.lastIndexOf("");for(;n>=0;)t[n-1]+=",",t.splice(n,1),n=t.lastIndexOf("");return t}const lp={backspace:8,"⌫":8,tab:9,clear:12,enter:13,"↩":13,return:13,esc:27,escape:27,space:32,left:37,up:38,right:39,down:40,del:46,delete:46,ins:45,insert:45,home:36,end:35,pageup:33,pagedown:34,capslock:20,num_0:96,num_1:97,num_2:98,num_3:99,num_4:100,num_5:101,num_6:102,num_7:103,num_8:104,num_9:105,num_multiply:106,num_add:107,num_enter:108,num_subtract:109,num_decimal:110,num_divide:111,"⇪":20,",":188,".":190,"/":191,"`":192,"-":rp?173:189,"=":rp?61:187,";":rp?59:186,"'":222,"[":219,"]":221,"\\":220},cp={"⇧":16,shift:16,"⌥":18,alt:18,option:18,"⌃":17,ctrl:17,control:17,"⌘":91,cmd:91,command:91},up={16:"shiftKey",18:"altKey",17:"ctrlKey",91:"metaKey",shiftKey:16,ctrlKey:17,altKey:18,metaKey:91},dp={16:!1,18:!1,17:!1,91:!1},pp={};for(let e=1;e<20;e++)lp["f".concat(e)]=111+e;let fp=[],mp=null,hp="all";const gp=new Map,vp=e=>lp[e.toLowerCase()]||cp[e.toLowerCase()]||e.toUpperCase().charCodeAt(0);function yp(e){hp=e||"all"}function bp(){return hp||"all"}function $p(e){if(void 0===e)Object.keys(pp).forEach((e=>{Array.isArray(pp[e])&&pp[e].forEach((e=>xp(e))),delete pp[e]})),Ep(null);else if(Array.isArray(e))e.forEach((e=>{e.key&&xp(e)}));else if("object"==typeof e)e.key&&xp(e);else if("string"==typeof e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];let[o,i]=n;"function"==typeof o&&(i=o,o=""),xp({key:e,scope:o,method:i,splitKey:"+"})}}const xp=e=>{let{key:t,scope:n,method:r,splitKey:o="+"}=e;sp(t).forEach((e=>{const t=e.split(o),i=t.length,a=t[i-1],s="*"===a?"*":vp(a);if(!pp[s])return;n||(n=bp());const l=i>1?ap(cp,t):[],c=[];pp[s]=pp[s].filter((e=>{const t=(!r||e.method===r)&&e.scope===n&&function(e,t){const n=e.length>=t.length?e:t,r=e.length>=t.length?t:e;let o=!0;for(let e=0;e<n.length;e++)-1===r.indexOf(n[e])&&(o=!1);return o}(e.mods,l);return t&&c.push(e.element),!t})),c.forEach((e=>Ep(e)))}))};function wp(e,t,n,r){if(t.element!==r)return;let o;if(t.scope===n||"all"===t.scope){o=t.mods.length>0;for(const e in dp)Object.prototype.hasOwnProperty.call(dp,e)&&(!dp[e]&&t.mods.indexOf(+e)>-1||dp[e]&&-1===t.mods.indexOf(+e))&&(o=!1);(0!==t.mods.length||dp[16]||dp[18]||dp[17]||dp[91])&&!o&&"*"!==t.shortcut||(t.keys=[],t.keys=t.keys.concat(fp),!1===t.method(e,t)&&(e.preventDefault?e.preventDefault():e.returnValue=!1,e.stopPropagation&&e.stopPropagation(),e.cancelBubble&&(e.cancelBubble=!0)))}}function Sp(e,t){const n=pp["*"];let r=e.keyCode||e.which||e.charCode;if(!Cp.filter.call(this,e))return;if(93!==r&&224!==r||(r=91),-1===fp.indexOf(r)&&229!==r&&fp.push(r),["ctrlKey","altKey","shiftKey","metaKey"].forEach((t=>{const n=up[t];e[t]&&-1===fp.indexOf(n)?fp.push(n):!e[t]&&fp.indexOf(n)>-1?fp.splice(fp.indexOf(n),1):"metaKey"===t&&e[t]&&3===fp.length&&(e.ctrlKey||e.shiftKey||e.altKey||(fp=fp.slice(fp.indexOf(n))))})),r in dp){dp[r]=!0;for(const e in cp)cp[e]===r&&(Cp[e]=!0);if(!n)return}for(const t in dp)Object.prototype.hasOwnProperty.call(dp,t)&&(dp[t]=e[up[t]]);e.getModifierState&&(!e.altKey||e.ctrlKey)&&e.getModifierState("AltGraph")&&(-1===fp.indexOf(17)&&fp.push(17),-1===fp.indexOf(18)&&fp.push(18),dp[17]=!0,dp[18]=!0);const o=bp();if(n)for(let r=0;r<n.length;r++)n[r].scope===o&&("keydown"===e.type&&n[r].keydown||"keyup"===e.type&&n[r].keyup)&&wp(e,n[r],o,t);if(!(r in pp))return;const i=pp[r],a=i.length;for(let n=0;n<a;n++)if(("keydown"===e.type&&i[n].keydown||"keyup"===e.type&&i[n].keyup)&&i[n].key){const r=i[n],{splitKey:a}=r,s=r.key.split(a),l=[];for(let e=0;e<s.length;e++)l.push(vp(s[e]));l.sort().join("")===fp.sort().join("")&&wp(e,r,o,t)}}function Cp(e,t,n){fp=[];const r=sp(e);let o=[],i="all",a=document,s=0,l=!1,c=!0,u="+",d=!1,p=!1;for(void 0===n&&"function"==typeof t&&(n=t),"[object Object]"===Object.prototype.toString.call(t)&&(t.scope&&(i=t.scope),t.element&&(a=t.element),t.keyup&&(l=t.keyup),void 0!==t.keydown&&(c=t.keydown),void 0!==t.capture&&(d=t.capture),"string"==typeof t.splitKey&&(u=t.splitKey),!0===t.single&&(p=!0)),"string"==typeof t&&(i=t),p&&$p(e,i);s<r.length;s++)o=[],(e=r[s].split(u)).length>1&&(o=ap(cp,e)),(e="*"===(e=e[e.length-1])?"*":vp(e))in pp||(pp[e]=[]),pp[e].push({keyup:l,keydown:c,scope:i,mods:o,shortcut:r[s],method:n,key:r[s],splitKey:u,element:a});if(void 0!==a&&window){if(!gp.has(a)){const e=function(){return Sp(arguments.length>0&&void 0!==arguments[0]?arguments[0]:window.event,a)},t=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:window.event;Sp(e,a),function(e){let t=e.keyCode||e.which||e.charCode;const n=fp.indexOf(t);if(n>=0&&fp.splice(n,1),e.key&&"meta"===e.key.toLowerCase()&&fp.splice(0,fp.length),93!==t&&224!==t||(t=91),t in dp){dp[t]=!1;for(const e in cp)cp[e]===t&&(Cp[e]=!1)}}(e)};gp.set(a,{keydownListener:e,keyupListenr:t,capture:d}),op(a,"keydown",e,d),op(a,"keyup",t,d)}if(!mp){const e=()=>{fp=[]};mp={listener:e,capture:d},op(window,"focus",e,d)}}}function Ep(e){const t=Object.values(pp).flat();if(t.findIndex((t=>{let{element:n}=t;return n===e}))<0){const{keydownListener:t,keyupListenr:n,capture:r}=gp.get(e)||{};t&&n&&(ip(e,"keyup",n,r),ip(e,"keydown",t,r),gp.delete(e))}if(t.length<=0||gp.size<=0){if(Object.keys(gp).forEach((e=>{const{keydownListener:t,keyupListenr:n,capture:r}=gp.get(e)||{};t&&n&&(ip(e,"keyup",n,r),ip(e,"keydown",t,r),gp.delete(e))})),gp.clear(),Object.keys(pp).forEach((e=>delete pp[e])),mp){const{listener:e,capture:t}=mp;ip(window,"focus",e,t),mp=null}}}const kp={getPressedKeyString:function(){return fp.map((e=>(e=>Object.keys(lp).find((t=>lp[t]===e)))(e)||(e=>Object.keys(cp).find((t=>cp[t]===e)))(e)||String.fromCharCode(e)))},setScope:yp,getScope:bp,deleteScope:function(e,t){let n,r;e||(e=bp());for(const t in pp)if(Object.prototype.hasOwnProperty.call(pp,t))for(n=pp[t],r=0;r<n.length;)if(n[r].scope===e){n.splice(r,1).forEach((e=>{let{element:t}=e;return Ep(t)}))}else r++;bp()===e&&yp(t||"all")},getPressedKeyCodes:function(){return fp.slice(0)},getAllKeyCodes:function(){const e=[];return Object.keys(pp).forEach((t=>{pp[t].forEach((t=>{let{key:n,scope:r,mods:o,shortcut:i}=t;e.push({scope:r,shortcut:i,mods:o,keys:n.split("+").map((e=>vp(e)))})}))})),e},isPressed:function(e){return"string"==typeof e&&(e=vp(e)),-1!==fp.indexOf(e)},filter:function(e){const t=e.target||e.srcElement,{tagName:n}=t;let r=!0;const o="INPUT"===n&&!["checkbox","radio","range","button","file","reset","submit","color"].includes(t.type);return(t.isContentEditable||(o||"TEXTAREA"===n||"SELECT"===n)&&!t.readOnly)&&(r=!1),r},trigger:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"all";Object.keys(pp).forEach((n=>{pp[n].filter((n=>n.scope===t&&n.shortcut===e)).forEach((e=>{e&&e.method&&e.method()}))}))},unbind:$p,keyMap:lp,modifier:cp,modifierMap:up};for(const e in kp)Object.prototype.hasOwnProperty.call(kp,e)&&(Cp[e]=kp[e]);if("undefined"!=typeof window){const e=window.hotkeys;Cp.noConflict=t=>(t&&window.hotkeys===Cp&&(window.hotkeys=e),Cp),window.hotkeys=Cp}class Mp{constructor(){this.bindKeys=e=>{if(this.unbindAllKeys(),!e)return;const t=this.toolKeyMaps[e];Object.keys(t).forEach((e=>{Cp(e,t[e])}))},this.unbindAllKeys=()=>{const e=Object.values(this.toolKeyMaps).reduce(((e,t)=>e.concat(Object.keys(t))),[]);Cp.unbind(e.join(","))},this.metaKey=window.navigator.platform.includes("Mac")?"cmd":"ctrl",this.altKey=window.navigator.platform.includes("Mac")?"opt":"alt","ctrl"===this.metaKey&&[...document.querySelectorAll("kbd")].forEach((e=>{e.textContent=e.textContent.replace("cmd","ctrl"),e.textContent=e.textContent.replace("opt","alt")})),this.toolKeyMaps={[Ap.EDIT]:{[`${this.metaKey}+z`]:()=>function(){const e=Yd.pop();if(!e)return;const t={type:"UNDO_STYLE_CHANGE",detail:{selector:e.detail.selector,styleType:e.detail.styleType,newVal:e.detail.oldVal,oldVal:e.detail.newVal,path:e.detail.path}};window.postMessage(t,window.location.origin),qd.push(e)}(),[`${this.metaKey}+shift+z`]:()=>function(){const e=qd.pop();e&&(e.type="REDO_STYLE_CHANGE",window.postMessage(e,window.location.origin),Yd.push(e))}()}}}}var Ap;!function(e){e.EDIT="edit"}(Ap||(Ap={}));class Tp{constructor(e){this.eventsMap={mouseover:e=>this.handleMouseOver(e),mouseout:e=>this.handleMouseOut(e),click:e=>this.handleClick(e),resize:e=>this.handleScreenResize(e),dblclick:e=>this.handleDoubleClick(e)},this.selectTool=e=>{this.selectedTool&&this.selectedTool.onDestroy(),this.hotKeys.bindKeys(e),e?(this.selectedTool=this.toolMap[e],this.selectedTool.onInit()):this.selectedTool=void 0},this.handleMouseOver=e=>{this.selectedTool&&this.selectedTool.onMouseOver(e)},this.handleMouseOut=e=>{this.selectedTool&&this.selectedTool.onMouseOut(e)},this.handleClick=e=>{this.selectedTool&&this.selectedTool.onClick(e)},this.handleDoubleClick=e=>{this.selectedTool&&this.selectedTool.onDoubleClick(e)},this.handleScreenResize=e=>{this.selectedTool&&this.selectedTool.onScreenResize(e)},this.setListeners=()=>{Object.keys(this.eventsMap).forEach((e=>{window.addEventListener(e,this.eventsMap[e],!0)}))},this.removeListeners=()=>{Object.keys(this.eventsMap).forEach((e=>{window.removeEventListener(e,this.eventsMap[e],!0)}))},this.hotKeys=new Mp,this.editTool=new np,this.toolMap={[Ap.EDIT]:this.editTool},this.setListeners(),this.selectTool(e)}}var Rp={dragStart:!0},Pp=(e,t,n)=>Math.min(Math.max(e,t),n),Lp=e=>"string"==typeof e,Op=(e,t)=>e.some((e=>t.some((t=>e.contains(t)))));function zp(e,t){if(void 0===e)return;if(jp(e))return e.getBoundingClientRect();if("object"==typeof e){const{top:t=0,left:n=0,right:r=0,bottom:o=0}=e;return{top:t,right:window.innerWidth-r,bottom:window.innerHeight-o,left:n}}if("parent"===e)return t.parentNode.getBoundingClientRect();const n=document.querySelector(e);if(null===n)throw new Error("The selector provided for bound doesn't exists in the document.");return n.getBoundingClientRect()}var Np=(e,t,n)=>e.style.setProperty(t,n),jp=e=>e instanceof HTMLElement,Vp=(e,t={})=>{let n,r,{bounds:o,axis:i="both",gpuAcceleration:a=!0,legacyTranslate:s=!0,transform:l,applyUserSelectHack:c=!0,disabled:u=!1,ignoreMultitouch:d=!1,recomputeBounds:p=Rp,grid:f,position:m,cancel:h,handle:g,defaultClass:v="neodrag",defaultClassDragging:y="neodrag-dragging",defaultClassDragged:b="neodrag-dragged",defaultPosition:$={x:0,y:0},onDragStart:x,onDrag:w,onDragEnd:S}=t,C=!1,E=0,k=0,M=0,A=0,T=0,R=0,{x:P,y:L}=m?{x:m?.x??0,y:m?.y??0}:$;B(P,L);let O,z,N,j,V,D="",_=!!m;p={...Rp,...p};const H=document.body.style,F=e.classList;function B(t=E,n=k){if(!l){if(s){let r=`${+t}px, ${+n}px`;return Np(e,"transform",a?`translate3d(${r}, 0)`:`translate(${r})`)}return Np(e,"translate",`${+t}px ${+n}px ${a?"1px":""}`)}const r=l({offsetX:t,offsetY:n,rootNode:e});Lp(r)&&Np(e,"transform",r)}const I=(t,n)=>{const r={offsetX:E,offsetY:k,rootNode:e,currentNode:V};e.dispatchEvent(new CustomEvent(t,{detail:r})),n?.(r)},W=addEventListener;W("pointerdown",G,!1),W("pointerup",Z,!1),W("pointermove",Y,!1),Np(e,"touch-action","none");const U=()=>{let t=e.offsetWidth/z.width;return isNaN(t)&&(t=1),t};function G(t){if(u)return;if(2===t.button)return;if(d&&!t.isPrimary)return;if(p.dragStart&&(O=zp(o,e)),Lp(g)&&Lp(h)&&g===h)throw new Error("`handle` selector can't be same as `cancel` selector");if(F.add(v),N=function(e,t){if(!e)return[t];if(jp(e))return[e];if(Array.isArray(e))return e;const n=t.querySelectorAll(e);if(null===n)throw new Error("Selector passed for `handle` option should be child of the element on which the action is applied");return Array.from(n.values())}(g,e),j=function(e,t){if(!e)return[];if(jp(e))return[e];if(Array.isArray(e))return e;const n=t.querySelectorAll(e);if(null===n)throw new Error("Selector passed for `cancel` option should be child of the element on which the action is applied");return Array.from(n.values())}(h,e),n=/(both|x)/.test(i),r=/(both|y)/.test(i),Op(j,N))throw new Error("Element being dragged can't be a child of the element on which `cancel` is applied");const a=t.composedPath()[0];if(!N.some((e=>e.contains(a)||e.shadowRoot?.contains(a)))||Op(j,[a]))return;V=1===N.length?e:N.find((e=>e.contains(a))),C=!0,z=e.getBoundingClientRect(),c&&(D=H.userSelect,H.userSelect="none"),I("neodrag:start",x);const{clientX:s,clientY:l}=t,f=U();n&&(M=s-P/f),r&&(A=l-L/f),O&&(T=s-z.left,R=l-z.top)}function Z(){C&&(p.dragEnd&&(O=zp(o,e)),F.remove(y),F.add(b),c&&(H.userSelect=D),I("neodrag:end",S),n&&(M=E),r&&(A=k),C=!1)}function Y(t){if(!C)return;p.drag&&(O=zp(o,e)),F.add(y),t.preventDefault(),z=e.getBoundingClientRect();let i=t.clientX,a=t.clientY;const s=U();if(O){const e={left:O.left+T,top:O.top+R,right:O.right+T-z.width,bottom:O.bottom+R-z.height};i=Pp(i,e.left,e.right),a=Pp(a,e.top,e.bottom)}if(Array.isArray(f)){let[e,t]=f;if(isNaN(+e)||e<0)throw new Error("1st argument of `grid` must be a valid positive number");if(isNaN(+t)||t<0)throw new Error("2nd argument of `grid` must be a valid positive number");let n=i-M,r=a-A;[n,r]=(([e,t],n,r)=>{const o=(e,t)=>0===t?0:Math.ceil(e/t)*t;return[o(n,e),o(r,t)]})([e/s,t/s],n,r),i=M+n,a=A+r}n&&(E=Math.round((i-M)*s)),r&&(k=Math.round((a-A)*s)),P=E,L=k,I("neodrag",w),B()}return{destroy:()=>{const e=removeEventListener;e("pointerdown",G,!1),e("pointerup",Z,!1),e("pointermove",Y,!1)},update:e=>{i=e.axis||"both",u=e.disabled??!1,d=e.ignoreMultitouch??!1,g=e.handle,o=e.bounds,p=e.recomputeBounds??Rp,h=e.cancel,c=e.applyUserSelectHack??!0,f=e.grid,a=e.gpuAcceleration??!0,s=e.legacyTranslate??!0,l=e.transform;const t=F.contains(b);F.remove(v,b),v=e.defaultClass??"neodrag",y=e.defaultClassDragging??"neodrag-dragging",b=e.defaultClassDragged??"neodrag-dragged",F.add(v),t&&F.add(b),_&&(P=E=e.position?.x??E,L=k=e.position?.y??k,B())}}};function Dp(e,t){return e.length===t.length&&e.every(((e,n)=>e===t[n]))}function _p(e){return Object.keys(e).reduce(((t,n)=>void 0===e[n]?t:t+`${n}:${e[n]};`),"")}function Hp(e){return!!e||void 0}function Fp(e){return{subscribe:function(t){return t(e),()=>{}}}}_p({position:"absolute",opacity:0,"pointer-events":"none",margin:0,transform:"translateX(-100%)"});const Bp=e=>new Proxy(e,{get:(e,t,n)=>Reflect.get(e,t,n),ownKeys:e=>Reflect.ownKeys(e).filter((e=>"action"!==e))}),Ip=e=>"function"==typeof e;function Wp(e,t){const{stores:n,action:r,returned:o}=t??{},i=(()=>{if(n&&o)return Wo(n,(t=>{const n=o(t);if(Ip(n)){const t=(...t)=>Bp({...n(...t),[`data-melt-${e}`]:"",action:r??qp});return t.action=r??qp,t}return Bp({...n,[`data-melt-${e}`]:"",action:r??qp})}));{const t=o,n=t?.();if(Ip(n)){const t=(...t)=>Bp({...n(...t),[`data-melt-${e}`]:"",action:r??qp});return t.action=r??qp,Fp(t)}return Fp(Bp({...n,[`data-melt-${e}`]:"",action:r??qp}))}})(),a=r??(()=>{});return a.subscribe=i.subscribe,a}function Up(e){const t=t=>`[data-melt-${e}${t?`-${t}`:""}]`;return{name:t=>t?`${e}-${t}`:e,attribute:t=>`data-melt-${e}${t?`-${t}`:""}`,selector:t,getEl:e=>document.querySelector(t(e))}}const Gp="undefined"!=typeof document;function Zp(e){return e instanceof HTMLElement}function Yp(...e){return(...t)=>{for(const n of e)"function"==typeof n&&n(...t)}}function qp(){}function Xp(e,t,n,r){const o=Array.isArray(t)?t:[t];return o.forEach((t=>e.addEventListener(t,n,r))),()=>{o.forEach((t=>e.removeEventListener(t,n,r)))}}function Kp(e,t,n,r){const o=Array.isArray(t)?t:[t];if("function"==typeof n){const t=function(e){return t=>{const n=function(e){const t=e.currentTarget;if(!Zp(t))return null;const n=new CustomEvent(`m-${e.type}`,{detail:{originalEvent:e},cancelable:!0});return t.dispatchEvent(n),n}(t);if(!n?.defaultPrevented)return e(t)}}((e=>n(e)));return o.forEach((n=>e.addEventListener(n,t,r))),()=>{o.forEach((n=>e.removeEventListener(n,t,r)))}}return()=>{}}function Jp(e){return window.getComputedStyle(e).getPropertyValue("direction")}function Qp(e,...t){const n={};for(const r of Object.keys(e))t.includes(r)||(n[r]=e[r]);return n}function ef(e){return{...e,get:()=>c(e)}}ef.writable=function(e){const t=Io(e);let n=e;return{subscribe:t.subscribe,set(e){t.set(e),n=e},update(e){const r=e(n);t.set(r),n=r},get:()=>n}},ef.derived=function(e,t){const n=new Map,r=()=>{const n=Array.isArray(e)?e.map((e=>e.get())):e.get();return t(n)};return{get:r,subscribe:t=>{const o=[];return(Array.isArray(e)?e:[e]).forEach((e=>{o.push(e.subscribe((()=>{t(r())})))})),t(r()),n.set(t,o),()=>{const e=n.get(t);if(e)for(const t of e)t();n.delete(t)}}}};const tf=(e,t)=>{const n=ef(e),r=(e,r)=>{n.update((n=>{const o=e(n);let i=o;return t&&(i=t({curr:n,next:o})),r?.(i),i}))};return{...n,update:r,set:e=>{r((()=>e))}}};let nf=(e=21)=>{let t="",n=e;for(;n--;)t+="useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict"[64*Math.random()|0];return t};function rf(){return nf(10)}const of={ALT:"Alt",ARROW_DOWN:"ArrowDown",ARROW_LEFT:"ArrowLeft",ARROW_RIGHT:"ArrowRight",ARROW_UP:"ArrowUp",BACKSPACE:"Backspace",CAPS_LOCK:"CapsLock",CONTROL:"Control",DELETE:"Delete",END:"End",ENTER:"Enter",ESCAPE:"Escape",F1:"F1",F10:"F10",F11:"F11",F12:"F12",F2:"F2",F3:"F3",F4:"F4",F5:"F5",F6:"F6",F7:"F7",F8:"F8",F9:"F9",HOME:"Home",META:"Meta",PAGE_DOWN:"PageDown",PAGE_UP:"PageUp",SHIFT:"Shift",SPACE:" ",TAB:"Tab",CTRL:"Control",ASTERISK:"*",A:"a",P:"p"},af=(e="ltr",t="horizontal")=>({horizontal:"rtl"===e?of.ARROW_LEFT:of.ARROW_RIGHT,vertical:of.ARROW_DOWN}[t]),sf=(e="ltr",t="horizontal")=>({horizontal:"rtl"===e?of.ARROW_RIGHT:of.ARROW_LEFT,vertical:of.ARROW_UP}[t]),lf=(e="ltr",t="horizontal")=>({nextKey:af(e,t),prevKey:sf(e,t)});function cf(e){const t={};return Object.keys(e).forEach((n=>{const r=n,o=e[r];t[r]=ef(Io(o))})),t}function uf(e){var t;Gp&&(t=1,new Promise((e=>setTimeout(e,t)))).then((()=>{const t=document.activeElement;Zp(t)&&t!==e&&(t.tabIndex=-1,e&&(e.tabIndex=0,e.focus()))}))}const{name:df,selector:pf}=Up("accordion"),ff={multiple:!1,disabled:!1,forceVisible:!1},mf=e=>{const t={...ff,...e},n=cf(Qp(t,"value","onValueChange","defaultValue")),r=["root"].reduce(((e,t)=>(e[t]=rf(),e)),{});const{disabled:o,forceVisible:i}=n,a=t.value??Io(t.defaultValue),s=tf(a,t?.onValueChange),l=(e,t)=>void 0!==t&&("string"==typeof t?t===e:t.includes(e)),c=Wo(s,(e=>t=>l(t,e))),u=Wp(df(),{returned:()=>({"data-melt-id":r.root})}),d=e=>"string"==typeof e?{value:e}:e,p=Wp(df("item"),{stores:s,returned:e=>t=>{const{value:n,disabled:r}=d(t);return{"data-state":l(n,e)?"open":"closed","data-disabled":Hp(r)}}}),f=Wp(df("trigger"),{stores:[s,o],returned:([e,t])=>n=>{const{value:r,disabled:o}=d(n);return{disabled:Hp(t||o),"aria-expanded":!!l(r,e),"aria-disabled":!!o,"data-disabled":Hp(o),"data-value":r,"data-state":l(r,e)?"open":"closed"}},action:e=>{const t=Yp(Kp(e,"click",(()=>{const t="true"===e.dataset.disabled,n=e.dataset.value;!t&&n&&g(n)})),Kp(e,"keydown",(t=>{if(![of.ARROW_DOWN,of.ARROW_UP,of.HOME,of.END].includes(t.key))return;if(t.preventDefault(),t.key===of.SPACE||t.key===of.ENTER){const t="true"===e.dataset.disabled,n=e.dataset.value;if(t||!n)return;return void g(n)}const n=t.target,o=function(e){if(!Gp)return null;const t=document.querySelector(`[data-melt-id="${e}"]`);return Zp(t)?t:null}(r.root);if(!o||!Zp(n))return;const i=Array.from(o.querySelectorAll(pf("trigger"))).filter((e=>!!Zp(e)&&"true"!==e.dataset.disabled));if(!i.length)return;const a=i.indexOf(n);t.key===of.ARROW_DOWN&&i[(a+1)%i.length].focus(),t.key===of.ARROW_UP&&i[(a-1+i.length)%i.length].focus(),t.key===of.HOME&&i[0].focus(),t.key===of.END&&i[i.length-1].focus()})));return{destroy:t}}}),m=Wp(df("content"),{stores:[s,o,i],returned:([e,t,n])=>r=>{const{value:o}=d(r),i=l(o,e)||n;return{"data-state":i?"open":"closed","data-disabled":Hp(t),"data-value":o,hidden:!i||void 0,style:_p({display:i?void 0:"none"})}},action:e=>{ge().then((()=>{const t=rf(),n=rf(),r=document.querySelector(`${pf("trigger")}, [data-value="${e.dataset.value}"]`);Zp(r)&&(e.id=t,r.setAttribute("aria-controls",t),r.id=n)}))}}),h=Wp(df("heading"),{returned:()=>e=>{const{level:t}=(e=>"number"==typeof e?{level:e}:e)(e);return{role:"heading","aria-level":t,"data-heading-level":t}}});function g(e){s.update((n=>void 0===n?t.multiple?[e]:e:Array.isArray(n)?n.includes(e)?n.filter((t=>t!==e)):(n.push(e),n):n===e?void 0:e))}return{ids:r,elements:{root:u,item:p,trigger:f,content:m,heading:h},states:{value:s},helpers:{isSelected:c},options:n}};Bo(void 0,(e=>Xp(document,"pointerup",(function(t){e(t),e(void 0)}),{passive:!1,capture:!0}))),Bo(void 0,(e=>Xp(document,"keydown",(function(t){t&&t.key===of.ESCAPE&&e(t),e(void 0)}),{passive:!1})));const hf={orientation:"horizontal",decorative:!1},gf=e=>{const t=cf({...hf,...e}),{orientation:n,decorative:r}=t;return{elements:{root:Wp("separator",{stores:[n,r],returned:([e,t])=>({role:t?"none":"separator","aria-orientation":"vertical"===e?e:void 0,"aria-hidden":t,"data-orientation":e})})},options:t}},vf={orientation:"horizontal",activateOnFocus:!0,loop:!0,autoSet:!0},{name:yf,selector:bf}=Up("tabs");function $f(e){const t={...vf,...e},n=cf(Qp(t,"defaultValue","value","onValueChange","autoSet")),{orientation:r,activateOnFocus:o,loop:i}=n,a=t.value??Io(t.defaultValue),s=tf(a,t?.onValueChange);let l=t.defaultValue??s.get();const c=Wp(yf(),{stores:r,returned:e=>({"data-orientation":e})}),u=Wp(yf("list"),{stores:r,returned:e=>({role:"tablist","aria-orientation":e,"data-orientation":e})}),d=Wp(yf("trigger"),{stores:[s,r],returned:([e,n])=>r=>{const{value:o,disabled:i}=(e=>"string"==typeof e?{value:e}:e)(r);e||l||!t.autoSet||(l=o,e=o,s.set(o));const a=(Gp?e:l)===o;return{type:"button",role:"tab","data-state":a?"active":"inactive",tabindex:a?0:-1,"data-value":o,"data-orientation":n,"data-disabled":Hp(i),disabled:Hp(i)}},action:e=>{const t=Yp(Kp(e,"focus",(()=>{const t="true"===e.dataset.disabled,n=e.dataset.value;o.get()&&!t&&void 0!==n&&s.set(n)})),Kp(e,"click",(t=>{e.focus(),t.preventDefault();if("true"===e.dataset.disabled)return;const n=e.dataset.value;e.focus(),void 0!==n&&s.set(n)})),Kp(e,"keydown",(t=>{const n=e.dataset.value;if(!n)return;const o=t.currentTarget;if(!Zp(o))return;const a=o.closest(bf());if(!Zp(a))return;const l=i.get(),c=Array.from(a.querySelectorAll('[role="tab"]')).filter((e=>Zp(e))),u=c.filter((e=>!e.hasAttribute("data-disabled"))),d=u.findIndex((e=>e===t.target)),p=Jp(a),{nextKey:f,prevKey:m}=lf(p,r.get());if(t.key===f){t.preventDefault();const e=function(e,t,n=!0){return t===e.length-1?n?e[0]:e[t]:e[t+1]}(u,d,l);e.focus()}else if(t.key===m){t.preventDefault();const e=function(e,t,n=!0){return t<=0?n?e[e.length-1]:e[0]:e[t-1]}(u,d,l);e.focus()}else if(t.key===of.ENTER||t.key===of.SPACE)t.preventDefault(),s.set(n);else if(t.key===of.HOME){t.preventDefault();u[0].focus()}else if(t.key===of.END){t.preventDefault();(h=u)[h.length-1].focus()}var h})));return{destroy:t}}});return{elements:{root:c,list:u,trigger:d,content:Wp(yf("content"),{stores:s,returned:e=>t=>({role:"tabpanel","aria-labelledby":t,hidden:Gp?e!==t||void 0:l!==t||void 0,tabindex:0})})},states:{value:s},options:n}}const xf={type:"single",orientation:"horizontal",loop:!0,rovingFocus:!0,disabled:!1,defaultValue:""},{name:wf,selector:Sf}=Up("toggle-group"),Cf=e=>{const t={...xf,...e},n=cf(Qp(t,"value")),{type:r,orientation:o,loop:i,rovingFocus:a,disabled:s}=n,l=t.defaultValue?t.defaultValue:"single"===t.type?"undefined":[],c=t.value??Io(l),u=tf(c,t?.onValueChange),d=Wp(wf(),{stores:o,returned:e=>({role:"group","data-orientation":e})}),p=Wp(wf("item"),{stores:[u,s,o,r],returned:([e,t,n,r])=>o=>{const i="string"==typeof o?o:o.value,a="string"!=typeof o&&!!o.disabled,s=t||a,l=Array.isArray(e)?e.includes(i):e===i,c="single"===r,u="multiple"===r||void 0===r;return{disabled:Hp(s),pressed:l,"data-orientation":n,"data-disabled":Hp(s),"data-state":l?"on":"off","data-value":i,"aria-pressed":u?l:void 0,"aria-checked":c?l:void 0,type:"button",role:c?"radio":void 0,tabindex:l?0:-1}},action:e=>{let t=qp;const n=e.closest(Sf());if(!Zp(n))return{};const r=Array.from(n.querySelectorAll(Sf("item"))),s=u.get();function l(){const{value:t,disabled:n}={value:e.dataset.value,disabled:"true"===e.dataset.disabled};void 0===t||n||u.update((e=>Array.isArray(e)?e.includes(t)?e.filter((e=>e!==t)):(e.push(t),e):e===t?void 0:t))}return(Array.isArray(s)?s.length>0:null!==s)||r[0]!==e||(e.tabIndex=0),t=Yp(Kp(e,"click",(()=>{l()})),Kp(e,"keydown",(e=>{if(e.key===of.SPACE||e.key===of.ENTER)return e.preventDefault(),void l();if(!a.get())return;const t=e.currentTarget;if(!Zp(t))return;const n=t.closest(Sf());if(!Zp(n))return;const r=Array.from(n.querySelectorAll(Sf("item")+":not([data-disabled])")).filter((e=>Zp(e))),s=r.indexOf(t),c=Jp(t),u=o.get(),d={horizontal:"rtl"===c?of.ARROW_LEFT:of.ARROW_RIGHT,vertical:of.ARROW_DOWN}[u??"horizontal"],p={horizontal:"rtl"===c?of.ARROW_RIGHT:of.ARROW_LEFT,vertical:of.ARROW_UP}[u??"horizontal"],f=i.get();if(e.key===d){e.preventDefault();const t=s+1;t>=r.length&&f?uf(r[0]):uf(r[t])}else if(e.key===p){e.preventDefault();const t=s-1;uf(t<0&&f?r[r.length-1]:r[t])}else e.key===of.HOME?(e.preventDefault(),uf(r[0])):e.key===of.END&&(e.preventDefault(),uf(r[r.length-1]))}))),{destroy:t}}}),f=Wo(u,(e=>t=>Array.isArray(e)?e.includes(t):e===t));return{elements:{root:d,item:p},states:{value:u},helpers:{isPressed:f},options:n}};function Ef(e,t){const n={};return t.forEach((t=>{n[t]={[`data-${e}-${t}`]:""}})),e=>n[e]}function kf(){const e=function(){const e=ne();return(t,n,{cancelable:r=!1}={})=>{const o=e.$$.callbacks[t];if(o){const i=Y(t,n,{cancelable:r});return o.slice().forEach((t=>{t.call(e,i)})),!i.defaultPrevented}return!0}}();return t=>{const{originalEvent:n}=t.detail,{cancelable:r}=t,o=n.type;e(o,{originalEvent:n,currentTarget:n.currentTarget},{cancelable:r})||t.preventDefault()}}function Mf(e){const t={};for(const n in e){const r=e[n];void 0!==r&&(t[n]=r)}return t}function Af(e){return function(t,n){if(void 0===n)return;const r=e[t];r&&r.set(n)}}function Tf(){const{NAME:e}={NAME:"accordion",ITEM_NAME:"accordion-item",PARTS:["root","content","header","item","trigger"]};return se(e)}function Rf(){const{ITEM_NAME:e}={NAME:"accordion",ITEM_NAME:"accordion-item",PARTS:["root","content","header","item","trigger"]};return se(e)}const Pf=e=>({builder:4&e}),Lf=e=>({builder:e[2]}),Of=e=>({builder:4&e}),zf=e=>({builder:e[2]});function Nf(e){let t,r,o,i;const a=e[11].default,s=d(a,e,e[10],Lf);let l=[e[2],e[4]],c={};for(let e=0;e<l.length;e+=1)c=n(c,l[e]);return{c(){t=P("div"),s&&s.c(),F(t,c)},m(n,a){A(n,t,a),s&&s.m(t,null),e[12](t),r=!0,o||(i=y(e[2].action(t)),o=!0)},p(e,n){s&&s.p&&(!r||1028&n)&&m(s,a,e,e[10],r?f(a,e[10],n,Pf):h(e[10]),Lf),F(t,c=De(l,[4&n&&e[2],16&n&&e[4]]))},i(e){r||(Re(s,e),r=!0)},o(e){Pe(s,e),r=!1},d(n){n&&T(t),s&&s.d(n),e[12](null),o=!1,i()}}}function jf(e){let t;const n=e[11].default,r=d(n,e,e[10],zf);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||1028&o)&&m(r,n,e,e[10],t?f(n,e[10],o,Of):h(e[10]),zf)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function Vf(e){let t,n,r,o;const i=[jf,Nf],a=[];function s(e,t){return e[1]?0:1}return t=s(e),n=a[t]=i[t](e),{c(){n.c(),r=N()},m(e,n){a[t].m(e,n),A(e,r,n),o=!0},p(e,[o]){let l=t;t=s(e),t===l?a[t].p(e,o):(Ae(),Pe(a[l],1,1,(()=>{a[l]=null})),Te(),n=a[t],n?n.p(e,o):(n=a[t]=i[t](e),n.c()),Re(n,1),n.m(r.parentNode,r))},i(e){o||(Re(n),o=!0)},o(e){Pe(n),o=!1},d(e){e&&T(r),a[t].d(e)}}}function Df(e,t,r){let o;const i=["multiple","value","onValueChange","disabled","asChild","el"];let a,s=v(t,i),{$$slots:l={},$$scope:c}=t,{multiple:d=!1}=t,{value:p}=t,{onValueChange:f}=t,{disabled:m=!1}=t,{asChild:h=!1}=t,{el:y}=t;const{elements:{root:b},states:{value:$},updateOption:x,getAttrs:w}=function(e){const t=mf(Mf(e)),{NAME:n,PARTS:r}={NAME:"accordion",ITEM_NAME:"accordion-item",PARTS:["root","content","header","item","trigger"]},o=Ef(n,r),i={...t,getAttrs:o,updateOption:Af(t.options)};return ae(n,i),i}({multiple:d,disabled:m,defaultValue:p,onValueChange:({next:e})=>Array.isArray(e)?(Array.isArray(p)&&Dp(p,e)||(f?.(e),r(5,p=e)),e):(p!==e&&(f?.(e),r(5,p=e)),e)});u(e,b,(e=>r(9,a=e)));const S=w("root");return e.$$set=e=>{t=n(n({},t),g(e)),r(4,s=v(t,i)),"multiple"in e&&r(6,d=e.multiple),"value"in e&&r(5,p=e.value),"onValueChange"in e&&r(7,f=e.onValueChange),"disabled"in e&&r(8,m=e.disabled),"asChild"in e&&r(1,h=e.asChild),"el"in e&&r(0,y=e.el),"$$scope"in e&&r(10,c=e.$$scope)},e.$$.update=()=>{32&e.$$.dirty&&void 0!==p&&$.set(Array.isArray(p)?[...p]:p),64&e.$$.dirty&&x("multiple",d),256&e.$$.dirty&&x("disabled",m),512&e.$$.dirty&&r(2,o=a),4&e.$$.dirty&&Object.assign(o,S)},[y,h,o,b,s,p,d,f,m,a,c,l,function(e){ue[e?"unshift":"push"]((()=>{y=e,r(0,y)}))}]}const _f=e=>({builder:4&e}),Hf=e=>({builder:e[2]}),Ff=e=>({builder:4&e}),Bf=e=>({builder:e[2]});function If(e){let t,r,o,i;const a=e[9].default,s=d(a,e,e[8],Hf);let l=[e[2],e[4]],c={};for(let e=0;e<l.length;e+=1)c=n(c,l[e]);return{c(){t=P("div"),s&&s.c(),F(t,c)},m(n,a){A(n,t,a),s&&s.m(t,null),e[10](t),r=!0,o||(i=y(e[2].action(t)),o=!0)},p(e,n){s&&s.p&&(!r||260&n)&&m(s,a,e,e[8],r?f(a,e[8],n,_f):h(e[8]),Hf),F(t,c=De(l,[4&n&&e[2],16&n&&e[4]]))},i(e){r||(Re(s,e),r=!0)},o(e){Pe(s,e),r=!1},d(n){n&&T(t),s&&s.d(n),e[10](null),o=!1,i()}}}function Wf(e){let t;const n=e[9].default,r=d(n,e,e[8],Bf);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||260&o)&&m(r,n,e,e[8],t?f(n,e[8],o,Ff):h(e[8]),Bf)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function Uf(e){let t,n,r,o;const i=[Wf,If],a=[];function s(e,t){return e[1]?0:1}return t=s(e),n=a[t]=i[t](e),{c(){n.c(),r=N()},m(e,n){a[t].m(e,n),A(e,r,n),o=!0},p(e,[o]){let l=t;t=s(e),t===l?a[t].p(e,o):(Ae(),Pe(a[l],1,1,(()=>{a[l]=null})),Te(),n=a[t],n?n.p(e,o):(n=a[t]=i[t](e),n.c()),Re(n,1),n.m(r.parentNode,r))},i(e){o||(Re(n),o=!0)},o(e){Pe(n),o=!1},d(e){e&&T(r),a[t].d(e)}}}function Gf(e,t,r){let o;const i=["value","disabled","asChild","el"];let a,s=v(t,i),{$$slots:l={},$$scope:c}=t,{value:d}=t,{disabled:p}=t,{asChild:f=!1}=t,{el:m}=t;const{elements:{item:h},props:y,getAttrs:b}=function(e){const{ITEM_NAME:t}={NAME:"accordion",ITEM_NAME:"accordion-item",PARTS:["root","content","header","item","trigger"]};return ae(t,{...e}),{...Tf(),props:e}}({value:d,disabled:p});u(e,h,(e=>r(7,a=e)));const $=b("item");return e.$$set=e=>{t=n(n({},t),g(e)),r(4,s=v(t,i)),"value"in e&&r(5,d=e.value),"disabled"in e&&r(6,p=e.disabled),"asChild"in e&&r(1,f=e.asChild),"el"in e&&r(0,m=e.el),"$$scope"in e&&r(8,c=e.$$scope)},e.$$.update=()=>{128&e.$$.dirty&&r(2,o=a(y)),4&e.$$.dirty&&Object.assign(o,$)},[m,f,o,h,s,d,p,a,c,l,function(e){ue[e?"unshift":"push"]((()=>{m=e,r(0,m)}))}]}let Zf=class extends Ue{constructor(e){super(),We(this,e,Gf,Uf,s,{value:5,disabled:6,asChild:1,el:0})}};const Yf=e=>({builder:4&e}),qf=e=>({builder:e[2]}),Xf=e=>({builder:4&e}),Kf=e=>({builder:e[2]});function Jf(e){let t,r,o,i;const a=e[8].default,s=d(a,e,e[7],qf);let l=[e[2],e[4]],c={};for(let e=0;e<l.length;e+=1)c=n(c,l[e]);return{c(){t=P("div"),s&&s.c(),F(t,c)},m(n,a){A(n,t,a),s&&s.m(t,null),e[9](t),r=!0,o||(i=y(e[2].action(t)),o=!0)},p(e,n){s&&s.p&&(!r||132&n)&&m(s,a,e,e[7],r?f(a,e[7],n,Yf):h(e[7]),qf),F(t,c=De(l,[4&n&&e[2],16&n&&e[4]]))},i(e){r||(Re(s,e),r=!0)},o(e){Pe(s,e),r=!1},d(n){n&&T(t),s&&s.d(n),e[9](null),o=!1,i()}}}function Qf(e){let t;const n=e[8].default,r=d(n,e,e[7],Kf);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||132&o)&&m(r,n,e,e[7],t?f(n,e[7],o,Xf):h(e[7]),Kf)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function em(e){let t,n,r,o;const i=[Qf,Jf],a=[];function s(e,t){return e[1]?0:1}return t=s(e),n=a[t]=i[t](e),{c(){n.c(),r=N()},m(e,n){a[t].m(e,n),A(e,r,n),o=!0},p(e,[o]){let l=t;t=s(e),t===l?a[t].p(e,o):(Ae(),Pe(a[l],1,1,(()=>{a[l]=null})),Te(),n=a[t],n?n.p(e,o):(n=a[t]=i[t](e),n.c()),Re(n,1),n.m(r.parentNode,r))},i(e){o||(Re(n),o=!0)},o(e){Pe(n),o=!1},d(e){e&&T(r),a[t].d(e)}}}function tm(e,t,r){let o;const i=["level","asChild","el"];let a,s=v(t,i),{$$slots:l={},$$scope:c}=t,{level:d=3}=t,{asChild:p=!1}=t,{el:f}=t;const{elements:{heading:m},getAttrs:h}=Tf();u(e,m,(e=>r(6,a=e)));const y=h("header");return e.$$set=e=>{t=n(n({},t),g(e)),r(4,s=v(t,i)),"level"in e&&r(5,d=e.level),"asChild"in e&&r(1,p=e.asChild),"el"in e&&r(0,f=e.el),"$$scope"in e&&r(7,c=e.$$scope)},e.$$.update=()=>{96&e.$$.dirty&&r(2,o=a(d)),4&e.$$.dirty&&Object.assign(o,y)},[f,p,o,m,s,d,a,c,l,function(e){ue[e?"unshift":"push"]((()=>{f=e,r(0,f)}))}]}class nm extends Ue{constructor(e){super(),We(this,e,tm,em,s,{level:5,asChild:1,el:0})}}const rm=e=>({builder:4&e}),om=e=>({builder:e[2]}),im=e=>({builder:4&e}),am=e=>({builder:e[2]});function sm(e){let t,r,o,a;const s=e[8].default,l=d(s,e,e[7],om);let c=[e[2],{type:"button"},e[5]],u={};for(let e=0;e<c.length;e+=1)u=n(u,c[e]);return{c(){t=P("button"),l&&l.c(),F(t,u)},m(n,i){A(n,t,i),l&&l.m(t,null),t.autofocus&&t.focus(),e[9](t),r=!0,o||(a=[y(e[2].action(t)),j(t,"m-keydown",e[4]),j(t,"m-click",e[4])],o=!0)},p(e,n){l&&l.p&&(!r||132&n)&&m(l,s,e,e[7],r?f(s,e[7],n,rm):h(e[7]),om),F(t,u=De(c,[4&n&&e[2],{type:"button"},32&n&&e[5]]))},i(e){r||(Re(l,e),r=!0)},o(e){Pe(l,e),r=!1},d(n){n&&T(t),l&&l.d(n),e[9](null),o=!1,i(a)}}}function lm(e){let t;const n=e[8].default,r=d(n,e,e[7],am);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||132&o)&&m(r,n,e,e[7],t?f(n,e[7],o,im):h(e[7]),am)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function cm(e){let t,n,r,o;const i=[lm,sm],a=[];function s(e,t){return e[1]?0:1}return t=s(e),n=a[t]=i[t](e),{c(){n.c(),r=N()},m(e,n){a[t].m(e,n),A(e,r,n),o=!0},p(e,[o]){let l=t;t=s(e),t===l?a[t].p(e,o):(Ae(),Pe(a[l],1,1,(()=>{a[l]=null})),Te(),n=a[t],n?n.p(e,o):(n=a[t]=i[t](e),n.c()),Re(n,1),n.m(r.parentNode,r))},i(e){o||(Re(n),o=!0)},o(e){Pe(n),o=!1},d(e){e&&T(r),a[t].d(e)}}}function um(e,t,r){let o;const i=["asChild","el"];let a,s=v(t,i),{$$slots:l={},$$scope:c}=t,{asChild:d=!1}=t,{el:p}=t;const{elements:{trigger:f},props:m,getAttrs:h}=function(){const e=Tf(),{value:t,disabled:n}=Rf();return{...e,props:{value:t,disabled:n}}}();u(e,f,(e=>r(6,a=e)));const y=kf(),b=h("trigger");return e.$$set=e=>{t=n(n({},t),g(e)),r(5,s=v(t,i)),"asChild"in e&&r(1,d=e.asChild),"el"in e&&r(0,p=e.el),"$$scope"in e&&r(7,c=e.$$scope)},e.$$.update=()=>{64&e.$$.dirty&&r(2,o=a(m)),4&e.$$.dirty&&Object.assign(o,b)},[p,d,o,f,y,s,a,c,l,function(e){ue[e?"unshift":"push"]((()=>{p=e,r(0,p)}))}]}let dm=class extends Ue{constructor(e){super(),We(this,e,um,cm,s,{asChild:1,el:0})}};const pm=e=>({builder:256&e}),fm=e=>({builder:e[8]}),mm=e=>({builder:256&e}),hm=e=>({builder:e[8]}),gm=e=>({builder:256&e}),vm=e=>({builder:e[8]}),ym=e=>({builder:256&e}),bm=e=>({builder:e[8]}),$m=e=>({builder:256&e}),xm=e=>({builder:e[8]}),wm=e=>({builder:256&e}),Sm=e=>({builder:e[8]});function Cm(e){let t,r,o,i;const a=e[16].default,s=d(a,e,e[15],fm);let l=[e[8],e[13]],c={};for(let e=0;e<l.length;e+=1)c=n(c,l[e]);return{c(){t=P("div"),s&&s.c(),F(t,c)},m(n,a){A(n,t,a),s&&s.m(t,null),e[21](t),r=!0,o||(i=y(e[8].action(t)),o=!0)},p(e,n){s&&s.p&&(!r||33024&n)&&m(s,a,e,e[15],r?f(a,e[15],n,pm):h(e[15]),fm),F(t,c=De(l,[256&n&&e[8],8192&n&&e[13]]))},i(e){r||(Re(s,e),r=!0)},o(e){Pe(s,e),r=!1},d(n){n&&T(t),s&&s.d(n),e[21](null),o=!1,i()}}}function Em(e){let t,r,o,i,a;const s=e[16].default,l=d(s,e,e[15],hm);let c=[e[8],e[13]],u={};for(let e=0;e<c.length;e+=1)u=n(u,c[e]);return{c(){t=P("div"),l&&l.c(),F(t,u)},m(n,r){A(n,t,r),l&&l.m(t,null),e[20](t),o=!0,i||(a=y(e[8].action(t)),i=!0)},p(n,r){e=n,l&&l.p&&(!o||33024&r)&&m(l,s,e,e[15],o?f(s,e[15],r,mm):h(e[15]),hm),F(t,u=De(c,[256&r&&e[8],8192&r&&e[13]]))},i(e){o||(Re(l,e),r&&r.end(1),o=!0)},o(n){Pe(l,n),n&&(r=ze(t,e[5],e[6])),o=!1},d(n){n&&T(t),l&&l.d(n),e[20](null),n&&r&&r.end(),i=!1,a()}}}function km(e){let t,r,o,i,a;const s=e[16].default,l=d(s,e,e[15],vm);let c=[e[8],e[13]],u={};for(let e=0;e<c.length;e+=1)u=n(u,c[e]);return{c(){t=P("div"),l&&l.c(),F(t,u)},m(n,r){A(n,t,r),l&&l.m(t,null),e[19](t),o=!0,i||(a=y(e[8].action(t)),i=!0)},p(n,r){e=n,l&&l.p&&(!o||33024&r)&&m(l,s,e,e[15],o?f(s,e[15],r,gm):h(e[15]),vm),F(t,u=De(c,[256&r&&e[8],8192&r&&e[13]]))},i(n){o||(Re(l,n),n&&(r||ve((()=>{r=Oe(t,e[3],e[4]),r.start()}))),o=!0)},o(e){Pe(l,e),o=!1},d(n){n&&T(t),l&&l.d(n),e[19](null),i=!1,a()}}}function Mm(e){let t,r,o,i,a,s;const l=e[16].default,c=d(l,e,e[15],bm);let u=[e[8],e[13]],p={};for(let e=0;e<u.length;e+=1)p=n(p,u[e]);return{c(){t=P("div"),c&&c.c(),F(t,p)},m(n,r){A(n,t,r),c&&c.m(t,null),e[18](t),i=!0,a||(s=y(e[8].action(t)),a=!0)},p(n,r){e=n,c&&c.p&&(!i||33024&r)&&m(c,l,e,e[15],i?f(l,e[15],r,ym):h(e[15]),bm),F(t,p=De(u,[256&r&&e[8],8192&r&&e[13]]))},i(n){i||(Re(c,n),n&&ve((()=>{i&&(o&&o.end(1),r=Oe(t,e[3],e[4]),r.start())})),i=!0)},o(n){Pe(c,n),r&&r.invalidate(),n&&(o=ze(t,e[5],e[6])),i=!1},d(n){n&&T(t),c&&c.d(n),e[18](null),n&&o&&o.end(),a=!1,s()}}}function Am(e){let t,r,o,i,a;const s=e[16].default,l=d(s,e,e[15],xm);let c=[e[8],e[13]],u={};for(let e=0;e<c.length;e+=1)u=n(u,c[e]);return{c(){t=P("div"),l&&l.c(),F(t,u)},m(n,r){A(n,t,r),l&&l.m(t,null),e[17](t),o=!0,i||(a=y(e[8].action(t)),i=!0)},p(n,r){e=n,l&&l.p&&(!o||33024&r)&&m(l,s,e,e[15],o?f(s,e[15],r,$m):h(e[15]),xm),F(t,u=De(c,[256&r&&e[8],8192&r&&e[13]]))},i(n){o||(Re(l,n),n&&ve((()=>{o&&(r||(r=Ne(t,e[1],e[2],!0)),r.run(1))})),o=!0)},o(n){Pe(l,n),n&&(r||(r=Ne(t,e[1],e[2],!1)),r.run(0)),o=!1},d(n){n&&T(t),l&&l.d(n),e[17](null),n&&r&&r.end(),i=!1,a()}}}function Tm(e){let t;const n=e[16].default,r=d(n,e,e[15],Sm);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||33024&o)&&m(r,n,e,e[15],t?f(n,e[15],o,wm):h(e[15]),Sm)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function Rm(e){let t,n,r,o,i,a,s,l,c,u;const d=[Tm,Am,Mm,km,Em,Cm],p=[];function f(e,s){return 640&s&&(t=null),514&s&&(n=null),552&s&&(r=null),520&s&&(o=null),544&s&&(i=null),512&s&&(a=null),null==t&&(t=!(!e[7]||!e[9](e[12]))),t?0:(null==n&&(n=!(!e[1]||!e[9](e[12]))),n?1:(null==r&&(r=!!(e[3]&&e[5]&&e[9](e[12]))),r?2:(null==o&&(o=!(!e[3]||!e[9](e[12]))),o?3:(null==i&&(i=!(!e[5]||!e[9](e[12]))),i?4:(null==a&&(a=!!e[9](e[12])),a?5:-1)))))}return~(s=f(e,-1))&&(l=p[s]=d[s](e)),{c(){l&&l.c(),c=N()},m(e,t){~s&&p[s].m(e,t),A(e,c,t),u=!0},p(e,[t]){let n=s;s=f(e,t),s===n?~s&&p[s].p(e,t):(l&&(Ae(),Pe(p[n],1,1,(()=>{p[n]=null})),Te()),~s?(l=p[s],l?l.p(e,t):(l=p[s]=d[s](e),l.c()),Re(l,1),l.m(c.parentNode,c)):l=null)},i(e){u||(Re(l),u=!0)},o(e){Pe(l),u=!1},d(e){e&&T(c),~s&&p[s].d(e)}}}function Pm(e,t,r){let o;const i=["transition","transitionConfig","inTransition","inTransitionConfig","outTransition","outTransitionConfig","asChild","el"];let a,s,l=v(t,i),{$$slots:c={},$$scope:d}=t,{transition:p}=t,{transitionConfig:f}=t,{inTransition:m}=t,{inTransitionConfig:h}=t,{outTransition:y}=t,{outTransitionConfig:b}=t,{asChild:$=!1}=t,{el:x}=t;const{elements:{content:w},helpers:{isSelected:S},props:C,getAttrs:E}=function(){const e=Tf(),{value:t}=Rf();return{...e,props:t}}();u(e,w,(e=>r(14,a=e))),u(e,S,(e=>r(9,s=e)));const k=E("content");return e.$$set=e=>{t=n(n({},t),g(e)),r(13,l=v(t,i)),"transition"in e&&r(1,p=e.transition),"transitionConfig"in e&&r(2,f=e.transitionConfig),"inTransition"in e&&r(3,m=e.inTransition),"inTransitionConfig"in e&&r(4,h=e.inTransitionConfig),"outTransition"in e&&r(5,y=e.outTransition),"outTransitionConfig"in e&&r(6,b=e.outTransitionConfig),"asChild"in e&&r(7,$=e.asChild),"el"in e&&r(0,x=e.el),"$$scope"in e&&r(15,d=e.$$scope)},e.$$.update=()=>{16384&e.$$.dirty&&r(8,o=a(C)),256&e.$$.dirty&&Object.assign(o,k)},[x,p,f,m,h,y,b,$,o,s,w,S,C,l,a,d,c,function(e){ue[e?"unshift":"push"]((()=>{x=e,r(0,x)}))},function(e){ue[e?"unshift":"push"]((()=>{x=e,r(0,x)}))},function(e){ue[e?"unshift":"push"]((()=>{x=e,r(0,x)}))},function(e){ue[e?"unshift":"push"]((()=>{x=e,r(0,x)}))},function(e){ue[e?"unshift":"push"]((()=>{x=e,r(0,x)}))}]}let Lm=class extends Ue{constructor(e){super(),We(this,e,Pm,Rm,s,{transition:1,transitionConfig:2,inTransition:3,inTransitionConfig:4,outTransition:5,outTransitionConfig:6,asChild:7,el:0})}};function Om(e,t){const n=[];return t.builders.forEach((t=>{const r=t.action(e);r&&n.push(r)})),{destroy:()=>{n.forEach((e=>{e.destroy&&e.destroy()}))}}}function zm(e){const t={};return e.forEach((e=>{Object.keys(e).forEach((n=>{"action"!==n&&(t[n]=e[n])}))})),t}function Nm(e){let t,n,r=e[1]?"a":"button",o=(e[1]?"a":"button")&&Vm(e);return{c(){o&&o.c(),t=N()},m(e,r){o&&o.m(e,r),A(e,t,r),n=!0},p(e,n){e[1]||"button"?r?s(r,e[1]?"a":"button")?(o.d(1),o=Vm(e),r=e[1]?"a":"button",o.c(),o.m(t.parentNode,t)):o.p(e,n):(o=Vm(e),r=e[1]?"a":"button",o.c(),o.m(t.parentNode,t)):r&&(o.d(1),o=null,r=e[1]?"a":"button")},i(e){n||(Re(o,e),n=!0)},o(e){Pe(o,e),n=!1},d(e){e&&T(t),o&&o.d(e)}}}function jm(e){let t,n,r=e[1]?"a":"button",o=(e[1]?"a":"button")&&Dm(e);return{c(){o&&o.c(),t=N()},m(e,r){o&&o.m(e,r),A(e,t,r),n=!0},p(e,n){e[1]||"button"?r?s(r,e[1]?"a":"button")?(o.d(1),o=Dm(e),r=e[1]?"a":"button",o.c(),o.m(t.parentNode,t)):o.p(e,n):(o=Dm(e),r=e[1]?"a":"button",o.c(),o.m(t.parentNode,t)):r&&(o.d(1),o=null,r=e[1]?"a":"button")},i(e){n||(Re(o,e),n=!0)},o(e){Pe(o,e),n=!1},d(e){e&&T(t),o&&o.d(e)}}}function Vm(e){let t,r,o,a,s;const l=e[7].default,c=d(l,e,e[6],null);let u=[{type:r=e[1]?void 0:e[2]},{href:e[1]},{tabindex:"0"},e[5],e[4]],p={};for(let e=0;e<u.length;e+=1)p=n(p,u[e]);return{c(){t=P(e[1]?"a":"button"),c&&c.c(),W(e[1]?"a":"button")(t,p)},m(n,r){A(n,t,r),c&&c.m(t,null),o=!0,a||(s=[j(t,"click",e[14]),j(t,"change",e[15]),j(t,"keydown",e[16]),j(t,"keyup",e[17]),j(t,"mouseenter",e[18]),j(t,"mouseleave",e[19])],a=!0)},p(e,n){c&&c.p&&(!o||64&n)&&m(c,l,e,e[6],o?f(l,e[6],n,null):h(e[6]),null),W(e[1]?"a":"button")(t,p=De(u,[(!o||6&n&&r!==(r=e[1]?void 0:e[2]))&&{type:r},(!o||2&n)&&{href:e[1]},{tabindex:"0"},32&n&&e[5],e[4]]))},i(e){o||(Re(c,e),o=!0)},o(e){Pe(c,e),o=!1},d(e){e&&T(t),c&&c.d(e),a=!1,i(s)}}}function Dm(e){let t,r,o,s,l,c;const u=e[7].default,p=d(u,e,e[6],null);let g=[{type:r=e[1]?void 0:e[2]},{href:e[1]},{tabindex:"0"},zm(e[3]),e[5],e[4]],v={};for(let e=0;e<g.length;e+=1)v=n(v,g[e]);return{c(){t=P(e[1]?"a":"button"),p&&p.c(),W(e[1]?"a":"button")(t,v)},m(n,r){A(n,t,r),p&&p.m(t,null),e[20](t),s=!0,l||(c=[j(t,"click",e[8]),j(t,"change",e[9]),j(t,"keydown",e[10]),j(t,"keyup",e[11]),j(t,"mouseenter",e[12]),j(t,"mouseleave",e[13]),y(o=Om.call(null,t,{builders:e[3]}))],l=!0)},p(e,n){p&&p.p&&(!s||64&n)&&m(p,u,e,e[6],s?f(u,e[6],n,null):h(e[6]),null),W(e[1]?"a":"button")(t,v=De(g,[(!s||6&n&&r!==(r=e[1]?void 0:e[2]))&&{type:r},(!s||2&n)&&{href:e[1]},{tabindex:"0"},8&n&&zm(e[3]),32&n&&e[5],e[4]])),o&&a(o.update)&&8&n&&o.update.call(null,{builders:e[3]})},i(e){s||(Re(p,e),s=!0)},o(e){Pe(p,e),s=!1},d(n){n&&T(t),p&&p.d(n),e[20](null),l=!1,i(c)}}}function _m(e){let t,n,r,o;const i=[jm,Nm],a=[];function s(e,t){return e[3]&&e[3].length?0:1}return t=s(e),n=a[t]=i[t](e),{c(){n.c(),r=N()},m(e,n){a[t].m(e,n),A(e,r,n),o=!0},p(e,[o]){let l=t;t=s(e),t===l?a[t].p(e,o):(Ae(),Pe(a[l],1,1,(()=>{a[l]=null})),Te(),n=a[t],n?n.p(e,o):(n=a[t]=i[t](e),n.c()),Re(n,1),n.m(r.parentNode,r))},i(e){o||(Re(n),o=!0)},o(e){Pe(n),o=!1},d(e){e&&T(r),a[t].d(e)}}}function Hm(e,t,r){const o=["href","type","builders","el"];let i=v(t,o),{$$slots:a={},$$scope:s}=t,{href:l}=t,{type:c}=t,{builders:u=[]}=t,{el:d}=t;return e.$$set=e=>{t=n(n({},t),g(e)),r(5,i=v(t,o)),"href"in e&&r(1,l=e.href),"type"in e&&r(2,c=e.type),"builders"in e&&r(3,u=e.builders),"el"in e&&r(0,d=e.el),"$$scope"in e&&r(6,s=e.$$scope)},[d,l,c,u,{"data-button-root":""},i,s,a,function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(e){ue[e?"unshift":"push"]((()=>{d=e,r(0,d)}))}]}let Fm=class extends Ue{constructor(e){super(),We(this,e,Hm,_m,s,{href:1,type:2,builders:3,el:0})}};const Bm=e=>({builder:4&e}),Im=e=>({builder:e[2]});function Wm(t){let r,o,i,a=[t[2],t[4]],s={};for(let e=0;e<a.length;e+=1)s=n(s,a[e]);return{c(){r=P("div"),F(r,s)},m(e,n){A(e,r,n),t[10](r),o||(i=y(t[2].action(r)),o=!0)},p(e,t){F(r,s=De(a,[4&t&&e[2],16&t&&e[4]]))},i:e,o:e,d(e){e&&T(r),t[10](null),o=!1,i()}}}function Um(e){let t;const n=e[9].default,r=d(n,e,e[8],Im);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||260&o)&&m(r,n,e,e[8],t?f(n,e[8],o,Bm):h(e[8]),Im)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function Gm(e){let t,n,r,o;const i=[Um,Wm],a=[];function s(e,t){return e[1]?0:1}return t=s(e),n=a[t]=i[t](e),{c(){n.c(),r=N()},m(e,n){a[t].m(e,n),A(e,r,n),o=!0},p(e,[o]){let l=t;t=s(e),t===l?a[t].p(e,o):(Ae(),Pe(a[l],1,1,(()=>{a[l]=null})),Te(),n=a[t],n?n.p(e,o):(n=a[t]=i[t](e),n.c()),Re(n,1),n.m(r.parentNode,r))},i(e){o||(Re(n),o=!0)},o(e){Pe(n),o=!1},d(e){e&&T(r),a[t].d(e)}}}function Zm(e,t,r){let o;const i=["orientation","decorative","asChild","el"];let a,s=v(t,i),{$$slots:l={},$$scope:c}=t,{orientation:d="horizontal"}=t,{decorative:p=!0}=t,{asChild:f=!1}=t,{el:m}=t;const{elements:{root:h},updateOption:y,getAttrs:b}=function(e){const{NAME:t,PARTS:n}={NAME:"separator",PARTS:["root"]},r=Ef(t,n),o={...gf(Mf(e)),getAttrs:r};return{...o,updateOption:Af(o.options)}}({orientation:d,decorative:p});u(e,h,(e=>r(7,a=e)));const $=b("root");return e.$$set=e=>{t=n(n({},t),g(e)),r(4,s=v(t,i)),"orientation"in e&&r(5,d=e.orientation),"decorative"in e&&r(6,p=e.decorative),"asChild"in e&&r(1,f=e.asChild),"el"in e&&r(0,m=e.el),"$$scope"in e&&r(8,c=e.$$scope)},e.$$.update=()=>{32&e.$$.dirty&&y("orientation",d),64&e.$$.dirty&&y("decorative",p),128&e.$$.dirty&&r(2,o=a),4&e.$$.dirty&&Object.assign(o,$)},[m,f,o,h,s,d,p,a,c,l,function(e){ue[e?"unshift":"push"]((()=>{m=e,r(0,m)}))}]}let Ym=class extends Ue{constructor(e){super(),We(this,e,Zm,Gm,s,{orientation:5,decorative:6,asChild:1,el:0})}};function qm(){const{NAME:e}={NAME:"tabs",PARTS:["root","content","list","trigger"]};return se(e)}const Xm=e=>({builder:4&e,value:8&e}),Km=e=>({builder:e[2],value:e[3]}),Jm=e=>({builder:4&e,value:8&e}),Qm=e=>({builder:e[2],value:e[3]});function eh(e){let t,r,o,i;const a=e[15].default,s=d(a,e,e[14],Km);let l=[e[2],e[6]],c={};for(let e=0;e<l.length;e+=1)c=n(c,l[e]);return{c(){t=P("div"),s&&s.c(),F(t,c)},m(n,a){A(n,t,a),s&&s.m(t,null),e[16](t),r=!0,o||(i=y(e[2].action(t)),o=!0)},p(e,n){s&&s.p&&(!r||16396&n)&&m(s,a,e,e[14],r?f(a,e[14],n,Xm):h(e[14]),Km),F(t,c=De(l,[4&n&&e[2],64&n&&e[6]]))},i(e){r||(Re(s,e),r=!0)},o(e){Pe(s,e),r=!1},d(n){n&&T(t),s&&s.d(n),e[16](null),o=!1,i()}}}function th(e){let t;const n=e[15].default,r=d(n,e,e[14],Qm);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||16396&o)&&m(r,n,e,e[14],t?f(n,e[14],o,Jm):h(e[14]),Qm)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function nh(e){let t,n,r,o;const i=[th,eh],a=[];function s(e,t){return e[1]?0:1}return t=s(e),n=a[t]=i[t](e),{c(){n.c(),r=N()},m(e,n){a[t].m(e,n),A(e,r,n),o=!0},p(e,[o]){let l=t;t=s(e),t===l?a[t].p(e,o):(Ae(),Pe(a[l],1,1,(()=>{a[l]=null})),Te(),n=a[t],n?n.p(e,o):(n=a[t]=i[t](e),n.c()),Re(n,1),n.m(r.parentNode,r))},i(e){o||(Re(n),o=!0)},o(e){Pe(n),o=!1},d(e){e&&T(r),a[t].d(e)}}}function rh(e,t,r){let o;const i=["orientation","activateOnFocus","loop","autoSet","value","onValueChange","asChild","el"];let a,s,l=v(t,i),{$$slots:c={},$$scope:d}=t,{orientation:p}=t,{activateOnFocus:f}=t,{loop:m}=t,{autoSet:h}=t,{value:y}=t,{onValueChange:b}=t,{asChild:$=!1}=t,{el:x}=t;const{elements:{root:w},states:{value:S},updateOption:C,getAttrs:E}=function(e){const{NAME:t,PARTS:n}={NAME:"tabs",PARTS:["root","content","list","trigger"]},r=Ef(t,n),o={...$f(Mf(e)),getAttrs:r};return ae(t,o),{...o,updateOption:Af(o.options)}}({orientation:p,activateOnFocus:f,loop:m,autoSet:h,defaultValue:y,onValueChange:({next:e})=>(y!==e&&(b?.(e),r(7,y=e)),e)});u(e,w,(e=>r(13,a=e))),u(e,S,(e=>r(3,s=e)));const k=E("root");return e.$$set=e=>{t=n(n({},t),g(e)),r(6,l=v(t,i)),"orientation"in e&&r(8,p=e.orientation),"activateOnFocus"in e&&r(9,f=e.activateOnFocus),"loop"in e&&r(10,m=e.loop),"autoSet"in e&&r(11,h=e.autoSet),"value"in e&&r(7,y=e.value),"onValueChange"in e&&r(12,b=e.onValueChange),"asChild"in e&&r(1,$=e.asChild),"el"in e&&r(0,x=e.el),"$$scope"in e&&r(14,d=e.$$scope)},e.$$.update=()=>{128&e.$$.dirty&&void 0!==y&&S.set(y),256&e.$$.dirty&&C("orientation",p),512&e.$$.dirty&&C("activateOnFocus",f),1024&e.$$.dirty&&C("loop",m),2048&e.$$.dirty&&C("autoSet",h),8192&e.$$.dirty&&r(2,o=a),4&e.$$.dirty&&Object.assign(o,k)},[x,$,o,s,w,S,l,y,p,f,m,h,b,a,d,c,function(e){ue[e?"unshift":"push"]((()=>{x=e,r(0,x)}))}]}const oh=e=>({builder:4&e}),ih=e=>({builder:e[2]}),ah=e=>({builder:4&e}),sh=e=>({builder:e[2]});function lh(e){let t,r,o,i;const a=e[8].default,s=d(a,e,e[7],ih);let l=[e[2],e[4]],c={};for(let e=0;e<l.length;e+=1)c=n(c,l[e]);return{c(){t=P("div"),s&&s.c(),F(t,c)},m(n,a){A(n,t,a),s&&s.m(t,null),e[9](t),r=!0,o||(i=y(e[2].action(t)),o=!0)},p(e,n){s&&s.p&&(!r||132&n)&&m(s,a,e,e[7],r?f(a,e[7],n,oh):h(e[7]),ih),F(t,c=De(l,[4&n&&e[2],16&n&&e[4]]))},i(e){r||(Re(s,e),r=!0)},o(e){Pe(s,e),r=!1},d(n){n&&T(t),s&&s.d(n),e[9](null),o=!1,i()}}}function ch(e){let t;const n=e[8].default,r=d(n,e,e[7],sh);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||132&o)&&m(r,n,e,e[7],t?f(n,e[7],o,ah):h(e[7]),sh)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function uh(e){let t,n,r,o;const i=[ch,lh],a=[];function s(e,t){return e[1]?0:1}return t=s(e),n=a[t]=i[t](e),{c(){n.c(),r=N()},m(e,n){a[t].m(e,n),A(e,r,n),o=!0},p(e,[o]){let l=t;t=s(e),t===l?a[t].p(e,o):(Ae(),Pe(a[l],1,1,(()=>{a[l]=null})),Te(),n=a[t],n?n.p(e,o):(n=a[t]=i[t](e),n.c()),Re(n,1),n.m(r.parentNode,r))},i(e){o||(Re(n),o=!0)},o(e){Pe(n),o=!1},d(e){e&&T(r),a[t].d(e)}}}function dh(e,t,r){let o;const i=["value","asChild","el"];let a,s=v(t,i),{$$slots:l={},$$scope:c}=t,{value:d}=t,{asChild:p=!1}=t,{el:f}=t;const{elements:{content:m},getAttrs:h}=qm();u(e,m,(e=>r(6,a=e)));const y=h("content");return e.$$set=e=>{t=n(n({},t),g(e)),r(4,s=v(t,i)),"value"in e&&r(5,d=e.value),"asChild"in e&&r(1,p=e.asChild),"el"in e&&r(0,f=e.el),"$$scope"in e&&r(7,c=e.$$scope)},e.$$.update=()=>{96&e.$$.dirty&&r(2,o=a(d)),4&e.$$.dirty&&Object.assign(o,y)},[f,p,o,m,s,d,a,c,l,function(e){ue[e?"unshift":"push"]((()=>{f=e,r(0,f)}))}]}let ph=class extends Ue{constructor(e){super(),We(this,e,dh,uh,s,{value:5,asChild:1,el:0})}};const fh=e=>({builder:4&e}),mh=e=>({builder:e[2]}),hh=e=>({builder:4&e}),gh=e=>({builder:e[2]});function vh(e){let t,r,o,i;const a=e[7].default,s=d(a,e,e[6],mh);let l=[e[2],e[4]],c={};for(let e=0;e<l.length;e+=1)c=n(c,l[e]);return{c(){t=P("div"),s&&s.c(),F(t,c)},m(n,a){A(n,t,a),s&&s.m(t,null),e[8](t),r=!0,o||(i=y(e[2].action(t)),o=!0)},p(e,n){s&&s.p&&(!r||68&n)&&m(s,a,e,e[6],r?f(a,e[6],n,fh):h(e[6]),mh),F(t,c=De(l,[4&n&&e[2],16&n&&e[4]]))},i(e){r||(Re(s,e),r=!0)},o(e){Pe(s,e),r=!1},d(n){n&&T(t),s&&s.d(n),e[8](null),o=!1,i()}}}function yh(e){let t;const n=e[7].default,r=d(n,e,e[6],gh);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||68&o)&&m(r,n,e,e[6],t?f(n,e[6],o,hh):h(e[6]),gh)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function bh(e){let t,n,r,o;const i=[yh,vh],a=[];function s(e,t){return e[1]?0:1}return t=s(e),n=a[t]=i[t](e),{c(){n.c(),r=N()},m(e,n){a[t].m(e,n),A(e,r,n),o=!0},p(e,[o]){let l=t;t=s(e),t===l?a[t].p(e,o):(Ae(),Pe(a[l],1,1,(()=>{a[l]=null})),Te(),n=a[t],n?n.p(e,o):(n=a[t]=i[t](e),n.c()),Re(n,1),n.m(r.parentNode,r))},i(e){o||(Re(n),o=!0)},o(e){Pe(n),o=!1},d(e){e&&T(r),a[t].d(e)}}}function $h(e,t,r){let o;const i=["asChild","el"];let a,s=v(t,i),{$$slots:l={},$$scope:c}=t,{asChild:d=!1}=t,{el:p}=t;const{elements:{list:f},getAttrs:m}=qm();u(e,f,(e=>r(5,a=e)));const h=m("list");return e.$$set=e=>{t=n(n({},t),g(e)),r(4,s=v(t,i)),"asChild"in e&&r(1,d=e.asChild),"el"in e&&r(0,p=e.el),"$$scope"in e&&r(6,c=e.$$scope)},e.$$.update=()=>{32&e.$$.dirty&&r(2,o=a),4&e.$$.dirty&&Object.assign(o,h)},[p,d,o,f,s,a,c,l,function(e){ue[e?"unshift":"push"]((()=>{p=e,r(0,p)}))}]}let xh=class extends Ue{constructor(e){super(),We(this,e,$h,bh,s,{asChild:1,el:0})}};const wh=e=>({builder:4&e}),Sh=e=>({builder:e[2]}),Ch=e=>({builder:4&e}),Eh=e=>({builder:e[2]});function kh(e){let t,r,o,a;const s=e[10].default,l=d(s,e,e[9],Sh);let c=[e[2],{type:"button"},e[5]],u={};for(let e=0;e<c.length;e+=1)u=n(u,c[e]);return{c(){t=P("button"),l&&l.c(),F(t,u)},m(n,i){A(n,t,i),l&&l.m(t,null),t.autofocus&&t.focus(),e[11](t),r=!0,o||(a=[y(e[2].action(t)),j(t,"m-click",e[4]),j(t,"m-focus",e[4]),j(t,"m-keydown",e[4])],o=!0)},p(e,n){l&&l.p&&(!r||516&n)&&m(l,s,e,e[9],r?f(s,e[9],n,wh):h(e[9]),Sh),F(t,u=De(c,[4&n&&e[2],{type:"button"},32&n&&e[5]]))},i(e){r||(Re(l,e),r=!0)},o(e){Pe(l,e),r=!1},d(n){n&&T(t),l&&l.d(n),e[11](null),o=!1,i(a)}}}function Mh(e){let t;const n=e[10].default,r=d(n,e,e[9],Eh);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||516&o)&&m(r,n,e,e[9],t?f(n,e[9],o,Ch):h(e[9]),Eh)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function Ah(e){let t,n,r,o;const i=[Mh,kh],a=[];function s(e,t){return e[1]?0:1}return t=s(e),n=a[t]=i[t](e),{c(){n.c(),r=N()},m(e,n){a[t].m(e,n),A(e,r,n),o=!0},p(e,[o]){let l=t;t=s(e),t===l?a[t].p(e,o):(Ae(),Pe(a[l],1,1,(()=>{a[l]=null})),Te(),n=a[t],n?n.p(e,o):(n=a[t]=i[t](e),n.c()),Re(n,1),n.m(r.parentNode,r))},i(e){o||(Re(n),o=!0)},o(e){Pe(n),o=!1},d(e){e&&T(r),a[t].d(e)}}}function Th(e,t,r){let o;const i=["value","disabled","asChild","el"];let a,s=v(t,i),{$$slots:l={},$$scope:c}=t,{value:d}=t,{disabled:p}=t,{asChild:f=!1}=t,{el:m}=t;const{elements:{trigger:h},getAttrs:y}=qm();u(e,h,(e=>r(8,a=e)));const b=kf(),$=y("trigger");return e.$$set=e=>{t=n(n({},t),g(e)),r(5,s=v(t,i)),"value"in e&&r(6,d=e.value),"disabled"in e&&r(7,p=e.disabled),"asChild"in e&&r(1,f=e.asChild),"el"in e&&r(0,m=e.el),"$$scope"in e&&r(9,c=e.$$scope)},e.$$.update=()=>{448&e.$$.dirty&&r(2,o=a({value:d,disabled:p})),4&e.$$.dirty&&Object.assign(o,$)},[m,f,o,h,b,s,d,p,a,c,l,function(e){ue[e?"unshift":"push"]((()=>{m=e,r(0,m)}))}]}let Rh=class extends Ue{constructor(e){super(),We(this,e,Th,Ah,s,{value:6,disabled:7,asChild:1,el:0})}};const Ph=e=>({builder:4&e}),Lh=e=>({builder:e[2]}),Oh=e=>({builder:4&e}),zh=e=>({builder:e[2]});function Nh(e){let t,r,o,i;const a=e[13].default,s=d(a,e,e[12],Lh);let l=[e[2],e[4]],c={};for(let e=0;e<l.length;e+=1)c=n(c,l[e]);return{c(){t=P("div"),s&&s.c(),F(t,c)},m(n,a){A(n,t,a),s&&s.m(t,null),e[14](t),r=!0,o||(i=y(e[2].action(t)),o=!0)},p(e,n){s&&s.p&&(!r||4100&n)&&m(s,a,e,e[12],r?f(a,e[12],n,Ph):h(e[12]),Lh),F(t,c=De(l,[4&n&&e[2],16&n&&e[4]]))},i(e){r||(Re(s,e),r=!0)},o(e){Pe(s,e),r=!1},d(n){n&&T(t),s&&s.d(n),e[14](null),o=!1,i()}}}function jh(e){let t;const n=e[13].default,r=d(n,e,e[12],zh);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||4100&o)&&m(r,n,e,e[12],t?f(n,e[12],o,Oh):h(e[12]),zh)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function Vh(e){let t,n,r,o;const i=[jh,Nh],a=[];function s(e,t){return e[1]?0:1}return t=s(e),n=a[t]=i[t](e),{c(){n.c(),r=N()},m(e,n){a[t].m(e,n),A(e,r,n),o=!0},p(e,[o]){let l=t;t=s(e),t===l?a[t].p(e,o):(Ae(),Pe(a[l],1,1,(()=>{a[l]=null})),Te(),n=a[t],n?n.p(e,o):(n=a[t]=i[t](e),n.c()),Re(n,1),n.m(r.parentNode,r))},i(e){o||(Re(n),o=!0)},o(e){Pe(n),o=!1},d(e){e&&T(r),a[t].d(e)}}}function Dh(e,t,r){let o;const i=["type","disabled","loop","value","orientation","onValueChange","asChild","el"];let a,s=v(t,i),{$$slots:l={},$$scope:c}=t,{type:d="single"}=t,{disabled:p}=t,{loop:f}=t,{value:m}=t,{orientation:h}=t,{onValueChange:y}=t,{asChild:b=!1}=t,{el:$}=t;const{elements:{root:x},states:{value:w},updateOption:S,getAttrs:C}=function(e){const{NAME:t,PARTS:n}={NAME:"toggle-group",PARTS:["root","item"]},r=Ef(t,n),o={...Cf(Mf(e)),getAttrs:r};return ae(t,o),{...o,updateOption:Af(o.options)}}({disabled:p,type:d,defaultValue:m,loop:f,orientation:h,onValueChange:({next:e})=>Array.isArray(e)?(Array.isArray(m)&&Dp(m,e)||(y?.(e),r(5,m=e)),e):(m!==e&&(y?.(e),r(5,m=e)),e)});u(e,x,(e=>r(11,a=e)));const E=C("root");return e.$$set=e=>{t=n(n({},t),g(e)),r(4,s=v(t,i)),"type"in e&&r(6,d=e.type),"disabled"in e&&r(7,p=e.disabled),"loop"in e&&r(8,f=e.loop),"value"in e&&r(5,m=e.value),"orientation"in e&&r(9,h=e.orientation),"onValueChange"in e&&r(10,y=e.onValueChange),"asChild"in e&&r(1,b=e.asChild),"el"in e&&r(0,$=e.el),"$$scope"in e&&r(12,c=e.$$scope)},e.$$.update=()=>{32&e.$$.dirty&&void 0!==m&&w.set(Array.isArray(m)?[...m]:m),128&e.$$.dirty&&S("disabled",p),256&e.$$.dirty&&S("loop",f),64&e.$$.dirty&&S("type",d),512&e.$$.dirty&&S("orientation",h),2048&e.$$.dirty&&r(2,o=a),4&e.$$.dirty&&Object.assign(o,E)},[$,b,o,x,s,m,d,p,f,h,y,a,c,l,function(e){ue[e?"unshift":"push"]((()=>{$=e,r(0,$)}))}]}let _h=class extends Ue{constructor(e){super(),We(this,e,Dh,Vh,s,{type:6,disabled:7,loop:8,value:5,orientation:9,onValueChange:10,asChild:1,el:0})}};const Hh=e=>({builder:4&e}),Fh=e=>({builder:e[2]}),Bh=e=>({builder:4&e}),Ih=e=>({builder:e[2]});function Wh(e){let t,r,o,a;const s=e[10].default,l=d(s,e,e[9],Fh);let c=[e[2],e[5]],u={};for(let e=0;e<c.length;e+=1)u=n(u,c[e]);return{c(){t=P("button"),l&&l.c(),F(t,u)},m(n,i){A(n,t,i),l&&l.m(t,null),t.autofocus&&t.focus(),e[11](t),r=!0,o||(a=[y(e[2].action(t)),j(t,"m-click",e[4]),j(t,"m-keydown",e[4])],o=!0)},p(e,n){l&&l.p&&(!r||516&n)&&m(l,s,e,e[9],r?f(s,e[9],n,Hh):h(e[9]),Fh),F(t,u=De(c,[4&n&&e[2],32&n&&e[5]]))},i(e){r||(Re(l,e),r=!0)},o(e){Pe(l,e),r=!1},d(n){n&&T(t),l&&l.d(n),e[11](null),o=!1,i(a)}}}function Uh(e){let t;const n=e[10].default,r=d(n,e,e[9],Ih);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||516&o)&&m(r,n,e,e[9],t?f(n,e[9],o,Bh):h(e[9]),Ih)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function Gh(e){let t,n,r,o;const i=[Uh,Wh],a=[];function s(e,t){return e[1]?0:1}return t=s(e),n=a[t]=i[t](e),{c(){n.c(),r=N()},m(e,n){a[t].m(e,n),A(e,r,n),o=!0},p(e,[o]){let l=t;t=s(e),t===l?a[t].p(e,o):(Ae(),Pe(a[l],1,1,(()=>{a[l]=null})),Te(),n=a[t],n?n.p(e,o):(n=a[t]=i[t](e),n.c()),Re(n,1),n.m(r.parentNode,r))},i(e){o||(Re(n),o=!0)},o(e){Pe(n),o=!1},d(e){e&&T(r),a[t].d(e)}}}function Zh(e,t,r){let o;const i=["value","disabled","asChild","el"];let a,s=v(t,i),{$$slots:l={},$$scope:c}=t,{value:d}=t,{disabled:p=!1}=t,{asChild:f=!1}=t,{el:m}=t;const{elements:{item:h},getAttrs:y}=function(){const{NAME:e}={NAME:"toggle-group",PARTS:["root","item"]};return se(e)}();u(e,h,(e=>r(8,a=e)));const b=kf(),$=y("item");return e.$$set=e=>{t=n(n({},t),g(e)),r(5,s=v(t,i)),"value"in e&&r(6,d=e.value),"disabled"in e&&r(7,p=e.disabled),"asChild"in e&&r(1,f=e.asChild),"el"in e&&r(0,m=e.el),"$$scope"in e&&r(9,c=e.$$scope)},e.$$.update=()=>{448&e.$$.dirty&&r(2,o=a({value:d,disabled:p})),4&e.$$.dirty&&Object.assign(o,$)},[m,f,o,h,b,s,d,p,a,c,l,function(e){ue[e?"unshift":"push"]((()=>{m=e,r(0,m)}))}]}let Yh=class extends Ue{constructor(e){super(),We(this,e,Zh,Gh,s,{value:6,disabled:7,asChild:1,el:0})}};function qh(e){let t;const n=e[3].default,r=d(n,e,e[4],null);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||16&o)&&m(r,n,e,e[4],t?f(n,e[4],o,null):h(e[4]),null)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function Xh(e){let t,r;const o=[{class:Dt("mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",e[0])},{value:e[1]},e[2]];let i={$$slots:{default:[qh]},$$scope:{ctx:e}};for(let e=0;e<o.length;e+=1)i=n(i,o[e]);return t=new ph({props:i}),{c(){Fe(t.$$.fragment)},m(e,n){Be(t,e,n),r=!0},p(e,[n]){const r=7&n?De(o,[1&n&&{class:Dt("mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",e[0])},2&n&&{value:e[1]},4&n&&_e(e[2])]):{};16&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){r||(Re(t.$$.fragment,e),r=!0)},o(e){Pe(t.$$.fragment,e),r=!1},d(e){Ie(t,e)}}}function Kh(e,t,r){const o=["class","value"];let i=v(t,o),{$$slots:a={},$$scope:s}=t,{class:l}=t,{value:c}=t;return e.$$set=e=>{t=n(n({},t),g(e)),r(2,i=v(t,o)),"class"in e&&r(0,l=e.class),"value"in e&&r(1,c=e.value),"$$scope"in e&&r(4,s=e.$$scope)},[l,c,i,a,s]}class Jh extends Ue{constructor(e){super(),We(this,e,Kh,Xh,s,{class:0,value:1})}}function Qh(e){let t;const n=e[2].default,r=d(n,e,e[3],null);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||8&o)&&m(r,n,e,e[3],t?f(n,e[3],o,null):h(e[3]),null)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function eg(e){let t,r;const o=[{class:Dt("inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",e[0])},e[1]];let i={$$slots:{default:[Qh]},$$scope:{ctx:e}};for(let e=0;e<o.length;e+=1)i=n(i,o[e]);return t=new xh({props:i}),{c(){Fe(t.$$.fragment)},m(e,n){Be(t,e,n),r=!0},p(e,[n]){const r=3&n?De(o,[1&n&&{class:Dt("inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",e[0])},2&n&&_e(e[1])]):{};8&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){r||(Re(t.$$.fragment,e),r=!0)},o(e){Pe(t.$$.fragment,e),r=!1},d(e){Ie(t,e)}}}function tg(e,t,r){const o=["class"];let i=v(t,o),{$$slots:a={},$$scope:s}=t,{class:l}=t;return e.$$set=e=>{t=n(n({},t),g(e)),r(1,i=v(t,o)),"class"in e&&r(0,l=e.class),"$$scope"in e&&r(3,s=e.$$scope)},[l,i,a,s]}class ng extends Ue{constructor(e){super(),We(this,e,tg,eg,s,{class:0})}}function rg(e){let t;const n=e[3].default,r=d(n,e,e[7],null);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||128&o)&&m(r,n,e,e[7],t?f(n,e[7],o,null):h(e[7]),null)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function og(e){let t,r;const o=[{class:Dt("inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:text-foreground data-[state=active]:shadow",e[0])},{value:e[1]},e[2]];let i={$$slots:{default:[rg]},$$scope:{ctx:e}};for(let e=0;e<o.length;e+=1)i=n(i,o[e]);return t=new Rh({props:i}),t.$on("click",e[4]),t.$on("keydown",e[5]),t.$on("focus",e[6]),{c(){Fe(t.$$.fragment)},m(e,n){Be(t,e,n),r=!0},p(e,[n]){const r=7&n?De(o,[1&n&&{class:Dt("inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:text-foreground data-[state=active]:shadow",e[0])},2&n&&{value:e[1]},4&n&&_e(e[2])]):{};128&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){r||(Re(t.$$.fragment,e),r=!0)},o(e){Pe(t.$$.fragment,e),r=!1},d(e){Ie(t,e)}}}function ig(e,t,r){const o=["class","value"];let i=v(t,o),{$$slots:a={},$$scope:s}=t,{class:l}=t,{value:c}=t;return e.$$set=e=>{t=n(n({},t),g(e)),r(2,i=v(t,o)),"class"in e&&r(0,l=e.class),"value"in e&&r(1,c=e.value),"$$scope"in e&&r(7,s=e.$$scope)},[l,c,i,a,function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},s]}class ag extends Ue{constructor(e){super(),We(this,e,ig,og,s,{class:0,value:1})}}const sg=class extends Ue{constructor(e){super(),We(this,e,rh,nh,s,{orientation:8,activateOnFocus:9,loop:10,autoSet:11,value:7,onValueChange:12,asChild:1,el:0})}},lg=["px","%","rem","vh","vw"],cg=(e,t,n)=>{const{width:r,height:o}={width:window.innerWidth,height:window.innerHeight},i=(()=>{const e=getComputedStyle(document.documentElement).fontSize;return parseInt(e,10)})();let a,s;switch(t){case"rem":a=e*i;break;case"vw":case"%":a=e/100*r;break;case"vh":a=e/100*o;break;default:a=e}switch(n){case"rem":s=a/i;break;case"vw":case"%":s=a/r*100;break;case"vh":s=a/o*100;break;default:s=a}return s};var ug,dg;!function(e){e.Text="text",e.Number="number",e.Select="select",e.Color="color"}(ug||(ug={})),function(e){e.Size="Size",e.Position="Position",e.Style="Style",e.Text="Text",e.Spacing="Padding & Margin",e.Effects="Effects"}(dg||(dg={}));const pg=[dg.Size,dg.Position,dg.Style,dg.Text,dg.Spacing,dg.Effects];class fg{constructor(e,t,n,r,o,i,a,s){this.key=e,this.value=t,this.displayName=n,this.type=r,this.group=o,this.options=i,this.units=a,this.max=s}}const mg=[new fg("width","","W",ug.Number,dg.Size,[],lg,1e3),new fg("height","","H",ug.Number,dg.Size,[],lg,1e3),new fg("minWidth","","mW",ug.Number,dg.Size,[],lg,1e3),new fg("minHeight","","mH",ug.Number,dg.Size,[],lg,1e3),new fg("maxWidth","","MW",ug.Number,dg.Size,[],lg,1e3),new fg("maxHeight","","MH",ug.Number,dg.Size,[],lg,1e3),new fg("rotate","","Rot",ug.Number,dg.Size,[],["deg","rad","grad","turn"],1e3),new fg("borderRadius","","Rad",ug.Number,dg.Size,[],lg,1e3),new fg("position","relative","Type",ug.Select,dg.Position,["relative","absolute","fixed","sticky","static"]),new fg("opacity","100","Opacity",ug.Number,dg.Style,[],["%"],1),new fg("overflow","visible","Overflow",ug.Select,dg.Style,["visible","hidden","scroll","auto"]),new fg("backgroundColor","","Background",ug.Color,dg.Style),new fg("fontFamily","sans-serif","Font",ug.Select,dg.Text,["inherit","system-ui","serif","sans-serif","monospace","cursive","fantasy","emoji","math","fangsong"]),new fg("fontSize","16px","Font Size",ug.Number,dg.Text,[],lg,100),new fg("fontWeight","normal","Weight",ug.Select,dg.Text,["lighter","normal","bold","bolder","100","200","300","400","500","600","700","800","900"]),new fg("color","#000000","Color",ug.Color,dg.Text),new fg("letterSpacing","0px","Letter",ug.Number,dg.Text,[],lg,100),new fg("lineHeight","100%","Line Height",ug.Number,dg.Text,[],lg,100),new fg("textAlign","start","Text Alignment",ug.Select,dg.Text,["start","center","end"]),new fg("marginTop","","Margin Top",ug.Number,dg.Spacing,[],lg,1e3),new fg("marginRight","","Margin Right",ug.Number,dg.Spacing,[],lg,1e3),new fg("marginBottom","","Margin Bottom",ug.Number,dg.Spacing,[],lg,1e3),new fg("marginLeft","","Margin Left",ug.Number,dg.Spacing,[],lg,1e3),new fg("paddingTop","","Padding Top",ug.Number,dg.Spacing,[],lg,1e3),new fg("paddingRight","","Padding Right",ug.Number,dg.Spacing,[],lg,1e3),new fg("paddingBottom","","Padding Bottom",ug.Number,dg.Spacing,[],lg,1e3),new fg("paddingLeft","","Padding Left",ug.Number,dg.Spacing,[],lg,1e3)];function hg(e){return e.reduce(((e,t)=>(e[t.group]||(e[t.group]=[]),e[t.group].push(t),function(e){const t={};return pg.forEach((n=>{e[n]&&(t[n]=e[n])})),t}(e))),{})}function gg(e,{delay:t=0,duration:n=400,easing:r=Vt,axis:o="y"}={}){const i=getComputedStyle(e),a=+i.opacity,s="y"===o?"height":"width",l=parseFloat(i[s]),c="y"===o?["top","bottom"]:["left","right"],u=c.map((e=>`${e[0].toUpperCase()}${e.slice(1)}`)),d=parseFloat(i[`padding${u[0]}`]),p=parseFloat(i[`padding${u[1]}`]),f=parseFloat(i[`margin${u[0]}`]),m=parseFloat(i[`margin${u[1]}`]),h=parseFloat(i[`border${u[0]}Width`]),g=parseFloat(i[`border${u[1]}Width`]);return{delay:t,duration:n,easing:r,css:e=>`overflow: hidden;opacity: ${Math.min(20*e,1)*a};${s}: ${e*l}px;padding-${c[0]}: ${e*d}px;padding-${c[1]}: ${e*p}px;margin-${c[0]}: ${e*f}px;margin-${c[1]}: ${e*m}px;border-${c[0]}-width: ${e*h}px;border-${c[1]}-width: ${e*g}px;`}}function vg(e){let t,n;const r=e[4].default,o=d(r,e,e[5],null);return{c(){t=P("div"),o&&o.c(),_(t,"class","pb-4 pt-0")},m(e,r){A(e,t,r),o&&o.m(t,null),n=!0},p(e,t){o&&o.p&&(!n||32&t)&&m(o,r,e,e[5],n?f(r,e[5],t,null):h(e[5]),null)},i(e){n||(Re(o,e),n=!0)},o(e){Pe(o,e),n=!1},d(e){e&&T(t),o&&o.d(e)}}}function yg(e){let t,r;const o=[{class:Dt("overflow-hidden text-sm",e[0])},{transition:e[1]},{transitionConfig:e[2]},e[3]];let i={$$slots:{default:[vg]},$$scope:{ctx:e}};for(let e=0;e<o.length;e+=1)i=n(i,o[e]);return t=new Lm({props:i}),{c(){Fe(t.$$.fragment)},m(e,n){Be(t,e,n),r=!0},p(e,[n]){const r=15&n?De(o,[1&n&&{class:Dt("overflow-hidden text-sm",e[0])},2&n&&{transition:e[1]},4&n&&{transitionConfig:e[2]},8&n&&_e(e[3])]):{};32&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){r||(Re(t.$$.fragment,e),r=!0)},o(e){Pe(t.$$.fragment,e),r=!1},d(e){Ie(t,e)}}}function bg(e,t,r){const o=["class","transition","transitionConfig"];let i=v(t,o),{$$slots:a={},$$scope:s}=t,{class:l}=t,{transition:c=gg}=t,{transitionConfig:u={duration:200}}=t;return e.$$set=e=>{t=n(n({},t),g(e)),r(3,i=v(t,o)),"class"in e&&r(0,l=e.class),"transition"in e&&r(1,c=e.transition),"transitionConfig"in e&&r(2,u=e.transitionConfig),"$$scope"in e&&r(5,s=e.$$scope)},[l,c,u,i,a,s]}class $g extends Ue{constructor(e){super(),We(this,e,bg,yg,s,{class:0,transition:1,transitionConfig:2})}}function xg(e){let t;const n=e[3].default,r=d(n,e,e[4],null);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||16&o)&&m(r,n,e,e[4],t?f(n,e[4],o,null):h(e[4]),null)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function wg(e){let t,r;const o=[{value:e[1]},{class:Dt("border-b",e[0])},e[2]];let i={$$slots:{default:[xg]},$$scope:{ctx:e}};for(let e=0;e<o.length;e+=1)i=n(i,o[e]);return t=new Zf({props:i}),{c(){Fe(t.$$.fragment)},m(e,n){Be(t,e,n),r=!0},p(e,[n]){const r=7&n?De(o,[2&n&&{value:e[1]},1&n&&{class:Dt("border-b",e[0])},4&n&&_e(e[2])]):{};16&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){r||(Re(t.$$.fragment,e),r=!0)},o(e){Pe(t.$$.fragment,e),r=!1},d(e){Ie(t,e)}}}function Sg(e,t,r){const o=["class","value"];let i=v(t,o),{$$slots:a={},$$scope:s}=t,{class:l}=t,{value:c}=t;return e.$$set=e=>{t=n(n({},t),g(e)),r(2,i=v(t,o)),"class"in e&&r(0,l=e.class),"value"in e&&r(1,c=e.value),"$$scope"in e&&r(4,s=e.$$scope)},[l,c,i,a,s]}class Cg extends Ue{constructor(e){super(),We(this,e,Sg,wg,s,{class:0,value:1})}}function Eg(e){let t,n,r;const o=e[3].default,i=d(o,e,e[5],null);return n=new Qt({props:{class:"h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200"}}),{c(){i&&i.c(),t=z(),Fe(n.$$.fragment)},m(e,o){i&&i.m(e,o),A(e,t,o),Be(n,e,o),r=!0},p(e,t){i&&i.p&&(!r||32&t)&&m(i,o,e,e[5],r?f(o,e[5],t,null):h(e[5]),null)},i(e){r||(Re(i,e),Re(n.$$.fragment,e),r=!0)},o(e){Pe(i,e),Pe(n.$$.fragment,e),r=!1},d(e){e&&T(t),i&&i.d(e),Ie(n,e)}}}function kg(e){let t,r;const o=[{class:Dt("flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",e[0])},e[2]];let i={$$slots:{default:[Eg]},$$scope:{ctx:e}};for(let e=0;e<o.length;e+=1)i=n(i,o[e]);return t=new dm({props:i}),t.$on("click",e[4]),{c(){Fe(t.$$.fragment)},m(e,n){Be(t,e,n),r=!0},p(e,n){const r=5&n?De(o,[1&n&&{class:Dt("flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",e[0])},4&n&&_e(e[2])]):{};32&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){r||(Re(t.$$.fragment,e),r=!0)},o(e){Pe(t.$$.fragment,e),r=!1},d(e){Ie(t,e)}}}function Mg(e){let t,n;return t=new nm({props:{level:e[1],class:"flex",$$slots:{default:[kg]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,[n]){const r={};2&n&&(r.level=e[1]),37&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function Ag(e,t,r){const o=["class","level"];let i=v(t,o),{$$slots:a={},$$scope:s}=t,{class:l}=t,{level:c=3}=t;return e.$$set=e=>{t=n(n({},t),g(e)),r(2,i=v(t,o)),"class"in e&&r(0,l=e.class),"level"in e&&r(1,c=e.level),"$$scope"in e&&r(5,s=e.$$scope)},[l,c,i,a,function(t){le.call(this,e,t)},s]}class Tg extends Ue{constructor(e){super(),We(this,e,Ag,Mg,s,{class:0,level:1})}}const Rg=class extends Ue{constructor(e){super(),We(this,e,Df,Vf,s,{multiple:6,value:5,onValueChange:7,disabled:8,asChild:1,el:0})}};function Pg(t){let r,o,a,s,l=[{class:o=Dt("flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",t[1])},t[2]],c={};for(let e=0;e<l.length;e+=1)c=n(c,l[e]);return{c(){r=P("input"),F(r,c)},m(e,n){A(e,r,n),r.autofocus&&r.focus(),G(r,t[0]),a||(s=[j(r,"input",t[17]),j(r,"blur",t[3]),j(r,"change",t[4]),j(r,"click",t[5]),j(r,"focus",t[6]),j(r,"focusin",t[7]),j(r,"focusout",t[8]),j(r,"keydown",t[9]),j(r,"keypress",t[10]),j(r,"keyup",t[11]),j(r,"mouseover",t[12]),j(r,"mouseenter",t[13]),j(r,"mouseleave",t[14]),j(r,"paste",t[15]),j(r,"input",t[16])],a=!0)},p(e,[t]){F(r,c=De(l,[2&t&&o!==(o=Dt("flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",e[1]))&&{class:o},4&t&&e[2]])),1&t&&r.value!==e[0]&&G(r,e[0])},i:e,o:e,d(e){e&&T(r),a=!1,i(s)}}}function Lg(e,t,r){const o=["class","value"];let i=v(t,o),{class:a}=t,{value:s}=t;return e.$$set=e=>{t=n(n({},t),g(e)),r(2,i=v(t,o)),"class"in e&&r(1,a=e.class),"value"in e&&r(0,s=e.value)},[s,a,i,function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},function(){s=this.value,r(0,s)}]}class Og extends Ue{constructor(e){super(),We(this,e,Lg,Pg,s,{class:1,value:0})}}function zg(e){let t,r;const o=[{class:Dt("shrink-0 bg-border","horizontal"===e[1]?"h-[1px] w-full":"h-full w-[1px]",e[0])},{orientation:e[1]},{decorative:e[2]},e[3]];let i={};for(let e=0;e<o.length;e+=1)i=n(i,o[e]);return t=new Ym({props:i}),{c(){Fe(t.$$.fragment)},m(e,n){Be(t,e,n),r=!0},p(e,[n]){const r=15&n?De(o,[3&n&&{class:Dt("shrink-0 bg-border","horizontal"===e[1]?"h-[1px] w-full":"h-full w-[1px]",e[0])},2&n&&{orientation:e[1]},4&n&&{decorative:e[2]},8&n&&_e(e[3])]):{};t.$set(r)},i(e){r||(Re(t.$$.fragment,e),r=!0)},o(e){Pe(t.$$.fragment,e),r=!1},d(e){Ie(t,e)}}}function Ng(e,t,r){const o=["class","orientation","decorative"];let i=v(t,o),{class:a}=t,{orientation:s="horizontal"}=t,{decorative:l}=t;return e.$$set=e=>{t=n(n({},t),g(e)),r(3,i=v(t,o)),"class"in e&&r(0,a=e.class),"orientation"in e&&r(1,s=e.orientation),"decorative"in e&&r(2,l=e.decorative)},[a,s,l,i]}class jg extends Ue{constructor(e){super(),We(this,e,Ng,zg,s,{class:0,orientation:1,decorative:2})}}const Vg=e=>({builder:256&e}),Dg=e=>({builder:e[8]});function _g(e){let t;const n=e[5].default,r=d(n,e,e[7],Dg);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||384&o)&&m(r,n,e,e[7],t?f(n,e[7],o,Vg):h(e[7]),Dg)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function Hg(e){let t,r,o;const i=[{class:Dt("flex items-center justify-center gap-1",e[1])},e[2]];function a(t){e[6](t)}let s={$$slots:{default:[_g,({builder:e})=>({8:e}),({builder:e})=>e?256:0]},$$scope:{ctx:e}};for(let e=0;e<i.length;e+=1)s=n(s,i[e]);return void 0!==e[0]&&(s.value=e[0]),t=new _h({props:s}),ue.push((()=>He(t,"value",a))),{c(){Fe(t.$$.fragment)},m(e,n){Be(t,e,n),o=!0},p(e,[n]){const o=6&n?De(i,[2&n&&{class:Dt("flex items-center justify-center gap-1",e[1])},4&n&&_e(e[2])]):{};384&n&&(o.$$scope={dirty:n,ctx:e}),!r&&1&n&&(r=!0,o.value=e[0],ye((()=>r=!1))),t.$set(o)},i(e){o||(Re(t.$$.fragment,e),o=!0)},o(e){Pe(t.$$.fragment,e),o=!1},d(e){Ie(t,e)}}}function Fg(e,t,r){const o=["class","variant","size","value"];let i=v(t,o),{$$slots:a={},$$scope:s}=t,{class:l}=t,{variant:c="default"}=t,{size:u="default"}=t,{value:d}=t;return ae("toggleGroup",{variant:c,size:u}),e.$$set=e=>{t=n(n({},t),g(e)),r(2,i=v(t,o)),"class"in e&&r(1,l=e.class),"variant"in e&&r(3,c=e.variant),"size"in e&&r(4,u=e.size),"value"in e&&r(0,d=e.value),"$$scope"in e&&r(7,s=e.$$scope)},[d,l,i,c,u,a,function(e){d=e,r(0,d)},s]}class Bg extends Ue{constructor(e){super(),We(this,e,Fg,Hg,s,{class:1,variant:3,size:4,value:0})}}var Ig=e=>"boolean"==typeof e?`${e}`:0===e?"0":e,Wg=e=>!e||"object"!=typeof e||0===Object.keys(e).length;function Ug(e,t){e.forEach((function(e){Array.isArray(e)?Ug(e,t):t.push(e)}))}function Gg(e){let t=[];return Ug(e,t),t}var Zg=(...e)=>Gg(e).filter(Boolean),Yg=(e,t)=>{let n={},r=Object.keys(e),o=Object.keys(t);for(let i of r)if(o.includes(i)){let r=e[i],o=t[i];"object"==typeof r&&"object"==typeof o?n[i]=Yg(r,o):Array.isArray(r)||Array.isArray(o)?n[i]=Zg(o,r):n[i]=o+" "+r}else n[i]=e[i];for(let e of o)r.includes(e)||(n[e]=t[e]);return n},qg=e=>e&&"string"==typeof e?e.replace(/\s+/g," ").trim():e;function Xg(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=Kg(e))&&(r&&(r+=" "),r+=t);return r}function Kg(e){if("string"==typeof e)return e;for(var t,n="",r=0;r<e.length;r++)e[r]&&(t=Kg(e[r]))&&(n&&(n+=" "),n+=t);return n}var Jg="-";function Qg(e){var t=function(e){var t=e.theme,n=e.prefix,r={nextPart:new Map,validators:[]},o=function(e,t){if(!t)return e;return e.map((function(e){return[e[0],e[1].map((function(e){return"string"==typeof e?t+e:"object"==typeof e?Object.fromEntries(Object.entries(e).map((function(e){var n=e[0],r=e[1];return[t+n,r]}))):e}))]}))}(Object.entries(e.classGroups),n);return o.forEach((function(e){var n=e[0];nv(e[1],r,n,t)})),r}(e),n=e.conflictingClassGroups,r=e.conflictingClassGroupModifiers,o=void 0===r?{}:r;return{getClassGroupId:function(e){var n=e.split(Jg);return""===n[0]&&1!==n.length&&n.shift(),ev(n,t)||function(e){if(tv.test(e)){var t=tv.exec(e)[1],n=t?.substring(0,t.indexOf(":"));if(n)return"arbitrary.."+n}}(e)},getConflictingClassGroupIds:function(e,t){var r=n[e]||[];return t&&o[e]?[].concat(r,o[e]):r}}}function ev(e,t){if(0===e.length)return t.classGroupId;var n=e[0],r=t.nextPart.get(n),o=r?ev(e.slice(1),r):void 0;if(o)return o;if(0!==t.validators.length){var i=e.join(Jg);return t.validators.find((function(e){return(0,e.validator)(i)}))?.classGroupId}}var tv=/^\[(.+)\]$/;function nv(e,t,n,r){e.forEach((function(e){if("string"!=typeof e){if("function"==typeof e)return e.isThemeGetter?void nv(e(r),t,n,r):void t.validators.push({validator:e,classGroupId:n});Object.entries(e).forEach((function(e){var o=e[0];nv(e[1],rv(t,o),n,r)}))}else{(""===e?t:rv(t,e)).classGroupId=n}}))}function rv(e,t){var n=e;return t.split(Jg).forEach((function(e){n.nextPart.has(e)||n.nextPart.set(e,{nextPart:new Map,validators:[]}),n=n.nextPart.get(e)})),n}function ov(e){if(e<1)return{get:function(){},set:function(){}};var t=0,n=new Map,r=new Map;function o(o,i){n.set(o,i),++t>e&&(t=0,r=n,n=new Map)}return{get:function(e){var t=n.get(e);return void 0!==t?t:void 0!==(t=r.get(e))?(o(e,t),t):void 0},set:function(e,t){n.has(e)?n.set(e,t):o(e,t)}}}var iv="!";function av(e){var t=e.separator||":",n=1===t.length,r=t[0],o=t.length;return function(e){for(var i,a=[],s=0,l=0,c=0;c<e.length;c++){var u=e[c];if(0===s){if(u===r&&(n||e.slice(c,c+o)===t)){a.push(e.slice(l,c)),l=c+o;continue}if("/"===u){i=c;continue}}"["===u?s++:"]"===u&&s--}var d=0===a.length?e:e.substring(l),p=d.startsWith(iv);return{modifiers:a,hasImportantModifier:p,baseClassName:p?d.substring(1):d,maybePostfixModifierPosition:i&&i>l?i-l:void 0}}}var sv=/\s+/;function lv(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r,o,i,a=function(e){var n=t[0],l=t.slice(1).reduce((function(e,t){return t(e)}),n());return r=function(e){return{cache:ov(e.cacheSize),splitModifiers:av(e),...Qg(e)}}(l),o=r.cache.get,i=r.cache.set,a=s,s(e)};function s(e){var t=o(e);if(t)return t;var n=function(e,t){var n=t.splitModifiers,r=t.getClassGroupId,o=t.getConflictingClassGroupIds,i=new Set;return e.trim().split(sv).map((function(e){var t=n(e),o=t.modifiers,i=t.hasImportantModifier,a=t.baseClassName,s=t.maybePostfixModifierPosition,l=r(s?a.substring(0,s):a),c=Boolean(s);if(!l){if(!s)return{isTailwindClass:!1,originalClassName:e};if(!(l=r(a)))return{isTailwindClass:!1,originalClassName:e};c=!1}var u=function(e){if(e.length<=1)return e;var t=[],n=[];return e.forEach((function(e){"["===e[0]?(t.push.apply(t,n.sort().concat([e])),n=[]):n.push(e)})),t.push.apply(t,n.sort()),t}(o).join(":");return{isTailwindClass:!0,modifierId:i?u+iv:u,classGroupId:l,originalClassName:e,hasPostfixModifier:c}})).reverse().filter((function(e){if(!e.isTailwindClass)return!0;var t=e.modifierId,n=e.classGroupId,r=e.hasPostfixModifier,a=t+n;return!i.has(a)&&(i.add(a),o(n,r).forEach((function(e){return i.add(t+e)})),!0)})).reverse().map((function(e){return e.originalClassName})).join(" ")}(e,r);return i(e,n),n}return function(){return a(Xg.apply(null,arguments))}}function cv(e){var t=function(t){return t[e]||[]};return t.isThemeGetter=!0,t}var uv=/^\[(?:([a-z-]+):)?(.+)\]$/i,dv=/^\d+\/\d+$/,pv=new Set(["px","full","screen"]),fv=/^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/,mv=/\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/,hv=/^-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;function gv(e){return wv(e)||pv.has(e)||dv.test(e)||vv(e)}function vv(e){return Tv(e,"length",Rv)}function yv(e){return Tv(e,"size",Pv)}function bv(e){return Tv(e,"position",Pv)}function $v(e){return Tv(e,"url",Lv)}function xv(e){return Tv(e,"number",wv)}function wv(e){return!Number.isNaN(Number(e))}function Sv(e){return e.endsWith("%")&&wv(e.slice(0,-1))}function Cv(e){return Ov(e)||Tv(e,"number",Ov)}function Ev(e){return uv.test(e)}function kv(){return!0}function Mv(e){return fv.test(e)}function Av(e){return Tv(e,"",zv)}function Tv(e,t,n){var r=uv.exec(e);return!!r&&(r[1]?r[1]===t:n(r[2]))}function Rv(e){return mv.test(e)}function Pv(){return!1}function Lv(e){return e.startsWith("url(")}function Ov(e){return Number.isInteger(Number(e))}function zv(e){return hv.test(e)}function Nv(){var e=cv("colors"),t=cv("spacing"),n=cv("blur"),r=cv("brightness"),o=cv("borderColor"),i=cv("borderRadius"),a=cv("borderSpacing"),s=cv("borderWidth"),l=cv("contrast"),c=cv("grayscale"),u=cv("hueRotate"),d=cv("invert"),p=cv("gap"),f=cv("gradientColorStops"),m=cv("gradientColorStopPositions"),h=cv("inset"),g=cv("margin"),v=cv("opacity"),y=cv("padding"),b=cv("saturate"),$=cv("scale"),x=cv("sepia"),w=cv("skew"),S=cv("space"),C=cv("translate"),E=function(){return["auto",Ev,t]},k=function(){return[Ev,t]},M=function(){return["",gv]},A=function(){return["auto",wv,Ev]},T=function(){return["","0",Ev]},R=function(){return[wv,xv]},P=function(){return[wv,Ev]};return{cacheSize:500,theme:{colors:[kv],spacing:[gv],blur:["none","",Mv,Ev],brightness:R(),borderColor:[e],borderRadius:["none","","full",Mv,Ev],borderSpacing:k(),borderWidth:M(),contrast:R(),grayscale:T(),hueRotate:P(),invert:T(),gap:k(),gradientColorStops:[e],gradientColorStopPositions:[Sv,vv],inset:E(),margin:E(),opacity:R(),padding:k(),saturate:R(),scale:R(),sepia:T(),skew:P(),space:k(),translate:k()},classGroups:{aspect:[{aspect:["auto","square","video",Ev]}],container:["container"],columns:[{columns:[Mv]}],"break-after":[{"break-after":["auto","avoid","all","avoid-page","page","left","right","column"]}],"break-before":[{"break-before":["auto","avoid","all","avoid-page","page","left","right","column"]}],"break-inside":[{"break-inside":["auto","avoid","avoid-page","avoid-column"]}],"box-decoration":[{"box-decoration":["slice","clone"]}],box:[{box:["border","content"]}],display:["block","inline-block","inline","flex","inline-flex","table","inline-table","table-caption","table-cell","table-column","table-column-group","table-footer-group","table-header-group","table-row-group","table-row","flow-root","grid","inline-grid","contents","list-item","hidden"],float:[{float:["right","left","none"]}],clear:[{clear:["left","right","both","none"]}],isolation:["isolate","isolation-auto"],"object-fit":[{object:["contain","cover","fill","none","scale-down"]}],"object-position":[{object:[].concat(["bottom","center","left","left-bottom","left-top","right","right-bottom","right-top","top"],[Ev])}],overflow:[{overflow:["auto","hidden","clip","visible","scroll"]}],"overflow-x":[{"overflow-x":["auto","hidden","clip","visible","scroll"]}],"overflow-y":[{"overflow-y":["auto","hidden","clip","visible","scroll"]}],overscroll:[{overscroll:["auto","contain","none"]}],"overscroll-x":[{"overscroll-x":["auto","contain","none"]}],"overscroll-y":[{"overscroll-y":["auto","contain","none"]}],position:["static","fixed","absolute","relative","sticky"],inset:[{inset:[h]}],"inset-x":[{"inset-x":[h]}],"inset-y":[{"inset-y":[h]}],start:[{start:[h]}],end:[{end:[h]}],top:[{top:[h]}],right:[{right:[h]}],bottom:[{bottom:[h]}],left:[{left:[h]}],visibility:["visible","invisible","collapse"],z:[{z:["auto",Cv]}],basis:[{basis:E()}],"flex-direction":[{flex:["row","row-reverse","col","col-reverse"]}],"flex-wrap":[{flex:["wrap","wrap-reverse","nowrap"]}],flex:[{flex:["1","auto","initial","none",Ev]}],grow:[{grow:T()}],shrink:[{shrink:T()}],order:[{order:["first","last","none",Cv]}],"grid-cols":[{"grid-cols":[kv]}],"col-start-end":[{col:["auto",{span:["full",Cv]},Ev]}],"col-start":[{"col-start":A()}],"col-end":[{"col-end":A()}],"grid-rows":[{"grid-rows":[kv]}],"row-start-end":[{row:["auto",{span:[Cv]},Ev]}],"row-start":[{"row-start":A()}],"row-end":[{"row-end":A()}],"grid-flow":[{"grid-flow":["row","col","dense","row-dense","col-dense"]}],"auto-cols":[{"auto-cols":["auto","min","max","fr",Ev]}],"auto-rows":[{"auto-rows":["auto","min","max","fr",Ev]}],gap:[{gap:[p]}],"gap-x":[{"gap-x":[p]}],"gap-y":[{"gap-y":[p]}],"justify-content":[{justify:["normal"].concat(["start","end","center","between","around","evenly","stretch"])}],"justify-items":[{"justify-items":["start","end","center","stretch"]}],"justify-self":[{"justify-self":["auto","start","end","center","stretch"]}],"align-content":[{content:["normal"].concat(["start","end","center","between","around","evenly","stretch"],["baseline"])}],"align-items":[{items:["start","end","center","baseline","stretch"]}],"align-self":[{self:["auto","start","end","center","stretch","baseline"]}],"place-content":[{"place-content":[].concat(["start","end","center","between","around","evenly","stretch"],["baseline"])}],"place-items":[{"place-items":["start","end","center","baseline","stretch"]}],"place-self":[{"place-self":["auto","start","end","center","stretch"]}],p:[{p:[y]}],px:[{px:[y]}],py:[{py:[y]}],ps:[{ps:[y]}],pe:[{pe:[y]}],pt:[{pt:[y]}],pr:[{pr:[y]}],pb:[{pb:[y]}],pl:[{pl:[y]}],m:[{m:[g]}],mx:[{mx:[g]}],my:[{my:[g]}],ms:[{ms:[g]}],me:[{me:[g]}],mt:[{mt:[g]}],mr:[{mr:[g]}],mb:[{mb:[g]}],ml:[{ml:[g]}],"space-x":[{"space-x":[S]}],"space-x-reverse":["space-x-reverse"],"space-y":[{"space-y":[S]}],"space-y-reverse":["space-y-reverse"],w:[{w:["auto","min","max","fit",Ev,t]}],"min-w":[{"min-w":["min","max","fit",Ev,gv]}],"max-w":[{"max-w":["0","none","full","min","max","fit","prose",{screen:[Mv]},Mv,Ev]}],h:[{h:[Ev,t,"auto","min","max","fit"]}],"min-h":[{"min-h":["min","max","fit",Ev,gv]}],"max-h":[{"max-h":[Ev,t,"min","max","fit"]}],"font-size":[{text:["base",Mv,vv]}],"font-smoothing":["antialiased","subpixel-antialiased"],"font-style":["italic","not-italic"],"font-weight":[{font:["thin","extralight","light","normal","medium","semibold","bold","extrabold","black",xv]}],"font-family":[{font:[kv]}],"fvn-normal":["normal-nums"],"fvn-ordinal":["ordinal"],"fvn-slashed-zero":["slashed-zero"],"fvn-figure":["lining-nums","oldstyle-nums"],"fvn-spacing":["proportional-nums","tabular-nums"],"fvn-fraction":["diagonal-fractions","stacked-fractons"],tracking:[{tracking:["tighter","tight","normal","wide","wider","widest",Ev]}],"line-clamp":[{"line-clamp":["none",wv,xv]}],leading:[{leading:["none","tight","snug","normal","relaxed","loose",Ev,gv]}],"list-image":[{"list-image":["none",Ev]}],"list-style-type":[{list:["none","disc","decimal",Ev]}],"list-style-position":[{list:["inside","outside"]}],"placeholder-color":[{placeholder:[e]}],"placeholder-opacity":[{"placeholder-opacity":[v]}],"text-alignment":[{text:["left","center","right","justify","start","end"]}],"text-color":[{text:[e]}],"text-opacity":[{"text-opacity":[v]}],"text-decoration":["underline","overline","line-through","no-underline"],"text-decoration-style":[{decoration:[].concat(["solid","dashed","dotted","double","none"],["wavy"])}],"text-decoration-thickness":[{decoration:["auto","from-font",gv]}],"underline-offset":[{"underline-offset":["auto",Ev,gv]}],"text-decoration-color":[{decoration:[e]}],"text-transform":["uppercase","lowercase","capitalize","normal-case"],"text-overflow":["truncate","text-ellipsis","text-clip"],indent:[{indent:k()}],"vertical-align":[{align:["baseline","top","middle","bottom","text-top","text-bottom","sub","super",Ev]}],whitespace:[{whitespace:["normal","nowrap","pre","pre-line","pre-wrap","break-spaces"]}],break:[{break:["normal","words","all","keep"]}],hyphens:[{hyphens:["none","manual","auto"]}],content:[{content:["none",Ev]}],"bg-attachment":[{bg:["fixed","local","scroll"]}],"bg-clip":[{"bg-clip":["border","padding","content","text"]}],"bg-opacity":[{"bg-opacity":[v]}],"bg-origin":[{"bg-origin":["border","padding","content"]}],"bg-position":[{bg:[].concat(["bottom","center","left","left-bottom","left-top","right","right-bottom","right-top","top"],[bv])}],"bg-repeat":[{bg:["no-repeat",{repeat:["","x","y","round","space"]}]}],"bg-size":[{bg:["auto","cover","contain",yv]}],"bg-image":[{bg:["none",{"gradient-to":["t","tr","r","br","b","bl","l","tl"]},$v]}],"bg-color":[{bg:[e]}],"gradient-from-pos":[{from:[m]}],"gradient-via-pos":[{via:[m]}],"gradient-to-pos":[{to:[m]}],"gradient-from":[{from:[f]}],"gradient-via":[{via:[f]}],"gradient-to":[{to:[f]}],rounded:[{rounded:[i]}],"rounded-s":[{"rounded-s":[i]}],"rounded-e":[{"rounded-e":[i]}],"rounded-t":[{"rounded-t":[i]}],"rounded-r":[{"rounded-r":[i]}],"rounded-b":[{"rounded-b":[i]}],"rounded-l":[{"rounded-l":[i]}],"rounded-ss":[{"rounded-ss":[i]}],"rounded-se":[{"rounded-se":[i]}],"rounded-ee":[{"rounded-ee":[i]}],"rounded-es":[{"rounded-es":[i]}],"rounded-tl":[{"rounded-tl":[i]}],"rounded-tr":[{"rounded-tr":[i]}],"rounded-br":[{"rounded-br":[i]}],"rounded-bl":[{"rounded-bl":[i]}],"border-w":[{border:[s]}],"border-w-x":[{"border-x":[s]}],"border-w-y":[{"border-y":[s]}],"border-w-s":[{"border-s":[s]}],"border-w-e":[{"border-e":[s]}],"border-w-t":[{"border-t":[s]}],"border-w-r":[{"border-r":[s]}],"border-w-b":[{"border-b":[s]}],"border-w-l":[{"border-l":[s]}],"border-opacity":[{"border-opacity":[v]}],"border-style":[{border:[].concat(["solid","dashed","dotted","double","none"],["hidden"])}],"divide-x":[{"divide-x":[s]}],"divide-x-reverse":["divide-x-reverse"],"divide-y":[{"divide-y":[s]}],"divide-y-reverse":["divide-y-reverse"],"divide-opacity":[{"divide-opacity":[v]}],"divide-style":[{divide:["solid","dashed","dotted","double","none"]}],"border-color":[{border:[o]}],"border-color-x":[{"border-x":[o]}],"border-color-y":[{"border-y":[o]}],"border-color-t":[{"border-t":[o]}],"border-color-r":[{"border-r":[o]}],"border-color-b":[{"border-b":[o]}],"border-color-l":[{"border-l":[o]}],"divide-color":[{divide:[o]}],"outline-style":[{outline:[""].concat(["solid","dashed","dotted","double","none"])}],"outline-offset":[{"outline-offset":[Ev,gv]}],"outline-w":[{outline:[gv]}],"outline-color":[{outline:[e]}],"ring-w":[{ring:M()}],"ring-w-inset":["ring-inset"],"ring-color":[{ring:[e]}],"ring-opacity":[{"ring-opacity":[v]}],"ring-offset-w":[{"ring-offset":[gv]}],"ring-offset-color":[{"ring-offset":[e]}],shadow:[{shadow:["","inner","none",Mv,Av]}],"shadow-color":[{shadow:[kv]}],opacity:[{opacity:[v]}],"mix-blend":[{"mix-blend":["normal","multiply","screen","overlay","darken","lighten","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","hue","saturation","color","luminosity","plus-lighter"]}],"bg-blend":[{"bg-blend":["normal","multiply","screen","overlay","darken","lighten","color-dodge","color-burn","hard-light","soft-light","difference","exclusion","hue","saturation","color","luminosity","plus-lighter"]}],filter:[{filter:["","none"]}],blur:[{blur:[n]}],brightness:[{brightness:[r]}],contrast:[{contrast:[l]}],"drop-shadow":[{"drop-shadow":["","none",Mv,Ev]}],grayscale:[{grayscale:[c]}],"hue-rotate":[{"hue-rotate":[u]}],invert:[{invert:[d]}],saturate:[{saturate:[b]}],sepia:[{sepia:[x]}],"backdrop-filter":[{"backdrop-filter":["","none"]}],"backdrop-blur":[{"backdrop-blur":[n]}],"backdrop-brightness":[{"backdrop-brightness":[r]}],"backdrop-contrast":[{"backdrop-contrast":[l]}],"backdrop-grayscale":[{"backdrop-grayscale":[c]}],"backdrop-hue-rotate":[{"backdrop-hue-rotate":[u]}],"backdrop-invert":[{"backdrop-invert":[d]}],"backdrop-opacity":[{"backdrop-opacity":[v]}],"backdrop-saturate":[{"backdrop-saturate":[b]}],"backdrop-sepia":[{"backdrop-sepia":[x]}],"border-collapse":[{border:["collapse","separate"]}],"border-spacing":[{"border-spacing":[a]}],"border-spacing-x":[{"border-spacing-x":[a]}],"border-spacing-y":[{"border-spacing-y":[a]}],"table-layout":[{table:["auto","fixed"]}],caption:[{caption:["top","bottom"]}],transition:[{transition:["none","all","","colors","opacity","shadow","transform",Ev]}],duration:[{duration:P()}],ease:[{ease:["linear","in","out","in-out",Ev]}],delay:[{delay:P()}],animate:[{animate:["none","spin","ping","pulse","bounce",Ev]}],transform:[{transform:["","gpu","none"]}],scale:[{scale:[$]}],"scale-x":[{"scale-x":[$]}],"scale-y":[{"scale-y":[$]}],rotate:[{rotate:[Cv,Ev]}],"translate-x":[{"translate-x":[C]}],"translate-y":[{"translate-y":[C]}],"skew-x":[{"skew-x":[w]}],"skew-y":[{"skew-y":[w]}],"transform-origin":[{origin:["center","top","top-right","right","bottom-right","bottom","bottom-left","left","top-left",Ev]}],accent:[{accent:["auto",e]}],appearance:["appearance-none"],cursor:[{cursor:["auto","default","pointer","wait","text","move","help","not-allowed","none","context-menu","progress","cell","crosshair","vertical-text","alias","copy","no-drop","grab","grabbing","all-scroll","col-resize","row-resize","n-resize","e-resize","s-resize","w-resize","ne-resize","nw-resize","se-resize","sw-resize","ew-resize","ns-resize","nesw-resize","nwse-resize","zoom-in","zoom-out",Ev]}],"caret-color":[{caret:[e]}],"pointer-events":[{"pointer-events":["none","auto"]}],resize:[{resize:["none","y","x",""]}],"scroll-behavior":[{scroll:["auto","smooth"]}],"scroll-m":[{"scroll-m":k()}],"scroll-mx":[{"scroll-mx":k()}],"scroll-my":[{"scroll-my":k()}],"scroll-ms":[{"scroll-ms":k()}],"scroll-me":[{"scroll-me":k()}],"scroll-mt":[{"scroll-mt":k()}],"scroll-mr":[{"scroll-mr":k()}],"scroll-mb":[{"scroll-mb":k()}],"scroll-ml":[{"scroll-ml":k()}],"scroll-p":[{"scroll-p":k()}],"scroll-px":[{"scroll-px":k()}],"scroll-py":[{"scroll-py":k()}],"scroll-ps":[{"scroll-ps":k()}],"scroll-pe":[{"scroll-pe":k()}],"scroll-pt":[{"scroll-pt":k()}],"scroll-pr":[{"scroll-pr":k()}],"scroll-pb":[{"scroll-pb":k()}],"scroll-pl":[{"scroll-pl":k()}],"snap-align":[{snap:["start","end","center","align-none"]}],"snap-stop":[{snap:["normal","always"]}],"snap-type":[{snap:["none","x","y","both"]}],"snap-strictness":[{snap:["mandatory","proximity"]}],touch:[{touch:["auto","none","pinch-zoom","manipulation",{pan:["x","left","right","y","up","down"]}]}],select:[{select:["none","text","all","auto"]}],"will-change":[{"will-change":["auto","scroll","contents","transform",Ev]}],fill:[{fill:[e,"none"]}],"stroke-w":[{stroke:[gv,xv]}],stroke:[{stroke:[e,"none"]}],sr:["sr-only","not-sr-only"]},conflictingClassGroups:{overflow:["overflow-x","overflow-y"],overscroll:["overscroll-x","overscroll-y"],inset:["inset-x","inset-y","start","end","top","right","bottom","left"],"inset-x":["right","left"],"inset-y":["top","bottom"],flex:["basis","grow","shrink"],gap:["gap-x","gap-y"],p:["px","py","ps","pe","pt","pr","pb","pl"],px:["pr","pl"],py:["pt","pb"],m:["mx","my","ms","me","mt","mr","mb","ml"],mx:["mr","ml"],my:["mt","mb"],"font-size":["leading"],"fvn-normal":["fvn-ordinal","fvn-slashed-zero","fvn-figure","fvn-spacing","fvn-fraction"],"fvn-ordinal":["fvn-normal"],"fvn-slashed-zero":["fvn-normal"],"fvn-figure":["fvn-normal"],"fvn-spacing":["fvn-normal"],"fvn-fraction":["fvn-normal"],rounded:["rounded-s","rounded-e","rounded-t","rounded-r","rounded-b","rounded-l","rounded-ss","rounded-se","rounded-ee","rounded-es","rounded-tl","rounded-tr","rounded-br","rounded-bl"],"rounded-s":["rounded-ss","rounded-es"],"rounded-e":["rounded-se","rounded-ee"],"rounded-t":["rounded-tl","rounded-tr"],"rounded-r":["rounded-tr","rounded-br"],"rounded-b":["rounded-br","rounded-bl"],"rounded-l":["rounded-tl","rounded-bl"],"border-spacing":["border-spacing-x","border-spacing-y"],"border-w":["border-w-s","border-w-e","border-w-t","border-w-r","border-w-b","border-w-l"],"border-w-x":["border-w-r","border-w-l"],"border-w-y":["border-w-t","border-w-b"],"border-color":["border-color-t","border-color-r","border-color-b","border-color-l"],"border-color-x":["border-color-r","border-color-l"],"border-color-y":["border-color-t","border-color-b"],"scroll-m":["scroll-mx","scroll-my","scroll-ms","scroll-me","scroll-mt","scroll-mr","scroll-mb","scroll-ml"],"scroll-mx":["scroll-mr","scroll-ml"],"scroll-my":["scroll-mt","scroll-mb"],"scroll-p":["scroll-px","scroll-py","scroll-ps","scroll-pe","scroll-pt","scroll-pr","scroll-pb","scroll-pl"],"scroll-px":["scroll-pr","scroll-pl"],"scroll-py":["scroll-pt","scroll-pb"]},conflictingClassGroupModifiers:{"font-size":["leading"]}}}var jv=Object.prototype.hasOwnProperty,Vv=new Set(["string","number","boolean"]);function Dv(e,t,n){if(jv.call(e,t)&&!Vv.has(typeof n)&&null!==n){if(Array.isArray(n)&&Array.isArray(e[t]))e[t]=e[t].concat(n);else if("object"==typeof n&&"object"==typeof e[t]){if(null===e[t])return void(e[t]=n);for(var r in n)Dv(e[t],r,n[r])}}else e[t]=n}function _v(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return"function"==typeof e?lv.apply(void 0,[Nv,e].concat(n)):lv.apply(void 0,[function(){return function(e,t){for(var n in t)Dv(e,n,t[n]);return e}(Nv(),e)}].concat(n))}var Hv=lv(Nv),Fv={twMerge:!0,twMergeConfig:{},responsiveVariants:!1},Bv=e=>e||void 0,Iv=(...e)=>Bv(Gg(e).filter(Boolean).join(" ")),Wv=null,Uv={},Gv=!1,Zv=(...e)=>t=>t.twMerge?((!Wv||Gv)&&(Gv=!1,Wv=Wg(Uv)?Hv:_v(Uv)),Bv(Wv(Iv(e)))):Iv(e),Yv=(e,t)=>{for(let n in t)e.hasOwnProperty(n)?e[n]=Iv(e[n],t[n]):e[n]=t[n];return e},qv=(e,t)=>{let{extend:n=null,slots:r={},variants:o={},compoundVariants:i=[],compoundSlots:a=[],defaultVariants:s={}}=e,l={...Fv,...t},c=null!=n&&n.base?Iv(n.base,null==e?void 0:e.base):null==e?void 0:e.base,u=null!=n&&n.variants&&!Wg(n.variants)?Yg(o,n.variants):o,d=null!=n&&n.defaultVariants&&!Wg(n.defaultVariants)?{...n.defaultVariants,...s}:s;!Wg(l.twMergeConfig)&&!((e,t)=>JSON.stringify(e)===JSON.stringify(t))(l.twMergeConfig,Uv)&&(Gv=!0,Uv=l.twMergeConfig);let p=Wg(null==n?void 0:n.slots),f=Wg(r)?{}:{base:Iv(null==e?void 0:e.base,p&&(null==n?void 0:n.base)),...r},m=p?f:Yv({...null==n?void 0:n.slots},Wg(f)?{base:null==e?void 0:e.base}:f),h=e=>{if(Wg(u)&&Wg(r)&&p)return Zv(c,null==e?void 0:e.class,null==e?void 0:e.className)(l);if(i&&!Array.isArray(i))throw new TypeError('The "compoundVariants" prop must be an array. Received: '+typeof i);if(a&&!Array.isArray(a))throw new TypeError('The "compoundSlots" prop must be an array. Received: '+typeof a);let t=(e,t,n=[],r)=>{let o=n;if("string"==typeof t)o=o.concat(qg(t).split(" ").map((t=>`${e}:${t}`)));else if(Array.isArray(t))o=o.concat(t.reduce(((t,n)=>t.concat(`${e}:${n}`)),[]));else if("object"==typeof t&&"string"==typeof r)for(let n in t)if(t.hasOwnProperty(n)&&n===r){let i=t[n];if(i&&"string"==typeof i){let t=qg(i);o[r]?o[r]=o[r].concat(t.split(" ").map((t=>`${e}:${t}`))):o[r]=t.split(" ").map((t=>`${e}:${t}`))}else Array.isArray(i)&&i.length>0&&(o[r]=i.reduce(((t,n)=>t.concat(`${e}:${n}`)),[]))}return o},o=(n,r=u,o=null,i=null)=>{var a;let s=r[n];if(!s||Wg(s))return null;let c=null!=(a=null==i?void 0:i[n])?a:null==e?void 0:e[n];if(null===c)return null;let p=Ig(c),f=Array.isArray(l.responsiveVariants)&&l.responsiveVariants.length>0||!0===l.responsiveVariants,m=null==d?void 0:d[n],h=[];if("object"==typeof p&&f)for(let[e,n]of Object.entries(p)){let r=s[n];"initial"!==e?Array.isArray(l.responsiveVariants)&&!l.responsiveVariants.includes(e)||(h=t(e,r,h,o)):m=n}let g=s[p]||s[Ig(m)];return"object"==typeof h&&"string"==typeof o&&h[o]?Yv(h,g):h.length>0?(h.push(g),h):g},s=(e,t)=>{if(!u||"object"!=typeof u)return null;let n=new Array;for(let r in u){let i=o(r,u,e,t),a="base"===e&&"string"==typeof i?i:i&&i[e];a&&(n[n.length]=a)}return n},f={};for(let t in e)void 0!==e[t]&&(f[t]=e[t]);let h=(t,n)=>{var r;let o="object"==typeof(null==e?void 0:e[t])?{[t]:null==(r=e[t])?void 0:r.initial}:{};return{...d,...f,...o,...n}},g=(e=[],t)=>{let n=[];for(let{class:r,className:o,...i}of e){let e=!0;for(let[n,r]of Object.entries(i)){let o=h(n,t);if(Array.isArray(r)){if(!r.includes(o[n])){e=!1;break}}else if(o[n]!==r){e=!1;break}}e&&(r&&n.push(r),o&&n.push(o))}return n},v=e=>{let t=g(i,e),r=g(null==n?void 0:n.compoundVariants,e);return Zg(r,t)},y=e=>{let t=v(e);if(!Array.isArray(t))return t;let n={};for(let e of t)if("string"==typeof e&&(n.base=Zv(n.base,e)(l)),"object"==typeof e)for(let[t,r]of Object.entries(e))n[t]=Zv(n[t],r)(l);return n},b=e=>{if(a.length<1)return null;let t={};for(let{slots:n=[],class:r,className:o,...i}of a){if(!Wg(i)){let t=!0;for(let n of Object.keys(i)){let r=h(n,e)[n];if(void 0===r||(Array.isArray(i[n])?!i[n].includes(r):i[n]!==r)){t=!1;break}}if(!t)continue}for(let e of n)t[e]=t[e]||[],t[e].push([r,o])}return t};if(!Wg(r)||!p){let e={};if("object"==typeof m&&!Wg(m))for(let t of Object.keys(m))e[t]=e=>{var n,r;return Zv(m[t],s(t,e),(null!=(n=y(e))?n:[])[t],(null!=(r=b(e))?r:[])[t],null==e?void 0:e.class,null==e?void 0:e.className)(l)};return e}return Zv(c,u?Object.keys(u).map((e=>o(e,u))):null,v(),null==e?void 0:e.class,null==e?void 0:e.className)(l)};return h.variantKeys=(()=>{if(u&&"object"==typeof u)return Object.keys(u)})(),h.extend=n,h.base=c,h.slots=m,h.variants=u,h.defaultVariants=d,h.compoundSlots=a,h.compoundVariants=i,h};const Xv=qv({base:"inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",variants:{variant:{default:"bg-transparent",outline:"border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground"},size:{default:"h-9 px-3",sm:"h-8 px-2",lg:"h-10 px-3"}},defaultVariants:{variant:"default",size:"default"}});function Kv(e){let t;const n=e[6].default,r=d(n,e,e[7],null);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||128&o)&&m(r,n,e,e[7],t?f(n,e[7],o,null):h(e[7]),null)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function Jv(e){let t,r;const o=[{class:Dt(Xv({variant:e[4].variant||e[1],size:e[4].size||e[2]}),e[0])},{value:e[3]},e[5]];let i={$$slots:{default:[Kv]},$$scope:{ctx:e}};for(let e=0;e<o.length;e+=1)i=n(i,o[e]);return t=new Yh({props:i}),{c(){Fe(t.$$.fragment)},m(e,n){Be(t,e,n),r=!0},p(e,[n]){const r=63&n?De(o,[23&n&&{class:Dt(Xv({variant:e[4].variant||e[1],size:e[4].size||e[2]}),e[0])},8&n&&{value:e[3]},32&n&&_e(e[5])]):{};128&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){r||(Re(t.$$.fragment,e),r=!0)},o(e){Pe(t.$$.fragment,e),r=!1},d(e){Ie(t,e)}}}function Qv(e,t,r){const o=["class","variant","size","value"];let i=v(t,o),{$$slots:a={},$$scope:s}=t,{class:l}=t,{variant:c="default"}=t,{size:u="default"}=t,{value:d}=t;const p=se("toggleGroup");return e.$$set=e=>{t=n(n({},t),g(e)),r(5,i=v(t,o)),"class"in e&&r(0,l=e.class),"variant"in e&&r(1,c=e.variant),"size"in e&&r(2,u=e.size),"value"in e&&r(3,d=e.value),"$$scope"in e&&r(7,s=e.$$scope)},[l,c,u,d,p,i,a,s]}class ey extends Ue{constructor(e){super(),We(this,e,Qv,Jv,s,{class:0,variant:1,size:2,value:3})}}function ty(e,t,n){const r=e.slice();return r[4]=t[n],r}function ny(e){let t,n,r,o;const i=[oy,ry],a=[];function s(e,t){return"textAlign"===e[0].key?0:1}return t=s(e),n=a[t]=i[t](e),{c(){n.c(),r=N()},m(e,n){a[t].m(e,n),A(e,r,n),o=!0},p(e,o){let l=t;t=s(e),t===l?a[t].p(e,o):(Ae(),Pe(a[l],1,1,(()=>{a[l]=null})),Te(),n=a[t],n?n.p(e,o):(n=a[t]=i[t](e),n.c()),Re(n,1),n.m(r.parentNode,r))},i(e){o||(Re(n),o=!0)},o(e){Pe(n),o=!1},d(e){e&&T(r),a[t].d(e)}}}function ry(t){let n,r,o,i,a,s,l=!t[0].options.includes(t[0].value),c=l&&iy(t),u=je(t[0].options??[]),d=[];for(let e=0;e<u.length;e+=1)d[e]=ay(ty(t,u,e));return{c(){n=P("select"),c&&c.c(),r=N();for(let e=0;e<d.length;e+=1)d[e].c();_(n,"name",o=t[0].displayName),_(n,"class","border-none text-xs text-text bg-transparent appearance-none text-end focus:outline-none focus:ring-0 capitalize")},m(e,o){A(e,n,o),c&&c.m(n,null),E(n,r);for(let e=0;e<d.length;e+=1)d[e]&&d[e].m(n,null);Z(n,t[0].value),a||(s=j(n,"input",t[3]),a=!0)},p(e,t){if(1&t&&(l=!e[0].options.includes(e[0].value)),l?c?c.p(e,t):(c=iy(e),c.c(),c.m(n,r)):c&&(c.d(1),c=null),1&t){let r;for(u=je(e[0].options??[]),r=0;r<u.length;r+=1){const o=ty(e,u,r);d[r]?d[r].p(o,t):(d[r]=ay(o),d[r].c(),d[r].m(n,null))}for(;r<d.length;r+=1)d[r].d(1);d.length=u.length}1&t&&o!==(o=e[0].displayName)&&_(n,"name",o),1&t&&i!==(i=e[0].value)&&Z(n,e[0].value)},i:e,o:e,d(e){e&&T(n),c&&c.d(),R(d,e),a=!1,s()}}}function oy(e){let t,n;return t=new Bg({props:{type:"single",value:e[0].value,onValueChange:e[2],$$slots:{default:[uy]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,n){const r={};1&n&&(r.value=e[0].value),3&n&&(r.onValueChange=e[2]),128&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function iy(e){let t,n,r,o=e[0].value+"";return{c(){t=P("option"),n=O(o),t.__value=r=e[0].value,G(t,t.__value)},m(e,r){A(e,t,r),E(t,n)},p(e,i){1&i&&o!==(o=e[0].value+"")&&U(n,o),1&i&&r!==(r=e[0].value)&&(t.__value=r,G(t,t.__value))},d(e){e&&T(t)}}}function ay(e){let t,n,r,o=e[4]+"";return{c(){t=P("option"),n=O(o),t.__value=r=e[4],G(t,t.__value)},m(e,r){A(e,t,r),E(t,n)},p(e,i){1&i&&o!==(o=e[4]+"")&&U(n,o),1&i&&r!==(r=e[4])&&(t.__value=r,G(t,t.__value))},d(e){e&&T(t)}}}function sy(t){let n,r,o,i,a,s;return{c(){n=L("svg"),r=L("g"),o=L("path"),i=L("defs"),a=L("clipPath"),s=L("rect"),_(o,"d","M12.5 12.5H2.5V14.1667H12.5V12.5ZM12.5 5.83333H2.5V7.5H12.5V5.83333ZM2.5 10.8333H17.5V9.16667H2.5V10.8333ZM2.5 17.5H17.5V15.8333H2.5V17.5ZM2.5 2.5V4.16667H17.5V2.5H2.5Z"),_(o,"fill","white"),_(r,"clip-path","url(#clip0_134_5601)"),_(s,"width","20"),_(s,"height","20"),_(s,"fill","white"),_(a,"id","clip0_134_5601"),_(n,"width","20"),_(n,"height","20"),_(n,"viewBox","0 0 20 20"),_(n,"fill","none"),_(n,"xmlns","http://www.w3.org/2000/svg")},m(e,t){A(e,n,t),E(n,r),E(r,o),E(n,i),E(i,a),E(a,s)},p:e,d(e){e&&T(n)}}}function ly(t){let n,r,o,i,a,s;return{c(){n=L("svg"),r=L("g"),o=L("path"),i=L("defs"),a=L("clipPath"),s=L("rect"),_(o,"d","M5.83333 12.5V14.1667H14.1667V12.5H5.83333ZM2.5 17.5H17.5V15.8333H2.5V17.5ZM2.5 10.8333H17.5V9.16667H2.5V10.8333ZM5.83333 5.83333V7.5H14.1667V5.83333H5.83333ZM2.5 2.5V4.16667H17.5V2.5H2.5Z"),_(o,"fill","white"),_(r,"clip-path","url(#clip0_134_5604)"),_(s,"width","20"),_(s,"height","20"),_(s,"fill","white"),_(a,"id","clip0_134_5604"),_(n,"width","20"),_(n,"height","20"),_(n,"viewBox","0 0 20 20"),_(n,"fill","none"),_(n,"xmlns","http://www.w3.org/2000/svg")},m(e,t){A(e,n,t),E(n,r),E(r,o),E(n,i),E(i,a),E(a,s)},p:e,d(e){e&&T(n)}}}function cy(t){let n,r,o,i,a,s;return{c(){n=L("svg"),r=L("g"),o=L("path"),i=L("defs"),a=L("clipPath"),s=L("rect"),_(o,"d","M2.5 17.5H17.5V15.8333H2.5V17.5ZM7.5 14.1667H17.5V12.5H7.5V14.1667ZM2.5 10.8333H17.5V9.16667H2.5V10.8333ZM7.5 7.5H17.5V5.83333H7.5V7.5ZM2.5 2.5V4.16667H17.5V2.5H2.5Z"),_(o,"fill","white"),_(r,"clip-path","url(#clip0_134_5607)"),_(s,"width","20"),_(s,"height","20"),_(s,"fill","white"),_(a,"id","clip0_134_5607"),_(n,"width","20"),_(n,"height","20"),_(n,"viewBox","0 0 20 20"),_(n,"fill","none"),_(n,"xmlns","http://www.w3.org/2000/svg")},m(e,t){A(e,n,t),E(n,r),E(r,o),E(n,i),E(i,a),E(a,s)},p:e,d(e){e&&T(n)}}}function uy(e){let t,n,r,o,i,a;return t=new ey({props:{class:"px-1.5",value:"start",$$slots:{default:[sy]},$$scope:{ctx:e}}}),r=new ey({props:{value:"center",class:"px-1.5",$$slots:{default:[ly]},$$scope:{ctx:e}}}),i=new ey({props:{value:"end",class:"px-1.5",$$slots:{default:[cy]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment),n=z(),Fe(r.$$.fragment),o=z(),Fe(i.$$.fragment)},m(e,s){Be(t,e,s),A(e,n,s),Be(r,e,s),A(e,o,s),Be(i,e,s),a=!0},p(e,n){const o={};128&n&&(o.$$scope={dirty:n,ctx:e}),t.$set(o);const a={};128&n&&(a.$$scope={dirty:n,ctx:e}),r.$set(a);const s={};128&n&&(s.$$scope={dirty:n,ctx:e}),i.$set(s)},i(e){a||(Re(t.$$.fragment,e),Re(r.$$.fragment,e),Re(i.$$.fragment,e),a=!0)},o(e){Pe(t.$$.fragment,e),Pe(r.$$.fragment,e),Pe(i.$$.fragment,e),a=!1},d(e){e&&(T(n),T(o)),Ie(t,e),Ie(r,e),Ie(i,e)}}}function dy(e){let t,n,r=e[0]&&ny(e);return{c(){r&&r.c(),t=N()},m(e,o){r&&r.m(e,o),A(e,t,o),n=!0},p(e,[n]){e[0]?r?(r.p(e,n),1&n&&Re(r,1)):(r=ny(e),r.c(),Re(r,1),r.m(t.parentNode,t)):r&&(Ae(),Pe(r,1,1,(()=>{r=null})),Te())},i(e){n||(Re(r),n=!0)},o(e){Pe(r),n=!1},d(e){e&&T(t),r&&r.d(e)}}}function py(e,t,n){let{elementStyle:r}=t,{updateElementStyle:o}=t;return e.$$set=e=>{"elementStyle"in e&&n(0,r=e.elementStyle),"updateElementStyle"in e&&n(1,o=e.updateElementStyle)},[r,o,e=>{o(r.key,e||"inherit")},e=>{o(r.key,e.target.value)}]}class fy extends Ue{constructor(e){super(),We(this,e,py,dy,s,{elementStyle:0,updateElementStyle:1})}}function my(e,t){let n=e.length;Array.isArray(e[0])||(e=[e]),Array.isArray(t[0])||(t=t.map((e=>[e])));let r=t[0].length,o=t[0].map(((e,n)=>t.map((e=>e[n])))),i=e.map((e=>o.map((t=>{let n=0;if(!Array.isArray(e)){for(let r of t)n+=e*r;return n}for(let r=0;r<e.length;r++)n+=e[r]*(t[r]||0);return n}))));return 1===n&&(i=i[0]),1===r?i.map((e=>e[0])):i}function hy(e){return"string"===gy(e)}function gy(e){return(Object.prototype.toString.call(e).match(/^\[object\s+(.*?)\]$/)[1]||"").toLowerCase()}function vy(e,t){e=+e,t=+t;let n=(Math.floor(e)+"").length;if(t>n)return+e.toFixed(t-n);{let r=10**(n-t);return Math.round(e/r)*r}}function yy(e){if(!e)return;e=e.trim();const t=/^-?[\d.]+$/;let n=e.match(/^([a-z]+)\((.+?)\)$/i);if(n){let e=[];return n[2].replace(/\/?\s*([-\w.]+(?:%|deg)?)/g,((n,r)=>{/%$/.test(r)?(r=new Number(r.slice(0,-1)/100)).type="<percentage>":/deg$/.test(r)?((r=new Number(+r.slice(0,-3))).type="<angle>",r.unit="deg"):t.test(r)&&((r=new Number(r)).type="<number>"),n.startsWith("/")&&((r=r instanceof Number?r:new Number(r)).alpha=!0),e.push(r)})),{name:n[1].toLowerCase(),rawName:n[1],rawArgs:n[2],args:e}}}function by(e){return e[e.length-1]}function $y(e,t,n){return isNaN(e)?t:isNaN(t)?e:e+(t-e)*n}function xy(e,t,n){return(n-e)/(t-e)}function wy(e,t,n){return $y(t[0],t[1],xy(e[0],e[1],n))}function Sy(e){return e.map((e=>e.split("|").map((e=>{let t=(e=e.trim()).match(/^(<[a-z]+>)\[(-?[.\d]+),\s*(-?[.\d]+)\]?$/);if(t){let e=new String(t[1]);return e.range=[+t[2],+t[3]],e}return e}))))}var Cy=Object.freeze({__proto__:null,interpolate:$y,interpolateInv:xy,isString:hy,last:by,mapRange:wy,multiplyMatrices:my,parseCoordGrammar:Sy,parseFunction:yy,toPrecision:vy,type:gy});const Ey=new class{add(e,t,n){if("string"==typeof arguments[0])(Array.isArray(e)?e:[e]).forEach((function(e){this[e]=this[e]||[],t&&this[e][n?"unshift":"push"](t)}),this);else for(var e in arguments[0])this.add(e,arguments[0][e],arguments[1])}run(e,t){this[e]=this[e]||[],this[e].forEach((function(e){e.call(t&&t.context?t.context:t,t)}))}};var ky={gamut_mapping:"lch.c",precision:5,deltaE:"76"};const My={D50:[.3457/.3585,1,.2958/.3585],D65:[.3127/.329,1,.3583/.329]};function Ay(e){return Array.isArray(e)?e:My[e]}function Ty(e,t,n,r={}){if(e=Ay(e),t=Ay(t),!e||!t)throw new TypeError(`Missing white point to convert ${e?"":"from"}${e||t?"":"/"}${t?"":"to"}`);if(e===t)return n;let o={W1:e,W2:t,XYZ:n,options:r};if(Ey.run("chromatic-adaptation-start",o),o.M||(o.W1===My.D65&&o.W2===My.D50?o.M=[[1.0479298208405488,.022946793341019088,-.05019222954313557],[.029627815688159344,.990434484573249,-.01707382502938514],[-.009243058152591178,.015055144896577895,.7518742899580008]]:o.W1===My.D50&&o.W2===My.D65&&(o.M=[[.9554734527042182,-.023098536874261423,.0632593086610217],[-.028369706963208136,1.0099954580058226,.021041398966943008],[.012314001688319899,-.020507696433477912,1.3303659366080753]])),Ey.run("chromatic-adaptation-end",o),o.M)return my(o.M,o.XYZ);throw new TypeError("Only Bradford CAT with white points D50 and D65 supported for now.")}class Ry{constructor(e){this.id=e.id,this.name=e.name,this.base=e.base?Ry.get(e.base):null,this.aliases=e.aliases,this.base&&(this.fromBase=e.fromBase,this.toBase=e.toBase);let t=e.coords??this.base.coords;for(let e in t)"name"in t[e]||(t[e].name=e);this.coords=t;let n=e.white??this.base.white??"D65";this.white=Ay(n),this.formats=e.formats??{};for(let e in this.formats){let t=this.formats[e];t.type||="function",t.name||=e}e.cssId&&!this.formats.functions?.color?(this.formats.color={id:e.cssId},Object.defineProperty(this,"cssId",{value:e.cssId})):this.formats?.color&&!this.formats?.color.id&&(this.formats.color.id=this.id),this.referred=e.referred,Object.defineProperty(this,"path",{value:Py(this).reverse(),writable:!1,enumerable:!0,configurable:!0}),Ey.run("colorspace-init-end",this)}inGamut(e,{epsilon:t=75e-6}={}){if(this.isPolar)return e=this.toBase(e),this.base.inGamut(e,{epsilon:t});let n=Object.values(this.coords);return e.every(((e,r)=>{let o=n[r];if("angle"!==o.type&&o.range){if(Number.isNaN(e))return!0;let[n,r]=o.range;return(void 0===n||e>=n-t)&&(void 0===r||e<=r+t)}return!0}))}get cssId(){return this.formats.functions?.color?.id||this.id}get isPolar(){for(let e in this.coords)if("angle"===this.coords[e].type)return!0;return!1}getFormat(e){if("object"==typeof e)return e=Ly(e,this);let t;return t="default"===e?Object.values(this.formats)[0]:this.formats[e],t?(t=Ly(t,this),t):null}equals(e){return!!e&&(this===e||this.id===e.id)}to(e,t){if(1===arguments.length&&([e,t]=[e.space,e.coords]),e=Ry.get(e),this.equals(e))return t;t=t.map((e=>Number.isNaN(e)?0:e));let n,r,o=this.path,i=e.path;for(let e=0;e<o.length&&o[e].equals(i[e]);e++)n=o[e],r=e;if(!n)throw new Error(`Cannot convert between color spaces ${this} and ${e}: no connection space was found`);for(let e=o.length-1;e>r;e--)t=o[e].toBase(t);for(let e=r+1;e<i.length;e++)t=i[e].fromBase(t);return t}from(e,t){return 1===arguments.length&&([e,t]=[e.space,e.coords]),(e=Ry.get(e)).to(this,t)}toString(){return`${this.name} (${this.id})`}getMinCoords(){let e=[];for(let t in this.coords){let n=this.coords[t],r=n.range||n.refRange;e.push(r?.min??0)}return e}static registry={};static get all(){return[...new Set(Object.values(Ry.registry))]}static register(e,t){if(1===arguments.length&&(e=(t=arguments[0]).id),t=this.get(t),this.registry[e]&&this.registry[e]!==t)throw new Error(`Duplicate color space registration: '${e}'`);if(this.registry[e]=t,1===arguments.length&&t.aliases)for(let e of t.aliases)this.register(e,t);return t}static get(e,...t){if(!e||e instanceof Ry)return e;if("string"===gy(e)){let t=Ry.registry[e.toLowerCase()];if(!t)throw new TypeError(`No color space found with id = "${e}"`);return t}if(t.length)return Ry.get(...t);throw new TypeError(`${e} is not a valid color space`)}static resolveCoord(e,t){let n,r,o=gy(e);if("string"===o?e.includes(".")?[n,r]=e.split("."):[n,r]=[,e]:Array.isArray(e)?[n,r]=e:(n=e.space,r=e.coordId),n=Ry.get(n),n||(n=t),!n)throw new TypeError(`Cannot resolve coordinate reference ${e}: No color space specified and relative references are not allowed here`);if(o=gy(r),"number"===o||"string"===o&&r>=0){let e=Object.entries(n.coords)[r];if(e)return{space:n,id:e[0],index:r,...e[1]}}n=Ry.get(n);let i=r.toLowerCase(),a=0;for(let e in n.coords){let t=n.coords[e];if(e.toLowerCase()===i||t.name?.toLowerCase()===i)return{space:n,id:e,index:a,...t};a++}throw new TypeError(`No "${r}" coordinate found in ${n.name}. Its coordinates are: ${Object.keys(n.coords).join(", ")}`)}static DEFAULT_FORMAT={type:"functions",name:"color"}}function Py(e){let t=[e];for(let n=e;n=n.base;)t.push(n);return t}function Ly(e,{coords:t}={}){if(e.coords&&!e.coordGrammar){e.type||="function",e.name||="color",e.coordGrammar=Sy(e.coords);let n=Object.entries(t).map((([t,n],r)=>{let o=e.coordGrammar[r][0],i=n.range||n.refRange,a=o.range,s="";return"<percentage>"==o?(a=[0,100],s="%"):"<angle>"==o&&(s="deg"),{fromRange:i,toRange:a,suffix:s}}));e.serializeCoords=(e,t)=>e.map(((e,r)=>{let{fromRange:o,toRange:i,suffix:a}=n[r];return o&&i&&(e=wy(o,i,e)),e=vy(e,t),a&&(e+=a),e}))}return e}var Oy=new Ry({id:"xyz-d65",name:"XYZ D65",coords:{x:{name:"X"},y:{name:"Y"},z:{name:"Z"}},white:"D65",formats:{color:{ids:["xyz-d65","xyz"]}},aliases:["xyz"]});class zy extends Ry{constructor(e){e.coords||(e.coords={r:{range:[0,1],name:"Red"},g:{range:[0,1],name:"Green"},b:{range:[0,1],name:"Blue"}}),e.base||(e.base=Oy),e.toXYZ_M&&e.fromXYZ_M&&(e.toBase??=t=>{let n=my(e.toXYZ_M,t);return this.white!==this.base.white&&(n=Ty(this.white,this.base.white,n)),n},e.fromBase??=t=>(t=Ty(this.base.white,this.white,t),my(e.fromXYZ_M,t))),e.referred??="display",super(e)}}function Ny(e,{meta:t}={}){let n={str:String(e)?.trim()};if(Ey.run("parse-start",n),n.color)return n.color;if(n.parsed=yy(n.str),n.parsed){let e=n.parsed.name;if("color"===e){let e=n.parsed.args.shift(),r=n.parsed.rawArgs.indexOf("/")>0?n.parsed.args.pop():1;for(let o of Ry.all){let i=o.getFormat("color");if(i&&(e===i.id||i.ids?.includes(e))){const e=Object.keys(o.coords).map(((e,t)=>n.parsed.args[t]||0));return t&&(t.formatId="color"),{spaceId:o.id,coords:e,alpha:r}}}let o="";if(e in Ry.registry){let t=Ry.registry[e].formats?.functions?.color?.id;t&&(o=`Did you mean color(${t})?`)}throw new TypeError(`Cannot parse color(${e}). `+(o||"Missing a plugin?"))}for(let r of Ry.all){let o=r.getFormat(e);if(o&&"function"===o.type){let i=1;(o.lastAlpha||by(n.parsed.args).alpha)&&(i=n.parsed.args.pop());let a,s=n.parsed.args;return o.coordGrammar&&(a=Object.entries(r.coords).map((([t,n],r)=>{let i=o.coordGrammar[r],a=s[r]?.type,l=i.find((e=>e==a));if(!l){let r=n.name||t;throw new TypeError(`${a} not allowed for ${r} in ${e}()`)}let c=l.range;"<percentage>"===a&&(c||=[0,1]);let u=n.range||n.refRange;return c&&u&&(s[r]=wy(c,u,s[r])),l}))),t&&Object.assign(t,{formatId:o.name,types:a}),{spaceId:r.id,coords:s,alpha:i}}}}else for(let e of Ry.all)for(let r in e.formats){let o=e.formats[r];if("custom"!==o.type)continue;if(o.test&&!o.test(n.str))continue;let i=o.parse(n.str);if(i)return i.alpha??=1,t&&(t.formatId=r),i}throw new TypeError(`Could not parse ${e} as a color. Missing a plugin?`)}function jy(e){if(!e)throw new TypeError("Empty color reference");hy(e)&&(e=Ny(e));let t=e.space||e.spaceId;return t instanceof Ry||(e.space=Ry.get(t)),void 0===e.alpha&&(e.alpha=1),e}function Vy(e,t){return(t=Ry.get(t)).from(e)}function Dy(e,t){let{space:n,index:r}=Ry.resolveCoord(t,e.space);return Vy(e,n)[r]}function _y(e,t,n){return t=Ry.get(t),e.coords=t.to(e.space,n),e}function Hy(e,t,n){if(e=jy(e),2===arguments.length&&"object"===gy(arguments[1])){let t=arguments[1];for(let n in t)Hy(e,n,t[n])}else{"function"==typeof n&&(n=n(Dy(e,t)));let{space:r,index:o}=Ry.resolveCoord(t,e.space),i=Vy(e,r);i[o]=n,_y(e,r,i)}return e}var Fy=new Ry({id:"xyz-d50",name:"XYZ D50",white:"D50",base:Oy,fromBase:e=>Ty(Oy.white,"D50",e),toBase:e=>Ty("D50",Oy.white,e),formats:{color:{}}});const By=24/116,Iy=24389/27;let Wy=My.D50;var Uy=new Ry({id:"lab",name:"Lab",coords:{l:{refRange:[0,100],name:"L"},a:{refRange:[-125,125]},b:{refRange:[-125,125]}},white:Wy,base:Fy,fromBase(e){let t=e.map(((e,t)=>e/Wy[t])),n=t.map((e=>e>.008856451679035631?Math.cbrt(e):(Iy*e+16)/116));return[116*n[1]-16,500*(n[0]-n[1]),200*(n[1]-n[2])]},toBase(e){let t=[];return t[1]=(e[0]+16)/116,t[0]=e[1]/500+t[1],t[2]=t[1]-e[2]/200,[t[0]>By?Math.pow(t[0],3):(116*t[0]-16)/Iy,e[0]>8?Math.pow((e[0]+16)/116,3):e[0]/Iy,t[2]>By?Math.pow(t[2],3):(116*t[2]-16)/Iy].map(((e,t)=>e*Wy[t]))},formats:{lab:{coords:["<number> | <percentage>","<number> | <percentage>[-1,1]","<number> | <percentage>[-1,1]"]}}});function Gy(e){return(e%360+360)%360}var Zy=new Ry({id:"lch",name:"LCH",coords:{l:{refRange:[0,100],name:"Lightness"},c:{refRange:[0,150],name:"Chroma"},h:{refRange:[0,360],type:"angle",name:"Hue"}},base:Uy,fromBase(e){let t,[n,r,o]=e;return t=Math.abs(r)<.02&&Math.abs(o)<.02?NaN:180*Math.atan2(o,r)/Math.PI,[n,Math.sqrt(r**2+o**2),Gy(t)]},toBase(e){let[t,n,r]=e;return n<0&&(n=0),isNaN(r)&&(r=0),[t,n*Math.cos(r*Math.PI/180),n*Math.sin(r*Math.PI/180)]},formats:{lch:{coords:["<number> | <percentage>","<number> | <percentage>","<number> | <angle>"]}}});const Yy=25**7,qy=Math.PI,Xy=180/qy,Ky=qy/180;function Jy(e,t,{kL:n=1,kC:r=1,kH:o=1}={}){let[i,a,s]=Uy.from(e),l=Zy.from(Uy,[i,a,s])[1],[c,u,d]=Uy.from(t),p=Zy.from(Uy,[c,u,d])[1];l<0&&(l=0),p<0&&(p=0);let f=((l+p)/2)**7,m=.5*(1-Math.sqrt(f/(f+Yy))),h=(1+m)*a,g=(1+m)*u,v=Math.sqrt(h**2+s**2),y=Math.sqrt(g**2+d**2),b=0===h&&0===s?0:Math.atan2(s,h),$=0===g&&0===d?0:Math.atan2(d,g);b<0&&(b+=2*qy),$<0&&($+=2*qy),b*=Xy,$*=Xy;let x,w=c-i,S=y-v,C=$-b,E=b+$,k=Math.abs(C);v*y==0?x=0:k<=180?x=C:C>180?x=C-360:C<-180?x=C+360:console.log("the unthinkable has happened");let M,A=2*Math.sqrt(y*v)*Math.sin(x*Ky/2),T=(i+c)/2,R=(v+y)/2,P=Math.pow(R,7);M=v*y==0?E:k<=180?E/2:E<360?(E+360)/2:(E-360)/2;let L=(T-50)**2,O=1+.015*L/Math.sqrt(20+L),z=1+.045*R,N=1;N-=.17*Math.cos((M-30)*Ky),N+=.24*Math.cos(2*M*Ky),N+=.32*Math.cos((3*M+6)*Ky),N-=.2*Math.cos((4*M-63)*Ky);let j=1+.015*R*N,V=30*Math.exp(-1*((M-275)/25)**2),D=2*Math.sqrt(P/(P+Yy)),_=(w/(n*O))**2;return _+=(S/(r*z))**2,_+=(A/(o*j))**2,_+=-1*Math.sin(2*V*Ky)*D*(S/(r*z))*(A/(o*j)),Math.sqrt(_)}const Qy=75e-6;function eb(e,t=e.space,{epsilon:n=Qy}={}){e=jy(e),t=Ry.get(t);let r=e.coords;return t!==e.space&&(r=t.from(e)),t.inGamut(r,{epsilon:n})}function tb(e){return{space:e.space,coords:e.coords.slice(),alpha:e.alpha}}function nb(e,{method:t=ky.gamut_mapping,space:n=e.space}={}){if(hy(arguments[1])&&(n=arguments[1]),eb(e,n=Ry.get(n),{epsilon:0}))return jy(e);let r=rb(e,n);if("clip"!==t&&!eb(e,n)){let o=nb(tb(r),{method:"clip",space:n});if(Jy(e,o)>2){let e=Ry.resolveCoord(t),o=e.space,i=e.id,a=rb(r,o),s=.01,l=(e.range||e.refRange)[0],c=Dy(a,i);for(;c-l>s;){let e=tb(a);e=nb(e,{space:n,method:"clip"}),Jy(a,e)-2<s?l=Dy(a,i):c=Dy(a,i),Hy(a,i,(l+c)/2)}r=rb(a,n)}else r=o}if("clip"===t||!eb(r,n,{epsilon:0})){let e=Object.values(n.coords).map((e=>e.range||[]));r.coords=r.coords.map(((t,n)=>{let[r,o]=e[n];return void 0!==r&&(t=Math.max(r,t)),void 0!==o&&(t=Math.min(t,o)),t}))}return n!==e.space&&(r=rb(r,e.space)),e.coords=r.coords,e}function rb(e,t,{inGamut:n}={}){e=jy(e);let r=(t=Ry.get(t)).from(e),o={space:t,coords:r,alpha:e.alpha};return n&&(o=nb(o)),o}function ob(e,{precision:t=ky.precision,format:n="default",inGamut:r=!0,...o}={}){let i,a=n;n=(e=jy(e)).space.getFormat(n)??e.space.getFormat("default")??Ry.DEFAULT_FORMAT,r||=n.toGamut;let s=e.coords;if(s=s.map((e=>e||0)),r&&!eb(e)&&(s=nb(tb(e),!0===r?void 0:r).coords),"custom"===n.type){if(o.precision=t,!n.serialize)throw new TypeError(`format ${a} can only be used to parse colors, not for serialization`);i=n.serialize(s,e.alpha,o)}else{let r=n.name||"color";n.serializeCoords?s=n.serializeCoords(s,t):null!==t&&(s=s.map((e=>vy(e,t))));let o=[...s];if("color"===r){let t=n.id||n.ids?.[0]||e.space.id;o.unshift(t)}let a=e.alpha;null!==t&&(a=vy(a,t));let l=e.alpha<1&&!n.noAlpha?`${n.commas?",":" /"} ${a}`:"";i=`${r}(${o.join(n.commas?", ":" ")}${l})`}return i}nb.returns="color",rb.returns="color";var ib=new zy({id:"rec2020-linear",name:"Linear REC.2020",white:"D65",toXYZ_M:[[.6369580483012914,.14461690358620832,.1688809751641721],[.2627002120112671,.6779980715188708,.05930171646986196],[0,.028072693049087428,1.060985057710791]],fromXYZ_M:[[1.716651187971268,-.355670783776392,-.25336628137366],[-.666684351832489,1.616481236634939,.0157685458139111],[.017639857445311,-.042770613257809,.942103121235474]],formats:{color:{}}});const ab=1.09929682680944,sb=.018053968510807;var lb=new zy({id:"rec2020",name:"REC.2020",base:ib,toBase:e=>e.map((function(e){return e<4.5*sb?e/4.5:Math.pow((e+ab-1)/ab,1/.45)})),fromBase:e=>e.map((function(e){return e>=sb?ab*Math.pow(e,.45)-(ab-1):4.5*e})),formats:{color:{}}});var cb=new zy({id:"p3-linear",name:"Linear P3",white:"D65",toXYZ_M:[[.4865709486482162,.26566769316909306,.1982172852343625],[.2289745640697488,.6917385218365064,.079286914093745],[0,.04511338185890264,1.043944368900976]],fromXYZ_M:[[2.493496911941425,-.9313836179191239,-.40271078445071684],[-.8294889695615747,1.7626640603183463,.023624685841943577],[.03584583024378447,-.07617238926804182,.9568845240076872]]});var ub=new zy({id:"srgb-linear",name:"Linear sRGB",white:"D65",toXYZ_M:[[.41239079926595934,.357584339383878,.1804807884018343],[.21263900587151027,.715168678767756,.07219231536073371],[.01933081871559182,.11919477979462598,.9505321522496607]],fromXYZ_M:[[3.2409699419045226,-1.537383177570094,-.4986107602930034],[-.9692436362808796,1.8759675015077202,.04155505740717559],[.05563007969699366,-.20397695888897652,1.0569715142428786]],formats:{color:{}}}),db={aliceblue:[240/255,248/255,1],antiquewhite:[250/255,235/255,215/255],aqua:[0,1,1],aquamarine:[127/255,1,212/255],azure:[240/255,1,1],beige:[245/255,245/255,220/255],bisque:[1,228/255,196/255],black:[0,0,0],blanchedalmond:[1,235/255,205/255],blue:[0,0,1],blueviolet:[138/255,43/255,226/255],brown:[165/255,42/255,42/255],burlywood:[222/255,184/255,135/255],cadetblue:[95/255,158/255,160/255],chartreuse:[127/255,1,0],chocolate:[210/255,105/255,30/255],coral:[1,127/255,80/255],cornflowerblue:[100/255,149/255,237/255],cornsilk:[1,248/255,220/255],crimson:[220/255,20/255,60/255],cyan:[0,1,1],darkblue:[0,0,139/255],darkcyan:[0,139/255,139/255],darkgoldenrod:[184/255,134/255,11/255],darkgray:[169/255,169/255,169/255],darkgreen:[0,100/255,0],darkgrey:[169/255,169/255,169/255],darkkhaki:[189/255,183/255,107/255],darkmagenta:[139/255,0,139/255],darkolivegreen:[85/255,107/255,47/255],darkorange:[1,140/255,0],darkorchid:[.6,50/255,.8],darkred:[139/255,0,0],darksalmon:[233/255,150/255,122/255],darkseagreen:[143/255,188/255,143/255],darkslateblue:[72/255,61/255,139/255],darkslategray:[47/255,79/255,79/255],darkslategrey:[47/255,79/255,79/255],darkturquoise:[0,206/255,209/255],darkviolet:[148/255,0,211/255],deeppink:[1,20/255,147/255],deepskyblue:[0,191/255,1],dimgray:[105/255,105/255,105/255],dimgrey:[105/255,105/255,105/255],dodgerblue:[30/255,144/255,1],firebrick:[178/255,34/255,34/255],floralwhite:[1,250/255,240/255],forestgreen:[34/255,139/255,34/255],fuchsia:[1,0,1],gainsboro:[220/255,220/255,220/255],ghostwhite:[248/255,248/255,1],gold:[1,215/255,0],goldenrod:[218/255,165/255,32/255],gray:[128/255,128/255,128/255],green:[0,128/255,0],greenyellow:[173/255,1,47/255],grey:[128/255,128/255,128/255],honeydew:[240/255,1,240/255],hotpink:[1,105/255,180/255],indianred:[205/255,92/255,92/255],indigo:[75/255,0,130/255],ivory:[1,1,240/255],khaki:[240/255,230/255,140/255],lavender:[230/255,230/255,250/255],lavenderblush:[1,240/255,245/255],lawngreen:[124/255,252/255,0],lemonchiffon:[1,250/255,205/255],lightblue:[173/255,216/255,230/255],lightcoral:[240/255,128/255,128/255],lightcyan:[224/255,1,1],lightgoldenrodyellow:[250/255,250/255,210/255],lightgray:[211/255,211/255,211/255],lightgreen:[144/255,238/255,144/255],lightgrey:[211/255,211/255,211/255],lightpink:[1,182/255,193/255],lightsalmon:[1,160/255,122/255],lightseagreen:[32/255,178/255,170/255],lightskyblue:[135/255,206/255,250/255],lightslategray:[119/255,136/255,.6],lightslategrey:[119/255,136/255,.6],lightsteelblue:[176/255,196/255,222/255],lightyellow:[1,1,224/255],lime:[0,1,0],limegreen:[50/255,205/255,50/255],linen:[250/255,240/255,230/255],magenta:[1,0,1],maroon:[128/255,0,0],mediumaquamarine:[.4,205/255,170/255],mediumblue:[0,0,205/255],mediumorchid:[186/255,85/255,211/255],mediumpurple:[147/255,112/255,219/255],mediumseagreen:[60/255,179/255,113/255],mediumslateblue:[123/255,104/255,238/255],mediumspringgreen:[0,250/255,154/255],mediumturquoise:[72/255,209/255,.8],mediumvioletred:[199/255,21/255,133/255],midnightblue:[25/255,25/255,112/255],mintcream:[245/255,1,250/255],mistyrose:[1,228/255,225/255],moccasin:[1,228/255,181/255],navajowhite:[1,222/255,173/255],navy:[0,0,128/255],oldlace:[253/255,245/255,230/255],olive:[128/255,128/255,0],olivedrab:[107/255,142/255,35/255],orange:[1,165/255,0],orangered:[1,69/255,0],orchid:[218/255,112/255,214/255],palegoldenrod:[238/255,232/255,170/255],palegreen:[152/255,251/255,152/255],paleturquoise:[175/255,238/255,238/255],palevioletred:[219/255,112/255,147/255],papayawhip:[1,239/255,213/255],peachpuff:[1,218/255,185/255],peru:[205/255,133/255,63/255],pink:[1,192/255,203/255],plum:[221/255,160/255,221/255],powderblue:[176/255,224/255,230/255],purple:[128/255,0,128/255],rebeccapurple:[.4,.2,.6],red:[1,0,0],rosybrown:[188/255,143/255,143/255],royalblue:[65/255,105/255,225/255],saddlebrown:[139/255,69/255,19/255],salmon:[250/255,128/255,114/255],sandybrown:[244/255,164/255,96/255],seagreen:[46/255,139/255,87/255],seashell:[1,245/255,238/255],sienna:[160/255,82/255,45/255],silver:[192/255,192/255,192/255],skyblue:[135/255,206/255,235/255],slateblue:[106/255,90/255,205/255],slategray:[112/255,128/255,144/255],slategrey:[112/255,128/255,144/255],snow:[1,250/255,250/255],springgreen:[0,1,127/255],steelblue:[70/255,130/255,180/255],tan:[210/255,180/255,140/255],teal:[0,128/255,128/255],thistle:[216/255,191/255,216/255],tomato:[1,99/255,71/255],turquoise:[64/255,224/255,208/255],violet:[238/255,130/255,238/255],wheat:[245/255,222/255,179/255],white:[1,1,1],whitesmoke:[245/255,245/255,245/255],yellow:[1,1,0],yellowgreen:[154/255,205/255,50/255]};let pb=Array(3).fill("<percentage> | <number>[0, 255]"),fb=Array(3).fill("<number>[0, 255]");var mb=new zy({id:"srgb",name:"sRGB",base:ub,fromBase:e=>e.map((e=>{let t=e<0?-1:1,n=e*t;return n>.0031308?t*(1.055*n**(1/2.4)-.055):12.92*e})),toBase:e=>e.map((e=>{let t=e<0?-1:1,n=e*t;return n<.04045?e/12.92:t*((n+.055)/1.055)**2.4})),formats:{rgb:{coords:pb},rgb_number:{name:"rgb",commas:!0,coords:fb,noAlpha:!0},color:{},rgba:{coords:pb,commas:!0,lastAlpha:!0},rgba_number:{name:"rgba",commas:!0,coords:fb},hex:{type:"custom",toGamut:!0,test:e=>/^#([a-f0-9]{3,4}){1,2}$/i.test(e),parse(e){e.length<=5&&(e=e.replace(/[a-f0-9]/gi,"$&$&"));let t=[];return e.replace(/[a-f0-9]{2}/gi,(e=>{t.push(parseInt(e,16)/255)})),{spaceId:"srgb",coords:t.slice(0,3),alpha:t.slice(3)[0]}},serialize:(e,t,{collapse:n=!0}={})=>{t<1&&e.push(t),e=e.map((e=>Math.round(255*e)));let r=n&&e.every((e=>e%17==0)),o=e.map((e=>r?(e/17).toString(16):e.toString(16).padStart(2,"0"))).join("");return"#"+o}},keyword:{type:"custom",test:e=>/^[a-z]+$/i.test(e),parse(e){let t={spaceId:"srgb",coords:null,alpha:1};if("transparent"===(e=e.toLowerCase())?(t.coords=db.black,t.alpha=0):t.coords=db[e],t.coords)return t}}}}),hb=new zy({id:"p3",name:"P3",base:cb,fromBase:mb.fromBase,toBase:mb.toBase,formats:{color:{id:"display-p3"}}});if(ky.display_space=mb,"undefined"!=typeof CSS&&CSS.supports)for(let e of[Uy,lb,hb]){let t=e.getMinCoords(),n=ob({space:e,coords:t,alpha:1});if(CSS.supports("color",n)){ky.display_space=e;break}}function gb(e,t,n="lab"){let r=(n=Ry.get(n)).from(e),o=n.from(t);return Math.sqrt(r.reduce(((e,t,n)=>{let r=o[n];return isNaN(t)||isNaN(r)?e:e+(r-t)**2}),0))}function vb(e){return Dy(e,[Oy,"y"])}function yb(e,t){Hy(e,[Oy,"y"],t)}var bb=Object.freeze({__proto__:null,getLuminance:vb,register:function(e){Object.defineProperty(e.prototype,"luminance",{get(){return vb(this)},set(e){yb(this,e)}})},setLuminance:yb});const $b=.022,xb=1.414;function wb(e){return e>=$b?e:e+($b-e)**xb}function Sb(e){let t=e<0?-1:1,n=Math.abs(e);return t*Math.pow(n,2.4)}const Cb=24/116,Eb=24389/27;let kb=My.D65;var Mb=new Ry({id:"lab-d65",name:"Lab D65",coords:{l:{refRange:[0,100],name:"L"},a:{refRange:[-125,125]},b:{refRange:[-125,125]}},white:kb,base:Oy,fromBase(e){let t=e.map(((e,t)=>e/kb[t])),n=t.map((e=>e>.008856451679035631?Math.cbrt(e):(Eb*e+16)/116));return[116*n[1]-16,500*(n[0]-n[1]),200*(n[1]-n[2])]},toBase(e){let t=[];return t[1]=(e[0]+16)/116,t[0]=e[1]/500+t[1],t[2]=t[1]-e[2]/200,[t[0]>Cb?Math.pow(t[0],3):(116*t[0]-16)/Eb,e[0]>8?Math.pow((e[0]+16)/116,3):e[0]/Eb,t[2]>Cb?Math.pow(t[2],3):(116*t[2]-16)/Eb].map(((e,t)=>e*kb[t]))},formats:{"lab-d65":{coords:["<number> | <percentage>","<number> | <percentage>[-1,1]","<number> | <percentage>[-1,1]"]}}});const Ab=.5*Math.pow(5,.5)+.5;var Tb=Object.freeze({__proto__:null,contrastAPCA:function(e,t){let n,r,o,i,a,s;t=jy(t),e=jy(e),t=rb(t,"srgb"),[i,a,s]=t.coords;let l=.2126729*Sb(i)+.7151522*Sb(a)+.072175*Sb(s);e=rb(e,"srgb"),[i,a,s]=e.coords;let c=.2126729*Sb(i)+.7151522*Sb(a)+.072175*Sb(s),u=wb(l),d=wb(c),p=d>u;return Math.abs(d-u)<5e-4?r=0:p?(n=d**.56-u**.57,r=1.14*n):(n=d**.65-u**.62,r=1.14*n),o=Math.abs(r)<.1?0:r>0?r-.027:r+.027,100*o},contrastDeltaPhi:function(e,t){e=jy(e),t=jy(t);let n=Dy(e,[Mb,"l"]),r=Dy(t,[Mb,"l"]),o=Math.abs(Math.pow(n,Ab)-Math.pow(r,Ab)),i=Math.pow(o,1/Ab)*Math.SQRT2-40;return i<7.5?0:i},contrastLstar:function(e,t){e=jy(e),t=jy(t);let n=Dy(e,[Uy,"l"]),r=Dy(t,[Uy,"l"]);return Math.abs(n-r)},contrastMichelson:function(e,t){e=jy(e),t=jy(t);let n=Math.max(vb(e),0),r=Math.max(vb(t),0);r>n&&([n,r]=[r,n]);let o=n+r;return 0===o?0:(n-r)/o},contrastWCAG21:function(e,t){e=jy(e),t=jy(t);let n=Math.max(vb(e),0),r=Math.max(vb(t),0);return r>n&&([n,r]=[r,n]),(n+.05)/(r+.05)},contrastWeber:function(e,t){e=jy(e),t=jy(t);let n=Math.max(vb(e),0),r=Math.max(vb(t),0);return r>n&&([n,r]=[r,n]),0===r?5e4:(n-r)/r}});function Rb(e){let[t,n,r]=Vy(e,Oy),o=t+15*n+3*r;return[4*t/o,9*n/o]}function Pb(e){let[t,n,r]=Vy(e,Oy),o=t+n+r;return[t/o,n/o]}var Lb=Object.freeze({__proto__:null,register:function(e){Object.defineProperty(e.prototype,"uv",{get(){return Rb(this)}}),Object.defineProperty(e.prototype,"xy",{get(){return Pb(this)}})},uv:Rb,xy:Pb});const Ob=Math.PI/180;var zb=new Ry({id:"xyz-abs-d65",name:"Absolute XYZ D65",coords:{x:{refRange:[0,9504.7],name:"Xa"},y:{refRange:[0,1e4],name:"Ya"},z:{refRange:[0,10888.3],name:"Za"}},base:Oy,fromBase:e=>e.map((e=>Math.max(203*e,0))),toBase:e=>e.map((e=>Math.max(e/203,0)))});const Nb=1.15,jb=.66,Vb=2610/16384,Db=.8359375,_b=2413/128,Hb=18.6875,Fb=32/(1.7*2523),Bb=-.56,Ib=16295499532821565e-27,Wb=[[.41478972,.579999,.014648],[-.20151,1.120649,.0531008],[-.0166008,.2648,.6684799]],Ub=[[1.9242264357876067,-1.0047923125953657,.037651404030618],[.35031676209499907,.7264811939316552,-.06538442294808501],[-.09098281098284752,-.3127282905230739,1.5227665613052603]],Gb=[[.5,.5,0],[3.524,-4.066708,.542708],[.199076,1.096799,-1.295875]],Zb=[[1,.1386050432715393,.05804731615611886],[.9999999999999999,-.1386050432715393,-.05804731615611886],[.9999999999999998,-.09601924202631895,-.8118918960560388]];var Yb=new Ry({id:"jzazbz",name:"Jzazbz",coords:{jz:{refRange:[0,1],name:"Jz"},az:{refRange:[-.5,.5]},bz:{refRange:[-.5,.5]}},base:zb,fromBase(e){let[t,n,r]=e,o=my(Wb,[Nb*t-(Nb-1)*r,jb*n-(jb-1)*t,r]).map((function(e){return((Db+_b*(e/1e4)**Vb)/(1+Hb*(e/1e4)**Vb))**134.03437499999998})),[i,a,s]=my(Gb,o);return[(1+Bb)*i/(1+Bb*i)-Ib,a,s]},toBase(e){let[t,n,r]=e,o=my(Zb,[(t+Ib)/(1+Bb-Bb*(t+Ib)),n,r]).map((function(e){return 1e4*((Db-e**Fb)/(Hb*e**Fb-_b))**6.277394636015326})),[i,a,s]=my(Ub,o),l=(i+(Nb-1)*s)/Nb;return[l,(a+(jb-1)*l)/jb,s]},formats:{color:{}}}),qb=new Ry({id:"jzczhz",name:"JzCzHz",coords:{jz:{refRange:[0,1],name:"Jz"},cz:{refRange:[0,1],name:"Chroma"},hz:{refRange:[0,360],type:"angle",name:"Hue"}},base:Yb,fromBase(e){let t,[n,r,o]=e;const i=2e-4;return t=Math.abs(r)<i&&Math.abs(o)<i?NaN:180*Math.atan2(o,r)/Math.PI,[n,Math.sqrt(r**2+o**2),Gy(t)]},toBase:e=>[e[0],e[1]*Math.cos(e[2]*Math.PI/180),e[1]*Math.sin(e[2]*Math.PI/180)],formats:{color:{}}});const Xb=.8359375,Kb=2413/128,Jb=18.6875,Qb=2610/16384,e$=2523/32,t$=16384/2610,n$=32/2523,r$=[[.3592,.6976,-.0358],[-.1922,1.1004,.0755],[.007,.0749,.8434]],o$=[[.5,.5,0],[6610/4096,-13613/4096,7003/4096],[17933/4096,-17390/4096,-543/4096]],i$=[[.9999888965628402,.008605050147287059,.11103437159861648],[1.00001110343716,-.008605050147287059,-.11103437159861648],[1.0000320633910054,.56004913547279,-.3206339100541203]],a$=[[2.0701800566956137,-1.326456876103021,.20661600684785517],[.3649882500326575,.6804673628522352,-.04542175307585323],[-.04959554223893211,-.04942116118675749,1.1879959417328034]];var s$=new Ry({id:"ictcp",name:"ICTCP",coords:{i:{refRange:[0,1],name:"I"},ct:{refRange:[-.5,.5],name:"CT"},cp:{refRange:[-.5,.5],name:"CP"}},base:zb,fromBase:e=>function(e){let t=e.map((function(e){return((Xb+Kb*(e/1e4)**Qb)/(1+Jb*(e/1e4)**Qb))**e$}));return my(o$,t)}(my(r$,e)),toBase(e){let t=function(e){let t=my(i$,e),n=t.map((function(e){return 1e4*(Math.max(e**n$-Xb,0)/(Kb-Jb*e**n$))**t$}));return n}(e);return my(a$,t)},formats:{color:{}}});const l$=[[.8190224432164319,.3619062562801221,-.12887378261216414],[.0329836671980271,.9292868468965546,.03614466816999844],[.048177199566046255,.26423952494422764,.6335478258136937]],c$=[[1.2268798733741557,-.5578149965554813,.28139105017721583],[-.04057576262431372,1.1122868293970594,-.07171106666151701],[-.07637294974672142,-.4214933239627914,1.5869240244272418]],u$=[[.2104542553,.793617785,-.0040720468],[1.9779984951,-2.428592205,.4505937099],[.0259040371,.7827717662,-.808675766]],d$=[[.9999999984505198,.39633779217376786,.2158037580607588],[1.0000000088817609,-.10556134232365635,-.06385417477170591],[1.0000000546724108,-.08948418209496575,-1.2914855378640917]];var p$=new Ry({id:"oklab",name:"Oklab",coords:{l:{refRange:[0,1],name:"L"},a:{refRange:[-.4,.4]},b:{refRange:[-.4,.4]}},white:"D65",base:Oy,fromBase(e){let t=my(l$,e).map((e=>Math.cbrt(e)));return my(u$,t)},toBase(e){let t=my(d$,e).map((e=>e**3));return my(c$,t)},formats:{oklab:{coords:["<percentage> | <number>","<number> | <percentage>[-1,1]","<number> | <percentage>[-1,1]"]}}});var f$={deltaE76:function(e,t){return gb(e,t,"lab")},deltaECMC:function(e,t,{l:n=2,c:r=1}={}){let[o,i,a]=Uy.from(e),[,s,l]=Zy.from(Uy,[o,i,a]),[c,u,d]=Uy.from(t),p=Zy.from(Uy,[c,u,d])[1];s<0&&(s=0),p<0&&(p=0);let f=o-c,m=s-p,h=(i-u)**2+(a-d)**2-m**2,g=.511;o>=16&&(g=.040975*o/(1+.01765*o));let v,y=.0638*s/(1+.0131*s)+.638;Number.isNaN(l)&&(l=0),v=l>=164&&l<=345?.56+Math.abs(.2*Math.cos((l+168)*Ob)):.36+Math.abs(.4*Math.cos((l+35)*Ob));let b=Math.pow(s,4),$=Math.sqrt(b/(b+1900)),x=(f/(n*g))**2;return x+=(m/(r*y))**2,x+=h/(y*($*v+1-$))**2,Math.sqrt(x)},deltaE2000:Jy,deltaEJz:function(e,t){let[n,r,o]=qb.from(e),[i,a,s]=qb.from(t),l=n-i,c=r-a;Number.isNaN(o)&&Number.isNaN(s)?(o=0,s=0):Number.isNaN(o)?o=s:Number.isNaN(s)&&(s=o);let u=o-s,d=2*Math.sqrt(r*a)*Math.sin(u/2*(Math.PI/180));return Math.sqrt(l**2+c**2+d**2)},deltaEITP:function(e,t){let[n,r,o]=s$.from(e),[i,a,s]=s$.from(t);return 720*Math.sqrt((n-i)**2+.25*(r-a)**2+(o-s)**2)},deltaEOK:function(e,t){let[n,r,o]=p$.from(e),[i,a,s]=p$.from(t),l=n-i,c=r-a,u=o-s;return Math.sqrt(l**2+c**2+u**2)}};function m$(e,t,n={}){hy(n)&&(n={method:n});let{method:r=ky.deltaE,...o}=n;e=jy(e),t=jy(t);for(let n in f$)if("deltae"+r.toLowerCase()===n.toLowerCase())return f$[n](e,t,o);throw new TypeError(`Unknown deltaE method: ${r}`)}var h$=Object.freeze({__proto__:null,darken:function(e,t=.25){return Hy(e,[Ry.get("oklch","lch"),"l"],(e=>e*(1-t)))},lighten:function(e,t=.25){return Hy(e,[Ry.get("oklch","lch"),"l"],(e=>e*(1+t)))}});function g$(e,t,n=.5,r={}){[e,t]=[jy(e),jy(t)],"object"===gy(n)&&([n,r]=[.5,n]);let{space:o,outputSpace:i,premultiplied:a}=r;return y$(e,t,{space:o,outputSpace:i,premultiplied:a})(n)}function v$(e,t,n={}){let r;b$(e)&&([r,n]=[e,t],[e,t]=r.rangeArgs.colors);let{maxDeltaE:o,deltaEMethod:i,steps:a=2,maxSteps:s=1e3,...l}=n;r||([e,t]=[jy(e),jy(t)],r=y$(e,t,l));let c=m$(e,t),u=o>0?Math.max(a,Math.ceil(c/o)+1):a,d=[];if(void 0!==s&&(u=Math.min(u,s)),1===u)d=[{p:.5,color:r(.5)}];else{let e=1/(u-1);d=Array.from({length:u},((t,n)=>{let o=n*e;return{p:o,color:r(o)}}))}if(o>0){let e=d.reduce(((e,t,n)=>{if(0===n)return 0;let r=m$(t.color,d[n-1].color,i);return Math.max(e,r)}),0);for(;e>o;){e=0;for(let t=1;t<d.length&&d.length<s;t++){let n=d[t-1],o=d[t],i=(o.p+n.p)/2,a=r(i);e=Math.max(e,m$(a,n.color),m$(a,o.color)),d.splice(t,0,{p:i,color:r(i)}),t++}}}return d=d.map((e=>e.color)),d}function y$(e,t,n={}){if(b$(e)){let[n,r]=[e,t];return y$(...n.rangeArgs.colors,{...n.rangeArgs.options,...r})}let{space:r,outputSpace:o,progression:i,premultiplied:a}=n;e=jy(e),t=jy(t),e=tb(e),t=tb(t);let s={colors:[e,t],options:n};if(r=r?Ry.get(r):Ry.registry[ky.interpolationSpace]||e.space,o=o?Ry.get(o):r,e=rb(e,r),t=rb(t,r),e=nb(e),t=nb(t),r.coords.h&&"angle"===r.coords.h.type){let o=n.hue=n.hue||"shorter",i=[r,"h"],[a,s]=[Dy(e,i),Dy(t,i)];[a,s]=function(e,t){if("raw"===e)return t;let[n,r]=t.map(Gy),o=r-n;return"increasing"===e?o<0&&(r+=360):"decreasing"===e?o>0&&(n+=360):"longer"===e?-180<o&&o<180&&(o>0?n+=360:r+=360):"shorter"===e&&(o>180?n+=360:o<-180&&(r+=360)),[n,r]}(o,[a,s]),Hy(e,i,a),Hy(t,i,s)}return a&&(e.coords=e.coords.map((t=>t*e.alpha)),t.coords=t.coords.map((e=>e*t.alpha))),Object.assign((n=>{n=i?i(n):n;let s=e.coords.map(((e,r)=>$y(e,t.coords[r],n))),l=$y(e.alpha,t.alpha,n),c={space:r,coords:s,alpha:l};return a&&(c.coords=c.coords.map((e=>e/l))),o!==r&&(c=rb(c,o)),c}),{rangeArgs:s})}function b$(e){return"function"===gy(e)&&!!e.rangeArgs}ky.interpolationSpace="lab";var $$=Object.freeze({__proto__:null,isRange:b$,mix:g$,range:y$,register:function(e){e.defineFunction("mix",g$,{returns:"color"}),e.defineFunction("range",y$,{returns:"function<color>"}),e.defineFunction("steps",v$,{returns:"array<color>"})},steps:v$}),x$=new Ry({id:"hsl",name:"HSL",coords:{h:{refRange:[0,360],type:"angle",name:"Hue"},s:{range:[0,100],name:"Saturation"},l:{range:[0,100],name:"Lightness"}},base:mb,fromBase:e=>{let t=Math.max(...e),n=Math.min(...e),[r,o,i]=e,[a,s,l]=[NaN,0,(n+t)/2],c=t-n;if(0!==c){switch(s=0===l||1===l?0:(t-l)/Math.min(l,1-l),t){case r:a=(o-i)/c+(o<i?6:0);break;case o:a=(i-r)/c+2;break;case i:a=(r-o)/c+4}a*=60}return[a,100*s,100*l]},toBase:e=>{let[t,n,r]=e;function o(e){let o=(e+t/30)%12,i=n*Math.min(r,1-r);return r-i*Math.max(-1,Math.min(o-3,9-o,1))}return t%=360,t<0&&(t+=360),n/=100,r/=100,[o(0),o(8),o(4)]},formats:{hsl:{toGamut:!0,coords:["<number> | <angle>","<percentage>","<percentage>"]},hsla:{coords:["<number> | <angle>","<percentage>","<percentage>"],commas:!0,lastAlpha:!0}}}),w$=new Ry({id:"hsv",name:"HSV",coords:{h:{refRange:[0,360],type:"angle",name:"Hue"},s:{range:[0,100],name:"Saturation"},v:{range:[0,100],name:"Value"}},base:x$,fromBase(e){let[t,n,r]=e;n/=100,r/=100;let o=r+n*Math.min(r,1-r);return[t,0===o?0:200*(1-r/o),100*o]},toBase(e){let[t,n,r]=e;n/=100,r/=100;let o=r*(1-n/2);return[t,0===o||1===o?0:(r-o)/Math.min(o,1-o)*100,100*o]},formats:{color:{toGamut:!0}}}),S$=new Ry({id:"hwb",name:"HWB",coords:{h:{refRange:[0,360],type:"angle",name:"Hue"},w:{range:[0,100],name:"Whiteness"},b:{range:[0,100],name:"Blackness"}},base:w$,fromBase(e){let[t,n,r]=e;return[t,r*(100-n)/100,100-r]},toBase(e){let[t,n,r]=e;n/=100,r/=100;let o=n+r;if(o>=1){return[t,0,100*(n/o)]}let i=1-r;return[t,100*(0===i?0:1-n/i),100*i]},formats:{hwb:{toGamut:!0,coords:["<number> | <angle>","<percentage>","<percentage>"]}}});var C$=new zy({id:"a98rgb-linear",name:"Linear Adobe® 98 RGB compatible",white:"D65",toXYZ_M:[[.5766690429101305,.1855582379065463,.1882286462349947],[.29734497525053605,.6273635662554661,.07529145849399788],[.02703136138641234,.07068885253582723,.9913375368376388]],fromXYZ_M:[[2.0415879038107465,-.5650069742788596,-.34473135077832956],[-.9692436362808795,1.8759675015077202,.04155505740717557],[.013444280632031142,-.11836239223101838,1.0151749943912054]]}),E$=new zy({id:"a98rgb",name:"Adobe® 98 RGB compatible",base:C$,toBase:e=>e.map((e=>Math.pow(Math.abs(e),563/256)*Math.sign(e))),fromBase:e=>e.map((e=>Math.pow(Math.abs(e),256/563)*Math.sign(e))),formats:{color:{id:"a98-rgb"}}});var k$=new zy({id:"prophoto-linear",name:"Linear ProPhoto",white:"D50",base:Fy,toXYZ_M:[[.7977604896723027,.13518583717574031,.0313493495815248],[.2880711282292934,.7118432178101014,8565396060525902e-20],[0,0,.8251046025104601]],fromXYZ_M:[[1.3457989731028281,-.25558010007997534,-.05110628506753401],[-.5446224939028347,1.5082327413132781,.02053603239147973],[0,0,1.2119675456389454]]});var M$=new zy({id:"prophoto",name:"ProPhoto",base:k$,toBase:e=>e.map((e=>e<.03125?e/16:e**1.8)),fromBase:e=>e.map((e=>e>=.001953125?e**(1/1.8):16*e)),formats:{color:{id:"prophoto-rgb"}}}),A$=new Ry({id:"oklch",name:"Oklch",coords:{l:{refRange:[0,1],name:"Lightness"},c:{refRange:[0,.4],name:"Chroma"},h:{refRange:[0,360],type:"angle",name:"Hue"}},white:"D65",base:p$,fromBase(e){let t,[n,r,o]=e;const i=2e-4;return t=Math.abs(r)<i&&Math.abs(o)<i?NaN:180*Math.atan2(o,r)/Math.PI,[n,Math.sqrt(r**2+o**2),Gy(t)]},toBase(e){let t,n,[r,o,i]=e;return isNaN(i)?(t=0,n=0):(t=o*Math.cos(i*Math.PI/180),n=o*Math.sin(i*Math.PI/180)),[r,t,n]},formats:{oklch:{coords:["<number> | <percentage>","<number> | <percentage>[0,1]","<number> | <angle>"]}}});const T$=2610/16384,R$=32/2523,P$=.8359375,L$=2413/128,O$=18.6875;var z$=new zy({id:"rec2100pq",name:"REC.2100-PQ",base:ib,toBase:e=>e.map((function(e){return 1e4*(Math.max(e**R$-P$,0)/(L$-O$*e**R$))**6.277394636015326/203})),fromBase:e=>e.map((function(e){let t=Math.max(203*e/1e4,0);return((P$+L$*t**T$)/(1+O$*t**T$))**78.84375})),formats:{color:{id:"rec2100-pq"}}});const N$=.17883277,j$=.28466892,V$=.55991073,D$=3.7743;var _$=new zy({id:"rec2100hlg",cssid:"rec2100-hlg",name:"REC.2100-HLG",referred:"scene",base:ib,toBase:e=>e.map((function(e){return e<=.5?e**2/3*D$:(Math.exp((e-V$)/N$)+j$)/12*D$})),fromBase:e=>e.map((function(e){return(e/=D$)<=1/12?Math.sqrt(3*e):N$*Math.log(12*e-j$)+V$})),formats:{color:{id:"rec2100-hlg"}}});const H$={};function F$({id:e,toCone_M:t,fromCone_M:n}){H$[e]=arguments[0]}function B$(e,t,n="Bradford"){let r=H$[n],[o,i,a]=my(r.toCone_M,e),[s,l,c]=my(r.toCone_M,t),u=my([[s/o,0,0],[0,l/i,0],[0,0,c/a]],r.toCone_M);return my(r.fromCone_M,u)}Ey.add("chromatic-adaptation-start",(e=>{e.options.method&&(e.M=B$(e.W1,e.W2,e.options.method))})),Ey.add("chromatic-adaptation-end",(e=>{e.M||(e.M=B$(e.W1,e.W2,e.options.method))})),F$({id:"von Kries",toCone_M:[[.40024,.7076,-.08081],[-.2263,1.16532,.0457],[0,0,.91822]],fromCone_M:[[1.8599364,-1.1293816,.2198974],[.3611914,.6388125,-64e-7],[0,0,1.0890636]]}),F$({id:"Bradford",toCone_M:[[.8951,.2664,-.1614],[-.7502,1.7135,.0367],[.0389,-.0685,1.0296]],fromCone_M:[[.9869929,-.1470543,.1599627],[.4323053,.5183603,.0492912],[-.0085287,.0400428,.9684867]]}),F$({id:"CAT02",toCone_M:[[.7328,.4296,-.1624],[-.7036,1.6975,.0061],[.003,.0136,.9834]],fromCone_M:[[1.0961238,-.278869,.1827452],[.454369,.4735332,.0720978],[-.0096276,-.005698,1.0153256]]}),F$({id:"CAT16",toCone_M:[[.401288,.650173,-.051461],[-.250268,1.204414,.045854],[-.002079,.048952,.953127]],fromCone_M:[[1.862067855087233,-1.011254630531685,.1491867754444518],[.3875265432361372,.6214474419314753,-.008973985167612518],[-.01584149884933386,-.03412293802851557,1.04996443687785]]}),Object.assign(My,{A:[1.0985,1,.35585],C:[.98074,1,1.18232],D55:[.95682,1,.92149],D75:[.94972,1,1.22638],E:[1,1,1],F2:[.99186,1,.67393],F7:[.95041,1,1.08747],F11:[1.00962,1,.6435]}),My.ACES=[.32168/.33767,1,.34065/.33767];var I$=new zy({id:"acescg",name:"ACEScg",coords:{r:{range:[0,65504],name:"Red"},g:{range:[0,65504],name:"Green"},b:{range:[0,65504],name:"Blue"}},referred:"scene",white:My.ACES,toXYZ_M:[[.6624541811085053,.13400420645643313,.1561876870049078],[.27222871678091454,.6740817658111484,.05368951740793705],[-.005574649490394108,.004060733528982826,1.0103391003129971]],fromXYZ_M:[[1.6410233796943257,-.32480329418479,-.23642469523761225],[-.6636628587229829,1.6153315916573379,.016756347685530137],[.011721894328375376,-.008284441996237409,.9883948585390215]],formats:{color:{}}});const W$=2**-16,U$=-.35828683,G$=(Math.log2(65504)+9.72)/17.52;var Z$=new zy({id:"acescc",name:"ACEScc",coords:{r:{range:[U$,G$],name:"Red"},g:{range:[U$,G$],name:"Green"},b:{range:[U$,G$],name:"Blue"}},referred:"scene",base:I$,toBase:e=>e.map((function(e){return e<=-.3013698630136986?2*(2**(17.52*e-9.72)-W$):e<G$?2**(17.52*e-9.72):65504})),fromBase:e=>e.map((function(e){return e<=0?(Math.log2(W$)+9.72)/17.52:e<W$?(Math.log2(W$+.5*e)+9.72)/17.52:(Math.log2(e)+9.72)/17.52})),formats:{color:{}}}),Y$=Object.freeze({__proto__:null,A98RGB:E$,A98RGB_Linear:C$,ACEScc:Z$,ACEScg:I$,HSL:x$,HSV:w$,HWB:S$,ICTCP:s$,JzCzHz:qb,Jzazbz:Yb,LCH:Zy,Lab:Uy,Lab_D65:Mb,OKLCH:A$,OKLab:p$,P3:hb,P3_Linear:cb,ProPhoto:M$,ProPhoto_Linear:k$,REC_2020:lb,REC_2020_Linear:ib,REC_2100_HLG:_$,REC_2100_PQ:z$,XYZ_ABS_D65:zb,XYZ_D50:Fy,XYZ_D65:Oy,sRGB:mb,sRGB_Linear:ub});class q${constructor(...e){let t,n,r,o;1===e.length&&(t=jy(e[0])),t?(n=t.space||t.spaceId,r=t.coords,o=t.alpha):[n,r,o]=e,Object.defineProperty(this,"space",{value:Ry.get(n),writable:!1,enumerable:!0,configurable:!0}),this.coords=r?r.slice():[0,0,0],this.alpha=o<1?o:1;for(let e=0;e<this.coords.length;e++)"NaN"===this.coords[e]&&(this.coords[e]=NaN);for(let e in this.space.coords)Object.defineProperty(this,e,{get:()=>this.get(e),set:t=>this.set(e,t)})}get spaceId(){return this.space.id}clone(){return new q$(this.space,this.coords,this.alpha)}toJSON(){return{spaceId:this.spaceId,coords:this.coords,alpha:this.alpha}}display(...e){let t=function(e,{space:t=ky.display_space,...n}={}){let r=ob(e,n);if("undefined"==typeof CSS||CSS.supports("color",r)||!ky.display_space)r=new String(r),r.color=e;else{let o=rb(e,t);r=new String(ob(o,n)),r.color=o}return r}(this,...e);return t.color=new q$(t.color),t}static get(e,...t){return e instanceof q$?e:new q$(e,...t)}static defineFunction(e,t,n=t){let{instance:r=!0,returns:o}=n,i=function(...e){let n=t(...e);if("color"===o)n=q$.get(n);else if("function<color>"===o){let e=n;n=function(...t){let n=e(...t);return q$.get(n)},Object.assign(n,e)}else"array<color>"===o&&(n=n.map((e=>q$.get(e))));return n};e in q$||(q$[e]=i),r&&(q$.prototype[e]=function(...e){return i(this,...e)})}static defineFunctions(e){for(let t in e)q$.defineFunction(t,e[t],e[t])}static extend(e){if(e.register)e.register(q$);else for(let t in e)q$.defineFunction(t,e[t])}}q$.defineFunctions({get:Dy,getAll:Vy,set:Hy,setAll:_y,to:rb,equals:function(e,t){return e=jy(e),t=jy(t),e.space===t.space&&e.alpha===t.alpha&&e.coords.every(((e,n)=>e===t.coords[n]))},inGamut:eb,toGamut:nb,distance:gb,toString:ob}),Object.assign(q$,{util:Cy,hooks:Ey,WHITES:My,Space:Ry,spaces:Ry.registry,parse:Ny,defaults:ky});for(let e of Object.keys(Y$))Ry.register(Y$[e]);for(let e in Ry.registry)X$(e,Ry.registry[e]);function X$(e,t){Object.keys(t.coords),Object.values(t.coords).map((e=>e.name));let n=e.replace(/-/g,"_");Object.defineProperty(q$.prototype,n,{get(){let n=this.getAll(e);return"undefined"==typeof Proxy?n:new Proxy(n,{has:(e,n)=>{try{return Ry.resolveCoord([t,n]),!0}catch(e){}return Reflect.has(e,n)},get:(e,n,r)=>{if(n&&"symbol"!=typeof n&&!(n in e)){let{index:r}=Ry.resolveCoord([t,n]);if(r>=0)return e[r]}return Reflect.get(e,n,r)},set:(n,r,o,i)=>{if(r&&"symbol"!=typeof r&&!(r in n)||r>=0){let{index:i}=Ry.resolveCoord([t,r]);if(i>=0)return n[i]=o,this.setAll(e,n),!0}return Reflect.set(n,r,o,i)}})},set(t){this.setAll(e,t)},configurable:!0,enumerable:!0})}function K$(t){let n,r,o,a,s,l,c;return{c(){n=P("div"),r=P("div"),o=P("input"),a=z(),s=P("input"),_(o,"type","color"),_(o,"class","absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 rounded-full h-10 w-10 cursor-pointer"),o.value=t[2],_(r,"class","overflow-hidden rounded-full w-5 h-5 border border-border relative"),_(s,"class","w-[3.5rem] text-xs border-none text-text bg-transparent text-end focus:outline-none focus:ring-0"),_(s,"type","text"),s.value=t[2],_(s,"placeholder","--"),_(n,"class","flex flex-row gap-1 justify-end items-center rounded-lg cursor-pointer")},m(e,i){A(e,n,i),E(n,r),E(r,o),E(n,a),E(n,s),l||(c=[j(o,"input",t[3]),j(s,"input",t[4])],l=!0)},p(e,[t]){4&t&&(o.value=e[2]),4&t&&s.value!==e[2]&&(s.value=e[2])},i:e,o:e,d(e){e&&T(n),l=!1,i(c)}}}function J$(e,t,n){let{elementStyle:r}=t,{updateElementStyle:o}=t,i="#000000";return e.$$set=e=>{"elementStyle"in e&&n(0,r=e.elementStyle),"updateElementStyle"in e&&n(1,o=e.updateElementStyle)},e.$$.update=()=>{if(1&e.$$.dirty&&r.value)try{n(2,i=function(e){return e.length<=5?`#${e[1]}${e[1]}${e[2]}${e[2]}${e[3]}${e[3]}`:e}(new q$(r.value).toString({format:"hex"})))}catch(e){console.error("Error parsing color",e),n(2,i="#000000")}},[r,o,i,e=>{n(2,i=e.target.value),o(r.key,e.target.value)},e=>{n(2,i=e.target.value),o(r.key,e.target.value)}]}Ey.add("colorspace-init-end",(e=>{X$(e.id,e),e.aliases?.forEach((t=>{X$(t,e)}))})),q$.extend(f$),q$.extend({deltaE:m$}),Object.assign(q$,{deltaEMethods:f$}),q$.extend(h$),q$.extend({contrast:function(e,t,n={}){hy(n)&&(n={algorithm:n});let{algorithm:r,...o}=n;if(!r){let e=Object.keys(Tb).map((e=>e.replace(/^contrast/,""))).join(", ");throw new TypeError(`contrast() function needs a contrast algorithm. Please specify one of: ${e}`)}e=jy(e),t=jy(t);for(let n in Tb)if("contrast"+r.toLowerCase()===n.toLowerCase())return Tb[n](e,t,o);throw new TypeError(`Unknown contrast algorithm: ${r}`)}}),q$.extend(Lb),q$.extend(bb),q$.extend($$),q$.extend(Tb);class Q$ extends Ue{constructor(e){super(),We(this,e,J$,K$,s,{elementStyle:0,updateElementStyle:1})}}function ex(e,t,n){const r=e.slice();return r[12]=t[n],r}function tx(e){let t,n,r,o,a,s,l,c,u,d,p,f,m,h,g=""!==e[6]&&!e[0].units.includes(e[6]),v=g&&nx(e),y=je(e[0].units??[]),b=[];for(let t=0;t<y.length;t+=1)b[t]=rx(ex(e,y,t));return{c(){t=P("div"),n=P("input"),a=z(),s=P("select"),l=P("option"),c=O(ix),v&&v.c(),u=N();for(let e=0;e<b.length;e+=1)b[e].c();_(n,"type","number"),_(n,"class",r=e[3]+" text-xs border-none text-text bg-transparent text-end focus:outline-none focus:ring-0 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"),_(n,"placeholder","--"),n.value=o=e[8]()?"":e[5],l.__value=ix,G(l,l.__value),_(s,"name",d=e[0].displayName),_(s,"placeholder","auto"),_(s,"class",p="text-xs "+e[4]+" border-none text-text bg-transparent appearance-none "+(e[2]?"text-end":"text-start")+" focus:outline-none focus:ring-0"),_(t,"class","flex flex-row gap-1 justify-end")},m(r,o){A(r,t,o),E(t,n),E(t,a),E(t,s),E(s,l),E(l,c),v&&v.m(s,null),E(s,u);for(let e=0;e<b.length;e+=1)b[e]&&b[e].m(s,null);Z(s,e[8]()?ix:e[6]),m||(h=[j(n,"input",e[9]),j(s,"input",e[10])],m=!0)},p(e,t){if(8&t&&r!==(r=e[3]+" text-xs border-none text-text bg-transparent text-end focus:outline-none focus:ring-0 [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none")&&_(n,"class",r),32&t&&o!==(o=e[8]()?"":e[5])&&n.value!==o&&(n.value=o),65&t&&(g=""!==e[6]&&!e[0].units.includes(e[6])),g?v?v.p(e,t):(v=nx(e),v.c(),v.m(s,u)):v&&(v.d(1),v=null),1&t){let n;for(y=je(e[0].units??[]),n=0;n<y.length;n+=1){const r=ex(e,y,n);b[n]?b[n].p(r,t):(b[n]=rx(r),b[n].c(),b[n].m(s,null))}for(;n<b.length;n+=1)b[n].d(1);b.length=y.length}1&t&&d!==(d=e[0].displayName)&&_(s,"name",d),20&t&&p!==(p="text-xs "+e[4]+" border-none text-text bg-transparent appearance-none "+(e[2]?"text-end":"text-start")+" focus:outline-none focus:ring-0")&&_(s,"class",p),65&t&&f!==(f=e[8]()?ix:e[6])&&Z(s,e[8]()?ix:e[6])},d(e){e&&T(t),v&&v.d(),R(b,e),m=!1,i(h)}}}function nx(e){let t,n;return{c(){t=P("option"),n=O(e[6]),t.__value=e[6],G(t,t.__value)},m(e,r){A(e,t,r),E(t,n)},p(e,r){64&r&&U(n,e[6]),65&r&&(t.__value=e[6],G(t,t.__value))},d(e){e&&T(t)}}}function rx(e){let t,n,r,o=e[12]+"";return{c(){t=P("option"),n=O(o),t.__value=r=e[12],G(t,t.__value)},m(e,r){A(e,t,r),E(t,n)},p(e,i){1&i&&o!==(o=e[12]+"")&&U(n,o),1&i&&r!==(r=e[12])&&(t.__value=r,G(t,t.__value))},d(e){e&&T(t)}}}function ox(t){let n,r=t[0]&&tx(t);return{c(){r&&r.c(),n=N()},m(e,t){r&&r.m(e,t),A(e,n,t)},p(e,[t]){e[0]?r?r.p(e,t):(r=tx(e),r.c(),r.m(n.parentNode,n)):r&&(r.d(1),r=null)},i:e,o:e,d(e){e&&T(n),r&&r.d(e)}}}const ix="auto";function ax(e,t,n){let{elementStyle:r}=t,{updateElementStyle:o}=t,{unitEnd:i=!1}=t,{inputWidth:a="w-8"}=t,{unitWidth:s="w-8"}=t,l=0,c="";const u=(e,t)=>`${e}${t}`;return e.$$set=e=>{"elementStyle"in e&&n(0,r=e.elementStyle),"updateElementStyle"in e&&n(1,o=e.updateElementStyle),"unitEnd"in e&&n(2,i=e.unitEnd),"inputWidth"in e&&n(3,a=e.inputWidth),"unitWidth"in e&&n(4,s=e.unitWidth)},e.$$.update=()=>{1&e.$$.dirty&&n(5,[l,c]=(e=>{const t=e.match(/([-+]?[0-9]*\.?[0-9]+)([a-zA-Z%]*)/);let n=t?parseFloat(t[1]):0,o=t&&t[2]?t[2]:"";return"opacity"===r.key&&""===o&&(o="%",n=n<=1?100*n:n),[n,o]})(r.value),l,(n(6,c),n(0,r)))},[r,o,i,a,s,l,c,u,function(){return(isNaN(l)||0===l)&&""===c},e=>{const t=u(e.target?.value,c);t!==r.value&&o(r.key,t)},e=>{if(e.target?.value===ix)return o(r.key,"inherit"),n(6,c=""),void n(5,l=0);let t=cg(l,c,e.target?.value);const i=u(t,e.target?.value);i!==r.value&&o(r.key,i),n(5,l=t)}]}class sx extends Ue{constructor(e){super(),We(this,e,ax,ox,s,{elementStyle:0,updateElementStyle:1,unitEnd:2,inputWidth:3,unitWidth:4})}}const lx={html:{title:"Root Element",description:"Represents the root (top-level element) of an HTML document, so it is also referred to as the root element. All other elements must be descendants of this element."},head:{title:"Head Element",description:"Contains machine-readable information (metadata) about the document, like its title, scripts, and style sheets."},body:{title:"Body",description:"Represents the content of an HTML document. There can be only one such element in a document."},h1:{title:"Heading 1",description:"Represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest."},h2:{title:"Heading 2",description:"Represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest."},h3:{title:"Heading 3",description:"Represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest."},h4:{title:"Heading 4",description:"Represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest."},h5:{title:"Heading 5",description:"Represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest."},h6:{title:"Heading 6",description:"Represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest."},div:{title:"Division",description:"The generic container for flow content. It has no effect on the content or layout until styled in some way using CSS (e.g., styling is directly applied to it, or some kind of layout model like flexbox is applied to its parent element)."},p:{title:"Paragraph",description:"Represents a paragraph. Paragraphs are usually represented in visual media as blocks of text separated from adjacent blocks by blank lines and/or first-line indentation, but HTML paragraphs can be any structural grouping of related content, such as images or form fields."},span:{title:"Span",description:"The <span> HTML element is a generic inline container for phrasing content, which does not inherently represent anything. It can be used to group elements for styling purposes (using the class or id attributes), or because they share attribute values, such as lang. It should be used only when no other semantic element is appropriate. <span> is very much like a <div> element, but <div> is a block-level element whereas a <span> is an inline-level element."},a:{title:"Anchor",description:"<a>\tTogether with its href attribute, creates a hyperlink to web pages, files, email addresses, locations within the current page, or anything else a URL can address."},link:{title:"Link",description:"Specifies relationships between the current document and an external resource. This element is most commonly used to link to CSS but is also used to establish site icons (both 'favicon' style icons and icons for the home screen and apps on mobile devices) among other things."},nav:{title:"Navigation",description:"Represents a section of a page whose purpose is to provide navigation links, either within the current document or to other documents. Common examples of navigation sections are menus, tables of contents, and indexes."},ul:{title:"Unordered List",description:"Represents an unordered list of items, typically rendered as a bulleted list."},ol:{title:"Ordered List",description:"Represents an ordered list of items, typically rendered as a numbered list."},li:{title:"List Item",description:"Represents an item in a list. It can only appear inside a list element, like <ul> or <ol>."},img:{title:"Image",description:"Embeds an image into the document."},video:{title:"Video",description:"Embeds a media player which supports video playback into the document."},audio:{title:"Audio",description:"Embeds a media player which supports audio playback into the document."},iframe:{title:"Inline Frame",description:"Represents a nested browsing context, effectively embedding another HTML page into the current page."},form:{title:"Form",description:"Represents a document section that contains interactive controls to submit information to a web server."},input:{title:"Input",description:"An element is used to create interactive controls for web-based forms in order to accept data from the user."},label:{title:"Label",description:"Represents a caption for an item in a user interface."},select:{title:"Select",description:"Represents a control that provides a menu of options."},option:{title:"Option",description:"Represents an option in a <select> element, or a suggestion of a <datalist> element."},textarea:{title:"Text Area",description:"Represents a multi-line plain-text editing control."},button:{title:"Button",description:"The <button> HTML element is an interactive element activated by a user with a mouse, keyboard, finger, voice command, or other assistive technology. Once activated, it then performs an action, such as submitting a form or opening a dialog. \n\nBy default, HTML buttons are presented in a style resembling the platform the user agent runs on, but you can change buttons' appearance with CSS."},svg:{title:"Scalable Vector Graphics",description:"A language for describing two-dimensional vector graphics in XML."},canvas:{title:"Canvas",description:"Provides a resolution-dependent bitmap area, which can be used for rendering graphs, game graphics, or other visual images on the fly."},footer:{title:"Footer",description:"Represents a footer for its nearest sectioning content or sectioning root element. A footer typically contains information about its section such as who wrote it, links to related documents, copyright data, and the like."},header:{title:"Header",description:"Represents introductory content, typically a group of introductory or navigational aids."},main:{title:"Main",description:"Represents the main content of the <body> of a document or application. The main content area consists of content that is directly related to or expands upon the central topic of a document or central functionality of an application."},section:{title:"Section",description:"Represents a standalone section — which doesn't have a more specific semantic element to represent it — contained within an HTML document."},article:{title:"Article",description:"Represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable (e.g., in syndication)."},aside:{title:"Aside",description:"Represents a portion of a document whose content is only indirectly related to the document's main content."},details:{title:"Details",description:"Represents additional information or controls which the user can obtain on demand."},summary:{title:"Summary",description:"Represents a summary, caption, or legend for the rest of the contents of the <details> element, if any."},dialog:{title:"Dialog",description:"Represents a dialog box or other interactive component, such as an inspector or window."},figure:{title:"Figure",description:"Represents self-contained content, potentially with an optional caption, which is specified using the (figcaption) element."},figcaption:{title:"Figure Caption",description:"Represents a caption or legend for the rest of the contents of the <figure> element, if any."},hr:{title:"Horizontal Rule",description:"Represents a thematic break between paragraph-level elements: for example, a change of scene in a story, or a shift of topic within a section."},br:{title:"Line Break",description:"Produces a line break in text (carriage-return). It is useful for writing a poem or an address, where the division of lines is significant."},small:{title:"Small",description:"Represents side-comments such as small print."},strong:{title:"Strong",description:"Indicates that its contents have strong importance, seriousness, or urgency."},em:{title:"Emphasis",description:"Represents stress emphasis of its contents."},mark:{title:"Mark",description:"Represents highlighted text, i.e., a run of text marked for reference purpose, due to its relevance in a particular context."},cite:{title:"Citation",description:"Represents the title of a work (e.g. a book, a paper, an essay, a poem, a score, a song, a script, a film, a TV show, a game, a sculpture, a painting, a theater production, a play, an opera, a musical, an exhibition, a legal case report, or a legal code)."}};function cx(e){let t,n,r,o,i,a,s,l=e[2].description+"";return{c(){t=P("div"),n=P("p"),r=O(l),o=z(),i=P("p"),i.innerHTML='<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element" target="_blank">Learn more</a>',_(n,"class","pt-2 whitespace-pre-line"),_(i,"class","pt-2 text-xs underline")},m(e,a){A(e,t,a),E(t,n),E(n,r),E(t,o),E(t,i),s=!0},p(e,t){(!s||4&t)&&l!==(l=e[2].description+"")&&U(r,l)},i(e){s||(e&&ve((()=>{s&&(a||(a=Ne(t,gg,{},!0)),a.run(1))})),s=!0)},o(e){e&&(a||(a=Ne(t,gg,{},!1)),a.run(0)),s=!1},d(e){e&&T(t),e&&a&&a.end()}}}function ux(e){let t,n,r,o,i,a,s,l,c,u,d=e[0].tagName.toLowerCase()+"",p=e[2].title.toLowerCase()==e[0].tagName.toLowerCase()?"":`${lx[e[0].tagName.toLowerCase()].title}`,f=e[1]&&cx(e);return{c(){t=P("button"),n=P("p"),r=P("span"),o=O(d),i=z(),a=P("span"),s=O(p),l=z(),f&&f.c(),_(r,"class","capitalize"),_(n,"class","space-x-1"),_(t,"class","text-start w-full p-2 mb-3 bg-stone-800 rounded text-xs cursor-pointer")},m(d,p){A(d,t,p),E(t,n),E(n,r),E(r,o),E(n,i),E(n,a),E(a,s),E(t,l),f&&f.m(t,null),c||(u=j(t,"click",e[4]),c=!0)},p(e,[n]){1&n&&d!==(d=e[0].tagName.toLowerCase()+"")&&U(o,d),5&n&&p!==(p=e[2].title.toLowerCase()==e[0].tagName.toLowerCase()?"":`${lx[e[0].tagName.toLowerCase()].title}`)&&U(s,p),e[1]?f?(f.p(e,n),2&n&&Re(f,1)):(f=cx(e),f.c(),Re(f,1),f.m(t,null)):f&&(Ae(),Pe(f,1,1,(()=>{f=null})),Te())},i(e){Re(f)},o(e){Pe(f)},d(e){e&&T(t),f&&f.d(),c=!1,u()}}}function dx(e,t,n){let r;var o;let{el:i}=t,a=!1;return e.$$set=e=>{"el"in e&&n(0,i=e.el)},e.$$.update=()=>{9&e.$$.dirty&&n(2,r=null!==n(3,o=lx[i.tagName.toLowerCase()])&&void 0!==o?o:{title:i.tagName,description:""})},[i,a,r,o,()=>n(1,a=!a)]}class px extends Ue{constructor(e){super(),We(this,e,dx,ux,s,{el:0})}}function fx(e,t,n){const r=e.slice();return r[2]=t[n],r}function mx(e){let t,n,r=e[2].displayName+"";return{c(){t=P("p"),n=O(r),_(t,"class","text-xs text-left opacity-60")},m(e,r){A(e,t,r),E(t,n)},p(e,t){1&t&&r!==(r=e[2].displayName+"")&&U(n,r)},d(e){e&&T(t)}}}function hx(t){let n,r,o,i,a,s;return{c(){n=L("svg"),r=L("g"),o=L("path"),i=L("defs"),a=L("clipPath"),s=L("rect"),_(o,"d","M15.25 15.25H16.75V16.75H15.25V15.25ZM15.25 13.75H16.75V12.25H15.25V13.75ZM3.25 10.75H4.75V9.25H3.25V10.75ZM3.25 13.75H4.75V12.25H3.25V13.75ZM3.25 7.75H4.75V6.25H3.25V7.75ZM3.25 4.75H4.75V3.25H3.25V4.75ZM6.25 4.75H7.75V3.25H6.25V4.75ZM12.25 16.75H13.75V15.25H12.25V16.75ZM9.25 16.75H10.75V15.25H9.25V16.75ZM12.25 16.75H13.75V15.25H12.25V16.75ZM6.25 16.75H7.75V15.25H6.25V16.75ZM3.25 16.75H4.75V15.25H3.25V16.75ZM16.75 7C16.75 4.93 15.07 3.25 13 3.25H9.25V4.75H13C14.2375 4.75 15.25 5.7625 15.25 7V10.75H16.75V7Z"),_(o,"fill","white"),_(o,"fill-opacity","0.6"),_(r,"clip-path","url(#clip0_138_14625)"),_(s,"width","18"),_(s,"height","18"),_(s,"fill","white"),_(s,"transform","translate(1 1)"),_(a,"id","clip0_138_14625"),_(n,"width","20"),_(n,"height","20"),_(n,"viewBox","0 0 20 20"),_(n,"fill","none"),_(n,"xmlns","http://www.w3.org/2000/svg")},m(e,t){A(e,n,t),E(n,r),E(r,o),E(n,i),E(i,a),E(a,s)},p:e,d(e){e&&T(n)}}}function gx(t){let n,r;return{c(){n=L("svg"),r=L("path"),_(r,"d","M3 3L3 9.46154M17 17L10.2692 17M10.2692 17L3 17L3 9.46154M10.2692 17L10.2692 16.7308C10.2692 12.7161 7.01468 9.46154 3 9.46154V9.46154"),_(r,"stroke","white"),_(r,"stroke-opacity","0.6"),_(r,"stroke-width","1.2"),_(n,"width","20"),_(n,"height","20"),_(n,"viewBox","0 0 20 20"),_(n,"fill","none"),_(n,"xmlns","http://www.w3.org/2000/svg")},m(e,t){A(e,n,t),E(n,r)},p:e,d(e){e&&T(n)}}}function vx(e){let t,n,r,o,i,a;function s(e,t){return"rotate"===e[2].key?gx:"borderRadius"===e[2].key?hx:mx}let l=s(e),c=l(e);return o=new sx({props:{elementStyle:e[2],updateElementStyle:e[1]}}),{c(){t=P("div"),n=P("div"),c.c(),r=z(),Fe(o.$$.fragment),i=z(),_(n,"class","w-24"),_(t,"class","flex flex-row items-center pb-2")},m(e,s){A(e,t,s),E(t,n),c.m(n,null),E(t,r),Be(o,t,null),E(t,i),a=!0},p(e,t){l===(l=s(e))&&c?c.p(e,t):(c.d(1),c=l(e),c&&(c.c(),c.m(n,null)));const r={};1&t&&(r.elementStyle=e[2]),2&t&&(r.updateElementStyle=e[1]),o.$set(r)},i(e){a||(Re(o.$$.fragment,e),a=!0)},o(e){Pe(o.$$.fragment,e),a=!1},d(e){e&&T(t),c.d(),Ie(o)}}}function yx(e){let t,n,r,o,i,a,s=je(e[0]),l=[];for(let t=0;t<s.length;t+=1)l[t]=vx(fx(e,s,t));const c=e=>Pe(l[e],1,1,(()=>{l[e]=null}));return{c(){t=P("div"),n=P("h2"),n.textContent="Fixed Width",r=z(),o=P("h2"),o.textContent="Fixed Height",i=z();for(let e=0;e<l.length;e+=1)l[e].c();_(n,"class","pb-2 text-xs"),_(o,"class","pb-2 text-xs"),_(t,"class","mt-4 grid grid-cols-2 gap-x-4")},m(e,s){A(e,t,s),E(t,n),E(t,r),E(t,o),E(t,i);for(let e=0;e<l.length;e+=1)l[e]&&l[e].m(t,null);a=!0},p(e,[n]){if(3&n){let r;for(s=je(e[0]),r=0;r<s.length;r+=1){const o=fx(e,s,r);l[r]?(l[r].p(o,n),Re(l[r],1)):(l[r]=vx(o),l[r].c(),Re(l[r],1),l[r].m(t,null))}for(Ae(),r=s.length;r<l.length;r+=1)c(r);Te()}},i(e){if(!a){for(let e=0;e<s.length;e+=1)Re(l[e]);a=!0}},o(e){l=l.filter(Boolean);for(let e=0;e<l.length;e+=1)Pe(l[e]);a=!1},d(e){e&&T(t),R(l,e)}}}function bx(e,t,n){let{elementStyles:r=[]}=t,{updateElementStyle:o=((e,t)=>{})}=t;return e.$$set=e=>{"elementStyles"in e&&n(0,r=e.elementStyles),"updateElementStyle"in e&&n(1,o=e.updateElementStyle)},[r,o]}class $x extends Ue{constructor(e){super(),We(this,e,bx,yx,s,{elementStyles:0,updateElementStyle:1})}}function xx(e){let t,n,r,o,i,a,s,l,c,u,d,p,f,m,h,g,v,y,b,$,x,w,S,C,k;return a=new sx({props:{updateElementStyle:e[0],elementStyle:e[1].marginTop}}),c=new sx({props:{updateElementStyle:e[0],elementStyle:e[1].paddingTop}}),p=new sx({props:{inputWidth:"w-6",unitWidth:"w-6",updateElementStyle:e[0],elementStyle:e[1].marginLeft}}),m=new sx({props:{inputWidth:"w-6",unitWidth:"w-6",updateElementStyle:e[0],elementStyle:e[1].paddingLeft}}),g=new sx({props:{inputWidth:"w-6",unitWidth:"w-6",updateElementStyle:e[0],elementStyle:e[1].paddingRight}}),y=new sx({props:{inputWidth:"w-6",unitWidth:"w-6",updateElementStyle:e[0],elementStyle:e[1].marginRight}}),x=new sx({props:{updateElementStyle:e[0],elementStyle:e[1].paddingBottom}}),C=new sx({props:{updateElementStyle:e[0],elementStyle:e[1].marginBottom}}),{c(){t=P("div"),n=P("div"),r=z(),o=P("div"),i=P("div"),Fe(a.$$.fragment),s=z(),l=P("div"),Fe(c.$$.fragment),u=z(),d=P("div"),Fe(p.$$.fragment),f=z(),Fe(m.$$.fragment),h=z(),Fe(g.$$.fragment),v=z(),Fe(y.$$.fragment),b=z(),$=P("div"),Fe(x.$$.fragment),w=z(),S=P("div"),Fe(C.$$.fragment),_(n,"class","absolute rounded bg-stone-300/50 opacity-10 w-[100px] h-[90px] top-1/2 left-1/2 -translate-x-1/2 -translate-y-[40px] pointer-events-none"),_(i,"class","col-start-1 col-end-6 flex justify-center"),_(l,"class","col-start-1 col-end-6 flex justify-center"),_(d,"class","col-start-1 col-end-6 flex justify-center"),_($,"class","col-start-1 col-end-6 flex justify-center"),_(S,"class","col-start-1 col-end-6 flex justify-center"),_(o,"class","w-[198px] h-fit grid grid-cols-5 grid-rows-5 space-y-3 py-2 text-xs bg-background/50 border border-border rounded"),_(t,"class","relative")},m(e,M){A(e,t,M),E(t,n),E(t,r),E(t,o),E(o,i),Be(a,i,null),E(o,s),E(o,l),Be(c,l,null),E(o,u),E(o,d),Be(p,d,null),E(d,f),Be(m,d,null),E(d,h),Be(g,d,null),E(d,v),Be(y,d,null),E(o,b),E(o,$),Be(x,$,null),E(o,w),E(o,S),Be(C,S,null),k=!0},p(e,[t]){const n={};1&t&&(n.updateElementStyle=e[0]),2&t&&(n.elementStyle=e[1].marginTop),a.$set(n);const r={};1&t&&(r.updateElementStyle=e[0]),2&t&&(r.elementStyle=e[1].paddingTop),c.$set(r);const o={};1&t&&(o.updateElementStyle=e[0]),2&t&&(o.elementStyle=e[1].marginLeft),p.$set(o);const i={};1&t&&(i.updateElementStyle=e[0]),2&t&&(i.elementStyle=e[1].paddingLeft),m.$set(i);const s={};1&t&&(s.updateElementStyle=e[0]),2&t&&(s.elementStyle=e[1].paddingRight),g.$set(s);const l={};1&t&&(l.updateElementStyle=e[0]),2&t&&(l.elementStyle=e[1].marginRight),y.$set(l);const u={};1&t&&(u.updateElementStyle=e[0]),2&t&&(u.elementStyle=e[1].paddingBottom),x.$set(u);const d={};1&t&&(d.updateElementStyle=e[0]),2&t&&(d.elementStyle=e[1].marginBottom),C.$set(d)},i(e){k||(Re(a.$$.fragment,e),Re(c.$$.fragment,e),Re(p.$$.fragment,e),Re(m.$$.fragment,e),Re(g.$$.fragment,e),Re(y.$$.fragment,e),Re(x.$$.fragment,e),Re(C.$$.fragment,e),k=!0)},o(e){Pe(a.$$.fragment,e),Pe(c.$$.fragment,e),Pe(p.$$.fragment,e),Pe(m.$$.fragment,e),Pe(g.$$.fragment,e),Pe(y.$$.fragment,e),Pe(x.$$.fragment,e),Pe(C.$$.fragment,e),k=!1},d(e){e&&T(t),Ie(a),Ie(c),Ie(p),Ie(m),Ie(g),Ie(y),Ie(x),Ie(C)}}}function wx(e,t,n){let r,{elementStyles:o=[]}=t,{updateElementStyle:i}=t;return e.$$set=e=>{"elementStyles"in e&&n(2,o=e.elementStyles),"updateElementStyle"in e&&n(0,i=e.updateElementStyle)},e.$$.update=()=>{4&e.$$.dirty&&n(1,r=o.reduce(((e,t)=>(e[t.key]=t,e)),{}))},[i,r,o]}class Sx extends Ue{constructor(e){super(),We(this,e,wx,xx,s,{elementStyles:2,updateElementStyle:0})}}function Cx(e,t,n){const r=e.slice();return r[7]=t[n][0],r[8]=t[n][1],r}function Ex(e,t,n){const r=e.slice();return r[11]=t[n],r[13]=n,r}function kx(e){let t,n;return t=new Rg({props:{class:"w-full",multiple:!0,value:Object.keys(e[1]),$$slots:{default:[Ix]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,n){const r={};2&n&&(r.value=Object.keys(e[1])),16387&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function Mx(e){let t,n;return t=new Cg({props:{"data-state":"open",value:e[7],$$slots:{default:[Dx]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,n){const r={};2&n&&(r.value=e[7]),16387&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function Ax(e){let t,n;return t=new Cg({props:{"data-state":"open",value:e[7],$$slots:{default:[Fx]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,n){const r={};2&n&&(r.value=e[7]),16386&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function Tx(e){let t,n,r,o;return t=new $x({props:{elementStyles:e[8],updateElementStyle:e[2]}}),r=new jg({props:{class:"mt-4"}}),{c(){Fe(t.$$.fragment),n=z(),Fe(r.$$.fragment)},m(e,i){Be(t,e,i),A(e,n,i),Be(r,e,i),o=!0},p(e,n){const r={};2&n&&(r.elementStyles=e[8]),t.$set(r)},i(e){o||(Re(t.$$.fragment,e),Re(r.$$.fragment,e),o=!0)},o(e){Pe(t.$$.fragment,e),Pe(r.$$.fragment,e),o=!1},d(e){e&&T(n),Ie(t,e),Ie(r,e)}}}function Rx(e){let t,n,r=e[7]+"";return{c(){t=P("h2"),n=O(r),_(t,"class","text-xs font-semibold")},m(e,r){A(e,t,r),E(t,n)},p(e,t){2&t&&r!==(r=e[7]+"")&&U(n,r)},d(e){e&&T(t)}}}function Px(e){let t,n;return t=new px({props:{el:e[0]}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,n){const r={};1&n&&(r.el=e[0]),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function Lx(e){let t,n;return t=new Og({props:{type:"text",placeholder:e[11].type,class:"w-24 text-xs",value:e[11].value}}),t.$on("input",(function(...t){return e[4](e[11],...t)})),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(n,r){e=n;const o={};2&r&&(o.placeholder=e[11].type),2&r&&(o.value=e[11].value),t.$set(o)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function Ox(e){let t,n;return t=new sx({props:{inputWidth:"w-12",unitWidth:"w-6",unitEnd:!0,elementStyle:e[11],updateElementStyle:e[2]}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,n){const r={};2&n&&(r.elementStyle=e[11]),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function zx(e){let t,n;return t=new Q$({props:{elementStyle:e[11],updateElementStyle:e[2]}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,n){const r={};2&n&&(r.elementStyle=e[11]),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function Nx(e){let t,n;return t=new fy({props:{elementStyle:e[11],updateElementStyle:e[2]}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,n){const r={};2&n&&(r.elementStyle=e[11]),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function jx(e){let t,n,r,o,i,a,s,l,c,u=e[11].displayName+"";const d=[Nx,zx,Ox,Lx],p=[];function f(e,t){return e[11].type===ug.Select?0:e[11].type===ug.Color?1:e[11].type===ug.Number?2:3}return a=f(e),s=p[a]=d[a](e),{c(){t=P("div"),n=P("p"),r=O(u),o=z(),i=P("div"),s.c(),l=z(),_(n,"class","text-xs w-24 mr-2 text-start opacity-60"),_(i,"class","text-end ml-auto"),_(t,"class","flex flex-row items-center "+(0===e[13]?"":"mt-4"))},m(e,s){A(e,t,s),E(t,n),E(n,r),E(t,o),E(t,i),p[a].m(i,null),E(t,l),c=!0},p(e,t){(!c||2&t)&&u!==(u=e[11].displayName+"")&&U(r,u);let n=a;a=f(e),a===n?p[a].p(e,t):(Ae(),Pe(p[n],1,1,(()=>{p[n]=null})),Te(),s=p[a],s?s.p(e,t):(s=p[a]=d[a](e),s.c()),Re(s,1),s.m(i,null))},i(e){c||(Re(s),c=!0)},o(e){Pe(s),c=!1},d(e){e&&T(t),p[a].d()}}}function Vx(e){let t,n,r,o=e[7]==dg.Text&&Px(e),i=je(e[8]),a=[];for(let t=0;t<i.length;t+=1)a[t]=jx(Ex(e,i,t));const s=e=>Pe(a[e],1,1,(()=>{a[e]=null}));return{c(){o&&o.c(),t=z();for(let e=0;e<a.length;e+=1)a[e].c();n=N()},m(e,i){o&&o.m(e,i),A(e,t,i);for(let t=0;t<a.length;t+=1)a[t]&&a[t].m(e,i);A(e,n,i),r=!0},p(e,r){if(e[7]==dg.Text?o?(o.p(e,r),2&r&&Re(o,1)):(o=Px(e),o.c(),Re(o,1),o.m(t.parentNode,t)):o&&(Ae(),Pe(o,1,1,(()=>{o=null})),Te()),6&r){let t;for(i=je(e[8]),t=0;t<i.length;t+=1){const o=Ex(e,i,t);a[t]?(a[t].p(o,r),Re(a[t],1)):(a[t]=jx(o),a[t].c(),Re(a[t],1),a[t].m(n.parentNode,n))}for(Ae(),t=i.length;t<a.length;t+=1)s(t);Te()}},i(e){if(!r){Re(o);for(let e=0;e<i.length;e+=1)Re(a[e]);r=!0}},o(e){Pe(o),a=a.filter(Boolean);for(let e=0;e<a.length;e+=1)Pe(a[e]);r=!1},d(e){e&&(T(t),T(n)),o&&o.d(e),R(a,e)}}}function Dx(e){let t,n,r,o,i;return t=new Tg({props:{$$slots:{default:[Rx]},$$scope:{ctx:e}}}),r=new $g({props:{$$slots:{default:[Vx]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment),n=z(),Fe(r.$$.fragment),o=z()},m(e,a){Be(t,e,a),A(e,n,a),Be(r,e,a),A(e,o,a),i=!0},p(e,n){const o={};16386&n&&(o.$$scope={dirty:n,ctx:e}),t.$set(o);const i={};16387&n&&(i.$$scope={dirty:n,ctx:e}),r.$set(i)},i(e){i||(Re(t.$$.fragment,e),Re(r.$$.fragment,e),i=!0)},o(e){Pe(t.$$.fragment,e),Pe(r.$$.fragment,e),i=!1},d(e){e&&(T(n),T(o)),Ie(t,e),Ie(r,e)}}}function _x(e){let t,n,r=e[7]+"";return{c(){t=P("h2"),n=O(r),_(t,"class","text-xs")},m(e,r){A(e,t,r),E(t,n)},p(e,t){2&t&&r!==(r=e[7]+"")&&U(n,r)},d(e){e&&T(t)}}}function Hx(e){let t,n;return t=new Sx({props:{elementStyles:e[8],updateElementStyle:e[2]}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,n){const r={};2&n&&(r.elementStyles=e[8]),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function Fx(e){let t,n,r,o,i;return t=new Tg({props:{$$slots:{default:[_x]},$$scope:{ctx:e}}}),r=new $g({props:{$$slots:{default:[Hx]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment),n=z(),Fe(r.$$.fragment),o=z()},m(e,a){Be(t,e,a),A(e,n,a),Be(r,e,a),A(e,o,a),i=!0},p(e,n){const o={};16386&n&&(o.$$scope={dirty:n,ctx:e}),t.$set(o);const i={};16386&n&&(i.$$scope={dirty:n,ctx:e}),r.$set(i)},i(e){i||(Re(t.$$.fragment,e),Re(r.$$.fragment,e),i=!0)},o(e){Pe(t.$$.fragment,e),Pe(r.$$.fragment,e),i=!1},d(e){e&&(T(n),T(o)),Ie(t,e),Ie(r,e)}}}function Bx(e){let t,n,r,o;const i=[Tx,Ax,Mx],a=[];function s(e,t){return e[7]==dg.Size?0:e[7]==dg.Spacing?1:2}return t=s(e),n=a[t]=i[t](e),{c(){n.c(),r=N()},m(e,n){a[t].m(e,n),A(e,r,n),o=!0},p(e,o){let l=t;t=s(e),t===l?a[t].p(e,o):(Ae(),Pe(a[l],1,1,(()=>{a[l]=null})),Te(),n=a[t],n?n.p(e,o):(n=a[t]=i[t](e),n.c()),Re(n,1),n.m(r.parentNode,r))},i(e){o||(Re(n),o=!0)},o(e){Pe(n),o=!1},d(e){e&&T(r),a[t].d(e)}}}function Ix(e){let t,n,r=je(Object.entries(e[1])),o=[];for(let t=0;t<r.length;t+=1)o[t]=Bx(Cx(e,r,t));const i=e=>Pe(o[e],1,1,(()=>{o[e]=null}));return{c(){for(let e=0;e<o.length;e+=1)o[e].c();t=N()},m(e,r){for(let t=0;t<o.length;t+=1)o[t]&&o[t].m(e,r);A(e,t,r),n=!0},p(e,n){if(7&n){let a;for(r=je(Object.entries(e[1])),a=0;a<r.length;a+=1){const i=Cx(e,r,a);o[a]?(o[a].p(i,n),Re(o[a],1)):(o[a]=Bx(i),o[a].c(),Re(o[a],1),o[a].m(t.parentNode,t))}for(Ae(),a=r.length;a<o.length;a+=1)i(a);Te()}},i(e){if(!n){for(let e=0;e<r.length;e+=1)Re(o[e]);n=!0}},o(e){o=o.filter(Boolean);for(let e=0;e<o.length;e+=1)Pe(o[e]);n=!1},d(e){e&&T(t),R(o,e)}}}function Wx(e){let t,n,r=e[0]&&kx(e);return{c(){r&&r.c(),t=N()},m(e,o){r&&r.m(e,o),A(e,t,o),n=!0},p(e,[n]){e[0]?r?(r.p(e,n),1&n&&Re(r,1)):(r=kx(e),r.c(),Re(r,1),r.m(t.parentNode,t)):r&&(Ae(),Pe(r,1,1,(()=>{r=null})),Te())},i(e){n||(Re(r),n=!0)},o(e){Pe(r),n=!1},d(e){e&&T(t),r&&r.d(e)}}}function Ux(e,t,n){let r,{editTool:o}=t,i={},a=[];function s(e){if(n(0,r=e[0]),r){const e=function(e){const t=getComputedStyle(e);return mg.forEach((n=>{const r=e.style[n.key],o=t[n.key];n.type===ug.Number?n.value=r&&""!==r?r:o:n.type===ug.Color?n.value=o:n.value=r&&""!==r?r:o})),mg}(r);n(1,i=hg(e))}}function l(e,t){o.selectorEngine.selected.forEach((n=>{const r=n.style[e];n.style[e]=t,ep(n,e,{[e]:t},{[e]:r})}))}re((()=>{a.push(o.selectorEngine.selectedStore.subscribe(s))})),ie((()=>{a.forEach((e=>e()))}));return e.$$set=e=>{"editTool"in e&&n(3,o=e.editTool)},[r,i,l,o,(e,t)=>{l(e.key,t.target.value)}]}class Gx extends Ue{constructor(e){super(),We(this,e,Ux,Wx,s,{editTool:3})}}function Zx(e){let t;return{c(){t=O("Element Appearance")},m(e,n){A(e,t,n)},d(e){e&&T(t)}}}function Yx(e){let t,n;return t=new ag({props:{class:"bg-transparent p-0 text-xs",value:e[1].CSS,$$slots:{default:[Zx]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,n){const r={};2&n&&(r.value=e[1].CSS),8&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function qx(e){let t,n;return t=new Gx({props:{editTool:e[0]}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,n){const r={};1&n&&(r.editTool=e[0]),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function Xx(e){let t;return{c(){t=O("Others")},m(e,n){A(e,t,n)},d(e){e&&T(t)}}}function Kx(e){let t,n,r,o,i,a,s,l,c,u,d;return t=new ng({props:{class:"bg-transparent p-0 gap-4",$$slots:{default:[Yx]},$$scope:{ctx:e}}}),r=new jg({props:{class:"mt-1"}}),a=new Jh({props:{value:e[1].CSS,$$slots:{default:[qx]},$$scope:{ctx:e}}}),l=new Jh({props:{value:e[1].OTHER,$$slots:{default:[Xx]},$$scope:{ctx:e}}}),u=new Zt({props:{class:"flex justify-between"}}),{c(){Fe(t.$$.fragment),n=z(),Fe(r.$$.fragment),o=z(),i=P("div"),Fe(a.$$.fragment),s=z(),Fe(l.$$.fragment),c=z(),Fe(u.$$.fragment),_(i,"class","h-[74vh] overflow-auto overflow-y-hidden hover:overflow-y-auto")},m(e,p){Be(t,e,p),A(e,n,p),Be(r,e,p),A(e,o,p),A(e,i,p),Be(a,i,null),E(i,s),Be(l,i,null),A(e,c,p),Be(u,e,p),d=!0},p(e,n){const r={};10&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r);const o={};2&n&&(o.value=e[1].CSS),9&n&&(o.$$scope={dirty:n,ctx:e}),a.$set(o);const i={};2&n&&(i.value=e[1].OTHER),8&n&&(i.$$scope={dirty:n,ctx:e}),l.$set(i)},i(e){d||(Re(t.$$.fragment,e),Re(r.$$.fragment,e),Re(a.$$.fragment,e),Re(l.$$.fragment,e),Re(u.$$.fragment,e),d=!0)},o(e){Pe(t.$$.fragment,e),Pe(r.$$.fragment,e),Pe(a.$$.fragment,e),Pe(l.$$.fragment,e),Pe(u.$$.fragment,e),d=!1},d(e){e&&(T(n),T(o),T(i),T(c)),Ie(t,e),Ie(r,e),Ie(a),Ie(l),Ie(u,e)}}}function Jx(e){let t,n;return t=new sg({props:{value:e[1].CSS,class:"w-full h-full",$$slots:{default:[Kx]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,n){const r={};2&n&&(r.value=e[1].CSS),11&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function Qx(e){let t,n;return t=new Wt({props:{$$slots:{default:[Jx]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,n){const r={};11&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function ew(e){let t,n,r,o,i,a;return n=new Ft({props:{class:"w-[232px] h-[80vh] backdrop-blur bg-background/90 pt-2",$$slots:{default:[Qx]},$$scope:{ctx:e}}}),{c(){t=P("div"),Fe(n.$$.fragment),_(t,"class",r="fixed top-10 right-2 transform -translate-y-1/2 -translate-x-1/2 "+(e[2]?"visible":"invisible"))},m(e,r){A(e,t,r),Be(n,t,null),o=!0,i||(a=y(Vp.call(null,t,{bounds:"body"})),i=!0)},p(e,[i]){const a={};11&i&&(a.$$scope={dirty:i,ctx:e}),n.$set(a),(!o||4&i&&r!==(r="fixed top-10 right-2 transform -translate-y-1/2 -translate-x-1/2 "+(e[2]?"visible":"invisible")))&&_(t,"class",r)},i(e){o||(Re(n.$$.fragment,e),o=!0)},o(e){Pe(n.$$.fragment,e),o=!1},d(e){e&&T(t),Ie(n),i=!1,a()}}}function tw(e,t,n){let r;u(e,bd,(e=>n(2,r=e)));let{editTool:o}=t;var i;return function(e){e.CSS="css",e.OTHER="other"}(i||(i={})),e.$$set=e=>{"editTool"in e&&n(0,o=e.editTool)},[o,i,r]}class nw extends Ue{constructor(e){super(),We(this,e,tw,ew,s,{editTool:0})}}const rw=qv({base:"inline-flex items-center justify-center rounded-md text-sm font-medium whitespace-nowrap transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",variants:{variant:{default:"bg-primary text-primary-foreground shadow hover:bg-primary/90",destructive:"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",outline:"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",secondary:"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",ghost:"hover:bg-accent hover:text-accent-foreground",link:"text-primary underline-offset-4 hover:underline"},size:{default:"h-9 px-4 py-2",sm:"h-8 rounded-md px-3 text-xs",lg:"h-10 rounded-md px-8",icon:"h-9 w-9"}},defaultVariants:{variant:"default",size:"default"}});function ow(e){let t;const n=e[5].default,r=d(n,e,e[8],null);return{c(){r&&r.c()},m(e,n){r&&r.m(e,n),t=!0},p(e,o){r&&r.p&&(!t||256&o)&&m(r,n,e,e[8],t?f(n,e[8],o,null):h(e[8]),null)},i(e){t||(Re(r,e),t=!0)},o(e){Pe(r,e),t=!1},d(e){r&&r.d(e)}}}function iw(e){let t,r;const o=[{builders:e[3]},{class:Dt(rw({variant:e[1],size:e[2],className:e[0]}))},{type:"button"},e[4]];let i={$$slots:{default:[ow]},$$scope:{ctx:e}};for(let e=0;e<o.length;e+=1)i=n(i,o[e]);return t=new Fm({props:i}),t.$on("click",e[6]),t.$on("keydown",e[7]),{c(){Fe(t.$$.fragment)},m(e,n){Be(t,e,n),r=!0},p(e,[n]){const r=31&n?De(o,[8&n&&{builders:e[3]},7&n&&{class:Dt(rw({variant:e[1],size:e[2],className:e[0]}))},o[2],16&n&&_e(e[4])]):{};256&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){r||(Re(t.$$.fragment,e),r=!0)},o(e){Pe(t.$$.fragment,e),r=!1},d(e){Ie(t,e)}}}function aw(e,t,r){const o=["class","variant","size","builders"];let i=v(t,o),{$$slots:a={},$$scope:s}=t,{class:l}=t,{variant:c="default"}=t,{size:u="default"}=t,{builders:d=[]}=t;return e.$$set=e=>{t=n(n({},t),g(e)),r(4,i=v(t,o)),"class"in e&&r(0,l=e.class),"variant"in e&&r(1,c=e.variant),"size"in e&&r(2,u=e.size),"builders"in e&&r(3,d=e.builders),"$$scope"in e&&r(8,s=e.$$scope)},[l,c,u,d,i,a,function(t){le.call(this,e,t)},function(t){le.call(this,e,t)},s]}class sw extends Ue{constructor(e){super(),We(this,e,aw,iw,s,{class:0,variant:1,size:2,builders:3})}}const lw=["SCRIPT","STYLE",md.toUpperCase()];class cw{constructor(){this.cloneDOMWithReferences=e=>{if(!(e&&e instanceof Node))return e;if(e.nodeType!==Node.ELEMENT_NODE||lw.includes(e.nodeName)||e.hasAttribute(hd))return null;if(e.hasAttribute&&e.hasAttribute(hd))return null;if(this.originalToCloneMap.has(e))return this.originalToCloneMap.get(e);const t=e.cloneNode(!1);return this.originalToCloneMap.set(e,t),this.cloneToOriginalMap.set(t,e),e.childNodes.forEach((e=>{const n=this.cloneDOMWithReferences(e);n&&t.appendChild(n)})),t},this.getDomTree=()=>{this.originalToCloneMap=new WeakMap,this.cloneToOriginalMap=new WeakMap;const e=this.cloneDOMWithReferences(document.body);this.clonedDocument=document.implementation.createHTMLDocument("New Document"),this.clonedDocument.body=e},this.getSanitizedNode=e=>this.originalToCloneMap.get(e),this.getOriginalNode=e=>this.cloneToOriginalMap.get(e),this.originalToCloneMap=new WeakMap,this.cloneToOriginalMap=new WeakMap,this.getDomTree()}}function uw(e,t,n){const r=e.slice();return r[36]=t[n],r}function dw(e){let t,n,r,o,a,s,l,c,u,d,p,f,m;r=new Qt({props:{class:"w-3 h-3 "+(e[9]?"transform rotate-0":"transform -rotate-90")+" "+(e[4]?"visible":"invisible")}}),a=new Xt({props:{class:e[10]}});let h=e[9]&&gw(e);return{c(){t=P("details"),n=P("summary"),Fe(r.$$.fragment),o=z(),Fe(a.$$.fragment),s=z(),l=P("p"),l.textContent=`${e[18]}`,c=z(),u=P("div"),h&&h.c(),_(l,"class","flex-grow"),_(n,"class","list-none cursor-pointer flex flex-row items-center "+bw),_(n,"tabindex","-1"),_(u,"class",e[11]),_(t,"class",d=e[12]+" "+e[13])},m(i,d){A(i,t,d),E(t,n),Be(r,n,null),E(n,o),Be(a,n,null),E(n,s),E(n,l),E(t,c),E(t,u),h&&h.m(u,null),t.open=e[9],p=!0,f||(m=[j(l,"click",V(e[27])),j(n,"mouseover",e[28]),j(t,"toggle",e[29]),j(t,"click",D(e[30])),j(t,"mouseover",D(e[31]))],f=!0)},p(e,n){const o={};528&n[0]&&(o.class="w-3 h-3 "+(e[9]?"transform rotate-0":"transform -rotate-90")+" "+(e[4]?"visible":"invisible")),r.$set(o);const i={};1024&n[0]&&(i.class=e[10]),a.$set(i),e[9]?h?(h.p(e,n),512&n[0]&&Re(h,1)):(h=gw(e),h.c(),Re(h,1),h.m(u,null)):h&&(Ae(),Pe(h,1,1,(()=>{h=null})),Te()),(!p||2048&n[0])&&_(u,"class",e[11]),(!p||12288&n[0]&&d!==(d=e[12]+" "+e[13]))&&_(t,"class",d),512&n[0]&&(t.open=e[9])},i(e){p||(Re(r.$$.fragment,e),Re(a.$$.fragment,e),Re(h),p=!0)},o(e){Pe(r.$$.fragment,e),Pe(a.$$.fragment,e),Pe(h),p=!1},d(e){e&&T(t),Ie(r),Ie(a),h&&h.d(),f=!1,i(m)}}}function pw(e){let t,n,r,o,a,s,l,c,u=(e[0].firstChild.nodeValue||e[18])+"";return n=new mn({props:{class:e[10]}}),{c(){t=P("div"),Fe(n.$$.fragment),r=z(),o=O(u),_(t,"class",a=e[12]+" "+e[13]+" "+bw+" flex flex-row items-center pl-3")},m(i,a){A(i,t,a),Be(n,t,null),E(t,r),E(t,o),s=!0,l||(c=[j(t,"click",e[25]),j(t,"mouseover",e[26])],l=!0)},p(e,r){const i={};1024&r[0]&&(i.class=e[10]),n.$set(i),(!s||1&r[0])&&u!==(u=(e[0].firstChild.nodeValue||e[18])+"")&&U(o,u),(!s||12288&r[0]&&a!==(a=e[12]+" "+e[13]+" "+bw+" flex flex-row items-center pl-3"))&&_(t,"class",a)},i(e){s||(Re(n.$$.fragment,e),s=!0)},o(e){Pe(n.$$.fragment,e),s=!1},d(e){e&&T(t),Ie(n),l=!1,i(c)}}}function fw(e){let t,n,r,o,a,s,l,c;return n=new nn({props:{class:e[10]}}),{c(){t=P("div"),Fe(n.$$.fragment),r=z(),o=O(e[18]),_(t,"class",a=e[12]+" "+e[13]+" "+bw+" flex flex-row items-center pl-3")},m(i,a){A(i,t,a),Be(n,t,null),E(t,r),E(t,o),s=!0,l||(c=[j(t,"click",e[23]),j(t,"mouseover",e[24])],l=!0)},p(e,r){const o={};1024&r[0]&&(o.class=e[10]),n.$set(o),(!s||12288&r[0]&&a!==(a=e[12]+" "+e[13]+" "+bw+" flex flex-row items-center pl-3"))&&_(t,"class",a)},i(e){s||(Re(n.$$.fragment,e),s=!0)},o(e){Pe(n.$$.fragment,e),s=!1},d(e){e&&T(t),Ie(n),l=!1,i(c)}}}function mw(t){let n,r,o,a,s,l='"'+t[0].nodeValue+'"';return{c(){n=P("div"),r=O(l),_(n,"class",o=t[12]+" "+t[13]+" "+bw)},m(e,o){A(e,n,o),E(n,r),a||(s=[j(n,"click",t[21]),j(n,"mouseover",t[22])],a=!0)},p(e,t){1&t[0]&&l!==(l='"'+e[0].nodeValue+'"')&&U(r,l),12288&t[0]&&o!==(o=e[12]+" "+e[13]+" "+bw)&&_(n,"class",o)},i:e,o:e,d(e){e&&T(n),a=!1,i(s)}}}function hw(t){return{c:e,m:e,p:e,i:e,o:e,d:e}}function gw(e){let t,n,r=je(e[0].childNodes),o=[];for(let t=0;t<r.length;t+=1)o[t]=vw(uw(e,r,t));const i=e=>Pe(o[e],1,1,(()=>{o[e]=null}));return{c(){for(let e=0;e<o.length;e+=1)o[e].c();t=N()},m(e,r){for(let t=0;t<o.length;t+=1)o[t]&&o[t].m(e,r);A(e,t,r),n=!0},p(e,n){if(127&n[0]){let a;for(r=je(e[0].childNodes),a=0;a<r.length;a+=1){const i=uw(e,r,a);o[a]?(o[a].p(i,n),Re(o[a],1)):(o[a]=vw(i),o[a].c(),Re(o[a],1),o[a].m(t.parentNode,t))}for(Ae(),a=r.length;a<o.length;a+=1)i(a);Te()}},i(e){if(!n){for(let e=0;e<r.length;e+=1)Re(o[e]);n=!0}},o(e){o=o.filter(Boolean);for(let e=0;e<o.length;e+=1)Pe(o[e]);n=!1},d(e){e&&T(t),R(o,e)}}}function vw(e){let t,n;return t=new xw({props:{node:e[36],depth:e[3]+1,selected:e[1],hovered:e[2],select:e[5],mouseEnter:e[6],internalHover:e[4]}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,n){const r={};1&n[0]&&(r.node=e[36]),8&n[0]&&(r.depth=e[3]+1),2&n[0]&&(r.selected=e[1]),4&n[0]&&(r.hovered=e[2]),32&n[0]&&(r.select=e[5]),64&n[0]&&(r.mouseEnter=e[6]),16&n[0]&&(r.internalHover=e[4]),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function yw(e){let t,n,r,o,i;const a=[hw,mw,fw,pw,dw],s=[];return n=function(e,t){return e[16]?0:e[14]?1:e[15]?2:e[17]?3:4}(e),r=s[n]=a[n](e),{c(){t=P("div"),r.c(),_(t,"class",o=e[3]>0?"pl-2":"")},m(r,o){A(r,t,o),s[n].m(t,null),e[32](t),i=!0},p(e,n){r.p(e,n),(!i||8&n[0]&&o!==(o=e[3]>0?"pl-2":""))&&_(t,"class",o)},i(e){i||(Re(r),i=!0)},o(e){Pe(r),i=!1},d(r){r&&T(t),s[n].d(),e[32](null)}}}const bw="py-1";function $w(e,t,n){let r,o,i,a,s,l;var c,u,d;let p,{node:f}=t,{selected:m}=t,{hovered:h}=t,{depth:g=0}=t,{internalHover:v=!1}=t,{select:y}=t,{mouseEnter:b}=t,$=f&&f.nodeType==Node.TEXT_NODE,x=f&&0==f.childNodes.length,w=$&&""==(null===(c=null==f?void 0:f.nodeValue)||void 0===c?void 0:c.trim()),S=f&&1==f.childNodes.length&&(null===(u=null==f?void 0:f.firstChild)||void 0===u?void 0:u.nodeType)==Node.TEXT_NODE,C=f&&f.tagName&&((null===(d=lx[f.tagName.toLowerCase()])||void 0===d?void 0:d.title)||(E=f.tagName.toLowerCase()).charAt(0).toUpperCase()+E.slice(1));var E;let k=!0,M=!1;return e.$$set=e=>{"node"in e&&n(0,f=e.node),"selected"in e&&n(1,m=e.selected),"hovered"in e&&n(2,h=e.hovered),"depth"in e&&n(3,g=e.depth),"internalHover"in e&&n(4,v=e.internalHover),"select"in e&&n(5,y=e.select),"mouseEnter"in e&&n(6,b=e.mouseEnter)},e.$$.update=()=>{3&e.$$.dirty[0]&&n(19,r=f==m),5&e.$$.dirty[0]&&n(20,o=f==h),524288&e.$$.dirty[0]&&n(13,i=r?"bg-red rounded text-white font-semibold":""),1048576&e.$$.dirty[0]&&n(12,a=o?"bg-red/20 rounded":""),524288&e.$$.dirty[0]&&n(11,s=r?"bg-[#38040c] rounded-b rounded-t-none font-normal text-white/60":""),524288&e.$$.dirty[0]&&n(10,l="h-3 w-3 ml-1 mr-2 "+(r?"text-white":"text-red")),524672&e.$$.dirty[0]&&r&&(M||(p.scrollIntoView({behavior:"smooth",block:"center",inline:"start"}),n(8,M=!1)))},[f,m,h,g,v,y,b,p,M,k,l,s,a,i,$,x,w,S,C,r,o,e=>{y(e,f),n(8,M=!0)},e=>b(e,f),e=>{y(e,f),n(8,M=!0)},e=>b(e,f),e=>{y(e,f),n(8,M=!0)},e=>b(e,f),e=>{y(e,f),n(8,M=!0)},e=>b(e,f),function(){k=this.open,n(9,k)},e=>{y(e,f),n(8,M=!0)},e=>b(e,f),function(e){ue[e?"unshift":"push"]((()=>{p=e,n(7,p)}))}]}class xw extends Ue{constructor(e){super(),We(this,e,$w,yw,s,{node:0,selected:1,hovered:2,depth:3,internalHover:4,select:5,mouseEnter:6},null,[-1,-1])}}function ww(e){let t,n,r;function o(t){e[7](t)}let i={selected:e[1],hovered:e[2],select:e[3],mouseEnter:e[4],internalHover:e[6]};return void 0!==e[0]&&(i.node=e[0]),t=new xw({props:i}),ue.push((()=>He(t,"node",o))),{c(){Fe(t.$$.fragment)},m(e,n){Be(t,e,n),r=!0},p(e,r){const o={};2&r&&(o.selected=e[1]),4&r&&(o.hovered=e[2]),8&r&&(o.select=e[3]),16&r&&(o.mouseEnter=e[4]),64&r&&(o.internalHover=e[6]),!n&&1&r&&(n=!0,o.node=e[0],ye((()=>n=!1))),t.$set(o)},i(e){r||(Re(t.$$.fragment,e),r=!0)},o(e){Pe(t.$$.fragment,e),r=!1},d(e){Ie(t,e)}}}function Sw(e){let t,n,r,o,a=e[0]&&ww(e);return{c(){t=P("div"),a&&a.c(),_(t,"class","select-none text-xs text-white/60")},m(i,s){A(i,t,s),a&&a.m(t,null),n=!0,r||(o=[j(t,"mouseleave",V(e[8])),j(t,"mouseenter",e[9])],r=!0)},p(e,[n]){e[0]?a?(a.p(e,n),1&n&&Re(a,1)):(a=ww(e),a.c(),Re(a,1),a.m(t,null)):a&&(Ae(),Pe(a,1,1,(()=>{a=null})),Te())},i(e){n||(Re(a),n=!0)},o(e){Pe(a),n=!1},d(e){e&&T(t),a&&a.d(),r=!1,i(o)}}}function Cw(e,t,n){let{node:r}=t,{selected:o}=t,{hovered:i}=t,{select:a}=t,{mouseEnter:s}=t,{mouseLeave:l}=t,c=!1;return e.$$set=e=>{"node"in e&&n(0,r=e.node),"selected"in e&&n(1,o=e.selected),"hovered"in e&&n(2,i=e.hovered),"select"in e&&n(3,a=e.select),"mouseEnter"in e&&n(4,s=e.mouseEnter),"mouseLeave"in e&&n(5,l=e.mouseLeave)},[r,o,i,a,s,l,c,function(e){r=e,n(0,r)},e=>{n(6,c=!1),l(e)},()=>n(6,c=!0)]}class Ew extends Ue{constructor(e){super(),We(this,e,Cw,Sw,s,{node:0,selected:1,hovered:2,select:3,mouseEnter:4,mouseLeave:5})}}function kw(e){let t,n;return t=new Ew({props:{node:e[2],hovered:e[0],selected:e[1],select:e[3],mouseEnter:e[4],mouseLeave:e[5]}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,n){const r={};4&n&&(r.node=e[2]),1&n&&(r.hovered=e[0]),2&n&&(r.selected=e[1]),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function Mw(e){let t,n,r=e[2]&&kw(e);return{c(){r&&r.c(),t=N()},m(e,o){r&&r.m(e,o),A(e,t,o),n=!0},p(e,[n]){e[2]?r?(r.p(e,n),4&n&&Re(r,1)):(r=kw(e),r.c(),Re(r,1),r.m(t.parentNode,t)):r&&(Ae(),Pe(r,1,1,(()=>{r=null})),Te())},i(e){n||(Re(r),n=!0)},o(e){Pe(r),n=!1},d(e){e&&T(t),r&&r.d(e)}}}function Aw(e,t,n){let r,o,i,a,s,{editTool:l}=t;function c(e){if(!e)return void n(0,o=void 0);const t=null==r?void 0:r.getSanitizedNode(e);t&&n(0,o=t)}function u(e){if(0==e.length)return void n(1,i=void 0);const t=null==r?void 0:r.getSanitizedNode(e[0]);t&&n(1,i=t)}return re((()=>{r=new cw,new DOMParser,a=r.clonedDocument,n(2,s=a.body),l.selectorEngine.selectedStore.subscribe(u),l.selectorEngine.hoveredStore.subscribe(c)})),e.$$set=e=>{"editTool"in e&&n(6,l=e.editTool)},[o,i,s,function(e,t){i!=t&&(n(1,i=null==r?void 0:r.getOriginalNode(t)),l.simulateClick(i))},function(e,t){o!=t&&(n(0,o=null==r?void 0:r.getOriginalNode(t)),l.simulateHover(o))},function(e){n(0,o=void 0),l.simulateOut()},l]}class Tw extends Ue{constructor(e){super(),We(this,e,Aw,Mw,s,{editTool:6})}}function Rw(e){let t;return{c(){t=O("Layers")},m(e,n){A(e,t,n)},d(e){e&&T(t)}}}function Pw(e){let t,n;return t=new ag({props:{class:"bg-transparent p-0 text-xs",value:e[1].LAYERS,$$slots:{default:[Rw]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,n){const r={};2&n&&(r.value=e[1].LAYERS),8&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function Lw(e){let t,n;return t=new Tw({props:{editTool:e[0]}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,n){const r={};1&n&&(r.editTool=e[0]),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function Ow(e){let t,n,r,o,i,a,s,l,c;return t=new ng({props:{class:"bg-transparent p-0 gap-4",$$slots:{default:[Pw]},$$scope:{ctx:e}}}),r=new jg({props:{class:"mt-1"}}),a=new Jh({props:{value:e[1].LAYERS,$$slots:{default:[Lw]},$$scope:{ctx:e}}}),l=new Zt({props:{class:"flex justify-between"}}),{c(){Fe(t.$$.fragment),n=z(),Fe(r.$$.fragment),o=z(),i=P("div"),Fe(a.$$.fragment),s=z(),Fe(l.$$.fragment),_(i,"class","h-[54vh] overflow-auto")},m(e,u){Be(t,e,u),A(e,n,u),Be(r,e,u),A(e,o,u),A(e,i,u),Be(a,i,null),A(e,s,u),Be(l,e,u),c=!0},p(e,n){const r={};10&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r);const o={};2&n&&(o.value=e[1].LAYERS),9&n&&(o.$$scope={dirty:n,ctx:e}),a.$set(o)},i(e){c||(Re(t.$$.fragment,e),Re(r.$$.fragment,e),Re(a.$$.fragment,e),Re(l.$$.fragment,e),c=!0)},o(e){Pe(t.$$.fragment,e),Pe(r.$$.fragment,e),Pe(a.$$.fragment,e),Pe(l.$$.fragment,e),c=!1},d(e){e&&(T(n),T(o),T(i),T(s)),Ie(t,e),Ie(r,e),Ie(a),Ie(l,e)}}}function zw(e){let t,n;return t=new sg({props:{value:e[1].LAYERS,class:"w-full h-full",$$slots:{default:[Ow]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,n){const r={};2&n&&(r.value=e[1].LAYERS),11&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function Nw(e){let t,n;return t=new Wt({props:{$$slots:{default:[zw]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,n){const r={};11&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function jw(e){let t,n,r,o,i,a;return n=new Ft({props:{class:"w-[260px] h-[60vh] backdrop-blur bg-background/90 pt-2",$$slots:{default:[Nw]},$$scope:{ctx:e}}}),{c(){t=P("div"),Fe(n.$$.fragment),_(t,"class",r="fixed top-10 left-2 transform -translate-y-1/2 -translate-x-1/2 "+(e[2]?"visible":"invisible"))},m(e,r){A(e,t,r),Be(n,t,null),o=!0,i||(a=y(Vp.call(null,t,{bounds:"body"})),i=!0)},p(e,[i]){const a={};11&i&&(a.$$scope={dirty:i,ctx:e}),n.$set(a),(!o||4&i&&r!==(r="fixed top-10 left-2 transform -translate-y-1/2 -translate-x-1/2 "+(e[2]?"visible":"invisible")))&&_(t,"class",r)},i(e){o||(Re(n.$$.fragment,e),o=!0)},o(e){Pe(n.$$.fragment,e),o=!1},d(e){e&&T(t),Ie(n),i=!1,a()}}}function Vw(e,t,n){let r;u(e,bd,(e=>n(2,r=e)));let{editTool:o}=t;var i;return function(e){e.LAYERS="css",e.OTHER="other"}(i||(i={})),e.$$set=e=>{"editTool"in e&&n(0,o=e.editTool)},[o,i,r]}class Dw extends Ue{constructor(e){super(),We(this,e,Vw,jw,s,{editTool:0})}}function _w(e){let t,n,r;return t=new cn({props:{class:"h-4 w-4 mr-2"}}),{c(){Fe(t.$$.fragment),n=O("\n          Start Editing")},m(e,o){Be(t,e,o),A(e,n,o),r=!0},i(e){r||(Re(t.$$.fragment,e),r=!0)},o(e){Pe(t.$$.fragment,e),r=!1},d(e){e&&T(n),Ie(t,e)}}}function Hw(t){let n,r,o,i,a,s,l;return{c(){n=L("svg"),r=L("g"),o=L("path"),i=L("defs"),a=L("clipPath"),s=L("rect"),l=O("\n\n          Stop Editing"),_(o,"fill-rule","evenodd"),_(o,"clip-rule","evenodd"),_(o,"d","M7 13H13V7H7V13ZM10 2.5C5.86 2.5 2.5 5.86 2.5 10C2.5 14.14 5.86 17.5 10 17.5C14.14 17.5 17.5 14.14 17.5 10C17.5 5.86 14.14 2.5 10 2.5Z"),_(o,"fill","white"),_(r,"clip-path","url(#clip0_148_23526)"),_(s,"width","18"),_(s,"height","18"),_(s,"fill","white"),_(s,"transform","translate(1 1)"),_(a,"id","clip0_148_23526"),_(n,"class","mr-2"),_(n,"width","20"),_(n,"height","20"),_(n,"viewBox","0 0 20 20"),_(n,"fill","none"),_(n,"xmlns","http://www.w3.org/2000/svg")},m(e,t){A(e,n,t),E(n,r),E(r,o),E(n,i),E(i,a),E(a,s),A(e,l,t)},i:e,o:e,d(e){e&&(T(n),T(l))}}}function Fw(e){let t,n,r,o;const i=[Hw,_w],a=[];function s(e,t){return e[0]===Ap.EDIT?0:1}return t=s(e),n=a[t]=i[t](e),{c(){n.c(),r=N()},m(e,n){a[t].m(e,n),A(e,r,n),o=!0},p(e,o){let l=t;t=s(e),t!==l&&(Ae(),Pe(a[l],1,1,(()=>{a[l]=null})),Te(),n=a[t],n||(n=a[t]=i[t](e),n.c()),Re(n,1),n.m(r.parentNode,r))},i(e){o||(Re(n),o=!0)},o(e){Pe(n),o=!1},d(e){e&&T(r),a[t].d(e)}}}function Bw(e){let t,n,r,o;return n=new sw({props:{class:"rounded-full border-none",variant:"outline",$$slots:{default:[Iw]},$$scope:{ctx:e}}}),n.$on("click",tp),{c(){t=P("div"),Fe(n.$$.fragment)},m(e,r){A(e,t,r),Be(n,t,null),o=!0},i(e){o||(Re(n.$$.fragment,e),e&&ve((()=>{o&&(r||(r=Ne(t,gg,{axis:"x"},!0)),r.run(1))})),o=!0)},o(e){Pe(n.$$.fragment,e),e&&(r||(r=Ne(t,gg,{axis:"x"},!1)),r.run(0)),o=!1},d(e){e&&T(t),Ie(n),e&&r&&r.end()}}}function Iw(t){let n,r,o;return n=new an({props:{class:"h-4 w-4 mr-2"}}),{c(){Fe(n.$$.fragment),r=O("\n            Open Project")},m(e,t){Be(n,e,t),A(e,r,t),o=!0},p:e,i(e){o||(Re(n.$$.fragment,e),o=!0)},o(e){Pe(n.$$.fragment,e),o=!1},d(e){e&&T(r),Ie(n,e)}}}function Ww(e){let t,n,r,o;t=new sw({props:{class:"rounded-full border-none  "+(e[0]===Ap.EDIT?"bg-red hover:bg-red":""),variant:e[0]===Ap.EDIT?"destructive":"outline",$$slots:{default:[Fw]},$$scope:{ctx:e}}}),t.$on("click",e[2]);let i=e[0]!==Ap.EDIT&&Bw(e);return{c(){Fe(t.$$.fragment),n=z(),i&&i.c(),r=N()},m(e,a){Be(t,e,a),A(e,n,a),i&&i.m(e,a),A(e,r,a),o=!0},p(e,n){const o={};1&n&&(o.class="rounded-full border-none  "+(e[0]===Ap.EDIT?"bg-red hover:bg-red":"")),1&n&&(o.variant=e[0]===Ap.EDIT?"destructive":"outline"),9&n&&(o.$$scope={dirty:n,ctx:e}),t.$set(o),e[0]!==Ap.EDIT?i?1&n&&Re(i,1):(i=Bw(e),i.c(),Re(i,1),i.m(r.parentNode,r)):i&&(Ae(),Pe(i,1,1,(()=>{i=null})),Te())},i(e){o||(Re(t.$$.fragment,e),Re(i),o=!0)},o(e){Pe(t.$$.fragment,e),Pe(i),o=!1},d(e){e&&(T(n),T(r)),Ie(t,e),i&&i.d(e)}}}function Uw(e){let t,n;return t=new Ft({props:{class:"bg-background opacity-[98%] border p-1 space-x-2 rounded-full flex flex-row "+(e[0]===Ap.EDIT?"bg-red border-red":""),$$slots:{default:[Ww]},$$scope:{ctx:e}}}),{c(){Fe(t.$$.fragment)},m(e,r){Be(t,e,r),n=!0},p(e,n){const r={};1&n&&(r.class="bg-background opacity-[98%] border p-1 space-x-2 rounded-full flex flex-row "+(e[0]===Ap.EDIT?"bg-red border-red":"")),9&n&&(r.$$scope={dirty:n,ctx:e}),t.$set(r)},i(e){n||(Re(t.$$.fragment,e),n=!0)},o(e){Pe(t.$$.fragment,e),n=!1},d(e){Ie(t,e)}}}function Gw(e){let t,n,r,o,i,a,s;return n=new fd({props:{$$slots:{default:[Uw]},$$scope:{ctx:e}}}),o=new nw({props:{editTool:e[1]?.editTool}}),a=new Dw({props:{editTool:e[1]?.editTool}}),{c(){t=P("div"),Fe(n.$$.fragment),r=z(),Fe(o.$$.fragment),i=z(),Fe(a.$$.fragment),_(t,"class","fixed bottom-3 left-0 right-0 flex justify-center")},m(e,l){A(e,t,l),Be(n,t,null),A(e,r,l),Be(o,e,l),A(e,i,l),Be(a,e,l),s=!0},p(e,[t]){const r={};9&t&&(r.$$scope={dirty:t,ctx:e}),n.$set(r)},i(e){s||(Re(n.$$.fragment,e),Re(o.$$.fragment,e),Re(a.$$.fragment,e),s=!0)},o(e){Pe(n.$$.fragment,e),Pe(o.$$.fragment,e),Pe(a.$$.fragment,e),s=!1},d(e){e&&(T(t),T(r),T(i)),Ie(n),Ie(o,e),Ie(a,e)}}}function Zw(e,t,n){let r=Ap.EDIT,o=new Tp(r);return e.$$.update=()=>{1&e.$$.dirty&&(null==o||o.selectTool(r))},[r,o,()=>n(0,r=r===Ap.EDIT?void 0:Ap.EDIT)]}class Yw extends Ue{constructor(e){super(),We(this,e,Zw,Gw,s,{})}}function qw(t){let n,r,o;return r=new Yw({}),{c(){n=P("div"),Fe(r.$$.fragment),_(n,"id",md)},m(e,t){A(e,n,t),Be(r,n,null),o=!0},p:e,i(e){o||(Re(r.$$.fragment,e),o=!0)},o(e){Pe(r.$$.fragment,e),o=!1},d(e){e&&T(n),Ie(r)}}}class Xw extends Ue{constructor(e){super(),We(this,e,null,qw,s,{})}}let Kw;function Jw(e){return[...e.v,(e.i?"!":"")+e.n].join(":")}function Qw(e,t=","){return e.map(Jw).join(t)}let eS="undefined"!=typeof CSS&&CSS.escape||(e=>e.replace(/[!"'`*+.,;:\\/<=>?@#$%&^|~()[\]{}]/g,"\\$&").replace(/^\d/,"\\3$& "));function tS(e){for(var t=9,n=e.length;n--;)t=Math.imul(t^e.charCodeAt(n),1597334677);return"#"+((t^t>>>9)>>>0).toString(36)}function nS(e,t="@media "){return t+rS(e).map((e=>("string"==typeof e&&(e={min:e}),e.raw||Object.keys(e).map((t=>`(${t}-width:${e[t]})`)).join(" and ")))).join(",")}function rS(e=[]){return Array.isArray(e)?e:null==e?[]:[e]}function oS(e){return e}function iS(){}let aS={d:0,b:134217728,c:268435456,a:671088640,u:805306368,o:939524096};function sS(e){return e.match(/[-=:;]/g)?.length||0}function lS(e){return Math.min(/(?:^|width[^\d]+)(\d+(?:.\d+)?)(p)?/.test(e)?Math.max(0,29.63*(+RegExp.$1/(RegExp.$2?15:1))**.137-43):0,15)<<22|Math.min(sS(e),15)<<18}let cS=["rst-c","st-ch","h-chi","y-lin","nk","sited","ecked","pty","ad-on","cus-w","ver","cus","cus-v","tive","sable","tiona","quire"];function uS({n:e,i:t,v:n=[]},r,o,i){e&&(e=Jw({n:e,i:t,v:n})),i=[...rS(i)];for(let e of n){let t=r.theme("screens",e);for(let n of rS(t&&nS(t)||r.v(e))){i.push(n),o|=t?67108864|lS(n):"dark"==e?1073741824:"@"==n[0]?lS(n):1<<~(/:([a-z-]+)/.test(n)&&~cS.indexOf(RegExp.$1.slice(2,7))||-18)}}return{n:e,p:o,r:i,i:t}}let dS=new Map;function pS(e){if(e.d){let t=[],n=fS(e.r.reduce(((e,n)=>"@"==n[0]?(t.push(n),e):n?fS(e,(e=>fS(n,(t=>{let n=/(:merge\(.+?\))(:[a-z-]+|\\[.+])/.exec(t);if(n){let r=e.indexOf(n[1]);return~r?e.slice(0,r)+n[0]+e.slice(r+n[1].length):mS(e,t)}return mS(t,e)})))):e),"&"),(t=>mS(t,e.n?"."+eS(e.n):"")));return n&&t.push(n.replace(/:merge\((.+?)\)/g,"$1")),t.reduceRight(((e,t)=>t+"{"+e+"}"),e.d)}}function fS(e,t){return e.replace(/ *((?:\(.+?\)|\[.+?\]|[^,])+) *(,|$)/g,((e,n,r)=>t(n)+r))}function mS(e,t){return e.replace(/&/g,t)}let hS=new Intl.Collator("en",{numeric:!0});function gS(e,t){for(var n=0,r=e.length;n<r;){let o=r+n>>1;0>=vS(e[o],t)?n=o+1:r=o}return r}function vS(e,t){let n=e.p&aS.o;return n!=(t.p&aS.o)||n!=aS.b&&n!=aS.o?e.p-t.p||e.o-t.o||hS.compare(yS(e.n),yS(t.n))||hS.compare(bS(e.n),bS(t.n)):0}function yS(e){return(e||"").split(/:/).pop().split("/").pop()||"\0"}function bS(e){return(e||"").replace(/\W/g,(e=>String.fromCharCode(127+e.charCodeAt(0))))+"\0"}function $S(e,t){return Math.round(parseInt(e,16)*t)}function xS(e,t={}){if("function"==typeof e)return e(t);let{opacityValue:n="1",opacityVariable:r}=t,o=r?`var(${r})`:n;if(e.includes("<alpha-value>"))return e.replace("<alpha-value>",o);if("#"==e[0]&&(4==e.length||7==e.length)){let t=(e.length-1)/3,n=[17,1,.062272][t-1];return`rgba(${[$S(e.substr(1,t),n),$S(e.substr(1+t,t),n),$S(e.substr(1+2*t,t),n),o]})`}return"1"==o?e:"0"==o?"#0000":e.replace(/^(rgb|hsl)(\([^)]+)\)$/,`$1a$2,${o})`)}function wS(e,t,n,r,o=[]){return function e(t,{n:n,p:r,r:o=[],i:i},a){let s=[],l="",c=0,u=0;for(let f in t||{}){var d,p;let m=t[f];if("@"==f[0]){if(!m)continue;if("a"==f[1]){s.push(...kS(n,r,PS(""+m),a,r,o,i,!0));continue}if("l"==f[1]){for(let t of rS(m))s.push(...e(t,{n:n,p:(d=aS[f[7]],r&~aS.o|d),r:"d"==f[7]?[]:o,i:i},a));continue}if("i"==f[1]){s.push(...rS(m).map((e=>({p:-1,o:0,r:[],d:f+" "+e}))));continue}if("k"==f[1]){s.push({p:aS.d,o:0,r:[f],d:e(m,{p:aS.d},a).map(pS).join("")});continue}if("f"==f[1]){s.push(...rS(m).map((t=>({p:aS.d,o:0,r:[f],d:e(t,{p:aS.d},a).map(pS).join("")}))));continue}}if("object"!=typeof m||Array.isArray(m))"label"==f&&m?n=m+tS(JSON.stringify([r,i,t])):(m||0===m)&&(f=f.replace(/[A-Z]/g,(e=>"-"+e.toLowerCase())),u+=1,c=Math.max(c,"-"==(p=f)[0]?0:sS(p)+(/^(?:(border-(?!w|c|sty)|[tlbr].{2,4}m?$|c.{7,8}$)|([fl].{5}l|g.{8}$|pl))/.test(p)?+!!RegExp.$1||-!!RegExp.$2:0)+1),l+=(l?";":"")+rS(m).map((e=>a.s(f,SS(""+e,a.theme)+(i?" !important":"")))).join(";"));else if("@"==f[0]||f.includes("&")){let t=r;"@"==f[0]&&(f=f.replace(/\bscreen\(([^)]+)\)/g,((e,n)=>{let r=a.theme("screens",n);return r?(t|=67108864,nS(r,"")):e})),t|=lS(f)),s.push(...e(m,{n:n,p:t,r:[...o,f],i:i},a))}else s.push(...e(m,{p:r,r:[...o,f]},a))}return s.unshift({n:n,p:r,o:Math.max(0,15-u)+1.5*Math.min(c||15,15),r:o,d:l}),s.sort(vS)}(e,uS(t,n,r,o),n)}function SS(e,t){return e.replace(/theme\((["'`])?(.+?)\1(?:\s*,\s*(["'`])?(.+?)\3)?\)/g,((e,n,r,o,i="")=>{let a=t(r,i);return"function"==typeof a&&/color|fill|stroke/i.test(r)?xS(a):""+rS(a).filter((e=>Object(e)!==e))}))}function CS(e,t){let n,r=[];for(let o of e)o.d&&o.n?n?.p==o.p&&""+n.r==""+o.r?(n.c=[n.c,o.c].filter(Boolean).join(" "),n.d=n.d+";"+o.d):r.push(n={...o,n:o.n&&t}):r.push({...o,n:o.n&&t});return r}function ES(e,t,n=aS.u,r,o){let i=[];for(let a of e)for(let e of function(e,t,n,r,o){let i=function(e,t){let n=dS.get(e.n);return n?n(e,t):t.r(e.n,"dark"==e.v[0])}(e={...e,i:e.i||o},t);return i?"string"==typeof i?(({r:r,p:n}=uS(e,t,n,r)),CS(ES(PS(i),t,n,r,e.i),e.n)):Array.isArray(i)?i.map((e=>{var t,o;return{o:0,...e,r:[...rS(r),...rS(e.r)],p:(t=n,o=e.p??n,t&~aS.o|o)}})):wS(i,e,t,n,r):[{c:Jw(e),p:0,o:0,r:[]}]}(a,t,n,r,o))i.splice(gS(i,e),0,e);return i}function kS(e,t,n,r,o,i,a,s){return CS((s?n.flatMap((e=>ES([e],r,o,i,a))):ES(n,r,o,i,a)).map((e=>e.p&aS.o&&(e.n||t==aS.b)?{...e,p:e.p&~aS.o|t,o:0}:e)),e)}function MS(e,t,n,r){var o;return o=(e,o)=>{let{n:i,p:a,r:s,i:l}=uS(e,o,t);return n&&kS(i,t,n,o,a,s,l,r)},dS.set(e,o),e}function AS(e,t,n){if("("!=e[e.length-1]){let n=[],r=!1,o=!1,i="";for(let t of e)if("("!=t&&!/[~@]$/.test(t)){if("!"==t[0]&&(t=t.slice(1),r=!r),t.endsWith(":")){n["dark:"==t?"unshift":"push"](t.slice(0,-1));continue}"-"==t[0]&&(t=t.slice(1),o=!o),t.endsWith("-")&&(t=t.slice(0,-1)),t&&"&"!=t&&(i+=(i&&"-")+t)}i&&(o&&(i="-"+i),t[0].push({n:i,v:n.filter(TS),i:r}))}}function TS(e,t,n){return n.indexOf(e)==t}let RS=new Map;function PS(e){let t=RS.get(e);if(!t){let n=[],r=[[]],o=0,i=0,a=null,s=0,l=(t,i=0)=>{o!=s&&(n.push(e.slice(o,s+i)),t&&AS(n,r)),o=s+1};for(;s<e.length;s++){let t=e[s];if(i)"\\"!=e[s-1]&&(i+=+("["==t)||-("]"==t));else if("["==t)i+=1;else if(a)"\\"!=e[s-1]&&a.test(e.slice(s))&&(a=null,o=s+RegExp.lastMatch.length);else if("/"!=t||"\\"==e[s-1]||"*"!=e[s+1]&&"/"!=e[s+1])if("("==t)l(),n.push(t);else if(":"==t)":"!=e[s+1]&&l(!1,1);else if(/[\s,)]/.test(t)){l(!0);let e=n.lastIndexOf("(");if(")"==t){let t=n[e-1];if(/[~@]$/.test(t)){let o=r.shift();n.length=e,AS([...n,"#"],r);let{v:i}=r[0].pop();for(let e of o)e.v.splice(+("dark"==e.v[0])-+("dark"==i[0]),i.length);AS([...n,MS(t.length>1?t.slice(0,-1)+tS(JSON.stringify([t,o])):t+"("+Qw(o)+")",aS.a,o,/@$/.test(t))],r)}e=n.lastIndexOf("(",e-1)}n.length=e+1}else/[~@]/.test(t)&&"("==e[s+1]&&r.unshift([]);else a="*"==e[s+1]?/^\*\//:/^[\r\n]/}l(!0),RS.set(e,t=r[0])}return t}function LS(e,t,n){return[e,OS(t,n)]}function OS(e,t){return"function"==typeof e?e:"string"==typeof e&&/^[\w-]+$/.test(e)?(n,r)=>({[e]:t?t(n,r):zS(n,1)}):t=>e||{[t[1]]:zS(t,2)}}function zS(e,t,n=e.slice(t).find(Boolean)||e.$$||e.input){return"-"==e.input[0]?`calc(${n} * -1)`:n}function NS(e,t,n,r){return[e,jS(t,n,r)]}function jS(e,t,n){let r="string"==typeof t?(e,r)=>({[t]:n?n(e,r):e._}):t||(({1:e,_:t},n,r)=>({[e||r]:t}));return(t,n)=>{let o=FS(e||t[1]),i=n.theme(o,t.$$)??HS(t.$$,o,n);if(null!=i)return t._=zS(t,0,i),r(t,n,o)}}function VS(e,t={},n){return[e,DS(t,n)]}function DS(e={},t){return(n,r)=>{let{section:o=FS(n[0]).replace("-","")+"Color"}=e,[i,a]=(n.$$.match(/^(\[[^\]]+]|[^/]+?)(?:\/(.+))?$/)||[]).slice(1);if(!i)return;let s=r.theme(o,i)||HS(i,o,r);if(!s||"object"==typeof s)return;let{opacityVariable:l=`--tw-${n[0].replace(/-$/,"")}-opacity`,opacitySection:c=o.replace("Color","Opacity"),property:u=o,selector:d}=e,p=r.theme(c,a||"DEFAULT")||a&&HS(a,c,r),f=t||(({_:e})=>{let t=_S(u,e);return d?{[d]:t}:t});n._={value:xS(s,{opacityVariable:l||void 0,opacityValue:p||void 0}),color:e=>xS(s,e),opacityVariable:l||void 0,opacityValue:p||void 0};let m=f(n,r);if(!n.dark){let e=r.d(o,i,s);e&&e!==s&&(n._={value:xS(e,{opacityVariable:l||void 0,opacityValue:p||"1"}),color:t=>xS(e,t),opacityVariable:l||void 0,opacityValue:p||void 0},m={"&":m,[r.v("dark")]:f(n,r)})}return m}}function _S(e,t){let n={};return"string"==typeof t?n[e]=t:(t.opacityVariable&&t.value.includes(t.opacityVariable)&&(n[t.opacityVariable]=t.opacityValue||"1"),n[e]=t.value),n}function HS(e,t,n){if("["==e[0]&&"]"==e.slice(-1)){if(e=BS(SS(e.slice(1,-1),n.theme)),!t)return e;if(!(/color|fill|stroke/i.test(t)&&!/^color:/.test(e)&&!/^(#|((hsl|rgb)a?|hwb|lab|lch|color)\(|[a-z]+$)/.test(e)||/image/i.test(t)&&!/^image:/.test(e)&&!/^[a-z-]+\(/.test(e)||/weight/i.test(t)&&!/^(number|any):/.test(e)&&!/^\d+$/.test(e)||/position/i.test(t)&&/^(length|size):/.test(e)))return e.replace(/^[a-z-]+:/,"")}}function FS(e){return e.replace(/-./g,(e=>e[1].toUpperCase()))}function BS(e){return e.includes("url(")?e.replace(/(.*?)(url\(.*?\))(.*?)/g,((e,t="",n,r="")=>BS(t)+n+BS(r))):e.replace(/(^|[^\\])_+/g,((e,t)=>t+" ".repeat(e.length-t.length))).replace(/\\_/g,"_").replace(/(calc|min|max|clamp)\(.+\)/g,(e=>e.replace(/(-?\d*\.?\d(?!\b-.+[,)](?![^+\-/*])\D)(?:%|[a-z]+)?|\))([+\-/*])/g,"$1 $2 ")))}function IS({presets:e=[],...t}){let n={darkMode:void 0,darkColor:void 0,preflight:!1!==t.preflight&&[],theme:{},variants:rS(t.variants),rules:rS(t.rules),ignorelist:rS(t.ignorelist),hash:void 0,stringify:(e,t)=>e+":"+t,finalize:[]};for(let r of rS([...e,{darkMode:t.darkMode,darkColor:t.darkColor,preflight:!1!==t.preflight&&rS(t.preflight),theme:t.theme,hash:t.hash,stringify:t.stringify,finalize:t.finalize}])){let{preflight:e,darkMode:t=n.darkMode,darkColor:o=n.darkColor,theme:i,variants:a,rules:s,ignorelist:l,hash:c=n.hash,stringify:u=n.stringify,finalize:d}="function"==typeof r?r(n):r;n={preflight:!1!==n.preflight&&!1!==e&&[...n.preflight,...rS(e)],darkMode:t,darkColor:o,theme:{...n.theme,...i,extend:{...n.theme.extend,...i?.extend}},variants:[...n.variants,...rS(a)],rules:[...n.rules,...rS(s)],ignorelist:[...n.ignorelist,...rS(l)],hash:c,stringify:u,finalize:[...n.finalize,...rS(d)]}}return n}function WS(e,t,n,r,o,i){for(let a of t){let t=n.get(a);t||n.set(a,t=r(a));let s=t(e,o,i);if(s)return s}}function US(e){var t;return ZS(e[0],"function"==typeof(t=e[1])?t:()=>t)}function GS(e){return Array.isArray(e)?ZS(e[0],OS(e[1],e[2])):ZS(e,OS(undefined,undefined))}function ZS(e,t){return YS(e,((e,n,r,o)=>{let i=n.exec(e);if(i)return i.$$=e.slice(i[0].length),i.dark=o,t(i,r)}))}function YS(e,t){let n=rS(e).map(qS);return(e,r,o)=>{for(let i of n){let n=t(e,i,r,o);if(n)return n}}}function qS(e){return"string"==typeof e?RegExp("^"+e+(e.includes("$")||"-"==e.slice(-1)?"":"$")):e}function XS(e=JS,t="undefined"!=typeof document&&document.documentElement){if(t){let n=function(e){let t=new MutationObserver(n);return{observe(e){t.observe(e,{attributeFilter:["class"],subtree:!0,childList:!0}),r(e),n([{target:e,type:""}])},disconnect(){t.disconnect()}};function n(e){for(let{type:t,target:n}of e)if("a"==t[0])r(n);else for(let e of n.querySelectorAll("[class]"))r(e);t.takeRecords()}function r(t){let n,r=t.getAttribute?.("class");r&&function(e,t){return e!=t&&""+e.split(" ").sort()!=""+t.split(" ").sort()}(r,n=e(r))&&t.setAttribute("class",n)}}(e);n.observe(t);let{destroy:r}=e;e.destroy=()=>{n.disconnect(),r.call(e)}}return e}function KS(e){let t=e?.cssRules?e:(e&&"string"!=typeof e?e:function(e){let t=document.querySelector(e||'style[data-twind=""]');return t&&"STYLE"==t.tagName||(t=document.createElement("style"),document.head.prepend(t)),t.dataset.twind="claimed",t}(e)).sheet;return{target:t,snapshot(){let e=Array.from(t.cssRules,(e=>e.cssText));return()=>{this.clear(),e.forEach(this.insert)}},clear(){for(let e=t.cssRules.length;e--;)t.deleteRule(e)},destroy(){t.ownerNode?.remove()},insert(e,n){try{t.insertRule(e,n)}catch(e){t.insertRule(":root{}",n)}},resume:iS}}let JS=new Proxy(iS,{apply:(e,t,n)=>Kw(n[0]),get(e,t){let n=Kw[t];return"function"==typeof n?function(){return n.apply(Kw,arguments)}:n}}),QS={screens:{sm:"640px",md:"768px",lg:"1024px",xl:"1280px","2xl":"1536px"},columns:{auto:"auto","3xs":"16rem","2xs":"18rem",xs:"20rem",sm:"24rem",md:"28rem",lg:"32rem",xl:"36rem","2xl":"42rem","3xl":"48rem","4xl":"56rem","5xl":"64rem","6xl":"72rem","7xl":"80rem"},spacing:{px:"1px",0:"0px",...nC(4,"rem",4,.5,.5),...nC(12,"rem",4,5),14:"3.5rem",...nC(64,"rem",4,16,4),72:"18rem",80:"20rem",96:"24rem"},durations:{75:"75ms",100:"100ms",150:"150ms",200:"200ms",300:"300ms",500:"500ms",700:"700ms",1e3:"1000ms"},animation:{none:"none",spin:"spin 1s linear infinite",ping:"ping 1s cubic-bezier(0,0,0.2,1) infinite",pulse:"pulse 2s cubic-bezier(0.4,0,0.6,1) infinite",bounce:"bounce 1s infinite"},aspectRatio:{auto:"auto",square:"1/1",video:"16/9"},backdropBlur:rC("blur"),backdropBrightness:rC("brightness"),backdropContrast:rC("contrast"),backdropGrayscale:rC("grayscale"),backdropHueRotate:rC("hueRotate"),backdropInvert:rC("invert"),backdropOpacity:rC("opacity"),backdropSaturate:rC("saturate"),backdropSepia:rC("sepia"),backgroundColor:rC("colors"),backgroundImage:{none:"none"},backgroundOpacity:rC("opacity"),backgroundSize:{auto:"auto",cover:"cover",contain:"contain"},blur:{none:"none",0:"0",sm:"4px",DEFAULT:"8px",md:"12px",lg:"16px",xl:"24px","2xl":"40px","3xl":"64px"},brightness:{...nC(200,"",100,0,50),...nC(110,"",100,90,5),75:"0.75",125:"1.25"},borderColor:({theme:e})=>({DEFAULT:e("colors.gray.200","currentColor"),...e("colors")}),borderOpacity:rC("opacity"),borderRadius:{none:"0px",sm:"0.125rem",DEFAULT:"0.25rem",md:"0.375rem",lg:"0.5rem",xl:"0.75rem","2xl":"1rem","3xl":"1.5rem","1/2":"50%",full:"9999px"},borderSpacing:rC("spacing"),borderWidth:{DEFAULT:"1px",...tC(8,"px")},boxShadow:{sm:"0 1px 2px 0 rgba(0,0,0,0.05)",DEFAULT:"0 1px 3px 0 rgba(0,0,0,0.1), 0 1px 2px -1px rgba(0,0,0,0.1)",md:"0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -2px rgba(0,0,0,0.1)",lg:"0 10px 15px -3px rgba(0,0,0,0.1), 0 4px 6px -4px rgba(0,0,0,0.1)",xl:"0 20px 25px -5px rgba(0,0,0,0.1), 0 8px 10px -6px rgba(0,0,0,0.1)","2xl":"0 25px 50px -12px rgba(0,0,0,0.25)",inner:"inset 0 2px 4px 0 rgba(0,0,0,0.05)",none:"0 0 #0000"},boxShadowColor:rC("colors"),caretColor:rC("colors"),accentColor:({theme:e})=>({auto:"auto",...e("colors")}),contrast:{...nC(200,"",100,0,50),75:"0.75",125:"1.25"},content:{none:"none"},divideColor:rC("borderColor"),divideOpacity:rC("borderOpacity"),divideWidth:rC("borderWidth"),dropShadow:{sm:"0 1px 1px rgba(0,0,0,0.05)",DEFAULT:["0 1px 2px rgba(0,0,0,0.1)","0 1px 1px rgba(0,0,0,0.06)"],md:["0 4px 3px rgba(0,0,0,0.07)","0 2px 2px rgba(0,0,0,0.06)"],lg:["0 10px 8px rgba(0,0,0,0.04)","0 4px 3px rgba(0,0,0,0.1)"],xl:["0 20px 13px rgba(0,0,0,0.03)","0 8px 5px rgba(0,0,0,0.08)"],"2xl":"0 25px 25px rgba(0,0,0,0.15)",none:"0 0 #0000"},fill:({theme:e})=>({...e("colors"),none:"none"}),grayscale:{DEFAULT:"100%",0:"0"},hueRotate:{0:"0deg",15:"15deg",30:"30deg",60:"60deg",90:"90deg",180:"180deg"},invert:{DEFAULT:"100%",0:"0"},flex:{1:"1 1 0%",auto:"1 1 auto",initial:"0 1 auto",none:"none"},flexBasis:({theme:e})=>({...e("spacing"),...eC(2,6),...eC(12,12),auto:"auto",full:"100%"}),flexGrow:{DEFAULT:1,0:0},flexShrink:{DEFAULT:1,0:0},fontFamily:{sans:'ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans",sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji"'.split(","),serif:'ui-serif,Georgia,Cambria,"Times New Roman",Times,serif'.split(","),mono:'ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace'.split(",")},fontSize:{xs:["0.75rem","1rem"],sm:["0.875rem","1.25rem"],base:["1rem","1.5rem"],lg:["1.125rem","1.75rem"],xl:["1.25rem","1.75rem"],"2xl":["1.5rem","2rem"],"3xl":["1.875rem","2.25rem"],"4xl":["2.25rem","2.5rem"],"5xl":["3rem","1"],"6xl":["3.75rem","1"],"7xl":["4.5rem","1"],"8xl":["6rem","1"],"9xl":["8rem","1"]},fontWeight:{thin:"100",extralight:"200",light:"300",normal:"400",medium:"500",semibold:"600",bold:"700",extrabold:"800",black:"900"},gap:rC("spacing"),gradientColorStops:rC("colors"),gridAutoColumns:{auto:"auto",min:"min-content",max:"max-content",fr:"minmax(0,1fr)"},gridAutoRows:{auto:"auto",min:"min-content",max:"max-content",fr:"minmax(0,1fr)"},gridColumn:{auto:"auto","span-full":"1 / -1"},gridRow:{auto:"auto","span-full":"1 / -1"},gridTemplateColumns:{none:"none"},gridTemplateRows:{none:"none"},height:({theme:e})=>({...e("spacing"),...eC(2,6),min:"min-content",max:"max-content",fit:"fit-content",auto:"auto",full:"100%",screen:"100vh"}),inset:({theme:e})=>({...e("spacing"),...eC(2,4),auto:"auto",full:"100%"}),keyframes:{spin:{from:{transform:"rotate(0deg)"},to:{transform:"rotate(360deg)"}},ping:{"0%":{transform:"scale(1)",opacity:"1"},"75%,100%":{transform:"scale(2)",opacity:"0"}},pulse:{"0%,100%":{opacity:"1"},"50%":{opacity:".5"}},bounce:{"0%, 100%":{transform:"translateY(-25%)",animationTimingFunction:"cubic-bezier(0.8,0,1,1)"},"50%":{transform:"none",animationTimingFunction:"cubic-bezier(0,0,0.2,1)"}}},letterSpacing:{tighter:"-0.05em",tight:"-0.025em",normal:"0em",wide:"0.025em",wider:"0.05em",widest:"0.1em"},lineHeight:{...nC(10,"rem",4,3),none:"1",tight:"1.25",snug:"1.375",normal:"1.5",relaxed:"1.625",loose:"2"},margin:({theme:e})=>({auto:"auto",...e("spacing")}),maxHeight:({theme:e})=>({full:"100%",min:"min-content",max:"max-content",fit:"fit-content",screen:"100vh",...e("spacing")}),maxWidth:({theme:e,breakpoints:t})=>({...t(e("screens")),none:"none",0:"0rem",xs:"20rem",sm:"24rem",md:"28rem",lg:"32rem",xl:"36rem","2xl":"42rem","3xl":"48rem","4xl":"56rem","5xl":"64rem","6xl":"72rem","7xl":"80rem",full:"100%",min:"min-content",max:"max-content",fit:"fit-content",prose:"65ch"}),minHeight:{0:"0px",full:"100%",min:"min-content",max:"max-content",fit:"fit-content",screen:"100vh"},minWidth:{0:"0px",full:"100%",min:"min-content",max:"max-content",fit:"fit-content"},opacity:{...nC(100,"",100,0,10),5:"0.05",25:"0.25",75:"0.75",95:"0.95"},order:{first:"-9999",last:"9999",none:"0"},padding:rC("spacing"),placeholderColor:rC("colors"),placeholderOpacity:rC("opacity"),outlineColor:rC("colors"),outlineOffset:tC(8,"px"),outlineWidth:tC(8,"px"),ringColor:({theme:e})=>({...e("colors"),DEFAULT:"#3b82f6"}),ringOffsetColor:rC("colors"),ringOffsetWidth:tC(8,"px"),ringOpacity:({theme:e})=>({...e("opacity"),DEFAULT:"0.5"}),ringWidth:{DEFAULT:"3px",...tC(8,"px")},rotate:{...tC(2,"deg"),...tC(12,"deg",3),...tC(180,"deg",45)},saturate:nC(200,"",100,0,50),scale:{...nC(150,"",100,0,50),...nC(110,"",100,90,5),75:"0.75",125:"1.25"},scrollMargin:rC("spacing"),scrollPadding:rC("spacing"),sepia:{0:"0",DEFAULT:"100%"},skew:{...tC(2,"deg"),...tC(12,"deg",3)},space:rC("spacing"),stroke:({theme:e})=>({...e("colors"),none:"none"}),strokeWidth:nC(2),textColor:rC("colors"),textDecorationColor:rC("colors"),textDecorationThickness:{"from-font":"from-font",auto:"auto",...tC(8,"px")},textUnderlineOffset:{auto:"auto",...tC(8,"px")},textIndent:rC("spacing"),textOpacity:rC("opacity"),transitionDuration:({theme:e})=>({...e("durations"),DEFAULT:"150ms"}),transitionDelay:rC("durations"),transitionProperty:{none:"none",all:"all",DEFAULT:"color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter",colors:"color,background-color,border-color,text-decoration-color,fill,stroke",opacity:"opacity",shadow:"box-shadow",transform:"transform"},transitionTimingFunction:{DEFAULT:"cubic-bezier(0.4,0,0.2,1)",linear:"linear",in:"cubic-bezier(0.4,0,1,1)",out:"cubic-bezier(0,0,0.2,1)","in-out":"cubic-bezier(0.4,0,0.2,1)"},translate:({theme:e})=>({...e("spacing"),...eC(2,4),full:"100%"}),width:({theme:e})=>({min:"min-content",max:"max-content",fit:"fit-content",screen:"100vw",...e("flexBasis")}),willChange:{scroll:"scroll-position"},zIndex:{...nC(50,"",1,0,10),auto:"auto"}};function eC(e,t){let n={};do{for(var r=1;r<e;r++)n[`${r}/${e}`]=Number((r/e*100).toFixed(6))+"%"}while(++e<=t);return n}function tC(e,t,n=0){let r={};for(;n<=e;n=2*n||1)r[n]=n+t;return r}function nC(e,t="",n=1,r=0,o=1,i={}){for(;r<=e;r+=o)i[r]=r/n+t;return i}function rC(e){return({theme:t})=>t(e)}let oC={"*,::before,::after":{boxSizing:"border-box",borderWidth:"0",borderStyle:"solid",borderColor:"theme(borderColor.DEFAULT, currentColor)"},"::before,::after":{"--tw-content":"''"},html:{lineHeight:1.5,WebkitTextSizeAdjust:"100%",MozTabSize:"4",tabSize:4,fontFamily:`theme(fontFamily.sans, ${QS.fontFamily.sans})`,fontFeatureSettings:"theme(fontFamily.sans[1].fontFeatureSettings, normal)"},body:{margin:"0",lineHeight:"inherit"},hr:{height:"0",color:"inherit",borderTopWidth:"1px"},"abbr:where([title])":{textDecoration:"underline dotted"},"h1,h2,h3,h4,h5,h6":{fontSize:"inherit",fontWeight:"inherit"},a:{color:"inherit",textDecoration:"inherit"},"b,strong":{fontWeight:"bolder"},"code,kbd,samp,pre":{fontFamily:`theme(fontFamily.mono, ${QS.fontFamily.mono})`,fontFeatureSettings:"theme(fontFamily.mono[1].fontFeatureSettings, normal)",fontSize:"1em"},small:{fontSize:"80%"},"sub,sup":{fontSize:"75%",lineHeight:0,position:"relative",verticalAlign:"baseline"},sub:{bottom:"-0.25em"},sup:{top:"-0.5em"},table:{textIndent:"0",borderColor:"inherit",borderCollapse:"collapse"},"button,input,optgroup,select,textarea":{fontFamily:"inherit",fontSize:"100%",lineHeight:"inherit",color:"inherit",margin:"0",padding:"0"},"button,select":{textTransform:"none"},"button,[type='button'],[type='reset'],[type='submit']":{WebkitAppearance:"button",backgroundColor:"transparent",backgroundImage:"none"},":-moz-focusring":{outline:"auto"},":-moz-ui-invalid":{boxShadow:"none"},progress:{verticalAlign:"baseline"},"::-webkit-inner-spin-button,::-webkit-outer-spin-button":{height:"auto"},"[type='search']":{WebkitAppearance:"textfield",outlineOffset:"-2px"},"::-webkit-search-decoration":{WebkitAppearance:"none"},"::-webkit-file-upload-button":{WebkitAppearance:"button",font:"inherit"},summary:{display:"list-item"},"blockquote,dl,dd,h1,h2,h3,h4,h5,h6,hr,figure,p,pre":{margin:"0"},fieldset:{margin:"0",padding:"0"},legend:{padding:"0"},"ol,ul,menu":{listStyle:"none",margin:"0",padding:"0"},textarea:{resize:"vertical"},"input::placeholder,textarea::placeholder":{opacity:1,color:"theme(colors.gray.400, #9ca3af)"},'button,[role="button"]':{cursor:"pointer"},":disabled":{cursor:"default"},"img,svg,video,canvas,audio,iframe,embed,object":{display:"block",verticalAlign:"middle"},"img,video":{maxWidth:"100%",height:"auto"},"[hidden]":{display:"none"}},iC=[LS("\\[([-\\w]+):(.+)]",(({1:e,2:t},n)=>({"@layer overrides":{"&":{[e]:HS(`[${t}]`,"",n)}}}))),LS("(group|peer)([~/][^-[]+)?",(({input:e},{h:t})=>[{c:t(e)}])),NS("aspect-","aspectRatio"),LS("container",((e,{theme:t})=>{let{screens:n=t("screens"),center:r,padding:o}=t("container"),i={width:"100%",marginRight:r&&"auto",marginLeft:r&&"auto",...a("xs")};for(let e in n){let t=n[e];"string"==typeof t&&(i[nS(t)]={"&":{maxWidth:t,...a(e)}})}return i;function a(e){let t=o&&("string"==typeof o?o:o[e]||o.DEFAULT);if(t)return{paddingRight:t,paddingLeft:t}}})),NS("content-","content",(({_:e})=>({"--tw-content":e,content:"var(--tw-content)"}))),LS("(?:box-)?decoration-(slice|clone)","boxDecorationBreak"),LS("box-(border|content)","boxSizing",(({1:e})=>e+"-box")),LS("hidden",{display:"none"}),LS("table-(auto|fixed)","tableLayout"),LS(["(block|flex|table|grid|inline|contents|flow-root|list-item)","(inline-(block|flex|table|grid))","(table-(caption|cell|column|row|(column|row|footer|header)-group))"],"display"),"(float)-(left|right|none)","(clear)-(left|right|none|both)","(overflow(?:-[xy])?)-(auto|hidden|clip|visible|scroll)","(isolation)-(auto)",LS("isolate","isolation"),LS("object-(contain|cover|fill|none|scale-down)","objectFit"),NS("object-","objectPosition"),LS("object-(top|bottom|center|(left|right)(-(top|bottom))?)","objectPosition",aC),LS("overscroll(-[xy])?-(auto|contain|none)",(({1:e="",2:t})=>({["overscroll-behavior"+e]:t}))),LS("(static|fixed|absolute|relative|sticky)","position"),NS("-?inset(-[xy])?(?:$|-)","inset",(({1:e,_:t})=>({top:"-x"!=e&&t,right:"-y"!=e&&t,bottom:"-x"!=e&&t,left:"-y"!=e&&t}))),NS("-?(top|bottom|left|right)(?:$|-)","inset"),LS("(visible|collapse)","visibility"),LS("invisible",{visibility:"hidden"}),NS("-?z-","zIndex"),LS("flex-((row|col)(-reverse)?)","flexDirection",sC),LS("flex-(wrap|wrap-reverse|nowrap)","flexWrap"),NS("(flex-(?:grow|shrink))(?:$|-)"),NS("(flex)-"),NS("grow(?:$|-)","flexGrow"),NS("shrink(?:$|-)","flexShrink"),NS("basis-","flexBasis"),NS("-?(order)-"),"-?(order)-(\\d+)",NS("grid-cols-","gridTemplateColumns"),LS("grid-cols-(\\d+)","gridTemplateColumns",vC),NS("col-","gridColumn"),LS("col-(span)-(\\d+)","gridColumn",gC),NS("col-start-","gridColumnStart"),LS("col-start-(auto|\\d+)","gridColumnStart"),NS("col-end-","gridColumnEnd"),LS("col-end-(auto|\\d+)","gridColumnEnd"),NS("grid-rows-","gridTemplateRows"),LS("grid-rows-(\\d+)","gridTemplateRows",vC),NS("row-","gridRow"),LS("row-(span)-(\\d+)","gridRow",gC),NS("row-start-","gridRowStart"),LS("row-start-(auto|\\d+)","gridRowStart"),NS("row-end-","gridRowEnd"),LS("row-end-(auto|\\d+)","gridRowEnd"),LS("grid-flow-((row|col)(-dense)?)","gridAutoFlow",(e=>aC(sC(e)))),LS("grid-flow-(dense)","gridAutoFlow"),NS("auto-cols-","gridAutoColumns"),NS("auto-rows-","gridAutoRows"),NS("gap-x(?:$|-)","gap","columnGap"),NS("gap-y(?:$|-)","gap","rowGap"),NS("gap(?:$|-)","gap"),"(justify-(?:items|self))-",LS("justify-","justifyContent",uC),LS("(content|items|self)-",(e=>({["align-"+e[1]]:uC(e)}))),LS("(place-(content|items|self))-",(({1:e,$$:t})=>({[e]:("wun".includes(t[3])?"space-":"")+t}))),NS("p([xytrbl])?(?:$|-)","padding",dC("padding")),NS("-?m([xytrbl])?(?:$|-)","margin",dC("margin")),NS("-?space-(x|y)(?:$|-)","space",(({1:e,_:t})=>({"&>:not([hidden])~:not([hidden])":{[`--tw-space-${e}-reverse`]:"0",["margin-"+{y:"top",x:"left"}[e]]:`calc(${t} * calc(1 - var(--tw-space-${e}-reverse)))`,["margin-"+{y:"bottom",x:"right"}[e]]:`calc(${t} * var(--tw-space-${e}-reverse))`}}))),LS("space-(x|y)-reverse",(({1:e})=>({"&>:not([hidden])~:not([hidden])":{[`--tw-space-${e}-reverse`]:"1"}}))),NS("w-","width"),NS("min-w-","minWidth"),NS("max-w-","maxWidth"),NS("h-","height"),NS("min-h-","minHeight"),NS("max-h-","maxHeight"),NS("font-","fontWeight"),NS("font-","fontFamily",(({_:e})=>"string"==typeof(e=rS(e))[1]?{fontFamily:cC(e)}:{fontFamily:cC(e[0]),...e[1]})),LS("antialiased",{WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale"}),LS("subpixel-antialiased",{WebkitFontSmoothing:"auto",MozOsxFontSmoothing:"auto"}),LS("italic","fontStyle"),LS("not-italic",{fontStyle:"normal"}),LS("(ordinal|slashed-zero|(normal|lining|oldstyle|proportional|tabular)-nums|(diagonal|stacked)-fractions)",(({1:e,2:t="",3:n})=>"normal"==t?{fontVariantNumeric:"normal"}:{["--tw-"+(n?"numeric-fraction":"pt".includes(t[0])?"numeric-spacing":t?"numeric-figure":e)]:e,fontVariantNumeric:"var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction)",...yC({"--tw-ordinal":"var(--tw-empty,/*!*/ /*!*/)","--tw-slashed-zero":"var(--tw-empty,/*!*/ /*!*/)","--tw-numeric-figure":"var(--tw-empty,/*!*/ /*!*/)","--tw-numeric-spacing":"var(--tw-empty,/*!*/ /*!*/)","--tw-numeric-fraction":"var(--tw-empty,/*!*/ /*!*/)"})})),NS("tracking-","letterSpacing"),NS("leading-","lineHeight"),LS("list-(inside|outside)","listStylePosition"),NS("list-","listStyleType"),LS("list-","listStyleType"),NS("placeholder-opacity-","placeholderOpacity",(({_:e})=>({"&::placeholder":{"--tw-placeholder-opacity":e}}))),VS("placeholder-",{property:"color",selector:"&::placeholder"}),LS("text-(left|center|right|justify|start|end)","textAlign"),LS("text-(ellipsis|clip)","textOverflow"),NS("text-opacity-","textOpacity","--tw-text-opacity"),VS("text-",{property:"color"}),NS("text-","fontSize",(({_:e})=>"string"==typeof e?{fontSize:e}:{fontSize:e[0],..."string"==typeof e[1]?{lineHeight:e[1]}:e[1]})),NS("indent-","textIndent"),LS("(overline|underline|line-through)","textDecorationLine"),LS("no-underline",{textDecorationLine:"none"}),NS("underline-offset-","textUnderlineOffset"),VS("decoration-",{section:"textDecorationColor",opacityVariable:!1,opacitySection:"opacity"}),NS("decoration-","textDecorationThickness"),LS("decoration-","textDecorationStyle"),LS("(uppercase|lowercase|capitalize)","textTransform"),LS("normal-case",{textTransform:"none"}),LS("truncate",{overflow:"hidden",whiteSpace:"nowrap",textOverflow:"ellipsis"}),LS("align-","verticalAlign"),LS("whitespace-","whiteSpace"),LS("break-normal",{wordBreak:"normal",overflowWrap:"normal"}),LS("break-words",{overflowWrap:"break-word"}),LS("break-all",{wordBreak:"break-all"}),LS("break-keep",{wordBreak:"keep-all"}),VS("caret-",{opacityVariable:!1,opacitySection:"opacity"}),VS("accent-",{opacityVariable:!1,opacitySection:"opacity"}),LS("bg-gradient-to-([trbl]|[tb][rl])","backgroundImage",(({1:e})=>`linear-gradient(to ${lC(e," ")},var(--tw-gradient-stops))`)),VS("from-",{section:"gradientColorStops",opacityVariable:!1,opacitySection:"opacity"},(({_:e})=>({"--tw-gradient-from":e.value,"--tw-gradient-to":e.color({opacityValue:"0"}),"--tw-gradient-stops":"var(--tw-gradient-from),var(--tw-gradient-to)"}))),VS("via-",{section:"gradientColorStops",opacityVariable:!1,opacitySection:"opacity"},(({_:e})=>({"--tw-gradient-to":e.color({opacityValue:"0"}),"--tw-gradient-stops":`var(--tw-gradient-from),${e.value},var(--tw-gradient-to)`}))),VS("to-",{section:"gradientColorStops",property:"--tw-gradient-to",opacityVariable:!1,opacitySection:"opacity"}),LS("bg-(fixed|local|scroll)","backgroundAttachment"),LS("bg-origin-(border|padding|content)","backgroundOrigin",(({1:e})=>e+"-box")),LS(["bg-(no-repeat|repeat(-[xy])?)","bg-repeat-(round|space)"],"backgroundRepeat"),LS("bg-blend-","backgroundBlendMode"),LS("bg-clip-(border|padding|content|text)","backgroundClip",(({1:e})=>e+("text"==e?"":"-box"))),NS("bg-opacity-","backgroundOpacity","--tw-bg-opacity"),VS("bg-",{section:"backgroundColor"}),NS("bg-","backgroundImage"),NS("bg-","backgroundPosition"),LS("bg-(top|bottom|center|(left|right)(-(top|bottom))?)","backgroundPosition",aC),NS("bg-","backgroundSize"),NS("rounded(?:$|-)","borderRadius"),NS("rounded-([trbl]|[tb][rl])(?:$|-)","borderRadius",(({1:e,_:t})=>{let n={t:["tl","tr"],r:["tr","br"],b:["bl","br"],l:["bl","tl"]}[e]||[e,e];return{[`border-${lC(n[0])}-radius`]:t,[`border-${lC(n[1])}-radius`]:t}})),LS("border-(collapse|separate)","borderCollapse"),NS("border-opacity(?:$|-)","borderOpacity","--tw-border-opacity"),LS("border-(solid|dashed|dotted|double|none)","borderStyle"),NS("border-spacing(-[xy])?(?:$|-)","borderSpacing",(({1:e,_:t})=>({...yC({"--tw-border-spacing-x":"0","--tw-border-spacing-y":"0"}),["--tw-border-spacing"+(e||"-x")]:t,["--tw-border-spacing"+(e||"-y")]:t,"border-spacing":"var(--tw-border-spacing-x) var(--tw-border-spacing-y)"}))),VS("border-([xytrbl])-",{section:"borderColor"},dC("border","Color")),VS("border-"),NS("border-([xytrbl])(?:$|-)","borderWidth",dC("border","Width")),NS("border(?:$|-)","borderWidth"),NS("divide-opacity(?:$|-)","divideOpacity",(({_:e})=>({"&>:not([hidden])~:not([hidden])":{"--tw-divide-opacity":e}}))),LS("divide-(solid|dashed|dotted|double|none)",(({1:e})=>({"&>:not([hidden])~:not([hidden])":{borderStyle:e}}))),LS("divide-([xy]-reverse)",(({1:e})=>({"&>:not([hidden])~:not([hidden])":{["--tw-divide-"+e]:"1"}}))),NS("divide-([xy])(?:$|-)","divideWidth",(({1:e,_:t})=>{let n={x:"lr",y:"tb"}[e];return{"&>:not([hidden])~:not([hidden])":{[`--tw-divide-${e}-reverse`]:"0",[`border-${lC(n[0])}Width`]:`calc(${t} * calc(1 - var(--tw-divide-${e}-reverse)))`,[`border-${lC(n[1])}Width`]:`calc(${t} * var(--tw-divide-${e}-reverse))`}}})),VS("divide-",{property:"borderColor",selector:"&>:not([hidden])~:not([hidden])"}),NS("ring-opacity(?:$|-)","ringOpacity","--tw-ring-opacity"),VS("ring-offset-",{property:"--tw-ring-offset-color",opacityVariable:!1}),NS("ring-offset(?:$|-)","ringOffsetWidth","--tw-ring-offset-width"),LS("ring-inset",{"--tw-ring-inset":"inset"}),VS("ring-",{property:"--tw-ring-color"}),NS("ring(?:$|-)","ringWidth",(({_:e},{theme:t})=>({...yC({"--tw-ring-offset-shadow":"0 0 #0000","--tw-ring-shadow":"0 0 #0000","--tw-shadow":"0 0 #0000","--tw-shadow-colored":"0 0 #0000","&":{"--tw-ring-inset":"var(--tw-empty,/*!*/ /*!*/)","--tw-ring-offset-width":t("ringOffsetWidth","","0px"),"--tw-ring-offset-color":xS(t("ringOffsetColor","","#fff")),"--tw-ring-color":xS(t("ringColor","","#93c5fd"),{opacityVariable:"--tw-ring-opacity"}),"--tw-ring-opacity":t("ringOpacity","","0.5")}}),"--tw-ring-offset-shadow":"var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color)","--tw-ring-shadow":`var(--tw-ring-inset) 0 0 0 calc(${e} + var(--tw-ring-offset-width)) var(--tw-ring-color)`,boxShadow:"var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)"}))),VS("shadow-",{section:"boxShadowColor",opacityVariable:!1,opacitySection:"opacity"},(({_:e})=>({"--tw-shadow-color":e.value,"--tw-shadow":"var(--tw-shadow-colored)"}))),NS("shadow(?:$|-)","boxShadow",(({_:e})=>({...yC({"--tw-ring-offset-shadow":"0 0 #0000","--tw-ring-shadow":"0 0 #0000","--tw-shadow":"0 0 #0000","--tw-shadow-colored":"0 0 #0000"}),"--tw-shadow":cC(e),"--tw-shadow-colored":cC(e).replace(/([^,]\s+)(?:#[a-f\d]+|(?:(?:hsl|rgb)a?|hwb|lab|lch|color|var)\(.+?\)|[a-z]+)(,|$)/g,"$1var(--tw-shadow-color)$2"),boxShadow:"var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)"}))),NS("(opacity)-"),LS("mix-blend-","mixBlendMode"),...pC(),...pC("backdrop-"),NS("transition(?:$|-)","transitionProperty",((e,{theme:t})=>({transitionProperty:cC(e),transitionTimingFunction:"none"==e._?void 0:cC(t("transitionTimingFunction","")),transitionDuration:"none"==e._?void 0:cC(t("transitionDuration",""))}))),NS("duration(?:$|-)","transitionDuration","transitionDuration",cC),NS("ease(?:$|-)","transitionTimingFunction","transitionTimingFunction",cC),NS("delay(?:$|-)","transitionDelay","transitionDelay",cC),NS("animate(?:$|-)","animation",((e,{theme:t,h:n,e:r})=>{let o=cC(e),i=o.split(" "),a=t("keyframes",i[0]);return a?{["@keyframes "+(i[0]=r(n(i[0])))]:a,animation:i.join(" ")}:{animation:o}})),"(transform)-(none)",LS("transform",mC),LS("transform-(cpu|gpu)",(({1:e})=>({"--tw-transform":hC("gpu"==e)}))),NS("scale(-[xy])?-","scale",(({1:e,_:t})=>({["--tw-scale"+(e||"-x")]:t,["--tw-scale"+(e||"-y")]:t,...mC()}))),NS("-?(rotate)-","rotate",fC),NS("-?(translate-[xy])-","translate",fC),NS("-?(skew-[xy])-","skew",fC),LS("origin-(center|((top|bottom)(-(left|right))?)|left|right)","transformOrigin",aC),"(appearance)-",NS("(columns)-"),"(columns)-(\\d+)","(break-(?:before|after|inside))-",NS("(cursor)-"),"(cursor)-",LS("snap-(none)","scroll-snap-type"),LS("snap-(x|y|both)",(({1:e})=>({...yC({"--tw-scroll-snap-strictness":"proximity"}),"scroll-snap-type":e+" var(--tw-scroll-snap-strictness)"}))),LS("snap-(mandatory|proximity)","--tw-scroll-snap-strictness"),LS("snap-(?:(start|end|center)|align-(none))","scroll-snap-align"),LS("snap-(normal|always)","scroll-snap-stop"),LS("scroll-(auto|smooth)","scroll-behavior"),NS("scroll-p([xytrbl])?(?:$|-)","padding",dC("scroll-padding")),NS("-?scroll-m([xytrbl])?(?:$|-)","scroll-margin",dC("scroll-margin")),LS("touch-(auto|none|manipulation)","touch-action"),LS("touch-(pinch-zoom|pan-(?:(x|left|right)|(y|up|down)))",(({1:e,2:t,3:n})=>({...yC({"--tw-pan-x":"var(--tw-empty,/*!*/ /*!*/)","--tw-pan-y":"var(--tw-empty,/*!*/ /*!*/)","--tw-pinch-zoom":"var(--tw-empty,/*!*/ /*!*/)","--tw-touch-action":"var(--tw-pan-x) var(--tw-pan-y) var(--tw-pinch-zoom)"}),[`--tw-${t?"pan-x":n?"pan-y":e}`]:e,"touch-action":"var(--tw-touch-action)"}))),LS("outline-none",{outline:"2px solid transparent","outline-offset":"2px"}),LS("outline",{outlineStyle:"solid"}),LS("outline-(dashed|dotted|double)","outlineStyle"),NS("-?(outline-offset)-"),VS("outline-",{opacityVariable:!1,opacitySection:"opacity"}),NS("outline-","outlineWidth"),"(pointer-events)-",NS("(will-change)-"),"(will-change)-",["resize(?:-(none|x|y))?","resize",({1:e})=>({x:"horizontal",y:"vertical"}[e]||e||"both")],LS("select-(none|text|all|auto)","userSelect"),VS("fill-",{section:"fill",opacityVariable:!1,opacitySection:"opacity"}),VS("stroke-",{section:"stroke",opacityVariable:!1,opacitySection:"opacity"}),NS("stroke-","strokeWidth"),LS("sr-only",{position:"absolute",width:"1px",height:"1px",padding:"0",margin:"-1px",overflow:"hidden",whiteSpace:"nowrap",clip:"rect(0,0,0,0)",borderWidth:"0"}),LS("not-sr-only",{position:"static",width:"auto",height:"auto",padding:"0",margin:"0",overflow:"visible",whiteSpace:"normal",clip:"auto"})];function aC(e){return("string"==typeof e?e:e[1]).replace(/-/g," ").trim()}function sC(e){return("string"==typeof e?e:e[1]).replace("col","column")}function lC(e,t="-"){let n=[];for(let t of e)n.push({t:"top",r:"right",b:"bottom",l:"left"}[t]);return n.join(t)}function cC(e){return e&&""+(e._||e)}function uC({$$:e}){return({r:"flex-","":"flex-",w:"space-",u:"space-",n:"space-"}[e[3]||""]||"")+e}function dC(e,t=""){return({1:n,_:r})=>{let o={x:"lr",y:"tb"}[n]||n+n;return o?{..._S(e+"-"+lC(o[0])+t,r),..._S(e+"-"+lC(o[1])+t,r)}:_S(e+t,r)}}function pC(e=""){let t=["blur","brightness","contrast","grayscale","hue-rotate","invert",e&&"opacity","saturate","sepia",!e&&"drop-shadow"].filter(Boolean),n={};for(let r of t)n[`--tw-${e}${r}`]="var(--tw-empty,/*!*/ /*!*/)";return n={...yC(n),[`${e}filter`]:t.map((t=>`var(--tw-${e}${t})`)).join(" ")},[`(${e}filter)-(none)`,LS(`${e}filter`,n),...t.map((t=>NS(`${"h"==t[0]?"-?":""}(${e}${t})(?:$|-)`,t,(({1:e,_:r})=>({[`--tw-${e}`]:rS(r).map((e=>`${t}(${e})`)).join(" "),...n})))))]}function fC({1:e,_:t}){return{["--tw-"+e]:t,...mC()}}function mC(){return{...yC({"--tw-translate-x":"0","--tw-translate-y":"0","--tw-rotate":"0","--tw-skew-x":"0","--tw-skew-y":"0","--tw-scale-x":"1","--tw-scale-y":"1","--tw-transform":hC()}),transform:"var(--tw-transform)"}}function hC(e){return[e?"translate3d(var(--tw-translate-x),var(--tw-translate-y),0)":"translateX(var(--tw-translate-x)) translateY(var(--tw-translate-y))","rotate(var(--tw-rotate))","skewX(var(--tw-skew-x))","skewY(var(--tw-skew-y))","scaleX(var(--tw-scale-x))","scaleY(var(--tw-scale-y))"].join(" ")}function gC({1:e,2:t}){return`${e} ${t} / ${e} ${t}`}function vC({1:e}){return`repeat(${e},minmax(0,1fr))`}function yC(e){return{"@layer defaults":{"*,::before,::after":e,"::backdrop":e}}}let bC=[["sticky","@supports ((position: -webkit-sticky) or (position:sticky))"],["motion-reduce","@media (prefers-reduced-motion:reduce)"],["motion-safe","@media (prefers-reduced-motion:no-preference)"],["print","@media print"],["(portrait|landscape)",({1:e})=>`@media (orientation:${e})`],["contrast-(more|less)",({1:e})=>`@media (prefers-contrast:${e})`],["(first-(letter|line)|placeholder|backdrop|before|after)",({1:e})=>`&::${e}`],["(marker|selection)",({1:e})=>`& *::${e},&::${e}`],["file","&::file-selector-button"],["(first|last|only)",({1:e})=>`&:${e}-child`],["even","&:nth-child(2n)"],["odd","&:nth-child(odd)"],["open","&[open]"],["(aria|data)-",({1:e,$$:t},n)=>t&&`&[${e}-${n.theme(e,t)||HS(t,"",n)||`${t}="true"`}]`],["((group|peer)(~[^-[]+)?)(-\\[(.+)]|[-[].+?)(\\/.+)?",({2:e,3:t="",4:n,5:r="",6:o=t},{e:i,h:a,v:s})=>{let l=BS(r)||("["==n[0]?n:s(n.slice(1)));return`${(l.includes("&")?l:"&"+l).replace(/&/g,`:merge(.${i(a(e+o))})`)}${"p"==e[0]?"~":" "}&`}],["(ltr|rtl)",({1:e})=>`[dir="${e}"] &`],["supports-",({$$:e},t)=>{if(e&&(e=t.theme("supports",e)||HS(e,"",t)),e)return e.includes(":")||(e+=":var(--tw)"),/^\w*\s*\(/.test(e)||(e=`(${e})`),`@supports ${e.replace(/\b(and|or|not)\b/g," $1 ").trim()}`}],["max-",({$$:e},t)=>{if(e&&(e=t.theme("screens",e)||HS(e,"",t)),"string"==typeof e)return`@media not all and (min-width:${e})`}],["min-",({$$:e},t)=>(e&&(e=HS(e,"",t)),e&&`@media (min-width:${e})`)],[/^\[(.+)]$/,({1:e})=>/[&@]/.test(e)&&BS(e).replace(/[}]+$/,"").split("{")]];let $C={__proto__:null,slate:{50:"#f8fafc",100:"#f1f5f9",200:"#e2e8f0",300:"#cbd5e1",400:"#94a3b8",500:"#64748b",600:"#475569",700:"#334155",800:"#1e293b",900:"#0f172a"},gray:{50:"#f9fafb",100:"#f3f4f6",200:"#e5e7eb",300:"#d1d5db",400:"#9ca3af",500:"#6b7280",600:"#4b5563",700:"#374151",800:"#1f2937",900:"#111827"},zinc:{50:"#fafafa",100:"#f4f4f5",200:"#e4e4e7",300:"#d4d4d8",400:"#a1a1aa",500:"#71717a",600:"#52525b",700:"#3f3f46",800:"#27272a",900:"#18181b"},neutral:{50:"#fafafa",100:"#f5f5f5",200:"#e5e5e5",300:"#d4d4d4",400:"#a3a3a3",500:"#737373",600:"#525252",700:"#404040",800:"#262626",900:"#171717"},stone:{50:"#fafaf9",100:"#f5f5f4",200:"#e7e5e4",300:"#d6d3d1",400:"#a8a29e",500:"#78716c",600:"#57534e",700:"#44403c",800:"#292524",900:"#1c1917"},red:{50:"#fef2f2",100:"#fee2e2",200:"#fecaca",300:"#fca5a5",400:"#f87171",500:"#ef4444",600:"#dc2626",700:"#b91c1c",800:"#991b1b",900:"#7f1d1d"},orange:{50:"#fff7ed",100:"#ffedd5",200:"#fed7aa",300:"#fdba74",400:"#fb923c",500:"#f97316",600:"#ea580c",700:"#c2410c",800:"#9a3412",900:"#7c2d12"},amber:{50:"#fffbeb",100:"#fef3c7",200:"#fde68a",300:"#fcd34d",400:"#fbbf24",500:"#f59e0b",600:"#d97706",700:"#b45309",800:"#92400e",900:"#78350f"},yellow:{50:"#fefce8",100:"#fef9c3",200:"#fef08a",300:"#fde047",400:"#facc15",500:"#eab308",600:"#ca8a04",700:"#a16207",800:"#854d0e",900:"#713f12"},lime:{50:"#f7fee7",100:"#ecfccb",200:"#d9f99d",300:"#bef264",400:"#a3e635",500:"#84cc16",600:"#65a30d",700:"#4d7c0f",800:"#3f6212",900:"#365314"},green:{50:"#f0fdf4",100:"#dcfce7",200:"#bbf7d0",300:"#86efac",400:"#4ade80",500:"#22c55e",600:"#16a34a",700:"#15803d",800:"#166534",900:"#14532d"},emerald:{50:"#ecfdf5",100:"#d1fae5",200:"#a7f3d0",300:"#6ee7b7",400:"#34d399",500:"#10b981",600:"#059669",700:"#047857",800:"#065f46",900:"#064e3b"},teal:{50:"#f0fdfa",100:"#ccfbf1",200:"#99f6e4",300:"#5eead4",400:"#2dd4bf",500:"#14b8a6",600:"#0d9488",700:"#0f766e",800:"#115e59",900:"#134e4a"},cyan:{50:"#ecfeff",100:"#cffafe",200:"#a5f3fc",300:"#67e8f9",400:"#22d3ee",500:"#06b6d4",600:"#0891b2",700:"#0e7490",800:"#155e75",900:"#164e63"},sky:{50:"#f0f9ff",100:"#e0f2fe",200:"#bae6fd",300:"#7dd3fc",400:"#38bdf8",500:"#0ea5e9",600:"#0284c7",700:"#0369a1",800:"#075985",900:"#0c4a6e"},blue:{50:"#eff6ff",100:"#dbeafe",200:"#bfdbfe",300:"#93c5fd",400:"#60a5fa",500:"#3b82f6",600:"#2563eb",700:"#1d4ed8",800:"#1e40af",900:"#1e3a8a"},indigo:{50:"#eef2ff",100:"#e0e7ff",200:"#c7d2fe",300:"#a5b4fc",400:"#818cf8",500:"#6366f1",600:"#4f46e5",700:"#4338ca",800:"#3730a3",900:"#312e81"},violet:{50:"#f5f3ff",100:"#ede9fe",200:"#ddd6fe",300:"#c4b5fd",400:"#a78bfa",500:"#8b5cf6",600:"#7c3aed",700:"#6d28d9",800:"#5b21b6",900:"#4c1d95"},purple:{50:"#faf5ff",100:"#f3e8ff",200:"#e9d5ff",300:"#d8b4fe",400:"#c084fc",500:"#a855f7",600:"#9333ea",700:"#7e22ce",800:"#6b21a8",900:"#581c87"},fuchsia:{50:"#fdf4ff",100:"#fae8ff",200:"#f5d0fe",300:"#f0abfc",400:"#e879f9",500:"#d946ef",600:"#c026d3",700:"#a21caf",800:"#86198f",900:"#701a75"},pink:{50:"#fdf2f8",100:"#fce7f3",200:"#fbcfe8",300:"#f9a8d4",400:"#f472b6",500:"#ec4899",600:"#db2777",700:"#be185d",800:"#9d174d",900:"#831843"},rose:{50:"#fff1f2",100:"#ffe4e6",200:"#fecdd3",300:"#fda4af",400:"#fb7185",500:"#f43f5e",600:"#e11d48",700:"#be123c",800:"#9f1239",900:"#881337"}};var xC={},wC={};!function(e){function t(e){return Array.isArray(e)?e.map((e=>t(e))):"object"==typeof e&&null!==e?Object.fromEntries(Object.entries(e).map((([e,n])=>[e,t(n)]))):e}Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"cloneDeep",{enumerable:!0,get:function(){return t}})}(wC);var SC={content:[],presets:[],darkMode:"media",theme:{accentColor:({theme:e})=>({...e("colors"),auto:"auto"}),animation:{none:"none",spin:"spin 1s linear infinite",ping:"ping 1s cubic-bezier(0, 0, 0.2, 1) infinite",pulse:"pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite",bounce:"bounce 1s infinite"},aria:{busy:'busy="true"',checked:'checked="true"',disabled:'disabled="true"',expanded:'expanded="true"',hidden:'hidden="true"',pressed:'pressed="true"',readonly:'readonly="true"',required:'required="true"',selected:'selected="true"'},aspectRatio:{auto:"auto",square:"1 / 1",video:"16 / 9"},backdropBlur:({theme:e})=>e("blur"),backdropBrightness:({theme:e})=>e("brightness"),backdropContrast:({theme:e})=>e("contrast"),backdropGrayscale:({theme:e})=>e("grayscale"),backdropHueRotate:({theme:e})=>e("hueRotate"),backdropInvert:({theme:e})=>e("invert"),backdropOpacity:({theme:e})=>e("opacity"),backdropSaturate:({theme:e})=>e("saturate"),backdropSepia:({theme:e})=>e("sepia"),backgroundColor:({theme:e})=>e("colors"),backgroundImage:{none:"none","gradient-to-t":"linear-gradient(to top, var(--tw-gradient-stops))","gradient-to-tr":"linear-gradient(to top right, var(--tw-gradient-stops))","gradient-to-r":"linear-gradient(to right, var(--tw-gradient-stops))","gradient-to-br":"linear-gradient(to bottom right, var(--tw-gradient-stops))","gradient-to-b":"linear-gradient(to bottom, var(--tw-gradient-stops))","gradient-to-bl":"linear-gradient(to bottom left, var(--tw-gradient-stops))","gradient-to-l":"linear-gradient(to left, var(--tw-gradient-stops))","gradient-to-tl":"linear-gradient(to top left, var(--tw-gradient-stops))"},backgroundOpacity:({theme:e})=>e("opacity"),backgroundPosition:{bottom:"bottom",center:"center",left:"left","left-bottom":"left bottom","left-top":"left top",right:"right","right-bottom":"right bottom","right-top":"right top",top:"top"},backgroundSize:{auto:"auto",cover:"cover",contain:"contain"},blur:{0:"0",none:"0",sm:"4px",DEFAULT:"8px",md:"12px",lg:"16px",xl:"24px","2xl":"40px","3xl":"64px"},borderColor:({theme:e})=>({...e("colors"),DEFAULT:e("colors.gray.200","currentColor")}),borderOpacity:({theme:e})=>e("opacity"),borderRadius:{none:"0px",sm:"0.125rem",DEFAULT:"0.25rem",md:"0.375rem",lg:"0.5rem",xl:"0.75rem","2xl":"1rem","3xl":"1.5rem",full:"9999px"},borderSpacing:({theme:e})=>({...e("spacing")}),borderWidth:{DEFAULT:"1px",0:"0px",2:"2px",4:"4px",8:"8px"},boxShadow:{sm:"0 1px 2px 0 rgb(0 0 0 / 0.05)",DEFAULT:"0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)",md:"0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)",lg:"0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)",xl:"0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)","2xl":"0 25px 50px -12px rgb(0 0 0 / 0.25)",inner:"inset 0 2px 4px 0 rgb(0 0 0 / 0.05)",none:"none"},boxShadowColor:({theme:e})=>e("colors"),brightness:{0:"0",50:".5",75:".75",90:".9",95:".95",100:"1",105:"1.05",110:"1.1",125:"1.25",150:"1.5",200:"2"},caretColor:({theme:e})=>e("colors"),colors:({colors:e})=>({inherit:e.inherit,current:e.current,transparent:e.transparent,black:e.black,white:e.white,slate:e.slate,gray:e.gray,zinc:e.zinc,neutral:e.neutral,stone:e.stone,red:e.red,orange:e.orange,amber:e.amber,yellow:e.yellow,lime:e.lime,green:e.green,emerald:e.emerald,teal:e.teal,cyan:e.cyan,sky:e.sky,blue:e.blue,indigo:e.indigo,violet:e.violet,purple:e.purple,fuchsia:e.fuchsia,pink:e.pink,rose:e.rose}),columns:{auto:"auto",1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",10:"10",11:"11",12:"12","3xs":"16rem","2xs":"18rem",xs:"20rem",sm:"24rem",md:"28rem",lg:"32rem",xl:"36rem","2xl":"42rem","3xl":"48rem","4xl":"56rem","5xl":"64rem","6xl":"72rem","7xl":"80rem"},container:{},content:{none:"none"},contrast:{0:"0",50:".5",75:".75",100:"1",125:"1.25",150:"1.5",200:"2"},cursor:{auto:"auto",default:"default",pointer:"pointer",wait:"wait",text:"text",move:"move",help:"help","not-allowed":"not-allowed",none:"none","context-menu":"context-menu",progress:"progress",cell:"cell",crosshair:"crosshair","vertical-text":"vertical-text",alias:"alias",copy:"copy","no-drop":"no-drop",grab:"grab",grabbing:"grabbing","all-scroll":"all-scroll","col-resize":"col-resize","row-resize":"row-resize","n-resize":"n-resize","e-resize":"e-resize","s-resize":"s-resize","w-resize":"w-resize","ne-resize":"ne-resize","nw-resize":"nw-resize","se-resize":"se-resize","sw-resize":"sw-resize","ew-resize":"ew-resize","ns-resize":"ns-resize","nesw-resize":"nesw-resize","nwse-resize":"nwse-resize","zoom-in":"zoom-in","zoom-out":"zoom-out"},divideColor:({theme:e})=>e("borderColor"),divideOpacity:({theme:e})=>e("borderOpacity"),divideWidth:({theme:e})=>e("borderWidth"),dropShadow:{sm:"0 1px 1px rgb(0 0 0 / 0.05)",DEFAULT:["0 1px 2px rgb(0 0 0 / 0.1)","0 1px 1px rgb(0 0 0 / 0.06)"],md:["0 4px 3px rgb(0 0 0 / 0.07)","0 2px 2px rgb(0 0 0 / 0.06)"],lg:["0 10px 8px rgb(0 0 0 / 0.04)","0 4px 3px rgb(0 0 0 / 0.1)"],xl:["0 20px 13px rgb(0 0 0 / 0.03)","0 8px 5px rgb(0 0 0 / 0.08)"],"2xl":"0 25px 25px rgb(0 0 0 / 0.15)",none:"0 0 #0000"},fill:({theme:e})=>({none:"none",...e("colors")}),flex:{1:"1 1 0%",auto:"1 1 auto",initial:"0 1 auto",none:"none"},flexBasis:({theme:e})=>({auto:"auto",...e("spacing"),"1/2":"50%","1/3":"33.333333%","2/3":"66.666667%","1/4":"25%","2/4":"50%","3/4":"75%","1/5":"20%","2/5":"40%","3/5":"60%","4/5":"80%","1/6":"16.666667%","2/6":"33.333333%","3/6":"50%","4/6":"66.666667%","5/6":"83.333333%","1/12":"8.333333%","2/12":"16.666667%","3/12":"25%","4/12":"33.333333%","5/12":"41.666667%","6/12":"50%","7/12":"58.333333%","8/12":"66.666667%","9/12":"75%","10/12":"83.333333%","11/12":"91.666667%",full:"100%"}),flexGrow:{0:"0",DEFAULT:"1"},flexShrink:{0:"0",DEFAULT:"1"},fontFamily:{sans:["ui-sans-serif","system-ui","sans-serif",'"Apple Color Emoji"','"Segoe UI Emoji"','"Segoe UI Symbol"','"Noto Color Emoji"'],serif:["ui-serif","Georgia","Cambria",'"Times New Roman"',"Times","serif"],mono:["ui-monospace","SFMono-Regular","Menlo","Monaco","Consolas",'"Liberation Mono"','"Courier New"',"monospace"]},fontSize:{xs:["0.75rem",{lineHeight:"1rem"}],sm:["0.875rem",{lineHeight:"1.25rem"}],base:["1rem",{lineHeight:"1.5rem"}],lg:["1.125rem",{lineHeight:"1.75rem"}],xl:["1.25rem",{lineHeight:"1.75rem"}],"2xl":["1.5rem",{lineHeight:"2rem"}],"3xl":["1.875rem",{lineHeight:"2.25rem"}],"4xl":["2.25rem",{lineHeight:"2.5rem"}],"5xl":["3rem",{lineHeight:"1"}],"6xl":["3.75rem",{lineHeight:"1"}],"7xl":["4.5rem",{lineHeight:"1"}],"8xl":["6rem",{lineHeight:"1"}],"9xl":["8rem",{lineHeight:"1"}]},fontWeight:{thin:"100",extralight:"200",light:"300",normal:"400",medium:"500",semibold:"600",bold:"700",extrabold:"800",black:"900"},gap:({theme:e})=>e("spacing"),gradientColorStops:({theme:e})=>e("colors"),gradientColorStopPositions:{"0%":"0%","5%":"5%","10%":"10%","15%":"15%","20%":"20%","25%":"25%","30%":"30%","35%":"35%","40%":"40%","45%":"45%","50%":"50%","55%":"55%","60%":"60%","65%":"65%","70%":"70%","75%":"75%","80%":"80%","85%":"85%","90%":"90%","95%":"95%","100%":"100%"},grayscale:{0:"0",DEFAULT:"100%"},gridAutoColumns:{auto:"auto",min:"min-content",max:"max-content",fr:"minmax(0, 1fr)"},gridAutoRows:{auto:"auto",min:"min-content",max:"max-content",fr:"minmax(0, 1fr)"},gridColumn:{auto:"auto","span-1":"span 1 / span 1","span-2":"span 2 / span 2","span-3":"span 3 / span 3","span-4":"span 4 / span 4","span-5":"span 5 / span 5","span-6":"span 6 / span 6","span-7":"span 7 / span 7","span-8":"span 8 / span 8","span-9":"span 9 / span 9","span-10":"span 10 / span 10","span-11":"span 11 / span 11","span-12":"span 12 / span 12","span-full":"1 / -1"},gridColumnEnd:{auto:"auto",1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",10:"10",11:"11",12:"12",13:"13"},gridColumnStart:{auto:"auto",1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",10:"10",11:"11",12:"12",13:"13"},gridRow:{auto:"auto","span-1":"span 1 / span 1","span-2":"span 2 / span 2","span-3":"span 3 / span 3","span-4":"span 4 / span 4","span-5":"span 5 / span 5","span-6":"span 6 / span 6","span-7":"span 7 / span 7","span-8":"span 8 / span 8","span-9":"span 9 / span 9","span-10":"span 10 / span 10","span-11":"span 11 / span 11","span-12":"span 12 / span 12","span-full":"1 / -1"},gridRowEnd:{auto:"auto",1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",10:"10",11:"11",12:"12",13:"13"},gridRowStart:{auto:"auto",1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",10:"10",11:"11",12:"12",13:"13"},gridTemplateColumns:{none:"none",subgrid:"subgrid",1:"repeat(1, minmax(0, 1fr))",2:"repeat(2, minmax(0, 1fr))",3:"repeat(3, minmax(0, 1fr))",4:"repeat(4, minmax(0, 1fr))",5:"repeat(5, minmax(0, 1fr))",6:"repeat(6, minmax(0, 1fr))",7:"repeat(7, minmax(0, 1fr))",8:"repeat(8, minmax(0, 1fr))",9:"repeat(9, minmax(0, 1fr))",10:"repeat(10, minmax(0, 1fr))",11:"repeat(11, minmax(0, 1fr))",12:"repeat(12, minmax(0, 1fr))"},gridTemplateRows:{none:"none",subgrid:"subgrid",1:"repeat(1, minmax(0, 1fr))",2:"repeat(2, minmax(0, 1fr))",3:"repeat(3, minmax(0, 1fr))",4:"repeat(4, minmax(0, 1fr))",5:"repeat(5, minmax(0, 1fr))",6:"repeat(6, minmax(0, 1fr))",7:"repeat(7, minmax(0, 1fr))",8:"repeat(8, minmax(0, 1fr))",9:"repeat(9, minmax(0, 1fr))",10:"repeat(10, minmax(0, 1fr))",11:"repeat(11, minmax(0, 1fr))",12:"repeat(12, minmax(0, 1fr))"},height:({theme:e})=>({auto:"auto",...e("spacing"),"1/2":"50%","1/3":"33.333333%","2/3":"66.666667%","1/4":"25%","2/4":"50%","3/4":"75%","1/5":"20%","2/5":"40%","3/5":"60%","4/5":"80%","1/6":"16.666667%","2/6":"33.333333%","3/6":"50%","4/6":"66.666667%","5/6":"83.333333%",full:"100%",screen:"100vh",svh:"100svh",lvh:"100lvh",dvh:"100dvh",min:"min-content",max:"max-content",fit:"fit-content"}),hueRotate:{0:"0deg",15:"15deg",30:"30deg",60:"60deg",90:"90deg",180:"180deg"},inset:({theme:e})=>({auto:"auto",...e("spacing"),"1/2":"50%","1/3":"33.333333%","2/3":"66.666667%","1/4":"25%","2/4":"50%","3/4":"75%",full:"100%"}),invert:{0:"0",DEFAULT:"100%"},keyframes:{spin:{to:{transform:"rotate(360deg)"}},ping:{"75%, 100%":{transform:"scale(2)",opacity:"0"}},pulse:{"50%":{opacity:".5"}},bounce:{"0%, 100%":{transform:"translateY(-25%)",animationTimingFunction:"cubic-bezier(0.8,0,1,1)"},"50%":{transform:"none",animationTimingFunction:"cubic-bezier(0,0,0.2,1)"}}},letterSpacing:{tighter:"-0.05em",tight:"-0.025em",normal:"0em",wide:"0.025em",wider:"0.05em",widest:"0.1em"},lineHeight:{none:"1",tight:"1.25",snug:"1.375",normal:"1.5",relaxed:"1.625",loose:"2",3:".75rem",4:"1rem",5:"1.25rem",6:"1.5rem",7:"1.75rem",8:"2rem",9:"2.25rem",10:"2.5rem"},listStyleType:{none:"none",disc:"disc",decimal:"decimal"},listStyleImage:{none:"none"},margin:({theme:e})=>({auto:"auto",...e("spacing")}),lineClamp:{1:"1",2:"2",3:"3",4:"4",5:"5",6:"6"},maxHeight:({theme:e})=>({...e("spacing"),none:"none",full:"100%",screen:"100vh",svh:"100svh",lvh:"100lvh",dvh:"100dvh",min:"min-content",max:"max-content",fit:"fit-content"}),maxWidth:({theme:e,breakpoints:t})=>({...e("spacing"),none:"none",xs:"20rem",sm:"24rem",md:"28rem",lg:"32rem",xl:"36rem","2xl":"42rem","3xl":"48rem","4xl":"56rem","5xl":"64rem","6xl":"72rem","7xl":"80rem",full:"100%",min:"min-content",max:"max-content",fit:"fit-content",prose:"65ch",...t(e("screens"))}),minHeight:({theme:e})=>({...e("spacing"),full:"100%",screen:"100vh",svh:"100svh",lvh:"100lvh",dvh:"100dvh",min:"min-content",max:"max-content",fit:"fit-content"}),minWidth:({theme:e})=>({...e("spacing"),full:"100%",min:"min-content",max:"max-content",fit:"fit-content"}),objectPosition:{bottom:"bottom",center:"center",left:"left","left-bottom":"left bottom","left-top":"left top",right:"right","right-bottom":"right bottom","right-top":"right top",top:"top"},opacity:{0:"0",5:"0.05",10:"0.1",15:"0.15",20:"0.2",25:"0.25",30:"0.3",35:"0.35",40:"0.4",45:"0.45",50:"0.5",55:"0.55",60:"0.6",65:"0.65",70:"0.7",75:"0.75",80:"0.8",85:"0.85",90:"0.9",95:"0.95",100:"1"},order:{first:"-9999",last:"9999",none:"0",1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",10:"10",11:"11",12:"12"},outlineColor:({theme:e})=>e("colors"),outlineOffset:{0:"0px",1:"1px",2:"2px",4:"4px",8:"8px"},outlineWidth:{0:"0px",1:"1px",2:"2px",4:"4px",8:"8px"},padding:({theme:e})=>e("spacing"),placeholderColor:({theme:e})=>e("colors"),placeholderOpacity:({theme:e})=>e("opacity"),ringColor:({theme:e})=>({DEFAULT:e("colors.blue.500","#3b82f6"),...e("colors")}),ringOffsetColor:({theme:e})=>e("colors"),ringOffsetWidth:{0:"0px",1:"1px",2:"2px",4:"4px",8:"8px"},ringOpacity:({theme:e})=>({DEFAULT:"0.5",...e("opacity")}),ringWidth:{DEFAULT:"3px",0:"0px",1:"1px",2:"2px",4:"4px",8:"8px"},rotate:{0:"0deg",1:"1deg",2:"2deg",3:"3deg",6:"6deg",12:"12deg",45:"45deg",90:"90deg",180:"180deg"},saturate:{0:"0",50:".5",100:"1",150:"1.5",200:"2"},scale:{0:"0",50:".5",75:".75",90:".9",95:".95",100:"1",105:"1.05",110:"1.1",125:"1.25",150:"1.5"},screens:{sm:"640px",md:"768px",lg:"1024px",xl:"1280px","2xl":"1536px"},scrollMargin:({theme:e})=>({...e("spacing")}),scrollPadding:({theme:e})=>e("spacing"),sepia:{0:"0",DEFAULT:"100%"},skew:{0:"0deg",1:"1deg",2:"2deg",3:"3deg",6:"6deg",12:"12deg"},space:({theme:e})=>({...e("spacing")}),spacing:{px:"1px",0:"0px",.5:"0.125rem",1:"0.25rem",1.5:"0.375rem",2:"0.5rem",2.5:"0.625rem",3:"0.75rem",3.5:"0.875rem",4:"1rem",5:"1.25rem",6:"1.5rem",7:"1.75rem",8:"2rem",9:"2.25rem",10:"2.5rem",11:"2.75rem",12:"3rem",14:"3.5rem",16:"4rem",20:"5rem",24:"6rem",28:"7rem",32:"8rem",36:"9rem",40:"10rem",44:"11rem",48:"12rem",52:"13rem",56:"14rem",60:"15rem",64:"16rem",72:"18rem",80:"20rem",96:"24rem"},stroke:({theme:e})=>({none:"none",...e("colors")}),strokeWidth:{0:"0",1:"1",2:"2"},supports:{},data:{},textColor:({theme:e})=>e("colors"),textDecorationColor:({theme:e})=>e("colors"),textDecorationThickness:{auto:"auto","from-font":"from-font",0:"0px",1:"1px",2:"2px",4:"4px",8:"8px"},textIndent:({theme:e})=>({...e("spacing")}),textOpacity:({theme:e})=>e("opacity"),textUnderlineOffset:{auto:"auto",0:"0px",1:"1px",2:"2px",4:"4px",8:"8px"},transformOrigin:{center:"center",top:"top","top-right":"top right",right:"right","bottom-right":"bottom right",bottom:"bottom","bottom-left":"bottom left",left:"left","top-left":"top left"},transitionDelay:{0:"0s",75:"75ms",100:"100ms",150:"150ms",200:"200ms",300:"300ms",500:"500ms",700:"700ms",1e3:"1000ms"},transitionDuration:{DEFAULT:"150ms",0:"0s",75:"75ms",100:"100ms",150:"150ms",200:"200ms",300:"300ms",500:"500ms",700:"700ms",1e3:"1000ms"},transitionProperty:{none:"none",all:"all",DEFAULT:"color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter",colors:"color, background-color, border-color, text-decoration-color, fill, stroke",opacity:"opacity",shadow:"box-shadow",transform:"transform"},transitionTimingFunction:{DEFAULT:"cubic-bezier(0.4, 0, 0.2, 1)",linear:"linear",in:"cubic-bezier(0.4, 0, 1, 1)",out:"cubic-bezier(0, 0, 0.2, 1)","in-out":"cubic-bezier(0.4, 0, 0.2, 1)"},translate:({theme:e})=>({...e("spacing"),"1/2":"50%","1/3":"33.333333%","2/3":"66.666667%","1/4":"25%","2/4":"50%","3/4":"75%",full:"100%"}),size:({theme:e})=>({auto:"auto",...e("spacing"),"1/2":"50%","1/3":"33.333333%","2/3":"66.666667%","1/4":"25%","2/4":"50%","3/4":"75%","1/5":"20%","2/5":"40%","3/5":"60%","4/5":"80%","1/6":"16.666667%","2/6":"33.333333%","3/6":"50%","4/6":"66.666667%","5/6":"83.333333%","1/12":"8.333333%","2/12":"16.666667%","3/12":"25%","4/12":"33.333333%","5/12":"41.666667%","6/12":"50%","7/12":"58.333333%","8/12":"66.666667%","9/12":"75%","10/12":"83.333333%","11/12":"91.666667%",full:"100%",min:"min-content",max:"max-content",fit:"fit-content"}),width:({theme:e})=>({auto:"auto",...e("spacing"),"1/2":"50%","1/3":"33.333333%","2/3":"66.666667%","1/4":"25%","2/4":"50%","3/4":"75%","1/5":"20%","2/5":"40%","3/5":"60%","4/5":"80%","1/6":"16.666667%","2/6":"33.333333%","3/6":"50%","4/6":"66.666667%","5/6":"83.333333%","1/12":"8.333333%","2/12":"16.666667%","3/12":"25%","4/12":"33.333333%","5/12":"41.666667%","6/12":"50%","7/12":"58.333333%","8/12":"66.666667%","9/12":"75%","10/12":"83.333333%","11/12":"91.666667%",full:"100%",screen:"100vw",svw:"100svw",lvw:"100lvw",dvw:"100dvw",min:"min-content",max:"max-content",fit:"fit-content"}),willChange:{auto:"auto",scroll:"scroll-position",contents:"contents",transform:"transform"},zIndex:{auto:"auto",0:"0",10:"10",20:"20",30:"30",40:"40",50:"50"}},plugins:[]};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return n}});function t(e){return e&&e.__esModule?e:{default:e}}const n=(0,wC.cloneDeep)(t(SC).default.theme)}(xC);const CC={darkMode:["class"],content:["./src/**/*.{html,js,svelte,ts}"],safelist:["dark"],theme:{container:{center:!0,padding:"2rem",screens:{"2xl":"1400px"}},extend:{colors:{red:"hsl(var(--red) / <alpha-value>)",border:"hsl(var(--border) / <alpha-value>)",input:"hsl(var(--input) / <alpha-value>)",ring:"hsl(var(--ring) / <alpha-value>)",background:"hsl(var(--background) / <alpha-value>)",foreground:"hsl(var(--foreground) / <alpha-value>)",primary:{DEFAULT:"hsl(var(--primary) / <alpha-value>)",foreground:"hsl(var(--primary-foreground) / <alpha-value>)"},secondary:{DEFAULT:"hsl(var(--secondary) / <alpha-value>)",foreground:"hsl(var(--secondary-foreground) / <alpha-value>)"},destructive:{DEFAULT:"hsl(var(--destructive) / <alpha-value>)",foreground:"hsl(var(--destructive-foreground) / <alpha-value>)"},muted:{DEFAULT:"hsl(var(--muted) / <alpha-value>)",foreground:"hsl(var(--muted-foreground) / <alpha-value>)"},accent:{DEFAULT:"hsl(var(--accent) / <alpha-value>)",foreground:"hsl(var(--accent-foreground) / <alpha-value>)"},popover:{DEFAULT:"hsl(var(--popover) / <alpha-value>)",foreground:"hsl(var(--popover-foreground) / <alpha-value>)"},card:{DEFAULT:"hsl(var(--card) / <alpha-value>)",foreground:"hsl(var(--card-foreground) / <alpha-value>)"}},borderRadius:{lg:"var(--radius)",md:"calc(var(--radius) - 2px)",sm:"calc(var(--radius) - 4px)"},preflight:{"@import":"url('https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap')"},fontFamily:{sans:["Inter","InterVariable",...(xC.__esModule?xC:{default:xC}).default.fontFamily.sans]}}}},EC=function({disablePreflight:e}={}){return function({colors:e,disablePreflight:t}={}){return{preflight:t?void 0:oC,theme:{...QS,colors:{inherit:"inherit",current:"currentColor",transparent:"transparent",black:"#000",white:"#fff",...e}},variants:bC,rules:iC,finalize:e=>e.n&&e.d&&e.r.some((e=>/^&::(before|after)$/.test(e)))&&!/(^|;)content:/.test(e.d)?{...e,d:"content:var(--tw-content);"+e.d}:e}}({colors:$C,disablePreflight:e})}();EC.preflight["*"]={borderColor:"hsl(240 3.7% 15.9% / 1)"};var kC=IS({presets:[EC],darkMode:"class",...CC});!function(){if("undefined"!=typeof document&&!("adoptedStyleSheets"in document)){var e="ShadyCSS"in window&&!ShadyCSS.nativeShadow,t=document.implementation.createHTMLDocument(""),n=new WeakMap,r="object"==typeof DOMException?Error:DOMException,o=Object.defineProperty,i=Array.prototype.forEach,a=/@import.+?;?$/gm,s=CSSStyleSheet.prototype;s.replace=function(){return Promise.reject(new r("Can't call replace on non-constructed CSSStyleSheets."))},s.replaceSync=function(){throw new r("Failed to execute 'replaceSync' on 'CSSStyleSheet': Can't call replaceSync on non-constructed CSSStyleSheets.")};var l=new WeakMap,c=new WeakMap,u=new WeakMap,d=new WeakMap,p=M.prototype;p.replace=function(e){try{return this.replaceSync(e),Promise.resolve(this)}catch(e){return Promise.reject(e)}},p.replaceSync=function(e){if(k(this),"string"==typeof e){var t=this;l.get(t).textContent=function(e){var t=e.replace(a,"");return t!==e&&console.warn("@import rules are not allowed here. See https://github.com/WICG/construct-stylesheets/issues/119#issuecomment-588352418"),t.trim()}(e),d.set(t,[]),c.get(t).forEach((function(e){e.isConnected()&&E(t,C(t,e))}))}},o(p,"cssRules",{configurable:!0,enumerable:!0,get:function(){return k(this),l.get(this).sheet.cssRules}}),o(p,"media",{configurable:!0,enumerable:!0,get:function(){return k(this),l.get(this).sheet.media}}),["addRule","deleteRule","insertRule","removeRule"].forEach((function(e){p[e]=function(){var t=this;k(t);var n=arguments;d.get(t).push({method:e,args:n}),c.get(t).forEach((function(r){if(r.isConnected()){var o=C(t,r).sheet;o[e].apply(o,n)}}));var r=l.get(t).sheet;return r[e].apply(r,n)}})),o(M,Symbol.hasInstance,{configurable:!0,value:w});var f={childList:!0,subtree:!0},m=new WeakMap,h=new WeakMap,g=new WeakMap,v=new WeakMap;if(O.prototype={isConnected:function(){var e=h.get(this);return e instanceof Document?"loading"!==e.readyState:function(e){return"isConnected"in e?e.isConnected:document.contains(e)}(e.host)},connect:function(){var e=P(this);v.get(this).observe(e,f),g.get(this).length>0&&L(this),R(e,(function(e){A(e).connect()}))},disconnect:function(){v.get(this).disconnect()},update:function(e){var t=this,n=h.get(t)===document?"Document":"ShadowRoot";if(!Array.isArray(e))throw new TypeError("Failed to set the 'adoptedStyleSheets' property on "+n+": Iterator getter is not callable.");if(!e.every(w))throw new TypeError("Failed to set the 'adoptedStyleSheets' property on "+n+": Failed to convert value to 'CSSStyleSheet'");if(e.some(S))throw new TypeError("Failed to set the 'adoptedStyleSheets' property on "+n+": Can't adopt non-constructed stylesheets");t.sheets=e;var r,o,i=g.get(t),a=(r=e).filter((function(e,t){return r.indexOf(e)===t}));(o=a,i.filter((function(e){return-1===o.indexOf(e)}))).forEach((function(e){var n;(n=C(e,t)).parentNode.removeChild(n),function(e,t){u.get(e).delete(t),c.set(e,c.get(e).filter((function(e){return e!==t})))}(e,t)})),g.set(t,a),t.isConnected()&&a.length>0&&L(t)}},window.CSSStyleSheet=M,T(Document),"ShadowRoot"in window){T(ShadowRoot);var y=Element.prototype,b=y.attachShadow;y.attachShadow=function(e){var t=b.call(this,e);return"closed"===e.mode&&n.set(this,t),t}}var $=A(document);$.isConnected()?$.connect():document.addEventListener("DOMContentLoaded",$.connect.bind($))}function x(e){return e.shadowRoot||n.get(e)}function w(e){return"object"==typeof e&&(p.isPrototypeOf(e)||s.isPrototypeOf(e))}function S(e){return"object"==typeof e&&s.isPrototypeOf(e)}function C(e,t){return u.get(e).get(t)}function E(e,t){requestAnimationFrame((function(){t.textContent=l.get(e).textContent,d.get(e).forEach((function(e){return t.sheet[e.method].apply(t.sheet,e.args)}))}))}function k(e){if(!l.has(e))throw new TypeError("Illegal invocation")}function M(){var e=this,n=document.createElement("style");t.body.appendChild(n),l.set(e,n),c.set(e,[]),u.set(e,new WeakMap),d.set(e,[])}function A(e){var t=m.get(e);return t||(t=new O(e),m.set(e,t)),t}function T(e){o(e.prototype,"adoptedStyleSheets",{configurable:!0,enumerable:!0,get:function(){return A(this).sheets},set:function(e){A(this).update(e)}})}function R(e,t){for(var n=document.createNodeIterator(e,NodeFilter.SHOW_ELEMENT,(function(e){return x(e)?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_REJECT}),null,!1),r=void 0;r=n.nextNode();)t(x(r))}function P(e){var t=h.get(e);return t instanceof Document?t.body:t}function L(e){var t=document.createDocumentFragment(),n=g.get(e),r=v.get(e),o=P(e);r.disconnect(),n.forEach((function(n){t.appendChild(C(n,e)||function(e,t){var n=document.createElement("style");return u.get(e).set(t,n),c.get(e).push(t),n}(n,e))})),o.insertBefore(t,null),r.observe(o,f),n.forEach((function(t){E(t,C(t,e))}))}function O(t){var n=this;n.sheets=[],h.set(n,t),g.set(n,[]),v.set(n,new MutationObserver((function(t,r){document?t.forEach((function(t){e||i.call(t.addedNodes,(function(e){e instanceof Element&&R(e,(function(e){A(e).connect()}))})),i.call(t.removedNodes,(function(t){t instanceof Element&&(function(e,t){return t instanceof HTMLStyleElement&&g.get(e).some((function(t){return C(t,e)}))}(n,t)&&L(n),e||R(t,(function(e){A(e).disconnect()})))}))})):r.disconnect()})))}}();class MC extends HTMLElement{constructor(){super(),this.style.position="fixed",this.style.zIndex="9999",this.setAttribute(hd,"true");const e=this.attachShadow({mode:"open"}),t=KS(new CSSStyleSheet);e.adoptedStyleSheets=[t.target],XS(function(e,t){let n=IS(e),r=function({theme:e,darkMode:t,darkColor:n=iS,variants:r,rules:o,hash:i,stringify:a,ignorelist:s,finalize:l}){let c=new Map,u=new Map,d=new Map,p=new Map,f=YS(s,((e,t)=>t.test(e)));r.push(["dark",Array.isArray(t)||"class"==t?`${rS(t)[1]||".dark"} &`:"string"==typeof t&&"media"!=t?t:"@media (prefers-color-scheme:dark)"]);let m="function"==typeof i?e=>i(e,tS):i?tS:oS;m!==oS&&l.push((e=>({...e,n:e.n&&m(e.n),d:e.d?.replace(/--(tw(?:-[\w-]+)?)\b/g,((e,t)=>"--"+m(t).replace("#","")))})));let h={theme:function({extend:e={},...t}){let n={},r={get colors(){return o("colors")},theme:o,negative:()=>({}),breakpoints(e){let t={};for(let n in e)"string"==typeof e[n]&&(t["screen-"+n]=e[n]);return t}};return o;function o(r,a,s,l){if(r){if(({1:r,2:l}=/^(\S+?)(?:\s*\/\s*([^/]+))?$/.exec(r)||[,r]),/[.[]/.test(r)){let e=[];r.replace(/\[([^\]]+)\]|([^.[]+)/g,((t,n,r=n)=>e.push(r))),r=e.shift(),s=a,a=e.join("-")}let c=n[r]||Object.assign(Object.assign(n[r]={},i(t,r)),i(e,r));if(null==a)return c;a||(a="DEFAULT");let u=c[a]??a.split("-").reduce(((e,t)=>e?.[t]),c)??s;return l?xS(u,{opacityValue:SS(l,o)}):u}let c={};for(let n of[...Object.keys(t),...Object.keys(e)])c[n]=o(n);return c}function i(e,t){let n=e[t];return"function"==typeof n&&(n=n(r)),n&&/color|fill|stroke/i.test(t)?function e(t,n=[]){let r={};for(let o in t){let i=t[o],a=[...n,o];r[a.join("-")]=i,"DEFAULT"==o&&(a=n,r[n.join("-")]=i),"object"==typeof i&&Object.assign(r,e(i,a))}return r}(n):n}}(e),e:eS,h:m,s:(e,t)=>a(e,t,h),d:(e,t,r)=>n(e,t,h,r),v:e=>(c.has(e)||c.set(e,WS(e,r,u,US,h)||"&:"+e),c.get(e)),r(e,t){let n=JSON.stringify([e,t]);return d.has(n)||d.set(n,!f(e,h)&&WS(e,o,p,GS,h,t)),d.get(n)},f:e=>l.reduce(((e,t)=>t(e,h)),e)};return h}(n),o=new Map,i=[],a=new Set;function s(e){let n=r.f(e),o=pS(n);if(o&&!a.has(o)){a.add(o);let n=gS(i,e);t.insert(o,n,e),i.splice(n,0,e)}return n.n}return t.resume((e=>o.set(e,e)),((e,n)=>{t.insert(e,i.length,n),i.push(n),a.add(e)})),Object.defineProperties((function(e){if(!o.size)for(let e of rS(n.preflight))"function"==typeof e&&(e=e(r)),e&&("string"==typeof e?kS("",aS.b,PS(e),r,aS.b,[],!1,!0):wS(e,{},r,aS.b)).forEach(s);e=""+e;let t=o.get(e);if(!t){let n=new Set;for(let t of ES(PS(e),r))n.add(t.c).add(s(t));t=[...n].filter(Boolean).join(" "),o.set(e,t).set(t,t)}return t}),Object.getOwnPropertyDescriptors({get target(){return t.target},theme:r.theme,config:n,snapshot(){let e=t.snapshot(),n=new Set(a),r=new Map(o),s=[...i];return()=>{e(),a=n,o=r,i=s}},clear(){t.clear(),a=new Set,o=new Map,i=[]},destroy(){this.clear(),t.destroy()}}))}(kC,t),e),new Xw({target:e})}connectedCallback(){}}customElements.define(md,MC),function(){const e=document.createElement("style");e.textContent=`\n            .${gd} {\n                outline: 2px solid #00ff94;\n            }\n        `,document.head.appendChild(e)}()}();
>>>>>>> b9b4be48fb8227b6bc38d840e289444a57cfe314
